name: HumanEval_96_count_up_to
language: julia
results:
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        return primes \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers less than or equal to\
    \ each of the integers in the array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8r9bp5fu.jl:21\nin expression starting at\
    \ /tmp/tmp8r9bp5fu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_list(n)\n    \n    primes = primes[2:end]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl1urb__c.jl:1\nin expression starting at /tmp/tmpl1urb__c.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        prime\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpb8njkmea.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb8njkmea.jl:1\n\
    in expression starting at /tmp/tmpb8njkmea.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprjjae3bg.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprjjae3bg.jl:1\n\
    in expression starting at /tmp/tmprjjae3bg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        return [] \n    else if n == 0 \n        return []\
    \ \n    else \n        primes = prime_numbers(n) \n        prime_numbers_less_than\
    \ = prime_numbers_less_than(n) \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .< n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .>= 2] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n] \nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpksc3zgl2.jl:14\nin expression starting at\
    \ /tmp/tmpksc3zgl2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    \n    if n == 0\n        return Vector{}\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    prime_numbers_less_than = prime_numbers_less_than(n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0ck9g0mp.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0ck9g0mp.jl:1\n\
    in expression starting at /tmp/tmp0ck9g0mp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{}\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpakbklzpi.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpakbklzpi.jl:1\n\
    in expression starting at /tmp/tmpakbklzpi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        prime_numbers = primes[2:end] \n        prime_numbers_less_than\
    \ = prime_numbers[prime_numbers < n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ < n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ != 0] \n        prime_numbers_less_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp9oxq4gev.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9oxq4gev.jl:1\n\
    in expression starting at /tmp/tmp9oxq4gev.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    \n    if n < 0\n        error(\"count_up_to only accepts non-negative\
    \ integers\")\n    end\n    \n    primes = prime_numbers(n)\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[primes <= n]\n    \n    primes =\
    \ primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    return\
    \ primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_to(41)\n</cell>\n\
    <code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6fzi6iq.jl:29\nin expression starting at\
    \ /tmp/tmpn6fzi6iq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        error(\"count_up_to only accepts non-negative integers\"\
    ) \n    end\n    \n    primes = prime_numbers(n)\n    \n    prime_array = []\n\
    \    \n    for p in primes\n        if p > n\n            break\n        end\n\
    \        \n        if p > n\n            prime_array = [p]\n            break\n\
    \        end\n        \n        prime_array = [p for p in prime_array if p > p]\n\
    \    end\n    \n    return prime_array\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nImplement\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$.\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ob_pxwa.jl:35\nin expression starting at\
    \ /tmp/tmp3ob_pxwa.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return [] \n    else \n        primes = prime_numbers(n)\
    \ \n        primes = primes[2:end] \n        primes = primes[primes <= n] \n \
    \       primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp150rt6gk.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp150rt6gk.jl:1\n\
    in expression starting at /tmp/tmp150rt6gk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_list(n)\n    \n    prime_numbers = Vector{Int64}()\n    \n    for prime\
    \ in primes\n        if prime < n\n            prime_numbers = prime_numbers +\
    \ [prime]\n        end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers .< n]\n    \n    return\
    \ prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) => [2,3,5,7]\nHint: use the count_up_to function you\
    \ wrote earlier.\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t\
    @test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvcs8lhgv.jl:32\nin expression starting at\
    \ /tmp/tmpvcs8lhgv.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    prime_numbers = Vector{Int64}()\n    \n    for p\
    \ in primes\n        if p > n\n            break\n        end\n        \n    \
    \    if p % 2 == 0\n            prime_numbers = prime_numbers + [p]\n        end\n\
    \    end\n    \n    prime_numbers = prime_numbers[prime_numbers < n]\n    \n \
    \   return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpshyl6u8k.jl:34\nin expression starting at\
    \ /tmp/tmpshyl6u8k.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    count_up = []\n   \
    \ \n    for p in primes\n        if p > n\n            count_up = []\n       \
    \     break\n        end\n        if p <= n\n            count_up = count_up +\
    \ [p]\n        end\n    end\n    \n    return count_up\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the number\
    \ of positive integers that are less than or equal to each of the integers in\
    \ the array.\nfor example:\ncount_positive([2,3,5,7,11,13,17]) => 3\ncount_positive([2,3,5,7,11,13,17,19])\
    \ => 4\ncount_positive([2,3,5,7,11,13,17,19,23,29,31]) => 5\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37])\
    \ => 6\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41]) => 7\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49])\
    \ => 8\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57]) => 9\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69])\
    \ => 10\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69,83,97])\
    \ => 11\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69,83,97,109,127])\
    \ => 12\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69,83,97,109,127,131])\
    \ => 13\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69,83,97,109,127,131,137,143,151])\
    \ => 14\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69,83,97,109,127,131,137,143,151,163])\
    \ => 15\ncount_positive([2,3,5,7,11,13,17,19,23,29,31,37,41,49,57,63,69,83,97,109,127,131,137,14\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcrkk20h.jl:32\nin expression starting at\
    \ /tmp/tmprcrkk20h.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    prime_numbers = Vector{Int64}()\n    \n    for p\
    \ in primes\n        if p > n\n            break\n        end\n        \n    \
    \    if p % 2 == 0\n            continue\n        end\n        \n        prime_numbers\
    \ = prime_numbers + [p]\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array\
    \ and returns the number of elements that are less than or equal to each element\
    \ in the array. For example:\n    count_less_than([1,2,3]) => 2\n    count_less_than([1,2,2,3])\
    \ => 3\n    count_less_than([1,2,3,4,5]) => 4\n    count_less_than([1,2]) => 1\n\
    \    count_less_than([1,3,5]) => 2\n    count_less_than([1,3,5,7]) => 3\n    count_less_than([1,3,5,7,11])\
    \ => 4\n    count_less_than([1,3,5,7,11,13]) => 5\n    count_less_than([1,3,5,7,11,13,17])\
    \ => 6\n    count_less_than([1,3,5,7,11,13,17,19]) => 7\n    count_less_than([1,3,5,7,11,13,17,19,23])\
    \ => 8\n    count_less_than([1,3,5,7,11,13,17,19,23,29]) => 9\n    count_less_than([1,3,5,7,11,13,17,19,23,29,31])\
    \ => 10\n    count_less_than([1,3,5,7,11,13,17,19,23,29,31,37]) => 11\n    count_less_than([1,3,5,7,11,13,17,19,23,29,31,37,41])\
    \ => 12\n    count_less_than([1,3,5,7,11,13,17,19,23,29,31,37,41,43]) => 13\n\
    \    count_less_than([1,3,5,7,11,13,17,19,23,29,31,37,41,43,47]) => 14\n    count_less_than([1,3,5,\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3p4er8uz.jl:36\nin expression starting at\
    \ /tmp/tmp3p4er8uz.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to(n) = Vector{Int64}()\n    count_up_to(n) = count_up_to(n-1)\
    \ + [n for n in 1:n if prime_number(n)]\nend\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(0)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array and returns the number of elements that are not\
    \ equal to zero.\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t\
    @test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "WARNING: Method definition count_up_to(Any) in module Main at /tmp/tmp553ae4ng.jl:12\
    \ overwritten at /tmp/tmp553ae4ng.jl:13.\nERROR: LoadError: syntax: \"<\" is not\
    \ a unary operator\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp553ae4ng.jl:15\n\
    in expression starting at /tmp/tmp553ae4ng.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        prime_numbers = primes[2:end] \n        prime_numbers_less_than\
    \ = primes[2:end-1] \n        prime_numbers_less_than[1] = n \n        count_up_to(n)\
    \ = prime_numbers_less_than ++ count_up_to(n-1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(41)\n</cell>\n<code language=julia-\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) ==\
    \ [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
    \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx23sunsy.jl:22\nin expression starting at\
    \ /tmp/tmpx23sunsy.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = prime_list_generator(n)\n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n  \
    \  primes = primes[2:end]\n    \n    primes = primes[2:end]\n    \n    primes\
    \ = primes[2:end]\n    \n    primes = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzrt92sgr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzrt92sgr.jl:1\n\
    in expression starting at /tmp/tmpzrt92sgr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{}\n    else\n        primes = primes_upto(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp_gjdhzi2.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_gjdhzi2.jl:1\n\
    in expression starting at /tmp/tmp_gjdhzi2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = primes_up_to(n)\n    \n    counts = Vector{Int64}()\n\
    \    for p in primes\n        if p > n\n            push!(counts, 0)\n       \
    \ else\n            push!(counts, 1)\n        end\n    end\n    \n    return counts\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2mo231u.jl:29\nin expression starting at\
    \ /tmp/tmpl2mo231u.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return [] \n    else \n        primes = prime_list_upto(n)\
    \ \n        prime_sum = 0\n        prime_sums = prime_sum\n        for prime in\
    \ primes \n            if prime > n \n                break \n            else\
    \ \n                prime_sum += prime \n                prime_sums = prime_sum\
    \ + prime\n        prime_sums = prime_sum - prime_sums\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sums - 1\n        prime_sums = prime_sums\
    \ / prime_sum\n        prime_sums = prime_sum\nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpk213pkb6.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk213pkb6.jl:1\n\
    in expression starting at /tmp/tmpk213pkb6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        prime_numbers = primes[2:end] \n        prime_numbers_less_than\
    \ = primes[2:end] - primes[1:end-1] \n        prime_numbers_less_than = prime_numbers_less_than[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ prime_numbers[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ primes[1:end-1]\
    \ \n        prime_numbers_less_than = prime_numbers_less_than .+ prime\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) ==\
    \ [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
    \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpsdbax468.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsdbax468.jl:1\n\
    in expression starting at /tmp/tmpsdbax468.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_up_to_n(n)\n    \n    prime_numbers = Vector{Int64}()\n    \n    for\
    \ p in primes\n        if p > n\n            break\n        end\n        \n  \
    \      prime_numbers = push!(prime_numbers, p)\n    end\n    \n    return prime_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7yhv0b5f.jl:30\nin expression starting at\
    \ /tmp/tmp7yhv0b5f.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to = []\n    if n <= 0\n        count_up_to\n    else\n     \
    \   count_up_to += prime_numbers(n)\n        count_up_to += count_up_to(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the number of prime numbers less than or equal to the given number.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qes4l0h.jl:20\nin expression starting at\
    \ /tmp/tmp1qes4l0h.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_list_upto(n) \n        primes = primes[2:end] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = prime\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3,\
    \ 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5,\
    \ 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18)\
    \ == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpojjv4w3u.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpojjv4w3u.jl:1\n\
    in expression starting at /tmp/tmpojjv4w3u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    primes = primes[primes <= n]\n    \n    primes =\
    \ primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8y5ino_7.jl:1\nin expression starting at /tmp/tmp8y5ino_7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to = []\n    for i = 2 to n\n        if prime_number(i)\n   \
    \         count_up_to += [i]\n        end\n    end\n    return count_up_to\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_to(41)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(42)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(43)\n</cell>\n<code language=julia-1.5>\ncount_up_to(44)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp3yfr6grk.jl:13 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3yfr6grk.jl:13\n\
    in expression starting at /tmp/tmp3yfr6grk.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    primes = primes[primes <= n]\n    \n    primes =\
    \ primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpat73ef9y.jl:1\nin expression starting at /tmp/tmpat73ef9y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        count_up_to(n-1)\
    \ + [n isprime]\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy8abu7vx.jl:18\nin expression starting at\
    \ /tmp/tmpy8abu7vx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{}\n    else\n        primes = primes_upto(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpilsb9nrf.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpilsb9nrf.jl:1\n\
    in expression starting at /tmp/tmpilsb9nrf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_a5p78c_.jl:1\nin expression starting at /tmp/tmp_a5p78c_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    \n    if n == 0\n        return Vector{Int64}()\n    end\n    \n    primes\
    \ = primes_up_to(n)\n    \n    prime_numbers = Vector{Int64}()\n    \n    for\
    \ prime in primes\n        if prime < n\n            push!(prime_numbers, prime)\n\
    \        end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n    \n\
    \    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(41)\n</\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps4964teo.jl:31\nin expression starting at\
    \ /tmp/tmps4964teo.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n    \
    \    return [1]\n    else \n        primes = prime_numbers(n)\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\n        primes\
    \ = primes[primes <= n]\n        primes = primes[primes <= n]\nusing Test\n\n\
    @testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t\
    @test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpebvea_xd.jl:14\nin expression starting at\
    \ /tmp/tmpebvea_xd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = primes_list(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p > n\n            push!(prime_numbers,\
    \ p)\n        end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n \
    \   \n    prime_numbers = prime_numbers[prime_numbers .<= n]\n    \n    return\
    \ prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer $n$ and returns the number of prime numbers less than or equal to $n$.\
    \ \nFor example count_primes(5) => 3 because there are 3 prime numbers less than\
    \ or equal to 5.\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t\
    @test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9uowgmp.jl:32\nin expression starting at\
    \ /tmp/tmpk9uowgmp.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    primes = primes_up_to_n(n)\n\
    \    primes = primes[2:end]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuh6iitc0.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuh6iitc0.jl:1\n\
    in expression starting at /tmp/tmpuh6iitc0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    primes = primes_list(n)\n\
    \    primes_less_than = primes[primes..<n]\n    primes_less_than = primes_less_than[primes_less_than.!=n]\n\
    \    primes_less_than = primes_less_than[primes_less_than .!= n]\n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    primes_less_than = primes_less_than[primes_less_than .!= n]\n  \
    \  primes_less_than = primes_less_than[primes_less_than .!= n]\n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    primes_less_than = primes_less_than[primes_less_than .!= n]\n  \
    \  primes_less_than = primes_less_than[primes_less_than .!= n]\n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    primes_less_than = primes_less_than[primes_less_than .!= n]\n  \
    \  primes_less_than = primes_less_than[primes_less_than .!= n]\n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    primes_less_than = primes_less_than[primes_less_than .!= n]\n  \
    \  primes_less_than = primes_less_than[primes_less_than .!= n]\n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    primes_less_than = primes_less_than[primes_less_than .!= n]\n  \
    \  primes_less_than = primes_less_than[primes_less_than .!= n]\n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    primes_less_than = primes_less_than[primes_less_than .!= n]\n  \
    \  \nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..<\" near column 38\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8johz37.jl:16\nin expression starting at\
    \ /tmp/tmph8johz37.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to(n) = Vector{Int64}()\n    if n == 0\n        count_up_to(n)\
    \ = Vector{Int64}()\n        return count_up_to(n)\n    end\n    count_up_to(n)\
    \ = count_up_to(n-1) + [Int64(n)]\n    for x in count_up_to(n-1)\n        if x\
    \ % 2 != 0\n            count_up_to(n) = count_up_to(n-1) + [Int64(x)]\n     \
    \   end\n    end\n    return count_up_to(n)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "WARNING: Method definition count_up_to(Any) in module Main at /tmp/tmpa11a__7i.jl:12\
    \ overwritten at /tmp/tmpa11a__7i.jl:14.\nWARNING: Method definition count_up_to(Any)\
    \ in module Main at /tmp/tmpa11a__7i.jl:14 overwritten at /tmp/tmpa11a__7i.jl:17.\n\
    WARNING: Method definition count_up_to(Any) in module Main at /tmp/tmpa11a__7i.jl:17\
    \ overwritten at /tmp/tmpa11a__7i.jl:20.\nERROR: LoadError: syntax: \"<\" is not\
    \ a unary operator\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa11a__7i.jl:25\n\
    in expression starting at /tmp/tmpa11a__7i.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    elseif n < 0\n        error(\"\
    count_up_to only accepts non-negative integers\")\n    else\n        primes =\
    \ primes_up_to_n(n)\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        return primes\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$. \nFor example count_primes(5) => 2\ncount_primes(11)\
    \ => 3\ncount_primes(0) => 0\ncount_primes(20) => 4\ncount_primes(1) => 1\ncount_primes(18)\
    \ => 2\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65mg9q9e.jl:23\nin expression starting at\
    \ /tmp/tmp65mg9q9e.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n\
    \ - 1)\n        push!(count_up_to(n), n)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer $n$ and returns the number of prime\
    \ numbers less than or equal to $n$. \nFor example count_primes(5) => 2.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) ==\
    \ [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
    \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfeiefu7g.jl:19\nin expression starting at\
    \ /tmp/tmpfeiefu7g.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = prime_numbers(n)\n    \n    counts = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p > n\n            break\n        end\n\
    \        \n        if p > 1\n            push!(counts, p)\n        end\n    end\n\
    \    \n    counts\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) => 3\ncount_primes(11) => 5\ncount_primes(0) => 0\n\
    count_primes(20) => 5\ncount_primes(1) => 1\ncount_primes(18) => 5\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2pliw6n.jl:32\nin expression starting at\
    \ /tmp/tmpf2pliw6n.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = primes_up_to_n(n)\n    \n    count_up_to = []\n    for\
    \ p in primes\n        if p <= n\n            count_up_to += [p]\n        end\n\
    \    end\n    \n    return count_up_to\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(10000000000000000000000)\nusing Test\n\n\
    @testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t\
    @test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2udi0_ln.jl:27\nin expression starting at\
    \ /tmp/tmp2udi0_ln.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to(n) = Vector{Int64}()\n    if n < 0\n        return count_up_to(0)\n\
    \    end\n    \n    if n == 0\n        return count_up_to(1)\n    end\n    \n\
    \    if n == 1\n        return count_up_to(1)\n    end\n    \n    count_up_to(n-1)\
    \ = count_up_to(n-1) + [Int64(n)]\n    \n    for i in 2:(n-1)\n        if isPrime(Int(i))\
    \ && isPrime(Int(n-1))\n            count_up_to(n) = count_up_to(n-1) + [Int64(i)]\n\
    \        end\n    end\n    \n    return count_up_to(n)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"(n - 1)\" is not a valid function argument\
    \ name around /tmp/tmpa5wsbo40.jl:25\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpa5wsbo40.jl:1\nin expression starting at /tmp/tmpa5wsbo40.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to(n) = Vector{Int64}()\n    if n < 0\n        return count_up_to(0)\n\
    \    end\n    \n    count_up_to(n) = count_up_to(n-1) + [Int64(n)]\n    \n   \
    \ for x in count_up_to(n-1)\n        if x % 2 != 0\n            count_up_to(n)\
    \ = count_up_to(n-1) + [Int64(x)]\n        end\n    end\n    \n    return count_up_to(n)\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_to(4\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "WARNING: Method definition count_up_to(Any) in module Main at /tmp/tmpuhazjxqb.jl:12\
    \ overwritten at /tmp/tmpuhazjxqb.jl:17.\nWARNING: Method definition count_up_to(Any)\
    \ in module Main at /tmp/tmpuhazjxqb.jl:17 overwritten at /tmp/tmpuhazjxqb.jl:21.\n\
    ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuhazjxqb.jl:27\nin expression starting at /tmp/tmpuhazjxqb.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        primes_less_than = primes[2:end] \n        primes_less_than\
    \ = primes_less_than[primes_less_than .< n] \n        primes_less_than = primes_less_than[primes_less_than\
    \ .> n] \n        primes_less_than = primes_less_than - primes[2:end] \n     \
    \   primes_less_than = primes_less_than .+ 1 \n        primes_less_than = primes_less_than\
    \ .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n        primes_less_than\
    \ = primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .+ 1 \n        primes_less_than =\
    \ primes_less_than .+ 1 \n        primes_less_than = primes_less_than .+ 1 \n\
    \        primes_less_than = primes_less_than .\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"primes_less_than\
    \ .\" at /tmp/tmpdmtxxwd3.jl:49\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdmtxxwd3.jl:49\n\
    in expression starting at /tmp/tmpdmtxxwd3.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    prime_numbers_less_than = primes[primes..<n]\n \
    \   \n    prime_numbers_less_than = prime_numbers_less_than.filter(x -> x != 1)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x -> x !=\
    \ n)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x ->\
    \ x != n)\n    \n    return prime_numbers_less_than\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..<\" near column 45\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nwvb85o.jl:18\nin expression starting at\
    \ /tmp/tmp9nwvb85o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        return [] \n    else if n == 0 \n        return []\
    \ \n    else if n == 1 \n        return [1] \n    else \n        primes = prime_numbers(n)\
    \ \n        primes_less_than = primes[primes..] < n \n        primes_less_than\
    \ = primes_less_than[primes_less_than.!.] \n        primes_less_than = primes_less_than[primes_less_than.!.]\
    \ \n        primes_less_than = primes_less_than[primes_less_than.!.] \n      \
    \  primes_less_than = primes_less_than[primes_less_than.!.] \n        primes_less_than\
    \ = primes_less_than[primes_less_than.!.] \n        primes_less_than = primes_less_than[primes_less_than.!.]\
    \ \n        primes_less_than = primes_less_than[primes_less_than.!.] \n      \
    \  primes_less_than = primes_less_than[primes_less_than.!.] \n        primes_less_than\
    \ = primes_less_than[primes_less_than.!.] \n        primes_less_than = primes_less_than[primes_less_than.!.]\
    \ \n        primes_less_than = primes_less_than[primes_less_than.!.] \n      \
    \  primes_less_than = primes_less_than[primes_less_than.!.] \n        primes_less_than\
    \ = primes_less_than[primes_less_than.!.] \n        primes_less_than = primes_less_than[primes_less_than.!.]\
    \ \n        primes_less_than = primes_less_than[primes_less_than.!.] \n      \
    \  primes_less_than = primes_less_than[primes_less_than.!.] \n        primes_less_than\
    \ = primes_less_than[primes_less_than.!.] \n        primes_less_than = primes_less_than[primes_less_than.!.]\
    \ \n        primes_less_than = primes_less_than[primes_less_than.!.] \n      \
    \  primes_less_than = primes_less_than[primes_less_than.!.] \n        primes_less_than\
    \ = primes_less_than[primes_less_than.!.] \n        primes_less_than = primes_less_than[primes_less_than.!.]\
    \ \n        primes_less_than = primes_less_than[primes_less_than.!.] \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) ==\
    \ [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
    \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoux4t316.jl:14\nin expression starting at\
    \ /tmp/tmpoux4t316.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes =\
    \ primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpw6rnnr_5.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw6rnnr_5.jl:1\n\
    in expression starting at /tmp/tmpw6rnnr_5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n    \
    \    return Vector{Int64}(1)\n    else \n        primes = prime_numbers(n)\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = primes[primes <= n]\n \
    \       primes = primes[primes <= n]\n        primes = prime\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz69hiqkd.jl:14\nin expression starting at\
    \ /tmp/tmpz69hiqkd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$. \nFor example count_primes(5) => 3\ncount_primes(11)\
    \ => 5\ncount_primes(0) => 0\ncount_primes(20) => 5\ncount_primes(1) => 1\ncount_primes(18)\
    \ => 4\ncount_primes(19) => 5\nHint: Use a for loop and a boolean to keep track\
    \ of whether a number is prime or not.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1p8p8pu.jl:18\nin expression starting at\
    \ /tmp/tmpb1p8p8pu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to(n) = Vector{Int64}()\n    if n == 0\n        return count_up_to(0)\n\
    \    end\n    if n == 1\n        return count_up_to(1)\n    end\n    if n % 2\
    \ == 0\n        count_up_to(n / 2)\n    end\n    for i = 3; i * i <= n; i = i\
    \ + 2\n        if n % i == 0\n            count_up_to(n / i)\n        end\n  \
    \  end\n    return count_up_to(n)\nend\n</cell>\n<code language=julia-1.0>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.0>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(1)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) ==\
    \ [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
    \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89vg25ig.jl:29\nin expression starting at\
    \ /tmp/tmp89vg25ig.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = primes_list(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for prime in primes\n        if prime > n\n            prime_numbers\
    \ = prime_numbers + [prime]\n        end\n    end\n    \n    prime_numbers = prime_numbers\
    \ + [Int64(n)]\n    \n    prime_numbers = prime_numbers[2:end]\n    \n    return\
    \ prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of integers in the array that are less than\
    \ or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t\
    @test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoq61pl_m.jl:32\nin expression starting at\
    \ /tmp/tmpoq61pl_m.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes =\
    \ primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpe8jfy8hx.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe8jfy8hx.jl:1\n\
    in expression starting at /tmp/tmpe8jfy8hx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    primes = primes[primes <= n]\n    \n    primes =\
    \ primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgacppz2h.jl:1\nin expression starting at /tmp/tmpgacppz2h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{}\n    end\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    count_up_to = []\n    \n    for p in primes\n        if p > n\n   \
    \         break\n        end\n        \n        count_up_to += [p]\n    end\n\
    \    \n    return count_up_to\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than $n$. \nFor example count_primes(5)\
    \ => 2\ncount_primes(11) => 4\ncount_primes(0) => 0\ncount_primes(20) => 5\ncount_primes(1)\
    \ => 1\ncount_primes(18) => 2\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo60nui61.jl:30\nin expression starting at\
    \ /tmp/tmpo60nui61.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_list(n)\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[prime\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wdnnjot.jl:1\nin expression starting at /tmp/tmp6wdnnjot.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        prime_numbers = primes[2:end]\n        prime_numbers_less_than = prime_numbers[prime_numbers\
    \ < n]\n        prime_numbers_less_than\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers that are less than or equal to each of the integers in the array.\n\
    \    for example:\n    count_less_than([2,3,5,7,11,13,17]) => 4\n    count_less_than([2,3,5,7,11,13,17,19])\
    \ => 5\n    count_less_than([2,3,5,7,11,13,17,19,23,29]) => 6\n    count_less_than([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\
    \ => 10\n    count_less_than([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199])\
    \ => 12\n    count_less_than([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2b0gd4ab.jl:21\nin expression starting at\
    \ /tmp/tmp2b0gd4ab.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[2:end] \n        primes = primes[primes\
    \ <= n] \n        return primes \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(41)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(42)\n</cell>\n<code language=julia-1.5>\ncount_up_to(43)\n</cell>\n\
    <code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3j_5tas4.jl:21\nin expression starting at\
    \ /tmp/tmp3j_5tas4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return [] \n    else \n        primes = primes_up_to_n(n)\
    \ \n        primes = primes[2:end] \n        primes = primes[primes <= n] \n \
    \       primes = primes[primes <= n] \n        return primes \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers that are less than or equal to each of the integers\
    \ in the array. \nFor example \n    count_less_than([1,3,5,7,9]) should return\
    \ [2,1,0,1]\n    count_less_than([1,3,5,7,9,11]) should return [2,1,1,1]\n   \
    \ count_less_than([1,3,5,7,9,11,13]) should return [2,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17])\
    \ should return [2,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19]) should\
    \ return [2,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21]) should\
    \ return [2,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23])\
    \ should return [2,1,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23,25])\
    \ should return [2,1,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23,25,27])\
    \ should return [2,1,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23,25,27,29])\
    \ should return [2,1,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23,25,27,29,31])\
    \ should return [2,1,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23,25,27,29,31,33])\
    \ should return [2,1,1,1,1,1,1,1,1]\n    count_less_than([1,3,5,7,9,11,13,17,19,21,23,25,27,29,31,33,35])\
    \ should return [\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t\
    @test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp4l7_lln.jl:22\nin expression starting at\
    \ /tmp/tmpp4l7_lln.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        primes_less_than = primes[2:end] \n        primes_less_than\
    \ = primes_less_than .+ primes[1] \n        count_up_to(n-1) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers in the array.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbzokbjl.jl:21\nin expression starting at\
    \ /tmp/tmpxbzokbjl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to = []\n    if n <= 0\n        count_up_to\n    else\n     \
    \   count_up_to += prime_numbers(n)\n        count_up_to += count_up_to(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_to(41)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(42)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(43)\n</cell>\n<code language=julia-1.5>\ncount_up_to(44)\n</\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) ==\
    \ [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
    \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7_tf77g8.jl:20\nin expression starting at\
    \ /tmp/tmp7_tf77g8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        error(\"count_up_to: n must be non-negative\")\n  \
    \  else if n == 0 \n        Vector{}\n    else \n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = prime\nusing Test\n\n\
    @testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t\
    @test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84emy98v.jl:14\nin expression starting at\
    \ /tmp/tmp84emy98v.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,primes\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmyobbj9d.jl:18\nin expression starting at\
    \ /tmp/tmpmyobbj9d.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfbfmpx6v.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfbfmpx6v.jl:1\n\
    in expression starting at /tmp/tmpfbfmpx6v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = primes_list(n)\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = prime\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjqh_grxa.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjqh_grxa.jl:1\n\
    in expression starting at /tmp/tmpjqh_grxa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    \n    primes = prime_numbers(n)\n    \n    count_up = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p <= n\n            count_up += primes[p+1:n]\n\
    \        end\n    end\n    \n    return count_up\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(41)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(42)\n</cell>\n<code language=julia-1.5>\ncount_up_to(43)\n</cell>\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipebku16.jl:25\nin expression starting at\
    \ /tmp/tmpipebku16.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    \n    if n == 0\n        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes \nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3,\
    \ 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5,\
    \ 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18)\
    \ == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2u6g50qz.jl:1\nin expression starting at /tmp/tmp2u6g50qz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_up_to(n)\n    \n    counts = Vector{Int64}()\n    \n    for p in primes\n\
    \        if p > n\n            break\n        end\n        counts[p] += 1\n  \
    \  end\n    \n    return counts\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nImplement a function that takes\
    \ an integer $n$ and returns the number of prime numbers less than or equal to\
    \ $n$.\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jr09twb.jl:29\nin expression starting at\
    \ /tmp/tmp7jr09twb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        return [] \n    else if n == 0 \n        return Vector{Int64}()\
    \ \n    else \n        primes = prime_numbers(n) \n        primes = primes[2:end]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes <= n] \n        primes = primes[primes <= n]\
    \ \n        primes = primes[primes \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwvmcw6wl.jl:14\nin expression starting at\
    \ /tmp/tmpwvmcw6wl.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    primes = prime_numbers(n)\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfz4byg5y.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfz4byg5y.jl:1\n\
    in expression starting at /tmp/tmpfz4byg5y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        error(\"count_up_to: n must be non-negative\")\n  \
    \  end\n    \n    primes = primes_up_to_n(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p > n\n            push!(prime_numbers,\
    \ p)\n        end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n \
    \   \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) => 3\ncount_primes(11) => 5\ncount_primes(0) => 0\n\
    count_primes(20) => 5\ncount_primes(1) => 1\ncount_primes(18) => 4\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkk_kw14m.jl:30\nin expression starting at\
    \ /tmp/tmpkk_kw14m.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_upto(n) \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = \nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpkej0yyp8.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkej0yyp8.jl:1\n\
    in expression starting at /tmp/tmpkej0yyp8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to = []\n    if n == 0\n        count_up_to\n    else\n     \
    \   count_up_to += prime_numbers(n)\n        count_up_to += count_up_to(n - prime_numbers(n))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7l_3dr1d.jl:20\nin expression starting at\
    \ /tmp/tmp7l_3dr1d.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpz9xsd0qb.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz9xsd0qb.jl:1\n\
    in expression starting at /tmp/tmpz9xsd0qb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an array and returns the number of elements that are less than or equal\
    \ to each element in the array.\n    for example:\n    count_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n\
    \    count_less_than([2,3,5,7,11,13,17,19,21]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25]) =>\
    \ [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27]) =>\
    \ [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,23,25,27,29,\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9dicemm.jl:18\nin expression starting at\
    \ /tmp/tmpy9dicemm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes =\
    \ primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpyagl6ama.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyagl6ama.jl:1\n\
    in expression starting at /tmp/tmpyagl6ama.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    primes = primes[primes <= n]\n    \n    primes =\
    \ primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmr1b447o.jl:1\nin expression starting at /tmp/tmpmr1b447o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyrhzkm0p.jl:1\nin expression starting at /tmp/tmpyrhzkm0p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 1)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 2)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 3)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 5)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 7)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 11)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 13)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 17)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 19)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 25)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 31)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 37)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 43)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 49)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 57)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 63)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 71)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 79)\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 89)\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiejyjnxe.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiejyjnxe.jl:1\n\
    in expression starting at /tmp/tmpiejyjnxe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    \n    if n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[2:end]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = primes[primes <= n]\n      \
    \  primes = primes[primes <= n]\n        primes = \nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp1r6w8wkt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1r6w8wkt.jl:1\n\
    in expression starting at /tmp/tmp1r6w8wkt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    prime_numbers = Vector{Int64}()\n    \n    for p\
    \ in primes\n        if p <= n\n            prime_numbers.push(p)\n        end\n\
    \    end\n    \n    prime_numbers = prime_numbers[prime_numbers.length:end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers.length:end]\n    \n   \
    \ return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4fat5evi.jl:32\nin expression starting at\
    \ /tmp/tmp4fat5evi.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = primes_up_to_n(n)\n    \n    count_up_to_vec = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p > n\n            count_up_to_vec += [p]\n\
    \        else\n            count_up_to_vec += [p] * (p - n)\n        end\n   \
    \ end\n    \n    return count_up_to_vec\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfwatvx8.jl:30\nin expression starting at\
    \ /tmp/tmptfwatvx8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpu4891xir.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu4891xir.jl:1\n\
    in expression starting at /tmp/tmpu4891xir.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers = primes[2:end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers > 1]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 0]\n    \n    prime_numbers = prime_numbers[prime_numbers != 1]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != 2]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 3]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 4]\n    \n    prime_numbers = prime_numbers[prime_numbers != 5]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != 6]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 7]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 8]\n    \n    prime_numbers = prime_numbers[prime_numbers != 9]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != 10]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 11]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 12]\n    \n    prime_numbers = prime_numbers[prime_numbers != 13]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 14]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 15]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 16]\n    \n    prime_numbers = prime_numbers[prime_numbers != 17]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 18]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 19]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 20]\n    \n    prime_numbers = prime_numbers[prime_numbers != 21]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 22]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 23]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 24\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppixd19k0.jl:1\nin expression starting at /tmp/tmppixd19k0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        prime_numbers = primes[2:end] \n        prime_numbers_less_than\
    \ = primes[2:end] - primes[1:end-1] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> 0] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n] \n        prime_numbers_less_than = prime_numbers_less_than\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpecqn_4zp.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpecqn_4zp.jl:1\n\
    in expression starting at /tmp/tmpecqn_4zp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95q794b8.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95q794b8.jl:1\n\
    in expression starting at /tmp/tmp95q794b8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_up_to_n(n)\n    \n    primes_less_than = primes[2:end]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ \nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9brn557s.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9brn557s.jl:1\n\
    in expression starting at /tmp/tmp9brn557s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to(n) = Vector{Int64}()\n    \n    if n == 0\n        return\
    \ count_up_to(0)\n    end\n    \n    if n == 1\n        return count_up_to(1)\n\
    \    end\n    \n    count_up_to(n) = count_up_to(n-1) + [Int64(n)]\n    \n   \
    \ for n in count_up_to(n-1)\n        if n % 2 == 0\n            count_up_to(n)\
    \ = count_up_to(n-1) + [Int64(n)]\n        end\n    end\n    \n    return count_up_to(n)\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t\
    @test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "WARNING: Method definition count_up_to(Any) in module Main at /tmp/tmpv3p2o2oj.jl:12\
    \ overwritten at /tmp/tmpv3p2o2oj.jl:22.\nWARNING: Method definition count_up_to(Any)\
    \ in module Main at /tmp/tmpv3p2o2oj.jl:22 overwritten at /tmp/tmpv3p2o2oj.jl:26.\n\
    ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv3p2o2oj.jl:32\nin expression starting at /tmp/tmpv3p2o2oj.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        error(\"count_up_to called with negative number\")\n\
    \    end\n    \n    primes = primes_up_to(n)\n    \n    count_up_to = []\n   \
    \ for p in primes\n        if p > n\n            count_up_to += [p]\n        else\n\
    \            break\n        end\n    end\n    \n    return count_up_to\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than $n$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8e2h2y53.jl:29\nin expression starting at\
    \ /tmp/tmp8e2h2y53.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p > n\n            prime_numbers = prime_numbers\
    \ + [p]\n        end\n    end\n    \n    prime_numbers = prime_numbers[2:end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers .<= n]\n    \n    return\
    \ prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) ==\
    \ [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
    \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66vaqidi.jl:32\nin expression starting at\
    \ /tmp/tmp66vaqidi.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        count_up_to(n -\
    \ 1)\n        push!(count_up_to(n), n)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an array of integers and returns the number of\
    \ integers in the array that are less than the given integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t\
    @test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbfg09i3a.jl:19\nin expression starting at\
    \ /tmp/tmpbfg09i3a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{}\n    end\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfcuiq3a1.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfcuiq3a1.jl:1\n\
    in expression starting at /tmp/tmpfcuiq3a1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = primes_up_to(n)\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Implement a function that takes an array of integers and returns\
    \ the number of integers that are less than or equal to each of the integers in\
    \ the array.\n    for example:\n    count_less_than([2,3,5,7,11,13,17,19]) =>\
    \ [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n\
    \    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n\
    \    count_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n\
    \    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n\
    \    count_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps6gkcy9w.jl:24\nin expression starting at\
    \ /tmp/tmps6gkcy9w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to = []\n    if n == 0\n        count_up_to\n    else\n     \
    \   for i in 2..n\n            if n % i == 0\n                count_up_to += [i]\n\
    \            else\n                break\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.5>\ncount_up_to(41)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(42)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(43)\n</cell>\n<code language=julia-1.5>\ncount_up_to(44)\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) ==\
    \ [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
    \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa91txwor.jl:24\nin expression starting at\
    \ /tmp/tmpa91txwor.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    primes = primes[primes <= n]\n    \n    primes =\
    \ primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps2_2td9r.jl:1\nin expression starting at /tmp/tmps2_2td9r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    primes_less_than = primes[primes..<n]\n    \n  \
    \  primes_less_than = primes_less_than[primes_less_than.!=n]\n    \n    return\
    \ primes_less_than\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(41)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(42)\n</cell>\n<code language=julia-1.5>\ncount_up_to(43)\n</cell>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..<\" near column 38\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbldlyt8t.jl:18\nin expression starting at\
    \ /tmp/tmpbldlyt8t.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoip7sze7.jl:1\nin expression starting at /tmp/tmpoip7sze7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_up_to(n)\n    \n    prime_numbers = Vector{Int64}()\n    \n    for prime\
    \ in primes\n        if prime < n\n            prime_numbers.push(prime)\n   \
    \     end\n    end\n    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$. \nFor example count_primes(5) => [2,3,5,7]\nHint:\
    \ use the function count_up_to to implement the function\nHint: use the function\
    \ primes_up_to to implement the function\nHint: use the function primes_up_to\
    \ to implement the function\nHint: use the function primes_up_to to implement\
    \ the function\nHint: use the function primes_up_to to implement the function\n\
    Hint: use the function primes_up_to to implement the function\nHint: use the function\
    \ primes_up_to to implement the function\nHint: use the function primes_up_to\
    \ to implement the function\nHint: use the function primes_up_to to implement\
    \ the function\nHint: use the function primes_up_to to implement the function\n\
    Hint: use the function primes_up_to to implement the function\nHint: use the function\
    \ primes_up_to to implement the function\nHint: use the function primes_up_to\
    \ to implement the function\nHint: use the function primes_up_to to implement\
    \ the function\nHint: use the function primes_up_to to implement the function\n\
    Hint: use the function primes_up_to to implement the function\nHint: use the function\
    \ primes_up_to to implement the function\nHint: use the function primes_up_to\
    \ to implement the function\nHint: use the function primes_up_to to implement\
    \ the function\nHint: use the function primes_up_to to implement the function\n\
    Hint: use the function primes_up_to to implement the function\nHint: use the function\
    \ primes_up_to to implement the function\nHint: use the function primes_up_to\
    \ to implement the function\nHint: use the function primes_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcswijtaq.jl:28\nin expression starting at\
    \ /tmp/tmpcswijtaq.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to(n) = Vector{Int64}()\n    if n == 0\n        return count_up_to(0)\n\
    \    end\n    if n == 1\n        return count_up_to(1)\n    end\n    if n % 2\
    \ == 0\n        count_up_to(n / 2)\n    end\n    if n % 3 == 0\n        count_up_to(n\
    \ / 3)\n    end\n    if n % 5 == 0\n        count_up_to(n / 5)\n    end\n    if\
    \ n % 7 == 0\n        count_up_to(n / 7)\n    end\n    if n % 11 == 0\n      \
    \  count_up_to(n / 11)\n    end\n    if n % 13 == 0\n        count_up_to(n / 13)\n\
    \    end\n    if n % 17 == 0\n        count_up_to(n / 17)\n    end\n    if n %\
    \ 19 == 0\n        count_up_to(n / 19)\n    end\n    if n % 23 == 0\n        count_up_to(n\
    \ / 23)\n    end\n    if n % 29 == 0\n        count_up_to(n / 29)\n    end\n \
    \   if n % 37 == 0\n        count_up_to(n / 37)\n    end\n    if n % 43 == 0\n\
    \        count_up_to(n / 43)\n    end\n    if n % 59 == 0\n        count_up_to(n\
    \ / 59)\n    end\n    if n % 67 == 0\n        count_up_to(n / 67)\n    end\n \
    \   if n % 73 == 0\n        count_up_to(n / 73)\n    end\n    if n % 79 == 0\n\
    \        count_up_to(n / 79)\n    end\n    if n % 83 == 0\n        count_up_to(n\
    \ / 83)\n    end\n    if n % 89 == 0\n        count_up_to(n / 89)\n    end\n \
    \   if n % 97 == 0\n        count_up_to(n / 97)\n    end\n    if n % 111 == 0\n\
    \        count_up_to(n / 111)\n    end\n    if n % 131 == 0\n        count_up_to(n\
    \ / 131)\n    end\n    if n % 167 == 0\n        count_up_to(n / 167)\n    end\n\
    \    if n % 191 == 0\n        count_up_to(n / 191)\n    end\n    if n % 231 ==\
    \ 0\n        count_up_to(n / 231)\n    end\n    if n % 291 == 0\n        count_up_to(n\
    \ / 291)\n    end\n    if n % 371 == 0\n        count_up_to(n / 371)\n    end\n\
    \    if n % 431 == 0\n        count_up_to(n / 431)\n    end\n    if n % 591 ==\
    \ 0\n        count_up_to(n / 591)\n    end\n    if n % 671 == 0\n        count_up_to(n\
    \ / 671)\n    end\n    if n % 731 == 0\n        count_up_to(n \nusing Test\n\n\
    @testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t\
    @test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpitrz2ta8.jl:108\nin expression starting at\
    \ /tmp/tmpitrz2ta8.jl:108\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        count_up_to(n-1)\n\
    \        primes = prime_numbers(n) \n        primes = primes[primes <= n] \n \
    \       primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes \nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3,\
    \ 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5,\
    \ 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18)\
    \ == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi02a1ppg.jl:1\nin expression starting at /tmp/tmpi02a1ppg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{}\n    else\n        primes = primes_upto(n)\n\
    \        primes = primes[primes <= n]\n        primes[primes > n] = primes[primes\
    \ > n]\n        primes\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ and returns the number of elements that are greater than or equal to each element\
    \ in the array. For example:\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6k5jkkka.jl:21\nin expression starting at\
    \ /tmp/tmp6k5jkkka.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        primes_less_than = primes[2:end] \n        primes_less_than\
    \ = primes_less_than - primes[1] \n        primes_less_than = primes_less_than\
    \ - primes[2] \n        primes_less_than = primes_less_than - primes[3] \n   \
    \     primes_less_than = primes_less_than - primes[4] \n        primes_less_than\
    \ = primes_less_than - primes[5] \n        primes_less_than = primes_less_than\
    \ - primes[6] \n        primes_less_than = primes_less_than - primes[7] \n   \
    \     primes_less_than = primes_less_than - primes[8] \n        primes_less_than\
    \ = primes_less_than - primes[9] \n        primes_less_than = primes_less_than\
    \ - primes[10] \n        primes_less_than = primes_less_than - primes[11] \n \
    \       primes_less_than = primes_less_than - primes[12] \n        primes_less_than\
    \ = primes_less_than - primes[13] \n        primes_less_than = primes_less_than\
    \ - primes[14] \n        primes_less_than = primes_less_than - primes[15] \n \
    \       primes_less_than = primes_less_than - primes[16] \n        primes_less_than\
    \ = primes_less_than - primes[17] \n        primes_less_than = primes_less_than\
    \ - primes[18] \n        primes_less_than = primes_less_than - primes[19] \n \
    \       primes_less_than = primes_less_than - primes[20] \n        primes_less_than\
    \ = primes_less_than - primes[21] \n        primes_less_than = primes_less_than\
    \ - primes[22] \n        primes_less_than = primes_less_than - primes[23] \n \
    \       primes_less_than = primes_less_than - primes[24] \n        primes_less_than\
    \ = primes_less_than - primes[25] \n        primes_less_than = primes_less_than\
    \ - primes[26] \n        primes_less_than = primes_less_than - primes[27] \n \
    \       primes_less_than = primes_less_than - primes[28] \n        primes_less_than\
    \ = primes_less_than - primes[29] \n        primes_less_than = primes_less_than\
    \ - primes[3\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74i4y1e2.jl:1\nin expression starting at /tmp/tmp74i4y1e2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 \n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_list(n)\n    \n    prime_numbers = Vector{Int64}()\n    \n    for p in\
    \ primes\n        if p > n\n            break\n        end\n        \n       \
    \ if p % 2 == 0\n            prime_numbers[end] = p\n        end\n    end\n  \
    \  \n    prime_numbers = prime_numbers[2:end]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ < n]\n    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp33_yzaml.jl:36\nin expression starting at\
    \ /tmp/tmp33_yzaml.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n\
    \ - 1) |> collect{x->x} ++ [n - 1]\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(20)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.0>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(20)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.0>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(23)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.0>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(26)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.0>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(29)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.0>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(32)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.0>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(35)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.0>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(38)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.0>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(41)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(42)\n</cell>\n<code language=julia-1.0>\ncount_up_to(43)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(44)\n</cell>\n<code language=julia-\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) ==\
    \ [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
    \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3e44z4o.jl:18\nin expression starting at\
    \ /tmp/tmpk3e44z4o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to called with negative number\")\n\
    \    end\n    \n    primes = primes_up_to_n(n)\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpge71q__3.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpge71q__3.jl:1\n\
    in expression starting at /tmp/tmpge71q__3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = prime_list_generator(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p < n\n            prime_numbers.push(p)\n\
    \        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers <\
    \ n]\n    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than or equal to $n$. \nFor example count_primes(5) => 2\ncount_primes(11)\
    \ => 4\ncount_primes(0) => 0\ncount_primes(20) => 5\ncount_primes(1) => 1\ncount_primes(18)\
    \ => 2\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwnmxhz4t.jl:30\nin expression starting at\
    \ /tmp/tmpwnmxhz4t.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = primes_up_to_n(n)\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqulsaclx.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqulsaclx.jl:1\n\
    in expression starting at /tmp/tmpqulsaclx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_up_to_n(n)\n    \n    prime_numbers = Vector{Int64}()\n    \n    for\
    \ p in primes\n        if p > n\n            break\n        end\n        \n  \
    \      if p % 2 == 0\n            prime_numbers += [p]\n        end\n    end\n\
    \    \n    prime_numbers += primes\n    \n    return prime_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than $n$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9satz_dm.jl:34\nin expression starting at\
    \ /tmp/tmp9satz_dm.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu1yif9jx.jl:18\nin expression starting at\
    \ /tmp/tmpu1yif9jx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than\
    \ = primes[primes..<n]\n    \n    prime_numbers_less_than = prime_numbers_less_than.filter(x\
    \ -> x != 1)\n    \n    return prime_numbers_less_than\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers that are less than the maximum of the array.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..<\" near column 45\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6lezuayl.jl:18\nin expression starting at\
    \ /tmp/tmp6lezuayl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_mo6py1.jl:1\nin expression starting at /tmp/tmpx_mo6py1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = primes_up_to(n)\n    \n    counts = Vector{Int64}()\n\
    \    for p in primes\n        counts += [p]\n    end\n    \n    return counts\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise: Write a function that takes an integer $n$ and returns the number\
    \ of prime numbers less than $n$.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3,\
    \ 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5,\
    \ 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18)\
    \ == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz195qiok.jl:25\nin expression starting at\
    \ /tmp/tmpz195qiok.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_up_to(n)\n    \n    primes_less_than = primes[2:end]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .+ primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .+ primes[1]\n    \n    primes_less_than = primes_less_than .+ primes[1]\n \
    \   \n    primes_less_than = primes_less_than .+ prime\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw1hkj5cu.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw1hkj5cu.jl:1\n\
    in expression starting at /tmp/tmpw1hkj5cu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes =\
    \ primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp5scqqunl.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5scqqunl.jl:1\n\
    in expression starting at /tmp/tmp5scqqunl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to(n) = Vector{Int64}()\n    if n == 0\n        count_up_to(n)\
    \ = Vector{Int64}()\n    else\n        count_up_to(n) = count_up_to(n-1) + [Int64(n)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_up_to(11)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n\
    </cell>\n<code language=julia-1.3>\ncount_up_to(18)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "WARNING: Method definition count_up_to(Any) in module Main at /tmp/tmpfzd6nwx2.jl:12\
    \ overwritten at /tmp/tmpfzd6nwx2.jl:14.\nWARNING: Method definition count_up_to(Any)\
    \ in module Main at /tmp/tmpfzd6nwx2.jl:14 overwritten at /tmp/tmpfzd6nwx2.jl:16.\n\
    ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfzd6nwx2.jl:19\nin expression starting at /tmp/tmpfzd6nwx2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to = []\n    if n == 0\n        count_up_to\n    else\n     \
    \   count_up_to += prime_numbers(n-1)\n        for p in prime_numbers(n)\n   \
    \         if p > n\n                break\n            count_up_to += [p]\n  \
    \      end\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the sum of the squares of the integers in the array.\n\
    \    for example:\n    square_of_array([1,2,3]) => 9\n    square_of_array([1,4,9,16])\
    \ => 50\n    square_of_array([]) => 0\n    square_of_array([1,4,9,16,25]) => 2525\n\
    \    square_of_array([1,4,9,16,25,36]) => 2525\n    square_of_array([1,4,9,16,25,36,49])\
    \ => 2525\n    square_of_array([1,4,9,16,25,36,49,64]) => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81])\
    \ => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100]) => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100,121])\
    \ => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100,121,144]) => 2525\n\
    \    square_of_array([1,4,9,16,25,36,49,64,81,100,121,144,168]) => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100,121,144,168,192])\
    \ => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100,121,144,168,192,224])\
    \ => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100,121,144,168,192,224,256])\
    \ => 2525\n    square_of_array([1,4,9,16,25,36,49,64,81,100,121,144,168,192,\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbr9svb0t.jl:24\nin expression starting at\
    \ /tmp/tmpbr9svb0t.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [n isprime] \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of numbers and returns the sum of the squares of the numbers.\n\
    \    for example:\n    square_of_array([1,2,3]) => [1,2,3]\n    square_of_array([1,4,9,16])\
    \ => [1,2,9,16]\n    square_of_array([1,4,9,16,25]) => [1,2,9,16,25]\n    square_of_array([])\
    \ => []\n    square_of_array([1]) => [1]\n    square_of_array([1,2]) => [1,4]\n\
    \    square_of_array([1,2,3]) => [1,2,3]\n    square_of_array([1,2,3,4,5]) =>\
    \ [1,2,3,4,5]\n    square_of_array([1,2,3,4,5,6,7,8,9,10]) => [1,2,3,4,5,6,7,8,9,10]\n\
    \    square_of_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) =>\
    \ [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    square_of_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\
    \    square_of_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6rzw6cb2.jl:18\nin expression starting at\
    \ /tmp/tmp6rzw6cb2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    primes = primes[primes <= n]\n    \n    primes =\
    \ primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmodvibr.jl:1\nin expression starting at /tmp/tmpsmodvibr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    prime_numbers_less_than = prime_numbers_less_than(n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .!= n]\n    \n    prime_numbers_less_than = \nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnlze_0n3.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnlze_0n3.jl:1\n\
    in expression starting at /tmp/tmpnlze_0n3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}()\n    end\n    \n    primes\
    \ = primes_list(n)\n    \n    primes_less_than = primes[2:end]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpng47x3ra.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpng47x3ra.jl:1\n\
    in expression starting at /tmp/tmpng47x3ra.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to = []\n    \n    if n == 0\n        count_up_to\n    else\n\
    \        count_up_to += prime_numbers(n)\n        count_up_to += count_up_to(n-1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers that are less than or\
    \ equal to each of the integers in the array.\n    for example:\n    count_positive([1,2,3])\
    \ => 2\n    count_positive([1,-2,-3]) => 1\n    count_positive([1,-3,-4]) => 0\n\
    \    count_positive([1,-4,-5]) => 0\n    count_positive([1,-5,-6,-7,-8,-9]) =>\
    \ 0\n    count_positive([1,-6,-7,-8,-9]) => 1\n    count_positive([1,-7,-8,-9])\
    \ => 1\n    count_positive([1,-8,-9]) => 1\n    count_positive([1,-9]) => 1\n\
    \    count_positive([1,-10,-11,-12]) => 1\n    count_positive([1,-11,-12]) =>\
    \ 2\n    count_positive([1,-12]) => 2\n    count_positive([1,-13,-14,-15]) =>\
    \ 1\n    count_positive([1,-14,-15]) => 2\n    count_positive([1,-15]) => 2\n\
    \    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23]) => 1\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23])\
    \ => 2\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23]) => 3\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23])\
    \ => 4\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23]) => 5\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23])\
    \ => 6\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23]) => 7\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23])\
    \ => 8\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23]) => 9\n    count_positive([1,-16,-17,-18,-19,-20,-21,-22,-23])\
    \ => 10\n    count_positive([1,-\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3,\
    \ 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5,\
    \ 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18)\
    \ == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyq_e2co0.jl:21\nin expression starting at\
    \ /tmp/tmpyq_e2co0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_list(n)\n    \n    primes_less_than = primes[primes..<n]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than.!=n]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= 1]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= 0]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= 2]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= 3]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= 5]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= 7]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= 11]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= 13]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= 17]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= 19]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= 23]\n    \n    primes_less_than = primes_less_than[primes_less_than .!=\
    \ 29]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= 31]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= 37]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= 41]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= 41]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= 47]\n    \n    primes_less_than = primes_less_than[primes_less_than .!=\
    \ 53]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= 59]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= 67]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than \nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..<\" near column 38\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpae2rys4z.jl:18\nin expression starting at\
    \ /tmp/tmpae2rys4z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers = primes[2:end]\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers > 1]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 0]\n    \n    prime_numbers = prime_numbers[prime_numbers != n]\n    \n \
    \   return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ and returns the sum of the squares of the numbers in the array.\n    for example:\n\
    \    square_of_numbers([1,2,3]) => [1,2,3]\n    square_of_numbers([1,4,9]) =>\
    \ [1,2,3,4,9,16]\n    square_of_numbers([]) => []\n    square_of_numbers([1,4,9,16])\
    \ => [1,2,3,4,9,16]\n    square_of_numbers([1]) => [1]\n    square_of_numbers([])\
    \ => []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4tx8tdhi.jl:30\nin expression starting at\
    \ /tmp/tmp4tx8tdhi.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    count_up_to = []\n\
    \    for p in primes\n        if p < n\n            count_up_to = [p] + count_up_to\n\
    \        else\n            count_up_to += [p]\n        end\n    end\n    \n  \
    \  return count_up_to\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers that are less than or\
    \ equal to each of the integers in the array.\nFor example count_positive([2,3,5,7,11,13,17,19])\
    \ should return [2,3,5,7,11,13,17]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6bhrlvw.jl:29\nin expression starting at\
    \ /tmp/tmpb6bhrlvw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpri__sj44.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpri__sj44.jl:1\n\
    in expression starting at /tmp/tmpri__sj44.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        count_up_to(n-1)\n\
    \        primes = prime_numbers(n) \n        primes = primes[primes <= n] \n \
    \       primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes \nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3,\
    \ 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5,\
    \ 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18)\
    \ == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt7m0sg3c.jl:1\nin expression starting at /tmp/tmpt7m0sg3c.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to = []\n    if n == 0\n        count_up_to\n    else\n     \
    \   for n in 1:n\n            if n % 2 == 0\n                count_up_to += [n]\n\
    \            else\n                count_up_to += [n]\n                count_up_to\
    \ += [n+1]\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(41)\n</cell>\n<code language=julia-1.5>\ncount_up_to(42)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(43)\n</\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxn6votf6.jl:25\nin expression starting at\
    \ /tmp/tmpxn6votf6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        prime\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp6ngb_3ey.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6ngb_3ey.jl:1\n\
    in expression starting at /tmp/tmp6ngb_3ey.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes\
    \ = primes_up_to_n(n)\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(10000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6237lpn.jl:25\nin expression starting at\
    \ /tmp/tmpf6237lpn.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        return primes \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.5>\ncount_up_to(22)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(23)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(24)\n</cell>\n<code language=julia-1.5>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(26)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(27)\n</cell>\n<code language=julia-1.5>\ncount_up_to(28)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(29)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(30)\n</cell>\n<code language=julia-1.5>\ncount_up_to(31)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(32)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(33)\n</cell>\n<code language=julia-1.5>\ncount_up_to(34)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(35)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(36)\n</cell>\n<code language=julia-1.5>\ncount_up_to(37)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(38)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(39)\n</cell>\n<code language=julia-1.5>\ncount_up_to(40)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(41)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(42)\n</cell>\n<code language=julia-1.5>\ncount_up_to(43)\n</cell>\n\
    <code language=\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t\
    @test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnxgand8d.jl:21\nin expression starting at\
    \ /tmp/tmpnxgand8d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[2:end] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        return primes \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array and returns the number\
    \ of elements that are less than or equal to each element in another array. \n\
    For example \n    count_less_than([1,5,7,9],[1,5,7,9]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,10])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,11]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,12])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,13]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,14])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,15]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,16])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,17]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,18])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,19]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,20])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,21]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,22])\
    \ => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,23]) => [1,2,3]\n    count_less_than([1,5,7,9],[1,5,7,24])\
    \ => [1,2,3]\n    count_less_than([1,5,\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0olnyk15.jl:22\nin expression starting at\
    \ /tmp/tmp0olnyk15.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [n isprime] \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer $n$ and returns the number of prime numbers less than\
    \ or equal to $n$. \nFor example count_primes(5) => [2,3,5,7,11]\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpss8ss_55.jl:18\nin expression starting at\
    \ /tmp/tmpss8ss_55.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes =\
    \ primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmprkdl1cby.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprkdl1cby.jl:1\n\
    in expression starting at /tmp/tmprkdl1cby.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    primes = prime_numbers(n)\n    primes = primes[2:end]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1y7isn3b.jl:1\nin expression starting at /tmp/tmp1y7isn3b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[2:end] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7p0n23z.jl:1\nin expression starting at /tmp/tmpr7p0n23z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_list(n)\n    \n    primes_less_than = primes[2:end]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpidtvwbna.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpidtvwbna.jl:1\n\
    in expression starting at /tmp/tmpidtvwbna.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}()\n    \n    primes = primes_up_to(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$. \nFor example count_primes(5)\
    \ => 2\ncount_primes(11) => 5\ncount_primes(0) => 0\ncount_primes(20) => 5\ncount_primes(1)\
    \ => 0\ncount_primes(18) => 5\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl69dfsae.jl:25\nin expression starting at\
    \ /tmp/tmpl69dfsae.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_list(n)\n    \n    primes_less_than = primes[primes..<n]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than.!=n]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n\
    \    \n    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n\
    \    primes_less_than = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than .!= n]\n    \n    primes_less_than = primes_less_than[primes_less_than\
    \ .!= n]\n    \n    primes_less_than = primes_\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..<\" near column 38\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi7ejt1vv.jl:18\nin expression starting at\
    \ /tmp/tmpi7ejt1vv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        primes_less_than = primes[2:end] \n        primes_less_than\
    \ = primes_less_than - primes_less_than[primes_less_than .<= n] \n        primes_less_than\
    \ = primes_less_than - primes_less_than[primes_less_than .> n] \n        primes_less_than\
    \ = primes_less_than - primes_less_than[primes_less_than .< n] \n        return\
    \ primes_less_than \n    end\nend\n</cell>\n<code language=julia-1.0>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.0>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(10)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.0>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(11)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmparu4wdlf.jl:23\nin expression starting at\
    \ /tmp/tmparu4wdlf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpcbtt9vof.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcbtt9vof.jl:1\n\
    in expression starting at /tmp/tmpcbtt9vof.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(19)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(21)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(22)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(23)\n</cell>\n<code language=julia-1.5>\ncount_up_to(24)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(25)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(26)\n</cell>\n<code language=julia-1.5>\ncount_up_to(27)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(28)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(29)\n</cell>\n<code language=julia-1.5>\ncount_up_to(30)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(31)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(32)\n</cell>\n<code language=julia-1.5>\ncount_up_to(33)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(34)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(35)\n</cell>\n<code language=julia-1.5>\ncount_up_to(36)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(37)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(38)\n</cell>\n<code language=julia-1.5>\ncount_up_to(39)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(40)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(41)\n</cell>\n<code language=julia-1.5>\ncount_up_to(42)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(43)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(44)\n</cell>\n<code language=julia-1.5>\ncount_up_to(\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgnwdxp7.jl:18\nin expression starting at\
    \ /tmp/tmprgnwdxp7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to = []\n    if n == 0\n        count_up_to\n    else\n     \
    \   count_up_to += count_up_to(n-1)\n        for i in 2..n\n            if n %\
    \ i == 0\n                count_up_to += [i]\n            end\n        end\n \
    \   end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhdxo90w.jl:24\nin expression starting at\
    \ /tmp/tmpyhdxo90w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp68xyoe51.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp68xyoe51.jl:1\n\
    in expression starting at /tmp/tmp68xyoe51.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{}\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        prime\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpeigtyd53.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeigtyd53.jl:1\n\
    in expression starting at /tmp/tmpeigtyd53.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_up_to_n(n)\n    \n    count_up = Vector{Int64}()\n    \n    for p in\
    \ primes\n        if p > n\n            break\n        end\n        if p <= n\n\
    \            count_up += [p]\n        end\n    end\n    \n    return count_up\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6t6isg6.jl:31\nin expression starting at\
    \ /tmp/tmpg6t6isg6.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes =\
    \ primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpwcf920nz.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcf920nz.jl:1\n\
    in expression starting at /tmp/tmpwcf920nz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes[primes > n] = primes[primes\
    \ > n]\n        primes\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers that are less than or\
    \ equal to each of the integers in the array.\n    for example:\n    count_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n\
    \    count_less_than([2,3,5,7,11,13,17,19,21]) => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25,31]) =>\
    \ [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25,31,37]) =>\
    \ [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25,31,37,41])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25,31,37,41,43,47])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\
    \ => [2,3,5,7,11,13,17]\n    count_less_than([2,3,5,7,11,13,17,19,21,25,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7z2qyyz.jl:21\nin expression starting at\
    \ /tmp/tmpe7z2qyyz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    \n    primes = prime_numbers(n)\n    primes = primes[2:end]\n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6rbydoeh.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6rbydoeh.jl:1\n\
    in expression starting at /tmp/tmp6rbydoeh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    else\n        primes =\
    \ primes_up_to_n(n)\n        primes = primes[primes <= n]\n        primes = primes[primes\
    \ <= n]\n        return primes\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the number of prime numbers\
    \ less than $n$. \nFor example count_primes(5) => 2\ncount_primes(11) => 4\ncount_primes(0)\
    \ => 0\ncount_primes(20) => 4\ncount_primes(1) => 0\ncount_primes(18) => 4\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) ==\
    \ [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
    \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_3pu3432.jl:21\nin expression starting at\
    \ /tmp/tmp_3pu3432.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(100\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg3lgwfv4.jl:26\nin expression starting at\
    \ /tmp/tmpg3lgwfv4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [Int64(n)]\n    end\nend\n</cell>\n<code language=julia-1.4>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.4>\ncount_up_to(11)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(19)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.4>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.4>\ncount_up_to(20)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgl470d0.jl:18\nin expression starting at\
    \ /tmp/tmpmgl470d0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [n isprime] \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis code\
    \ does not work. `count_up_to(0)` returns an empty vector. `count_up_to(1)` returns\
    \ `[1]`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code accordingly.\n\
    <|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjxep42q.jl:18\nin expression starting at\
    \ /tmp/tmpsjxep42q.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = prime_numbers(n)\n    \n    primes = primes[primes <=\
    \ n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2_nvfei_.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2_nvfei_.jl:1\n\
    in expression starting at /tmp/tmp2_nvfei_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        error(\"count_up_to: n must be non-negative\")\n  \
    \  end\n    \n    primes = prime_numbers(n)\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv09z2aod.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv09z2aod.jl:1\n\
    in expression starting at /tmp/tmpv09z2aod.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n\
    \    \n    prime_numbers_less_than = prime_numbers_less_than(n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x < n)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 2 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 3 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 5 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 7 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 11 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 13 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 17 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 19 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 23 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 29 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 31 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 37 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 41 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 43 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 47 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 51 != 0)\n    \n    prime_numbers_less_than\
    \ = prime_numbers_less_than.filter(x -> x % 55 != 0)\n    \n    prime_number\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzgy4snw7.jl:1\nin expression starting at /tmp/tmpzgy4snw7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ prime_numbers(n)\n    \n    primes = primes[primes <= n]\n    \n    primes =\
    \ primes[primes > 1]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n    \n    primes\
    \ = primes[primes <= n]\n    \n    primes = primes[prime\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp08iif_nn.jl:1\nin expression starting at /tmp/tmp08iif_nn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    prime_array = []\n\
    \    \n    for p in primes\n        if p > n\n            break\n        end\n\
    \        \n        push!(prime_array, p)\n    end\n    \n    prime_array\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$. \nFor example count_primes(5)\
    \ => 2\nFor example count_primes(11) => 5\nFor example count_primes(0) => 0\n\
    For example count_primes(20) => 7\nFor example count_primes(1) => 1\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1kb2_jg.jl:30\nin expression starting at\
    \ /tmp/tmpq1kb2_jg.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        primes = primes_up_to_n(n)\n\
    \        prime_numbers = primes[2:end]\n        prime_numbers_less_than = prime_numbers[prime_numbers\
    \ < n]\n        prime_numbers_less_than\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers in the array.\n    for example:\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 4\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20])\
    \ => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0]) => 0\n    count_positive([2,-3,-5,7,-9,-10,-15,-20,0])\
    \ => 0\n    \nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpootwi52r.jl:21\nin expression starting at\
    \ /tmp/tmpootwi52r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{}\n    else\n        primes = primes_up_to_n(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        prime\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpnvlv_6e5.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnvlv_6e5.jl:1\n\
    in expression starting at /tmp/tmpnvlv_6e5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr13hk85o.jl:1\nin expression starting at /tmp/tmpr13hk85o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    primes = primes_list(n)\n\
    \    primes = primes[2:end]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes\
    \ = primes[primes <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n    prime\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmc4e6b6n.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmc4e6b6n.jl:1\n\
    in expression starting at /tmp/tmpmc4e6b6n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        primes_less_than = primes[2:end] \n        primes_less_than\
    \ = primes_less_than .- primes[1] \n        count_up_to(n-1) \n    end\nend\n\
    </cell>\n<code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(18)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(21)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.3>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(24)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.3>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(27)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.3>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(30)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.3>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(33)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.3>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(36)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.3>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(39)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(40)\n</cell>\n<code language=julia-1.3>\ncount_up_to(41)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(42)\n</cell>\n<code language=julia-1.3>\n\
    count_up_\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoj4eaepo.jl:21\nin expression starting at\
    \ /tmp/tmpoj4eaepo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        error(\"count_up_to: n must be non-negative\")\n  \
    \  end\n    \n    primes = prime_numbers(n)\n    primes = primes[2:end]\n    \n\
    \    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers in the array.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8cjgd_zd.jl:27\nin expression starting at\
    \ /tmp/tmp8cjgd_zd.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers_less_than\
    \ = primes[2:end]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .<= n]\n    \n    prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ .> n]\n    \n    return prime_numbers_less_than\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the sum of the squares\
    \ of the integers in the array.\n    for example:\n    square_array(5) => 25\n\
    \    square_array(11) => 479\n    square_array(0) => 0\n    square_array(20) =>\
    \ 479\n    square_array(1) => 0\n    square_array(18) => 479\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) ==\
    \ [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
    \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi13r4qqe.jl:26\nin expression starting at\
    \ /tmp/tmpi13r4qqe.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = primes_up_to(n)\n    \n    count_up_to = []\n \
    \   for p in primes\n        if p > n\n            count_up_to += [n]\n      \
    \      break\n        end\n        \n        count_up_to += [p]\n    end\n   \
    \ \n    return count_up_to\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ and returns the number of elements that are less than or equal to each element\
    \ in the array. For example:\n    count_less_than([1,2,3]) => 2\n    count_less_than([1,2,3])\
    \ => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n\
    \    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3])\
    \ => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n\
    \    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3])\
    \ => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n\
    \    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3])\
    \ => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n\
    \    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3])\
    \ => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n\
    \    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3])\
    \ => 0\n    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n\
    \    count_less_than([1,2,3]) => 0\n    count_less_than([1,2,3]) => 0\n    \n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4s27itap.jl:30\nin expression starting at\
    \ /tmp/tmp4s27itap.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    \n    if n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        \nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpdbe4y_ao.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbe4y_ao.jl:1\n\
    in expression starting at /tmp/tmpdbe4y_ao.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return [] \n    else \n        primes = prime_numbers(n)\
    \ \n        primes = primes[2:end] \n        primes = primes[primes <= n] \n \
    \       primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \n        primes = primes[primes <= n] \n\
    \        primes = primes[primes <= n] \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp1xgjo2ep.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1xgjo2ep.jl:1\n\
    in expression starting at /tmp/tmp1xgjo2ep.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        count_up_to(n-1)\n\
    \        primes = prime_list_upto(n) \n        prime_numbers = primes[2:end] \n\
    \        prime_numbers_less_than = prime_numbers[prime_numbers < n] \n       \
    \ prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than <\
    \ n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \n        prime_numbers_less_than = prime_numbers_less_than[prime_numbers_less_than\
    \ > n] \nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpdoj_2ct0.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdoj_2ct0.jl:1\n\
    in expression starting at /tmp/tmpdoj_2ct0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        error(\"count_up_to only accepts non-negative integers\"\
    ) \n    end\n    \n    primes = prime_numbers(n) \n    \n    primes = primes[2:end]\
    \ \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n    primes = primes[primes <= n] \n    \n    primes = primes[primes\
    \ <= n] \n    \n\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t\
    @test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdhkx554l.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdhkx554l.jl:1\n\
    in expression starting at /tmp/tmpdhkx554l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes =\
    \ primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpm0h153em.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm0h153em.jl:1\n\
    in expression starting at /tmp/tmpm0h153em.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only accepts non-negative integers\"\
    )\n    end\n    \n    primes = prime_numbers(n)\n    \n    prime_numbers = prime_numbers(n)\n\
    \    \n    prime_numbers = prime_numbers[prime_numbers < n]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers > 1]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 0]\n    \n    prime_numbers = prime_numbers[prime_numbers != 1]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != 2]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 3]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 4]\n    \n    prime_numbers = prime_numbers[prime_numbers != 5]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != 6]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 7]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 8]\n    \n    prime_numbers = prime_numbers[prime_numbers != 9]\n    \n \
    \   prime_numbers = prime_numbers[prime_numbers != 10]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 11]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 12]\n    \n    prime_numbers = prime_numbers[prime_numbers != 13]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 14]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 15]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 16]\n    \n    prime_numbers = prime_numbers[prime_numbers != 17]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 18]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 19]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != 20]\n    \n    prime_numbers = prime_numbers[prime_numbers != 21]\n    \n\
    \    prime_numbers = prime_numbers[prime_numbers != 22]\n    \n    prime_numbers\
    \ = prime_numbers[prime_numbers != 23]\n    \n    prime_numbers = prime_numbers[prime_numbers\
    \ != \nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zjfop62.jl:1\nin expression starting at /tmp/tmp3zjfop62.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpighmd0ap.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpighmd0ap.jl:1\n\
    in expression starting at /tmp/tmpighmd0ap.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n\
    \        prime_numbers_less_than = primes[2:end]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .<= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .> n]\n        prime_numbers_less_than\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array and returns the number\
    \ of elements that are greater than or equal to each element in an array. For\
    \ example:\n    count_greater_than_or_equal([1,2,3,4,5]) => 3\n    count_greater_than_or_equal([1,2,3,4,5,6,7,8,9,10])\
    \ => 5\n    count_greater_than_or_equal([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\
    \ => 20\n    count_greater_than_or_equal([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\
    \ => 100\n    count_greater_than_or_equal([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49\n\
    using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9z9detf6.jl:22\nin expression starting at\
    \ /tmp/tmp9z9detf6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n\
    \ - 1)\n        push!(count_up_to(n), n)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes an integer $n$ and returns the number of prime\
    \ numbers less than or equal to $n$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfkj3ze8.jl:19\nin expression starting at\
    \ /tmp/tmpwfkj3ze8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        prime_numbers = primes[2:end] \n        prime_numbers\
    \ = prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ > 0] \n        prime_numbers = prime_numbers[prime_numbers < n] \n        prime_numbers\
    \ = prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n       \
    \ prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers =\
    \ prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n       \
    \ prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers =\
    \ prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n       \
    \ prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers =\
    \ prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n       \
    \ prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers =\
    \ prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n       \
    \ prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers =\
    \ prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_numbers != n] \n       \
    \ prime_numbers = prime_numbers[prime_numbers != n] \n        prime_numbers =\
    \ prime_numbers[prime_numbers != n] \n        prime_numbers = prime_numbers[prime_numbers\
    \ != n] \n        prime_numbers = prime_numbers[prime_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ari7mwv.jl:1\nin expression starting at /tmp/tmp9ari7mwv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        count_up_to(n-1)\
    \ + [n for n in 1:n if prime_number(n)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise: Write a\
    \ function that takes an integer and returns the number of prime factors of that\
    \ integer.\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4yufvmg.jl:18\nin expression starting at\
    \ /tmp/tmpz4yufvmg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes =\
    \ primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpslctg05c.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpslctg05c.jl:1\n\
    in expression starting at /tmp/tmpslctg05c.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to called with negative number\")\n\
    \    end\n    \n    primes = primes_up_to_n(n)\n    \n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers in it.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt35xfzgh.jl:26\nin expression starting at\
    \ /tmp/tmpt35xfzgh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_up_to_n(n)\n    \n    primes_less_than = primes[2:end]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- primes[1]\n    \n    primes_less_than\
    \ = primes_less_than .- primes[1]\n    \n    primes_less_than = primes_less_than\
    \ .- primes[1]\n    \n    primes_less_than = primes_less_than .- primes[1]\n \
    \   \n    primes_less_than = primes_less_than .- \nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3k9buwt.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3k9buwt.jl:1\n\
    in expression starting at /tmp/tmpp3k9buwt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to(n) = Vector{Int64}()\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_up_to(n-1)\n    count_up_to(n) = count_up_to(n-1)\n\
    \    count_up_to(n) = count_\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6hlemy1h.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6hlemy1h.jl:1\n\
    in expression starting at /tmp/tmp6hlemy1h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to: n must be non-negative\")\n   \
    \ end\n    \n    primes = prime_list_generator(n)\n    \n    prime_numbers = Vector{Int64}()\n\
    \    \n    for p in primes\n        if p <= n\n            prime_numbers.push(p)\n\
    \        end\n    end\n    \n    prime_numbers = prime_numbers[prime_numbers.length:end]\n\
    \    \n    return prime_numbers\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of prime numbers less than or equal to $n$. \nFor\
    \ example count_primes(5) => 3 because there are 3 prime numbers less than or\
    \ equal to 5.\nFor example count_primes(11) => 5 because there are 5 prime numbers\
    \ less than or equal to 11.\nFor example count_primes(0) => 0 because there are\
    \ no prime numbers less than or equal to 0.\nFor example count_primes(20) => 5\
    \ because there are 5 prime numbers less than or equal to 20.\nFor example count_primes(1)\
    \ => 1 because there are no prime numbers less than or equal to 1.\nFor example\
    \ count_primes(18) => 3 because there are 3 prime numbers less than or equal to\
    \ 18.\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxnpd4db0.jl:30\nin expression starting at\
    \ /tmp/tmpxnpd4db0.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_up_to(n)\n    \n    primes = primes[2:end]\n    \n    primes = primes[primes\
    \ <= n]\n    \n    primes = primes[primes <= n]\n    \n    return primes\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_up_to(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000000000000000)\n</\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1uxcl4m4.jl:26\nin expression starting at\
    \ /tmp/tmp1uxcl4m4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{Int64}()\n    else\n        primes = prime_numbers(n)\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\n        primes = primes[primes <= n]\n\
    \        primes = primes[primes <= n]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp8cxasmgw.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8cxasmgw.jl:1\n\
    in expression starting at /tmp/tmp8cxasmgw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        return Vector{}\n    \n    primes = primes_up_to_n(n)\n\
    \    \n    primes = primes[2:end]\n    \n    primes = primes[primes <= n]\n  \
    \  \n    primes = primes[primes <= n]\n    \n    return primes\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns an\
    \ array of the prime factors of $n$. \nFor example if $n=6$ then $[2,3]$. \nThe\
    \ function should return an empty array if $n$ is less than 2.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t\
    @test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_rtdwe48.jl:25\nin expression starting at\
    \ /tmp/tmp_rtdwe48.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes =\
    \ primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpkh3xnpst.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkh3xnpst.jl:1\n\
    in expression starting at /tmp/tmpkh3xnpst.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes =\
    \ primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpijpbobpj.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpijpbobpj.jl:1\n\
    in expression starting at /tmp/tmpijpbobpj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        return [] \n    else if n == 0 \n        return Vector{Int64}()\
    \ \n    else \n        primes = prime_numbers(n) \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvvaofza.jl:14\nin expression starting at\
    \ /tmp/tmplvvaofza.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[2:end] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5y2bfi6v.jl:1\nin expression starting at /tmp/tmp5y2bfi6v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2\n        return Vector{Int64}()\n    end\n    \n    primes =\
    \ primes_up_to_n(n)\n    \n    primes_less_than = primes[primes..<n]\n    \n \
    \   primes_less_than = primes_less_than[primes_less_than.!=n]\n    \n    primes_less_than\
    \ = primes_less_than[primes_less_than.!=1]\n    \n    return primes_less_than\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise\nWrite a function that takes an integer $n$ and returns the number\
    \ of prime numbers less than or equal to $n$. \nFor example count_primes(5) =>\
    \ [2,3,5,7,11,13,17]\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..<\" near column 38\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprg9w5wo0.jl:18\nin expression starting at\
    \ /tmp/tmprg9w5wo0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to(n) = Vector{Int64}()\n    count_up_to(n) = count_up_to(n-1)\
    \ + [Int64(n)]\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer $n$ and returns the\
    \ number of prime numbers less than or equal to $n$.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "WARNING: Method definition count_up_to(Any) in module Main at /tmp/tmp5bct8j3a.jl:12\
    \ overwritten at /tmp/tmp5bct8j3a.jl:13.\nERROR: LoadError: syntax: \"<\" is not\
    \ a unary operator\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5bct8j3a.jl:15\n\
    in expression starting at /tmp/tmp5bct8j3a.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        return [] \n    else if n == 0 \n        return Vector{Int64}()\
    \ \n    else \n        primes = prime_numbers(n) \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ky71u_f.jl:14\nin expression starting at\
    \ /tmp/tmp7ky71u_f.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        Vector{}\n    else\n        primes = prime_numbers(n)\n\
    \        prime_numbers_less_than = prime_numbers_less_than(n)\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime_numbers_less_than\
    \ = prime_numbers_less_than[prime_numbers_less_than .!= n]\n        prime\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) ==\
    \ [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
    \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpuz3urr5f.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuz3urr5f.jl:1\n\
    in expression starting at /tmp/tmpuz3urr5f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0 \n        error(\"count_up_to only accepts non-negative integers\"\
    ) \n    else if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [n for n in prime_numbers(n) if n < n]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers that are less than or equal to each of the integers in the array.\n\
    for example:\ncount_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n\
    count_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17,19])\
    \ => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n\
    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n\
    count_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17,19])\
    \ => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n\
    count_less_than([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\ncount_less_than([2,3,5,7,11,13,17])\
    \ => [2,3,5,7,11,13,17]\ncount_\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2q01yd_j.jl:14\nin expression starting at\
    \ /tmp/tmp2q01yd_j.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    count_up_to(n) = Vector{Int64}()\n    \n    if n < 0\n        return count_up_to(0)\n\
    \    end\n    \n    if n == 0\n        return count_up_to(1)\n    end\n    \n\
    \    count_up_to(n-1) = count_up_to(n-1) + [Int64(n)]\n    \n    for i = 2 to\
    \ Int(sqrt(n))\n        if count_up_to(n-i) == count_up_to(n)\n            return\
    \ count_up_to(n)\n        end\n    end\n    \n    return count_up_to(n)\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(21)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(22)\n</cell>\n<code language=julia-1.5>\ncount_up_to(23)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(24)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(25)\n</cell>\n<code language=julia-1.5>\ncount_up_to(26)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(27)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(28)\n</cell>\n<code language=julia-1.5>\ncount_up_to(29)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(30)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(31)\n</cell>\n<code language=julia-1.5>\ncount_up_to(32)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(33)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(34)\n</cell>\n<code language=julia-1.5>\ncount_up_to(35)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(36)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(37)\n</cell>\n<code language=julia-1.5>\ncount_up_to(38)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(39)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(40)\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpmaum2tg5.jl:24 expected \"\
    end\", got \"Int\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmaum2tg5.jl:24\n\
    in expression starting at /tmp/tmpmaum2tg5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 1 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[2:end] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[primes <= n] \n        primes = primes[primes\
    \ <= n] \n        primes = primes[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvt2l1dh.jl:1\nin expression starting at /tmp/tmpsvt2l1dh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n-1)\
    \ + [n isprime] \n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code\
    \ does not work. `count_up_to(5)` returns `[2,3]` but `count_up_to(10)` returns\
    \ `[2,3,5,7]`\n<|/ c |>\n<| c |>\nI fixed the bug, thank you for pointing it out.\
    \ Now it should work fine.\n<|/ c |>\n<| c |>\nThis code still does not work.\
    \ `count_up_to(5)` returns `[2,3]` but `count_up_to(10)` returns `[2,3,5,7]`\n\
    <|/ c |>\n<| c |>\nI fixed the bug, thank you for pointing it out. Now it should\
    \ work fine.\n<|/ c |>\n<| c |>\nThis code still does not work. `count_up_to(5)`\
    \ returns `[2,3]` but `count_up_to(10)` returns `[2,3,5,7]`\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy14tk4pd.jl:18\nin expression starting at\
    \ /tmp/tmpy14tk4pd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = prime_numbers(n) \n        primes = primes[primes <= n] \n        primes =\
    \ primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = primes[primes <= n] \n        primes\
    \ = primes[primes <= n] \n        primes = \nusing Test\n\n@testset begin\n\n\
    candidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6)\
    \ == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) ==\
    \ [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpisdg83js.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpisdg83js.jl:1\n\
    in expression starting at /tmp/tmpisdg83js.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 0\n        error(\"count_up_to only takes non-negative integers\"\
    )\n    end\n    \n    primes = prime_list_generator()\n    primes = primes[2:end]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[\nusing Test\n\
    \n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\
    \t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10)\
    \ == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\
    \t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqj3d_miv.jl:1\nin expression starting at /tmp/tmpqj3d_miv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}() \n    else \n        primes\
    \ = primes_up_to_n(n) \n        primes_less_than = primes[2:end] \n        primes_less_than\
    \ = primes_less_than[primes_less_than .< n] \n        primes_less_than = primes_less_than\
    \ .+ 1 \n        count_up_to(n) =  primes_less_than \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(0)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(20)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of positive integers less than or equal to each of the integers in\
    \ the array.\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
    \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2,\
    \ 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
    \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
    \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc93nwazm.jl:22\nin expression starting at\
    \ /tmp/tmpc93nwazm.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    if n < 2 \n        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes <= n]\n    \n    primes = primes[primes <= n]\n\
    \    \n    primes = primes[primes \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_up_to;\n\t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2,\
    \ 3, 5])\n\t@test(candidate(7) == [2, 3, 5])\n\t@test(candidate(10) == [2, 3,\
    \ 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\t@test(candidate(22) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) == Vector{Int64}([]))\n\t\
    @test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5mezd6b.jl:1\nin expression starting at /tmp/tmpr5mezd6b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Implement a function that takes an non-negative integer and returns\
    \ an array of the first n\n    integers that are prime numbers and less than n.\n\
    \    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n\
    \    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1)\
    \ => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
    \ \n    primes = primes_up_to_n(n)\n    primes = primes[2:end]\n    primes = primes[primes\
    \ <= n]\n    primes = primes[primes <= n]\n    primes = primes[primes <= n]\n\
    \    return primes\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n\
    </cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise: Write a function that takes an array\
    \ of integers and returns the number of prime numbers less than or equal to each\
    \ element in the array.\nusing Test\n\n@testset begin\n\ncandidate = count_up_to;\n\
    \t@test(candidate(5) == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7)\
    \ == [2, 3, 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0)\
    \ == Vector{Int64}([]))\n\t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\
    \t@test(candidate(1) == Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5,\
    \ 7, 11, 13, 17])\n\t@test(candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43])\n\t@test(candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fd3ztx_.jl:19\nin expression starting at\
    \ /tmp/tmp3fd3ztx_.jl:19\n"
  exit_code: 1
  status: SyntaxError
