name: HumanEval_108_count_nums
language: julia
results:
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which\
    \ takes an array of integers and returns\n    the number of elements which has\
    \ a sum of digits > 0.\n    If a number is negative, then its first signed digit\
    \ will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1snbf0vt.jl:19\nin expression starting at\
    \ /tmp/tmp1snbf0vt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 3, -4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16, -17, -18,\
    \ -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34,\
    \ -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcebjzadr.jl:19\nin expression starting at\
    \ /tmp/tmpcebjzadr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in arr\n        if x < 0\n            sum += abs(x)\n        else\n      \
    \      sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdlz_sny.jl:20\nin expression starting at\
    \ /tmp/tmpcdlz_sny.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += 1\n        else\n     \
    \       count += count_nums(digits(x))\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.3>\ncount_nums(digits(-1234))\n</cell>\n<text>\nExercise\n\
    Write a function count_nums which takes an array of integers and returns\n   \
    \ the number of elements which has a sum of digits > 0.\n    If a number is negative,\
    \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
    \ -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11])\
    \ == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8o53d9i.jl:20\nin expression starting at\
    \ /tmp/tmpp8o53d9i.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 2, -4, -6, -7, -8])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpesi8jxt5.jl:19\nin expression starting at\
    \ /tmp/tmpesi8jxt5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += abs(x)\n        else\n\
    \            count += 1\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1, 1, -10, 0, 1])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppann6dad.jl:20\nin expression starting at\
    \ /tmp/tmppann6dad.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += count_nums(digits(x))\n\
    \        else\n            count += count_nums(digits(-x)) + 1\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums(digits(-1234))\n\
    </cell>\n<text>\nExercise\nWrite a function count_nums which takes an array of\
    \ integers and returns\n    the number of elements which has a sum of digits >\
    \ 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpknwklvhc.jl:20\nin expression starting at\
    \ /tmp/tmpknwklvhc.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmw8mpznu.jl:19\nin expression starting at\
    \ /tmp/tmpmw8mpznu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += x\n        else\n    \
    \        count += abs(x)\n        end\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_nums([-1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n\
    <text>\nExercise 3\nWrite a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkx0xrddc.jl:21\nin expression starting at\
    \ /tmp/tmpkx0xrddc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of elements which has\
    \ a sum of digits < 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([])\
    \ == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>>\
    \ count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpueacf5eo.jl:19\nin expression starting at\
    \ /tmp/tmpueacf5eo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in arr\n        if x < 0\n            sum += abs(x)\n        else\n      \
    \      sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 3\n\
    Write a function count_nums which takes an array of integers and returns\n   \
    \ the number of elements which has a sum of digits > 0.\n    If a number is negative,\
    \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
    \ -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11])\
    \ == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyjoolu4i.jl:20\nin expression starting at\
    \ /tmp/tmpyjoolu4i.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in arr\n        sum += x\n        if sum > 0\n            return sum\n   \
    \     else\n            sum -= x\n        end\n    end\n    return 0\nend\n</cell>\n\
    <code language=julia-1.4>\ncount_nums([-2, -1, 1, 2, -4, -5, -6, -7, -8])\n</cell>\n\
    <text>\nExercise 2\nWrite a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcu3mojc.jl:22\nin expression starting at\
    \ /tmp/tmprcu3mojc.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-1, 11,\
    \ -11])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of\
    \ integers and returns the number of elements which has a sum of digits < 0.\n\
    If a number is negative, then its first signed digit will be negative:\ne.g. -123\
    \ has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1,\
    \ 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3])\
    \ == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>>\
    \ count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1,\
    \ 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3])\
    \ == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>>\
    \ count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1,\
    \ 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3])\
    \ == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>>\
    \ count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1,\
    \ 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3])\
    \ == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>>\
    \ count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1,\
    \ 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3])\
    \ == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>>\
    \ count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1, 2, -3]) == 2\n>>> count_nums([-1,\
    \ 2, -3]) == 2\n>>> count_nums([\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo39r66f7.jl:19\nin expression starting at\
    \ /tmp/tmpo39r66f7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -5,\
    \ -10, -15, -20, -25, -27, -29, -32, -35, -38, -39, -44, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49,\
    \ -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpocpl9xzi.jl:19\nin expression starting at\
    \ /tmp/tmpocpl9xzi.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which\
    \ takes an array of integers and returns\n    the number of elements which has\
    \ a sum of digits > 0.\n    If a number is negative, then its first signed digit\
    \ will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43h7byjw.jl:19\nin expression starting at\
    \ /tmp/tmp43h7byjw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += count_nums(digits(x))\n\
    \        else\n            count += count_nums(digits(-x))\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums(digits(-123))\n</cell>\n\
    <text>\nExercise: Write a function that takes an array of integers and returns\
    \ the number of elements which has a sum of digits > 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmsldvr30.jl:20\nin expression starting at\
    \ /tmp/tmpmsldvr30.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwjnbnux1.jl:19\nin expression starting at\
    \ /tmp/tmpwjnbnux1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        if x < 0\n                count += abs(x)\n            else\n       \
    \         count += x\n        end\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_nums([-2, -1, 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n\
    <text>\nExercise 3\nWrite a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1eaw2fc.jl:24\nin expression starting at\
    \ /tmp/tmpy1eaw2fc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijvsqrrp.jl:19\nin expression starting at\
    \ /tmp/tmpijvsqrrp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which\
    \ takes an array of integers and returns\n    the number of elements which has\
    \ a sum of digits > 0.\n    If a number is negative, then its first signed digit\
    \ will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqk2i3h8.jl:19\nin expression starting at\
    \ /tmp/tmpsqk2i3h8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -5, -10, -15, -20, -25, -35, -45])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzlv39ndh.jl:20\nin expression starting at\
    \ /tmp/tmpzlv39ndh.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -4,\
    \ -6, -10, -12, -14, -16, -18, -22, -24, -23, -25, -26])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an array of integers and returns the number of\
    \ elements which has a sum of digits < 0.\nIf a number is negative, then its first\
    \ signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\
    >>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1,\
    \ 1, 2]) == 3\n>>> count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5, -6, -7, -8, -9,\
    \ -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25,\
    \ -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41,\
    \ -42, -43, -44, -45])\n3\n>>> count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5, -6,\
    \ -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22,\
    \ -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38,\
    \ -39, -40, -41, -42, -43, -44, -45])\n3\n>>> count_nums([-1, -1, 1, -2, 2, -3,\
    \ 3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19,\
    \ -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35,\
    \ -36, -37, -38, -39, -40, -41, -42, -43, -44, -45])\n3\n>>> count_nums([-1, -1,\
    \ 1, -2, 2, -3, 3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16,\
    \ -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32,\
    \ -33, -34, -35, -36, -37, -38\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8pooyf_1.jl:19\nin expression starting at\
    \ /tmp/tmp8pooyf_1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-1,11,-11])\n\
    </cell>\n<code language=julia-1.0>\ncount_nums([1, 1, 2])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3kntkkkq.jl:19\nin expression starting at\
    \ /tmp/tmp3kntkkkq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6ait1ho.jl:20\nin expression starting at\
    \ /tmp/tmpv6ait1ho.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1,11,-11])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxrwt5_dv.jl:20\nin expression starting at\
    \ /tmp/tmpxrwt5_dv.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        elseif x <\
    \ 0\n            count += abs(x)\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.4>\ncount_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an array of integers and returns the number\
    \ of elements which has a sum of digits < 0.\nIf a number is negative, then its\
    \ first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and\
    \ 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1,\
    \ 1, 2]) == 3\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) ==\
    \ 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1,\
    \ 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) ==\
    \ 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1,\
    \ 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) ==\
    \ 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1,\
    \ 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) ==\
    \ 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1,\
    \ 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) ==\
    \ 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1,\
    \ 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) ==\
    \ 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1,\
    \ 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) ==\
    \ 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1,\
    \ 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 4\n>>> count_nums([1, 2, -3]) ==\
    \ 4\n>>> count_nums([1, 2, -3]) == 4\n>>> \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5rsr9vh.jl:21\nin expression starting at\
    \ /tmp/tmpq5rsr9vh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ -1, 1, 2, -2, 3, -3, 4, -4, -5, -5, -6, -7, -8, -9, -10, -10, -11])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the number of elements which has a sum of digits < 0.\nIf a number is negative,\
    \ then its first signed digit will be negative:\ne.g. -123 has signed digits -1,\
    \ 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>>\
    \ count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphbdh0y6m.jl:19\nin expression starting at\
    \ /tmp/tmphbdh0y6m.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.3>\n\
    count_nums([-1, 11, -11])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1qal4vc.jl:20\nin expression starting at\
    \ /tmp/tmpr1qal4vc.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 3, -4, -5, -6, -7, -8, -9])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function count_nums which takes an array of integers and returns\n    the number\
    \ of elements which has a sum of digits > 0.\n    If a number is negative, then\
    \ its first signed digit will be negative:\n    e.g. -123 has signed digits -1,\
    \ 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) ==\
    \ 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd68dl8rz.jl:19\nin expression starting at\
    \ /tmp/tmpd68dl8rz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1,11,-11])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp165kvjum.jl:20\nin expression starting at\
    \ /tmp/tmp165kvjum.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,11,-11])\n\
    </cell>\n<code language=julia-1.5>\ncount_nums([1,1,2])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69b12m3g.jl:19\nin expression starting at\
    \ /tmp/tmp69b12m3g.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += abs(x)\n        else\n\
    \            count += 1\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__gmbrzi.jl:20\nin expression starting at\
    \ /tmp/tmp__gmbrzi.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ < 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpafta1ndb.jl:19\nin expression starting at\
    \ /tmp/tmpafta1ndb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += abs(x)\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -5, -10, -15, -20, -25, -27, -29, -32, -35, -37, -39, -44, -47,\
    \ -49, -54, -59, -61, -64, -67, -71, -74, -77, -79, -84, -89, -92, -97])\n</cell>\n\
    <text>\nExercise 2\nWrite a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo7pco90w.jl:20\nin expression starting at\
    \ /tmp/tmpo7pco90w.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmbsa7viy.jl:19\nin expression starting at\
    \ /tmp/tmpmbsa7viy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        elseif x <\
    \ 0\n            count += abs(x)\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.4>\ncount_nums([-2, -1, 1, 2, -3, 4, -5, -6, -7,\
    \ -8])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which takes an\
    \ array of integers and returns\n    the number of elements which has a sum of\
    \ digits > 0.\n    If a number is negative, then its first signed digit will be\
    \ negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7o17qqy1.jl:21\nin expression starting at\
    \ /tmp/tmp7o17qqy1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8lag91gs.jl:19\nin expression starting at\
    \ /tmp/tmp8lag91gs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -5,\
    \ -7, -9, -10, -12, -14, -16, -18, -21])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function count_nums which takes an array of integers and returns\n    the number\
    \ of elements which has a sum of digits > 0.\n    If a number is negative, then\
    \ its first signed digit will be negative:\n    e.g. -123 has signed digits -1,\
    \ 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) ==\
    \ 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjfdbgbj6.jl:19\nin expression starting at\
    \ /tmp/tmpjfdbgbj6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -1,\
    \ 1, 2, -10, -100, -1000, -1000000000])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes an array of integers and returns the number of elements\
    \ which has a sum of digits < 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprq4lfrcd.jl:19\nin expression starting at\
    \ /tmp/tmprq4lfrcd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        elseif x <\
    \ 0\n            count += abs(x)\n        else\n            count += 1\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of elements which has a sum of digits < 0.\n\
    If a number is negative, then its first signed digit will be negative:\ne.g. -123\
    \ has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -\nusing Test\n\n\
    @testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnc8n_nn.jl:22\nin expression starting at\
    \ /tmp/tmpcnc8n_nn.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += count_nums(digits(x))\n\
    \        else\n            count += count_nums(digits(-x)) + 1\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-2, -1, 1, 2, -3,\
    \ 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp482gkr1e.jl:20\nin expression starting at\
    \ /tmp/tmp482gkr1e.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of integers and returns the number of\
    \ elements which has a sum of digits > 0.\nIf no number is negative, then the\
    \ function should return 0.\ne.g. [1, 1, 2] has signed digits 1, 2, and 3.\n>>>\
    \ count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1,\
    \ 1, 2]) == 3\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_num\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwam58vdn.jl:20\nin expression starting at\
    \ /tmp/tmpwam58vdn.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for n in arr\n        if n > 0\n            count += n\n        else\n     \
    \       count += n\n        end\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_nums([-2, -1, 1, 2, -3, 4, -5, -6, -7, -8, -9])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns the number of elements which has a sum of digits < 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11])\
    \ == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) == 2\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnyewxmvo.jl:21\nin expression starting at\
    \ /tmp/tmpnyewxmvo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ < 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpctb4_v28.jl:19\nin expression starting at\
    \ /tmp/tmpctb4_v28.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -4,\
    \ -6, -10, -12, -14, -16, -18, -21])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbunnkwb1.jl:19\nin expression starting at\
    \ /tmp/tmpbunnkwb1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2enphpsn.jl:19\nin expression starting at\
    \ /tmp/tmp2enphpsn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in arr\n        if x > 0\n            sum += x\n        else\n           \
    \ sum -= x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function count_nums which takes an array of integers and returns\n    the number\
    \ of elements which has a sum of digits > 0.\n    If a number is negative, then\
    \ its first signed digit will be negative:\n    e.g. -123 has signed digits -1,\
    \ 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) ==\
    \ 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6x_2o2ie.jl:20\nin expression starting at\
    \ /tmp/tmp6x_2o2ie.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise: Write a function that takes an array of\
    \ integers and returns the number of elements which has a sum of digits < 0.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppp8ft3vk.jl:19\nin expression starting at\
    \ /tmp/tmppp8ft3vk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        elseif x <\
    \ 0\n            count += abs(x)\n        else\n            count += x\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 11,\
    \ -11])\n</cell>\n<code language=julia-1.5>\ncount_nums([1, 1, 2])\n</cell>\n\
    <text>\nExercise 2\nWrite a function count_digits(arr::Vector{Int64})::Int64 which\
    \ returns the number of digits in an array.\nFor example, count_digits([-2, -1,\
    \ 0, 1, 2]) == 3.\nThe function count_digits should work for any array type.\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkz9_il8u.jl:22\nin expression starting at\
    \ /tmp/tmpkz9_il8u.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -4,\
    \ -6, -7, -8])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums which\
    \ takes an array of integers and returns\n    the number of elements which has\
    \ a sum of digits > 0.\n    If a number is negative, then its first signed digit\
    \ will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4ym1ke4.jl:19\nin expression starting at\
    \ /tmp/tmpr4ym1ke4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ < 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpug3k55_l.jl:19\nin expression starting at\
    \ /tmp/tmpug3k55_l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in arr\n        if x > 0 \n            sum += x\n        else\n          \
    \  sum += -x \n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an array of integers and returns the number of elements which has a sum\
    \ of digits < 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) ==\
    \ 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([-1,\
    \ 2, -3]) == 3\n>>> count_nums([-1, -2, -3]) == 3\n>>> count_nums([-1, -2, -3,\
    \ -4]) == 3\n>>> count_nums([-1, -2, -3, -4, -5]) == 3\n>>> count_nums([-1, -2,\
    \ -3, -4, -5, -6, -7, -8]) == 3\n>>> count_nums([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ -9]) == 3\n>>> count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]) ==\
    \ 3\n>>> count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13])\
    \ == 3\n>>> count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13,\
    \ -14, -15]) == 3\n>>> count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11,\
    \ -12, -13, -14, -15, -16, -17]) == 3\n>>> count_nums([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18]) == 3\n>>> count_nums([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18,\
    \ -19]) == 3\n>>> count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12,\
    \ -13, -14, -15, -16, -17, -18, -19, -20, -21]) == 3\n>>> count_nums([-1, -2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19,\
    \ -20, -21, -22]) == 3\n>>> \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4t6lmt3n.jl:20\nin expression starting at\
    \ /tmp/tmp4t6lmt3n.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for n in arr\n        if n > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -1,\
    \ 1, 2, -4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpexen17rm.jl:19\nin expression starting at\
    \ /tmp/tmpexen17rm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-2, -5,\
    \ -7, -9, -10, -12, -14, -16, -17, -19, -20, -21])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an array of integers and returns the number of\
    \ elements which has a sum of digits < 0.\nIf a number is negative, then its first\
    \ signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\
    >>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1,\
    \ 1, 2]) == 3\n>>> count_nums([-1, -10, -12, -14, -16, -17, -19, -20, -21])\n\
    2\n</text>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cus6d48.jl:19\nin expression starting at\
    \ /tmp/tmp6cus6d48.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk8082utm.jl:19\nin expression starting at\
    \ /tmp/tmpk8082utm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 1,\
    \ -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu97zkdve.jl:19\nin expression starting at\
    \ /tmp/tmpu97zkdve.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 2, -4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpctqrhob3.jl:19\nin expression starting at\
    \ /tmp/tmpctqrhob3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -4, -5, -6, -7, -8, -9, -10, -12, -13, -14, -15, -16,\
    \ -17, \n             -18, -21, -20, -22, -23, -24, -25, -26, -27, -28, -29, -32,\
    \ -33, -34, -35, -36, \n             -37, -38, -39, -40, -41, -42, -43, -44, -45])\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpntzovsr9.jl:20\nin expression starting at\
    \ /tmp/tmpntzovsr9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += 1\n        elseif x ==\
    \ 0\n            count += 1\n        else\n            count += count_nums(digits(x))\n\
    \    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2,\
    \ -4, -6, -10, -12, -14, -16, -18, -22, -24, -23, -25, -26, -27, -28, -29, -32,\
    \ -34, -36, -38, -39, -44, -47, -49, -50, -52, -53, -54, -55, -57, -58, -59, -62,\
    \ -64, -66, -68, -70, -72, -74, -76, -78, -79, -84, -87, -89, -91, -93, -95, -97,\
    \ -99, -100, -102, -104, -106, -108, -110, -111, -112, -114, -115, -116, -117,\
    \ -119, -121, -123, -125, -127, -128, -129, -131, -132, -134, -136, -138, -140,\
    \ -142, -144, -146, -148, -150, -152, -154, -156, -158, -160]) == 4\n</cell>\n\
    <text>\nExercise 3\nWrite a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqjpjlms.jl:22\nin expression starting at\
    \ /tmp/tmpoqjpjlms.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_q_on4a.jl:19\nin expression starting at\
    \ /tmp/tmpk_q_on4a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpakrehiof.jl:19\nin expression starting at\
    \ /tmp/tmpakrehiof.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += count_nums(-x)\n      \
    \  else\n            count += 1\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_nums([-1, 1, -2, 2, 3, -3, 4, -4, 5, -5, 6, -6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpwbckcl.jl:20\nin expression starting at\
    \ /tmp/tmpvpwbckcl.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ < 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([-1, -2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([-1,\
    \ -2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([-1, -2, -3])\
    \ == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([-1, -2, -3]) == 3\n>>>\
    \ count_nums([1, 2, -3]) == 3\n>>> count_nums([-1, -2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([-1, -2, -3]) == 3\n>>> count_nums([1, 2, -3])\
    \ == 3\n>>> count_nums([-1, -2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>>\
    \ count_nums([-1, -2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([-1,\
    \ -2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([-1, -2, -3])\
    \ == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([-1, -2, -3]) == 3\n>>>\
    \ count_nums([1, 2, -3]) == 3\n>>> count_nums([-1, -2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([-1, -2, -3]) == 3\n>>> count_nums([1, 2, -3])\
    \ == 3\n>>> count_nums([-1, -2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>>\
    \ count_nums([-1, -2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([-1,\
    \ -2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([-1, -2, -3])\
    \ == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([-1, -2, -3]) == 3\n>>>\
    \ count_nums([1, 2, -3]) == 3\n>>> count_nums([-1, -2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5m404gtu.jl:19\nin expression starting at\
    \ /tmp/tmp5m404gtu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-1,11,-11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpydb6vpmu.jl:19\nin expression starting at\
    \ /tmp/tmpydb6vpmu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-1,11,-11])\n\
    </cell>\n<text>\nExercise 3\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn7cy8xrw.jl:19\nin expression starting at\
    \ /tmp/tmpn7cy8xrw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gnn5xam.jl:19\nin expression starting at\
    \ /tmp/tmp6gnn5xam.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += 1\n        else\n     \
    \       count += digits(x)\n    end\n    return count\nend\n</cell>\n<code language=julia-1.4>\n\
    count_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_3xbey9s.jl:20\nin expression starting at\
    \ /tmp/tmp_3xbey9s.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 2, -4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an array of integers and returns the number of elements which has a sum\
    \ of digits > 0.\nIf no number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) ==\
    \ 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1,\
    \ 2, 3, 4, -5, -6, -7, -8]) == 4\n>>> count_nums([1, 2, 3, 4, -5, -6, -7, -8,\
    \ 9]) == 4\n>>> count_nums([1, 2, 3, 4, -5, -6, -7, -8, 9, 10]) == 4\n>>> count_nums([1,\
    \ 2, 3, 4, -5, -6, -7, -8, 9, 10, 11]) == 4\n>>> count_nums([1, 2, 3, 4, -5, -6,\
    \ -7, -8, 9, 10, 11, 12]) == 4\n>>> count_nums([1, 2, 3, 4, -5, -6, -7, -8, 9,\
    \ 10, 11, 12, 13]) == 4\n>>> count_nums([1, 2, 3, 4, -5, -6, -7, -8, 9, 10, 11,\
    \ 12, 13, 14]) == 4\n>>> count_nums([1, 2, 3, 4, -5, -6, -7, -8, 9, 10, 11, 12,\
    \ 13, 14, 15]) == 4\n>>> count_nums([1, 2, 3, 4, -5, -6, -7, -8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16]) == 4\n>>> count_nums([1, 2, 3, 4, -5, -6, -7, -8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17]) == 4\n>>> count_nums([1, 2, 3, 4, -5, -6, -7, -8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 4\n>>> count_nums([1, 2, 3, 4, -5, -6,\
    \ -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 4\n>>> count_nums([1,\
    \ 2, 3, 4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ==\
    \ 4\n>>> count_nums([1, 2, 3, 4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21]) == 4\n>>> count_nums([1, 2, 3, 4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 4\n>>> count_nums([1, 2,\
    \ 3, 4, -5, -6, \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcbk02o9l.jl:19\nin expression starting at\
    \ /tmp/tmpcbk02o9l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 1, 2, -4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6176e_a.jl:19\nin expression starting at\
    \ /tmp/tmpv6176e_a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += abs(x)\n    end\n    return count\nend\n</cell>\n<code language=julia-1.0>\n\
    count_nums([-2, -4, -6, -10, -12, -14, -16, -18, -21])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2j94lzi5.jl:20\nin expression starting at\
    \ /tmp/tmp2j94lzi5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += abs(x)\n        else\n\
    \            count += 1\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -4, -6, -10, -12, -14, -16, -18, -22, -24, -23, -25, -27, -29,\
    \ -32, -34, -36, -38, -42, -44, -47, -49, -54, -56, -58, -62, -64, -66, -68, -72,\
    \ -74, -76, -78, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86,\
    \ -88, -80, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86, -88,\
    \ -80, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80,\
    \ -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82,\
    \ -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84,\
    \ -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86,\
    \ -88, -80, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86, -88,\
    \ -80, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80,\
    \ -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82,\
    \ -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84,\
    \ -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86, -88, -80, -82, -84, -86,\
    \ -88, -80, -82, -84, -86, -88, -80, -82, -84\nusing Test\n\n@testset begin\n\n\
    candidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmple11s8w8.jl:20\nin expression starting at\
    \ /tmp/tmple11s8w8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        elseif x <\
    \ 0\n            count += abs(x)\n        else\n            count += 1\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-1, 11,\
    \ -11])\n</cell>\n<text>\nExercise: Write a function that takes an array of integers\
    \ and returns the number of elements which has a sum of digits < 0.\nIf an element\
    \ has a negative sign then its first signed digit will be negative:\ne.g. -123\
    \ has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp121eikb_.jl:22\nin expression starting at\
    \ /tmp/tmp121eikb_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for n in arr\n        if n > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ > 0.\nIf all elements are negative, then the function should return 0.\ne.g.\
    \ [-1, 1, -3] is 0, [-1, -1, 1, -3] is 1, and [-1, -1, 1, -3] is 3.\nHint: use\
    \ count_nums.\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpphpp3dwu.jl:19\nin expression starting at\
    \ /tmp/tmpphpp3dwu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4im6bfuq.jl:19\nin expression starting at\
    \ /tmp/tmp4im6bfuq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in arr\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    count_nums([-2, -4, -6, -10, -12, -14, -16, -18, -20, -24, -26, -28, -32, -34,\
    \ -36, -38, -40, -42, -44, -46])\n</cell>\n<code language=julia-1.3>\ncount_nums([-2,\
    \ -4, -6, -10, -12, -14, -16, -18, -20, -24, -26, -28, -32, -34, -36, -38, -40,\
    \ -42, -44, -46])\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -4, -6,\
    \ -10, -12, -14, -16, -18, -20, -24, -26, -28, -32, -34, -36, -38, -40, -42, -44,\
    \ -46])\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -4, -6, -10, -12,\
    \ -14, -16, -18, -20, -24, -26, -28, -32, -34, -36, -38, -40, -42, -44, -46])\n\
    </cell>\n<code language=julia-1.3>\ncount_nums([-2, -4, -6, -10, -12, -14, -16,\
    \ -18, -20, -24, -26, -28, -32, -34, -36, -38, -40, -42, -44, -46])\n</cell>\n\
    <code language=julia-1.3>\ncount_nums([-2, -4, -6, -10, -12, -14, -16, -18, -20,\
    \ -24, -26, -28, -32, -34, -36, -38, -40, -42, -44, -46])\n</cell>\n<code language=julia-1.3>\n\
    count_nums([-2, -4, -6, -10, -12, -14, -16, -18, -20, -24, -26, -28, -32, -34,\
    \ -36, -38, -40, -42, -44, -46])\n</cell>\n<code language=julia-1.3>\ncount_nums([-2,\
    \ -4, -6, -10, -12, -14, -16, -18, -20, -24, -26, -28, -32, -34, -36, -38, -40,\
    \ -42, -44, -46])\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -4, -6,\
    \ -10, -12, -14, -16, -18, -20, -24, -26, -28, -32, -34, -36, -38, -40, -42, -44,\
    \ -46])\n</cell>\n<code language=julia-1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxilt0j5j.jl:17\nin expression starting at\
    \ /tmp/tmpxilt0j5j.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in arr\n        sum += i\n        if sum > 0\n            return sum\n   \
    \     else\n            sum = 0\n    end\n    return 0\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -1, 1, -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbao3ngot.jl:21\nin expression starting at\
    \ /tmp/tmpbao3ngot.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1,11,-11])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpok46tsii.jl:20\nin expression starting at\
    \ /tmp/tmpok46tsii.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += count_nums(x::Vector{Int64})\n\
    \        else\n            count += 1\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes an array of integers and returns the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79kvlb6b.jl:20\nin expression starting at\
    \ /tmp/tmp79kvlb6b.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for n in arr\n        if n > 0\n            count += n\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 11,\
    \ -11])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array of\
    \ integers and returns the number of elements which has a sum of digits > 0.\n\
    If any number is negative, then its first signed digit will be negative:\ne.g.\
    \ -123 has signed digits -1, 2, and 3.\n>>> count_nums([-1, 11, -11]) == 1\n>>>\
    \ count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, 1, -2, 3, -4]) == 4\n>>> count_nums([1,\
    \ 2, -3, 4]) == 4\n>>> count_nums([1, 2, -3, 4, -5]) == 4\n>>> count_nums([1,\
    \ 2, -3, 4, -5, -6, -7, -8]) == 4\n>>> count_nums([1, 2, -3, 4, -5, -6, -7, -8,\
    \ -9]) == 4\n>>> count_nums([1, 2, -3, 4, -5, -6, -7, -8, -9, -10, -11]) == 4\n\
    >>> count_nums([1, 2, -3, 4, -5, -6, -7, -8, -9, -10, -11, -12, -13]) == 4\n>>>\
    \ count_nums([1, 2, -3, 4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\
    \ == 4\n>>> count_nums([1, 2, -3, 4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14,\
    \ -15, -16, -17]) == 4\n>>> count_nums([1, 2, -3, 4, -5, -6, -7, -8, -9, -10,\
    \ -11, -12, -13, -14, -15, -16, -17, -18]) == 4\n>>> count_nums([1, 2, -3, 4,\
    \ -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]) == 4\n\
    >>> count_nums([1, 2, -3, 4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15,\
    \ -16, -17, -18, -19, -20, -21]) == 4\n>>> count_nums([1, 2, -3, 4, -5, -6, -7,\
    \ -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22]) ==\
    \ 4\n>>> count_nums([1, 2, -3, 4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14,\
    \ -15, -16, -17, -18, -19, -20, -21, -22, -23]) == 4\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz433k_fj.jl:19\nin expression starting at\
    \ /tmp/tmpz433k_fj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1,11,-11])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6_qkqou.jl:20\nin expression starting at\
    \ /tmp/tmpt6_qkqou.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq3v7dzga.jl:19\nin expression starting at\
    \ /tmp/tmpq3v7dzga.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ > 0.\nIf all elements in the array are negative, then the function should return\
    \ 0.\ne.g. [-1, 1, -3] is 0, [1, 1, 3] is 2, and [1, 1, -3] is 1.\nHint: Use count_nums.\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxmfk0ysc.jl:19\nin expression starting at\
    \ /tmp/tmpxmfk0ysc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += count_nums(digits(x))\n\
    \        else\n            count += count_nums(digits(-x))\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums(digits(123))\n</cell>\n\
    <text>\nExercise 3\nWrite a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8beet5e.jl:20\nin expression starting at\
    \ /tmp/tmps8beet5e.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for n in arr\n        if n > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ < 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, -1, 1, -2,\
    \ 2, -3, 3, -4]) == 4\n>>> count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5]) == 4\n\
    >>> count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5, -6, -7, -8, -9]) == 4\n>>> count_nums([-1,\
    \ -1, 1, -2, 2, -3, 3, -4, -5, -6, -7, -8, -9, -10, -11]) == 4\n>>> count_nums([-1,\
    \ -1, 1, -2, 2, -3, 3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == 4\n>>> count_nums([-1,\
    \ -1, 1, -2, 2, -3, 3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]) == 4\n>>>\
    \ count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5, -6, -7, -8, -9, -10, -11, -12,\
    \ -13, -14]) == 4\n>>> count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5, -6, -7, -8,\
    \ -9, -10, -11, -12, -13, -14, -15]) == 4\n>>> count_nums([-1, -1, 1, -2, 2, -3,\
    \ 3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]) == 4\n>>>\
    \ count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5, -6, -7, -8, -9, -10, -11, -12,\
    \ -13, -14, -15, -16, -17, -18]) == 4\n>>> count_nums([-1, -1, 1, -2, 2, -3, 3,\
    \ -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]) ==\
    \ 4\n>>> count_nums([-1, -1, 1, -2, 2, -3, 3, -4, -5, -6, -7, -8, -9, -10, -11,\
    \ -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]) == 4\n>>> count_nums([-1,\
    \ -1, 1, -2, 2, -\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1mhmw38.jl:19\nin expression starting at\
    \ /tmp/tmpi1mhmw38.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1rymi3_5.jl:20\nin expression starting at\
    \ /tmp/tmp1rymi3_5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -4, -6, -10, -12, -14, -16, -18, -20, -24, -26, -28, -32, -34,\
    \ -36, -38, -40, -42, -44, -46])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiaou7u4x.jl:20\nin expression starting at\
    \ /tmp/tmpiaou7u4x.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-1, 11,\
    \ -11])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6yqjza8l.jl:19\nin expression starting at\
    \ /tmp/tmp6yqjza8l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ < 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8h5zdsw3.jl:19\nin expression starting at\
    \ /tmp/tmp8h5zdsw3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -4,\
    \ -6, -10, -12, -14, -16, -18, -21])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9pvn1v5b.jl:19\nin expression starting at\
    \ /tmp/tmp9pvn1v5b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -4, -6, -8])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn0tfutzp.jl:20\nin expression starting at\
    \ /tmp/tmpn0tfutzp.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 1,\
    \ -2, 2, -3, 3, -4, 4])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdgwnnljl.jl:19\nin expression starting at\
    \ /tmp/tmpdgwnnljl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 2, -4, -5, -6, -7, -8, -9])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwu4jbwiy.jl:19\nin expression starting at\
    \ /tmp/tmpwu4jbwiy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-2, -4,\
    \ -6, -10, -12, -14, -16, -18, -21])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes an array of integers and returns the number of elements which has\
    \ a sum of digits > 0.\nIf any number is negative, then its first signed digit\
    \ will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([])\
    \ == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>>\
    \ count_nums([1, 2, -3]) == 2\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 4\n>>> count_nums([1, 2, -3]) == 5\n>>> count_nums([1, 2, -3]) ==\
    \ 6\n>>> count_nums([1, 2, -3]) == 7\n>>> count_nums([1, 2, -3]) == 8\n>>> count_nums([1,\
    \ 2, -3]) == 9\n>>> count_nums([1, 2, -3]) == 10\n>>> count_nums([1, 2, -3]) ==\
    \ 11\n>>> count_nums([1, 2, -3]) == 12\n>>> count_nums([1, 2, -3]) == 13\n>>>\
    \ count_nums([1, 2, -3]) == 14\n>>> count_nums([1, 2, -3]) == 15\n>>> count_nums([1,\
    \ 2, -3]) == 16\n>>> count_nums([1, 2, -3]) == 17\n>>> count_nums([1, 2, -3])\
    \ == 18\n>>> count_nums([1, 2, -3]) == 19\n>>> count_nums([1, 2, -3]) == 20\n\
    >>> count_nums([1, 2, -3]) == 21\n>>> count_nums([1, 2, -3]) == 22\n>>> count_nums([1,\
    \ 2, -3]) == 23\n>>> count_nums([1, 2, -3]) == 24\n>>> count_nums([1, 2, -3])\
    \ == 25\n>>> count_nums([1, 2, -3]) == 26\n>>> count_nums([1, 2, -3]) == 27\n\
    >>> count_nums([1, 2, -3]) == 28\n>>> count_nums([1, 2, -3]) == 29\n>>> count_nums([1,\
    \ 2, -3]) == 30\n>>> count_nums([1, 2, -3]) == 31\n>>> count_nums([1, 2, -3])\
    \ == 32\n>>> count_nums([1, 2, -3]) == 33\n>>> count_nums([1, 2, -3]) == 34\n\
    >>> count_nums([1, 2, -3]) == 35\n>>> count_nums([1, 2, -3]) == 36\n>>> count_nums([1,\
    \ 2, -3]) == 37\n>>> count_nums([1, 2, -3]) == 38\n>>> count_nums([1, 2, -3])\
    \ == 39\n>>> \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp054a6ik1.jl:19\nin expression starting at\
    \ /tmp/tmp054a6ik1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        if x < 0\n                count += abs(x)\n            else\n       \
    \         count += x\n        end\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.4>\ncount_nums([-2, -1, 1, 2, -3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpghqt8ksb.jl:24\nin expression starting at\
    \ /tmp/tmpghqt8ksb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.3>\n\
    count_nums([-1,11,-11])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ > 0.\nIf no number is positive, then the function should return 0.\ne.g. [1,\
    \ 1, 2] has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> \n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3t5lxsrv.jl:20\nin expression starting at\
    \ /tmp/tmp3t5lxsrv.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of integers and returns the number of\
    \ elements which has a sum of digits < 0.\nIf a number is negative, then its first\
    \ signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\
    >>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1,\
    \ 1, 2]) == 3\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88gfkx5l.jl:20\nin expression starting at\
    \ /tmp/tmp88gfkx5l.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -4, -6, -10, -12, -14, -16, -18, -20, -24, -26, -28, -32, -34,\
    \ -36, -38, -40, -42, -44, -46])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6m0f5_mi.jl:20\nin expression starting at\
    \ /tmp/tmp6m0f5_mi.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 2, -4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq43bomqu.jl:19\nin expression starting at\
    \ /tmp/tmpq43bomqu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -5,\
    \ -7, -9, -10, -12, -15, -17, -21])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnq7bvurv.jl:19\nin expression starting at\
    \ /tmp/tmpnq7bvurv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        if x < 0\n                count += abs(x)\n            else\n       \
    \         count += x\n        end\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_nums([-2, -1, 0, 1, 2])\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1, 11, -11])\n</cell>\n<code language=julia-1.5>\ncount_nums([1,\
    \ 1, 2])\n</cell>\n<text>\nExercise: Write a function that takes an array of integers\
    \ and returns the number of elements which has a sum of digits < 0.\n    If a\
    \ number is negative, then its first signed digit will be negative:\n    e.g.\
    \ -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1,\
    \ 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpotnjh00u.jl:24\nin expression starting at\
    \ /tmp/tmpotnjh00u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.0>\n\
    count_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an array of integers and returns the number of elements which has a sum\
    \ of digits < 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuwdnyy5q.jl:20\nin expression starting at\
    \ /tmp/tmpuwdnyy5q.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr35_cpvz.jl:19\nin expression starting at\
    \ /tmp/tmpr35_cpvz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for n in arr\n        if n > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -4,\
    \ -6, -10, -12, -14, -16, -18, -21])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of elements which has\
    \ a sum of digits < 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_p014bz.jl:19\nin expression starting at\
    \ /tmp/tmpn_p014bz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhbobjig.jl:19\nin expression starting at\
    \ /tmp/tmphhbobjig.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7aulgbc0.jl:20\nin expression starting at\
    \ /tmp/tmp7aulgbc0.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        elseif x <\
    \ 0\n            count += abs(x)\n        else\n            count += 1\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of elements which has\
    \ a sum of digits < 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([])\
    \ == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>>\
    \ count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7, -8]) == 4\n>>> count_nums([-1,\
    \ -1, 1, 2, -3, 4, -5, -6, -7, -8, 9]) == 4\n>>> count_nums([-1, -1, 1, 2, -3,\
    \ 4, -5, -6, -7, -8, -9]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7,\
    \ -8, -9, 10]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7, -8, -9,\
    \ 10, 11]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7, -8, -9, 10,\
    \ 11, 12]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7, -8, -9, 10,\
    \ 11, 12, 13]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7, -8, -9,\
    \ 10, 11, 12, 13, 14]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7,\
    \ -8, -9, 10, 11, 12, 13, 14, 15]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4,\
    \ -5, -6, -7, -8, -9, 10, 11, 12, 13, 14, 15, 16]) == 4\n>>> count_nums([-1, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8, -9, 10, 11, 12, 13, 14, 15, 16, 17]) == 4\n>>>\
    \ count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7, -8, -9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7, -8, -9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 4\n>>> count_nums([-1, -1, 1, 2,\
    \ -3, 4, -5, -6, -7, -8, -9, \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo8o7vrhf.jl:22\nin expression starting at\
    \ /tmp/tmpo8o7vrhf.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-1, 1,\
    \ -2, 2, 3, -3, 3, -4, 4, -5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpngmkl1x9.jl:19\nin expression starting at\
    \ /tmp/tmpngmkl1x9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -4,\
    \ -6, -8])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ivfmi_9.jl:19\nin expression starting at\
    \ /tmp/tmp6ivfmi_9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 2, -4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\n\
    Write a function count_nums which takes an array of integers and returns\n   \
    \ the number of elements which has a sum of digits > 0.\n    If a number is negative,\
    \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
    \ -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11])\
    \ == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqyv8i1o.jl:20\nin expression starting at\
    \ /tmp/tmpcqyv8i1o.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-1, 1,\
    \ -2, 2, -3, 3, -4, 4, -5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5f5xwook.jl:19\nin expression starting at\
    \ /tmp/tmp5f5xwook.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 1, 2])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 11, -11])\n</cell>\n<code language=julia-1.5>\ncount_nums([1, 1, 2])\n</cell>\n\
    <text>\nExercise 2\nWrite a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyi6m90ja.jl:20\nin expression starting at\
    \ /tmp/tmpyi6m90ja.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of elements which has a sum of digits < 0.\n\
    If a number is negative, then its first signed digit will be negative:\ne.g. -123\
    \ has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, -1, 1, 2,\
    \ -3, 4]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5]) == 4\n>>> count_nums([-1,\
    \ -1, 1, 2, -3, 4, -5, -6, -7, -8]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4,\
    \ -5, -6, -7, -8, -9]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7,\
    \ -8, -9, -10, -11]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7, -8,\
    \ -9, -10, -11, -12, -13]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6,\
    \ -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]) == 4\n>>> count_nums([-1, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]) ==\
    \ 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7, -8, -9, -10, -11, -12, -13,\
    \ -14, -15, -16, -17, -18]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6,\
    \ -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]) == 4\n>>> count_nums([-1,\
    \ -1, 1, 2, -3, 4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17,\
    \ -18, -19, -20, -21]) == 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7,\
    \ -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22]) ==\
    \ 4\n>>> count_nums([-1, -1, 1, 2, -3, 4, -5, -\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbhuay57z.jl:19\nin expression starting at\
    \ /tmp/tmpbhuay57z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            sign = -1\n        else\n      \
    \      sign = 1\n        digits = sign * trunc(x::Int64)\n        count += digits\n\
    \    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2,\
    \ -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9fq6ap1j.jl:22\nin expression starting at\
    \ /tmp/tmp9fq6ap1j.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<code language=julia-1.5>\ncount_nums([1, 2, -3, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpumfps0b1.jl:19\nin expression starting at\
    \ /tmp/tmpumfps0b1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in arr\n        sum += i\n        if sum > 0\n            return sum\n   \
    \     else\n            sum = 0\n    end\n    return 0\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\n\
    Write a function count_nums which takes an array of integers and returns\n   \
    \ the number of elements which has a sum of digits > 0.\n    If a number is negative,\
    \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
    \ -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11])\
    \ == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1rd3rxm.jl:21\nin expression starting at\
    \ /tmp/tmpy1rd3rxm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 2, -4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes an array of integers and returns the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpodsmqgqr.jl:19\nin expression starting at\
    \ /tmp/tmpodsmqgqr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-1, 1,\
    \ -10, -100, -1000, -1000000000])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qj7f77i.jl:19\nin expression starting at\
    \ /tmp/tmp2qj7f77i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of elements in the array that have a sum of digits > 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkas4j3o.jl:19\nin expression starting at\
    \ /tmp/tmpdkas4j3o.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyrf3oj4e.jl:19\nin expression starting at\
    \ /tmp/tmpyrf3oj4e.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-1, 11,\
    \ -11])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array of\
    \ integers and returns the number of elements which has a sum of digits > 0.\n\
    If a number is negative, then its first signed digit will be negative:\ne.g. -123\
    \ has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 2\n>>> count_nums([1, 2, -3]) == 1\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkq_oodyw.jl:19\nin expression starting at\
    \ /tmp/tmpkq_oodyw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += abs(x)\n        else\n\
    \            count += 1\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1,11,-11])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ms3uzw3.jl:20\nin expression starting at\
    \ /tmp/tmp7ms3uzw3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += abs(x)\n        else\n\
    \            count += 1\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -4, -6, -8])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an array of integers and returns the number of elements which has a sum\
    \ of digits > 0.\nIf there are two or more numbers with this property, then the\
    \ function should return the first one.\ne.g. [1, 1, 2] has two numbers with sum\
    \ greater than 0.\n[1, 1, 2, 3] has three numbers with sum greater than 0.\n[1,\
    \ 1, 2, 3] has three numbers with sum greater than 0.\n[1, 1, 2, 3] has three\
    \ numbers with sum greater than 0.\n[1, 1, 2, 3] has three numbers with sum greater\
    \ than 0.\n[1, 1, 2, 3] has three numbers with sum greater than 0.\n[1, 1, 2,\
    \ 3] has three numbers with sum greater than 0.\n[1, 1, 2, 3] has three numbers\
    \ with sum greater than 0.\n[1, 1, 2, 3] has three numbers with sum greater than\
    \ 0.\n[1, 1, 2, 3] has three numbers with sum greater than 0.\n[1, 1, 2, 3] has\
    \ three numbers with sum greater than 0.\n[1, 1, 2, 3] has three numbers with\
    \ sum greater than 0.\n[1, 1, 2, 3] has three numbers with sum greater than 0.\n\
    [1, 1, 2, 3] has three numbers with sum greater than 0.\n[1, 1, 2, 3] has three\
    \ numbers with sum greater than 0.\n[1, 1, 2, 3] has three numbers with sum greater\
    \ than 0.\n[1, 1, 2, 3] has three numbers with sum greater than 0.\n[1, 1, 2,\
    \ 3] has three numbers with sum greater than 0.\n[1, 1, 2, 3] has three numbers\
    \ with sum greater than 0.\n[1, 1, 2, 3] has three numbers with sum greater than\
    \ 0.\n[1, 1, 2, 3] has three numbers with sum greater than 0.\n[1, 1, 2, 3] has\
    \ three numbers with sum greater than 0.\n[1, 1, 2, 3] has three numbers with\
    \ sum greater than 0.\n[1, 1, 2, 3] has three numbers with sum greater than 0.\n\
    [1, 1, 2, 3] has three numbers with sum greater than 0.\n[1, 1, 2, 3] has three\
    \ numbers with sum greater than 0.\n[1, 1, 2, 3] has three numbers with sum greater\
    \ than 0.\n[1, 1, 2, 3] has three numbers with sum greater than 0.\n[1, 1, 2,\
    \ 3] has three numbers with sum greater than 0.\n[1, 1, 2, 3] has three numbers\
    \ with sum greater than 0.\n[1, 1, 2, 3] has three numbers with sum greater than\
    \ 0.\n[1, 1, 2, 3] has three numbers with sum greater than 0.\n[1, 1, 2, 3] has\
    \ three numbers with sum greater than 0.\n[1, 1, 2, 3] has three numbers with\
    \ sum greater than 0.\n[1, 1, 2, 3] has three numbers with sum \nusing Test\n\n\
    @testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcn_toffc.jl:20\nin expression starting at\
    \ /tmp/tmpcn_toffc.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1, 11, -11])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqtyx_h6p.jl:20\nin expression starting at\
    \ /tmp/tmpqtyx_h6p.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpalu6s1dv.jl:19\nin expression starting at\
    \ /tmp/tmpalu6s1dv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.3>\n\
    count_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvkdl_f0q.jl:20\nin expression starting at\
    \ /tmp/tmpvkdl_f0q.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in arr\n        sum += i\n        if sum > 0\n            return sum\n   \
    \     else\n            return sum + i\n    end\n    return 0\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_blfm93.jl:21\nin expression starting at\
    \ /tmp/tmpw_blfm93.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += abs(x)\n        else\n\
    \            count += 1\n    end\n    return count\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of integers and returns the number of\
    \ elements which has a sum of digits < 0.\nIf a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptajo_foc.jl:20\nin expression starting at\
    \ /tmp/tmptajo_foc.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpauybkqov.jl:20\nin expression starting at\
    \ /tmp/tmpauybkqov.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += count_nums(digits(x))\n\
    \        else\n            count += count_nums(digits(-x))\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums(digits(-123))\n</cell>\n\
    <text>\nExercise 2\nWrite a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbci1pki.jl:20\nin expression starting at\
    \ /tmp/tmpqbci1pki.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8, -9, -10])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function count_nums which takes an array of integers and returns\n    the number\
    \ of elements which has a sum of digits > 0.\n    If a number is negative, then\
    \ its first signed digit will be negative:\n    e.g. -123 has signed digits -1,\
    \ 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) ==\
    \ 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfnn62wjd.jl:19\nin expression starting at\
    \ /tmp/tmpfnn62wjd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.4>\n\
    count_nums([-2, -4, -6, -10, -12, -14, -16, -18, -21])\n</cell>\n<text>\nExercise\n\
    Write a function count_nums which takes an array of integers and returns\n   \
    \ the number of elements which has a sum of digits > 0.\n    If a number is negative,\
    \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
    \ -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11])\
    \ == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy8kmb_tw.jl:20\nin expression starting at\
    \ /tmp/tmpy8kmb_tw.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ -10, -100, -1000, -1000000000])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxqx6wgu4.jl:19\nin expression starting at\
    \ /tmp/tmpxqx6wgu4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in arr\n        if i > 0 \n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which\
    \ takes an array of integers and returns\n    the number of elements which has\
    \ a sum of digits > 0.\n    If a number is negative, then its first signed digit\
    \ will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ragfl4y.jl:19\nin expression starting at\
    \ /tmp/tmp_ragfl4y.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp723i2i6a.jl:19\nin expression starting at\
    \ /tmp/tmp723i2i6a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        if x < 0\n                count += abs(x)\n            else\n       \
    \         count += x\n        end\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.3>\ncount_nums([-1, 11, -11])\n</cell>\n<text>\nExercise 3\n\
    Write a function count_nums which takes an array of integers and returns\n   \
    \ the number of elements which has a sum of digits > 0.\n    If a number is negative,\
    \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
    \ -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11])\
    \ == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxv1b2_ju.jl:24\nin expression starting at\
    \ /tmp/tmpxv1b2_ju.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,11,-11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvs15dmrp.jl:19\nin expression starting at\
    \ /tmp/tmpvs15dmrp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp52_x8rve.jl:19\nin expression starting at\
    \ /tmp/tmp52_x8rve.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -4, -6, -10, -12, -14, -16, -18, -21])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrf8grum.jl:20\nin expression starting at\
    \ /tmp/tmpvrf8grum.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        elseif x <\
    \ 0\n            count += abs(x)\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.0>\ncount_nums([-2, -1, 1, 2, -3, 4])\n</cell>\n\
    <text>\nExercise 3\nWrite a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfrqucon7.jl:21\nin expression starting at\
    \ /tmp/tmpfrqucon7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += abs(x)\n        else\n\
    \            count += 1\n    end\n    return count\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqvnuci_.jl:20\nin expression starting at\
    \ /tmp/tmpkqvnuci_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 11,\
    \ -11])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq9wuio1u.jl:19\nin expression starting at\
    \ /tmp/tmpq9wuio1u.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-2, -1,\
    \ 0, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcapknq5_.jl:19\nin expression starting at\
    \ /tmp/tmpcapknq5_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the number of elements which has a sum of digits > 0.\n\
    If a number is negative, then its first signed digit will be negative:\ne.g. -123\
    \ has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1,\
    \ 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3])\
    \ == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>>\
    \ count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1,\
    \ 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3])\
    \ == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>>\
    \ count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1,\
    \ 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3])\
    \ == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>>\
    \ count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1,\
    \ 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3])\
    \ == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>>\
    \ count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1,\
    \ 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3])\
    \ == 3\n>>> count_nums([-1, 2, -3]) == 3\n>>> count_nums([-1, 2, -3]) == \nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpki_cizm8.jl:19\nin expression starting at\
    \ /tmp/tmpki_cizm8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -3,\
    \ 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ < 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc6tz45n9.jl:19\nin expression starting at\
    \ /tmp/tmpc6tz45n9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 1,\
    \ -2, 3, -4, -5, -6, -7, -8, -9, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5unbmyv.jl:19\nin expression starting at\
    \ /tmp/tmpm5unbmyv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-1, 11,\
    \ -11])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpndhgyopj.jl:19\nin expression starting at\
    \ /tmp/tmpndhgyopj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in arr\n        if x > 0\n            sum += x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,11,-11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpswlqvzzv.jl:19\nin expression starting at\
    \ /tmp/tmpswlqvzzv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        elseif x <\
    \ 0\n            count += abs(x)\n        else\n            count += 1\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 1,\
    \ -2, 3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 1, -2, 3, -4, -5, -6, -7, -8, 0])\n</cell>\n<code language=julia-1.5>\ncount_num\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5fc72j1.jl:22\nin expression starting at\
    \ /tmp/tmpg5fc72j1.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0yfgyn8d.jl:19\nin expression starting at\
    \ /tmp/tmp0yfgyn8d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpumrlpimw.jl:19\nin expression starting at\
    \ /tmp/tmpumrlpimw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        elseif x <\
    \ 0\n            count += abs(x)\n        else\n            count += 1\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-1,11,-11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppqugb9il.jl:22\nin expression starting at\
    \ /tmp/tmppqugb9il.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += abs(x)\n        else\n\
    \            count += 1\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 3\n\
    Write a function count_nums which takes an array of integers and returns\n   \
    \ the number of elements which has a sum of digits > 0.\n    If a number is negative,\
    \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
    \ -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11])\
    \ == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprxi7az1e.jl:20\nin expression starting at\
    \ /tmp/tmprxi7az1e.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of elements which has\
    \ a sum of digits < 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6a9b3dp.jl:19\nin expression starting at\
    \ /tmp/tmpp6a9b3dp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1t7mc21v.jl:19\nin expression starting at\
    \ /tmp/tmp1t7mc21v.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8, -9])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the number of elements which has\
    \ a sum of digits < 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([])\
    \ == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>>\
    \ count_nums([-1, -1, 1, 2, -3, 4, -5, -6, -7, -8, -9]) == 4\n>>> count_nums([-1,\
    \ -1, 1, 2, -3, 4, -5, -6, -7, -8, -9, -10, -20, -30, -40, -50, -60, -70, -80,\
    \ -90, -100, -110, -121, -130, -140, -150, -160, -170, -180, -190, -200, -201,\
    \ -210, -220, -230, -240, -250, -260, -270, -280, -290, -300, -301, -310, -311,\
    \ -321, -322, -323, -324, -325, -326, -327, -328, -329, -330, -331, -332, -333,\
    \ -334, -335, -336, -337, -338, -339, -340, -341, -342, -343, -344, -345, -346,\
    \ -347, -348, -349, -350, -351, -352, -353, -354, -355, -356, -357, -358, -359,\
    \ -360, -361, -362, -363, -364, -365, -366, -367, -368, -369, -370, -371, -372,\
    \ -373, -374, -375, -376, -377, -378, -379, -380])\n4\n</text>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdeemnt1j.jl:19\nin expression starting at\
    \ /tmp/tmpdeemnt1j.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.0>\n\
    count_nums([-1, 11, -11])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ktnjc9m.jl:20\nin expression starting at\
    \ /tmp/tmp1ktnjc9m.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        if x < 0\n                count += abs(x)\n            else\n       \
    \         count += 1\n        end\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.3>\ncount_nums([-1,11,-11])\n</cell>\n<code language=julia-1.3>\n\
    count_nums([1,1,2])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ < 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([-1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1kl07sm.jl:24\nin expression starting at\
    \ /tmp/tmpj1kl07sm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 1,\
    \ -2, 3, -4, -5, -6, -7, -8, -9])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgf2jes45.jl:19\nin expression starting at\
    \ /tmp/tmpgf2jes45.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 2, -4, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzkcp1pt.jl:19\nin expression starting at\
    \ /tmp/tmpxzkcp1pt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ < 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgvkkjzy2.jl:19\nin expression starting at\
    \ /tmp/tmpgvkkjzy2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-1, 11,\
    \ -11])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_fdr0s84.jl:19\nin expression starting at\
    \ /tmp/tmp_fdr0s84.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += count_nums(divrem(x, 10))\n\
    \        else\n            count += count_nums(divrem(x, 10))\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-2, -1, 0, 1, 2])\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz0a514wg.jl:20\nin expression starting at\
    \ /tmp/tmpz0a514wg.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        if x < 0\n                count += abs(x)\n            else\n       \
    \         count += x\n        end\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise\n\
    Write a function count_nums which takes an array of integers and returns\n   \
    \ the number of elements which has a sum of digits > 0.\n    If a number is negative,\
    \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
    \ -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11])\
    \ == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvvf5yxhe.jl:24\nin expression starting at\
    \ /tmp/tmpvvf5yxhe.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1ezip_0.jl:19\nin expression starting at\
    \ /tmp/tmpv1ezip_0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnvbg03_.jl:19\nin expression starting at\
    \ /tmp/tmpcnvbg03_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += count_nums(-x)\n      \
    \  else\n            count += 1\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9tpo4k5v.jl:20\nin expression starting at\
    \ /tmp/tmp9tpo4k5v.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        if x < 0\n                count += abs(x)\n            else\n       \
    \         count += x\n        end\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an array of integers and returns the number of\
    \ elements which has a sum of digits > 0.\nIf a number is negative, then its first\
    \ signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\
    >>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1,\
    \ 1, 2]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01eayvp4.jl:24\nin expression starting at\
    \ /tmp/tmp01eayvp4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            sign = sign(x)\n            x =\
    \ abs(x)\n        else\n            sign = 1\n        end\n        count += 1\n\
    \        for y in digits(x)\n            if y > 0\n                count += 1\n\
    \            end\n        end\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.3>\ncount_nums([-2, -1, 1, 2, -3, 4])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz325te2i.jl:28\nin expression starting at\
    \ /tmp/tmpz325te2i.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 1,\
    \ -2, 2, -3, 3, -4, 4, -5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of elements which has\
    \ a sum of digits > 0.\nIf no number is positive, then return 0.\nIf no number\
    \ is negative, then return 0.\nIf no number is zero, then return 1.\nIf all numbers\
    \ are zero, then return 0.\nIf all numbers are negative, then return 0.\nIf all\
    \ numbers are positive, then return 1.\nIf all numbers are integers, then return\
    \ 1.\nIf all numbers are floats, then return 1.\nIf all numbers are rationals,\
    \ then return 1.\nIf all numbers are complex, then return 1.\nIf all numbers are\
    \ rational or complex, then return 1.\nIf all numbers are rational or complex,\
    \ then return 1.\nIf all numbers are rational or complex, then return 1.\nIf all\
    \ numbers are rational or complex, then return 1.\nIf all numbers are rational\
    \ or complex, then return 1.\nIf all numbers are rational or complex, then return\
    \ 1.\nIf all numbers are rational or complex, then return 1.\nIf all numbers are\
    \ rational or complex, then return 1.\nIf all numbers are rational or complex,\
    \ then return 1.\nIf all numbers are rational or complex, then return 1.\nIf all\
    \ numbers are rational or complex, then return 1.\nIf all numbers are rational\
    \ or complex, then return 1.\nIf all numbers are rational or complex, then return\
    \ 1.\nIf all numbers are rational or complex, then return 1.\nIf all numbers are\
    \ rational or complex, then return 1.\nIf all numbers are rational or complex,\
    \ then return 1.\nIf all numbers are rational or complex, then return 1.\nIf all\
    \ numbers are rational or complex, then return 1.\nIf all numbers are rational\
    \ or complex, then return 1.\nIf all numbers are rational or complex, then return\
    \ 1.\nIf all numbers are rational or complex, then return 1.\nIf all numbers are\
    \ rational or complex, then return 1.\nIf all numbers are rational or complex,\
    \ then return 1.\nIf all numbers are rational or complex, then return 1.\nIf all\
    \ numbers are rational or complex, then return 1.\nIf all numbers are rational\
    \ or complex, then return 1.\nIf all numbers are rational or complex, then \n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8v8kc5j.jl:19\nin expression starting at\
    \ /tmp/tmpi8v8kc5j.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        elseif x <\
    \ 0\n            count += count_nums(-x)\n        end\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1, 0, 2, -4, -6, -7,\
    \ -8])\n</cell>\n<text>\nExercise: Write a function that takes an array of integers\
    \ and returns the number of elements which has a sum of digits > 0.\nIf no number\
    \ is positive, then the function should return 0.\nFor example, count_nums([-2,\
    \ -1, 0, 2, -4, -6, -7, -8]) == 4\ncount_nums([-2, -1, 0, 2, -4, -6, -7, -8, 1])\
    \ == 0\ncount_nums([-2, -1, 0, 2, -4, -6, -7, -8, -1, 1]) == 0\ncount_nums([-2,\
    \ -1, 0, 2, -4, -6, -7, -8, -1, 1, 1]) == 0\ncount_nums([-2, -1, 0, 2, -4, -6,\
    \ -7, -8, -1, 1, -1, 1]) == 0\ncount_nums([-2, -1, 0, 2, -4, -6, -7, -8, -1, 1,\
    \ -1, -1, 1]) == 0\ncount_nums([-2, -1, 0, 2, -4, -6, -7, -8, -1, 1, -1, -1, -1,\
    \ 1]) == 0\ncount_nums([-2, -1, 0, 2, -4, -6, -7, -8, -1, 1, -1, -1, -1, -1, 1])\
    \ == 0\ncount_nums([-2, -1, 0, 2, -4, -6, -7, -8, -1, 1, -1, -1, -1, -1, -1, 1])\
    \ == 0\ncount_nums([-2, -1, 0, 2, -4, -6, -7, -8, -1, 1, -1, -1, -1, -1, -1, -1,\
    \ 1]) == 0\ncount_nums([-2, -1, 0, 2, -4, -6, -7, -8, -1, 1, -1, -1, -1, -1, -1,\
    \ -1, -1, 1]) == 0\ncount_nums([-2, -1, 0, 2, -4, -6, -7, -8, -1, 1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1, 1]) == 0\ncount_nums([-2, -1, 0, 2, -4, -6, -7, -8, -1,\
    \ 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1]) == 0\ncount_nums([-2, -1, 0, 2, -4,\
    \ -6, -7, -8, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1]) == 0\ncount_nums([-2,\
    \ -1, 0, 2, -4, -6, -7, -8, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1]) ==\
    \ 0\ncount_nums([-2, -1, 0, 2, -4, -6, -7, -8, -1, 1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1, 1]) == 0\ncount_nums([-2, -1, 0, 2, -4, -6, -7, -8, -1, 1, -1,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6jemgmao.jl:21\nin expression starting at\
    \ /tmp/tmp6jemgmao.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        if x < 0\n                count += abs(x)\n            else\n       \
    \         count += x\n        end\n    end\n    return count\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_alga9y.jl:24\nin expression starting at\
    \ /tmp/tmpy_alga9y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += abs(x)\n        else\n\
    \            count += 1\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 1, 2])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 11, -11])\n</cell>\n<code language=julia-1.5>\ncount_nums([1, 1, 2])\n</cell>\n\
    <text>\nExercise: Write a function that takes an array of integers and returns\
    \ the number of elements which has a sum of digits > 0.\n    If a number is negative,\
    \ then its first signed digit will be negative:\n    e.g. -123 has signed digits\
    \ -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11])\
    \ == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xm18rm2.jl:20\nin expression starting at\
    \ /tmp/tmp_xm18rm2.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpntf09kb9.jl:20\nin expression starting at\
    \ /tmp/tmpntf09kb9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in arr\n        if x > 0 \n            sum += x\n        else\n          \
    \  sum += -x \n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 1, 2, -3, 4])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,\
    \ 11, -11])\n</cell>\n<code language=julia-1.5>\ncount_nums([1, 1, 2])\n</cell>\n\
    <text>\nExercise 2\nWrite a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6lflnjj1.jl:20\nin expression starting at\
    \ /tmp/tmp6lflnjj1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += abs(x)\n        else\n\
    \            count += 1\n    end\n    return count\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of integers and returns the number of\
    \ elements which has a sum of digits < 0.\nIf a number is negative, then its first\
    \ signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\
    >>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1,\
    \ 1, 2]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([-1, -1, 1, -3])\
    \ == 4\n>>> count_nums([-1, -1, 1, -3, 2, -4]) == 4\n>>> count_nums([-1, -1, 1,\
    \ -3, 2, -4, -5]) == 4\n>>> count_nums([-1, -1, 1, -3, 2, -4, -5, -3]) == 4\n\
    >>> count_nums([-1, -1, 1, -3, 2, -4, -5, -3, -4]) == 4\n>>> count_nums([-1, -1,\
    \ 1, -3, 2, -4, -5, -3, -4, -5]) == 4\n>>> count_nums([-1, -1, 1, -3, 2, -4, -5,\
    \ -3, -4, -5, -4]) == 4\n>>> count_nums([-1, -1, 1, -3, 2, -4, -5, -3, -4, -5,\
    \ -4, -3]) == 4\n>>> count_nums([-1, -1, 1, -3, 2, -4, -5, -3, -4, -5, -4, -3,\
    \ -2]) == 4\n>>> count_nums([-1, -1, 1, -3, 2, -4, -5, -3, -4, -5, -4, -3, -2,\
    \ -3]) == 4\n>>> count_nums([-1, -1, 1, -3, 2, -4, -5, -3, -4, -5, -4, -3, -2,\
    \ -3, -4]) == 4\n>>> count_nums([-1, -1, 1, -3, 2, -4, -5, -3, -4, -5, -4, -3,\
    \ -2, -3, -4, -5]) == 4\n>>> count_nums([-1, -1, 1, -3, 2, -4, -5, -3, -4, -5,\
    \ -4, -3, -2, -3, -4, -5, -4]) == 4\n>>> count_nums([-1, -1, 1, -3, 2, -4, -5,\
    \ -3, -4, -5, -4, -3, -2, -3, -4, -5, -4, -3]) == 4\n>>> count_nums([-1, -1, 1,\
    \ -3, 2, -4, -5, -3, -4, -5, -4, -3, -2, -3, -4, -5, -4, -3, -2]) == 4\n>>> count_nums([-1,\
    \ -1, 1, -3, 2, -4, -5, -3, -4, -5, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphvaxl6gd.jl:20\nin expression starting at\
    \ /tmp/tmphvaxl6gd.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-1,11,-11])\n\
    </cell>\n<text>\nExercise 3\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpppmrw17c.jl:19\nin expression starting at\
    \ /tmp/tmpppmrw17c.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-1, 11,\
    \ -11])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_b4e22q.jl:19\nin expression starting at\
    \ /tmp/tmp8_b4e22q.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,11,-11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zt2u5g3.jl:19\nin expression starting at\
    \ /tmp/tmp6zt2u5g3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for n in arr\n        if n > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -4,\
    \ -6, -10, -12, -14, -16, -18, -21])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwx5yn6y.jl:19\nin expression starting at\
    \ /tmp/tmpbwx5yn6y.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ > 0.\nIf any number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpucpl9rih.jl:19\nin expression starting at\
    \ /tmp/tmpucpl9rih.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-1, 11,\
    \ -11])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of\
    \ integers and returns the number of elements which has a sum of digits < 0.\n\
    If a number is negative, then its first signed digit will be negative:\ne.g. -123\
    \ has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_num\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhi3nvvt.jl:19\nin expression starting at\
    \ /tmp/tmpyhi3nvvt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ > 0.\nIf no number is positive, then return 0.\nIf no number is negative, then\
    \ return 0.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ return 1.\nIf no number is 0, then return 1.\nIf no number is negative, then\
    \ \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_zxncns5.jl:19\nin expression starting at\
    \ /tmp/tmp_zxncns5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += count_nums(digits(x))\n\
    \        else\n            count += count_nums(digits(-x)) + 1\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums(digits(-1234))\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwwc_ojgf.jl:20\nin expression starting at\
    \ /tmp/tmpwwc_ojgf.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,11,-11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpqfwuft.jl:19\nin expression starting at\
    \ /tmp/tmpqpqfwuft.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1, 11, -11])\n</cell>\n<code language=julia-1.5>\ncount_nums([1,\
    \ 1, 2])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5e941la.jl:20\nin expression starting at\
    \ /tmp/tmpt5e941la.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_99x9y8.jl:19\nin expression starting at\
    \ /tmp/tmpj_99x9y8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of elements which has a sum of digits < 0.\n\
    If a number is negative, then its first signed digit will be negative:\ne.g. -123\
    \ has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1,\
    \ 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) ==\
    \ 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([1,\
    \ 2, -3]) == 3\n>>> count_\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6doz71v.jl:19\nin expression starting at\
    \ /tmp/tmpa6doz71v.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1,11,-11])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp012m2chm.jl:20\nin expression starting at\
    \ /tmp/tmp012m2chm.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.0>\n\
    count_nums([-2, -1, 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an array of integers and returns the number of elements\
    \ which has a sum of digits > 0.\nIf no number is negative, then the function\
    \ should return 0.\ne.g. [1, 1, 2] has signed digits 1, 2, and 3.\n>>> count_nums([])\
    \ == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n>>>\
    \ count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1,\
    \ 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) ==\
    \ 0\n>>> count_nums([1, 2, -3]) == 0\n>>> count_nums([1, 2, -3]) == 0\n>>> \n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu58w4lho.jl:20\nin expression starting at\
    \ /tmp/tmpu58w4lho.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        else\n    \
    \        count += x\n    end\n    return count\nend\n</cell>\n<code language=julia-1.0>\n\
    count_nums([-1,11,-11])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1,\
    \ 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpct1t7k_t.jl:20\nin expression starting at\
    \ /tmp/tmpct1t7k_t.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for n in arr\n        if n < 0\n            n = -n\n        end\n        if\
    \ n < 10\n            count += 1\n        elseif n < 100\n            count +=\
    \ 2\n        elseif n < 1000\n            count += 3\n        elseif n < 10000\n\
    \            count += 4\n        elseif n < 100000\n            count += 5\n \
    \       elseif n < 1000000\n            count += 6\n        elseif n < 10000000\n\
    \            count += 7\n        elseif n < 100000000\n            count += 8\n\
    \        elseif n < 1000000000\n            count += 9\n        elseif n < 10000000000\n\
    \            count += 10\n        elseif n < 100000000000\n            count +=\
    \ 11\n        elseif n < 1000000000000\n            count += 12\n        elseif\
    \ n < 10000000000000\n            count += 13\n        elseif n < 100000000000000\n\
    \            count += 14\n        elseif n < 1000000000000000\n            count\
    \ += 15\n        elseif n < 10000000000000000\n            count += 16\n     \
    \   elseif n < 100000000000000000\n            count += 17\n        elseif n <\
    \ 1000000000000000000\n            count += 18\n        elseif n < 10000000000000000000\n\
    \            count += 19\n        elseif n < 100000000000000000000\n         \
    \   count += 20\n        elseif n < 1000000000000000000000\n            count\
    \ += 21\n        elseif n < 10000000000000000000000\n            count += 22\n\
    \        elseif n < 100000000000000000000000\n            count += 23\n      \
    \  elseif n < 1000000000000000000000000\n            count += 24\n        elseif\
    \ n < 10000000000000000000000000\n            count += 25\n        elseif n <\
    \ 100000000000000000000000000\n            count += 26\n        elseif n < 1000000000000000000000000000\n\
    \            count += 27\n        elseif n < 10000000000000000000000000000\n \
    \           count += 28\n        elseif n < 100000000000000000000000000000\n \
    \           count += 29\n        elseif n < 1000000000000000000000000000000\n\
    \            count += 30\n        elseif n < 10000000000000000000000000000000\n\
    \            count += 31\n        elseif n < 100000000000000000000000000000000\n\
    \            count += 32\n        elseif n < 1000000000000000000000000000000000\n\
    \            count += 33\n        elseif n < 1000000000000000000000000000000000\n\
    \            count += 34\n        elseif n < 1000000000000000000000000000000000\n\
    \            count += 35\n        elseif n < 1000000000000000000000000000000000\n\
    \            count += 36\n        elseif n < 1000000000000000000000000000000000\n\
    \            count += 37\n        elseif n < 1000000000000000000000000000000000\n\
    \            count += 38\n        elseif n < 1000000000000000000000000000000000\n\
    \            count += 39\n        elseif n < 1000000000000000000000000000000000\n\
    \            count += 40\n        elseif n < 1000000000000000000000000000000000\n\
    \            count += 41\n        elseif n < 1000000000000000000000000000000000\n\
    \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ox5ydj2.jl:1\nin expression starting at /tmp/tmp1ox5ydj2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7eirw3a9.jl:19\nin expression starting at\
    \ /tmp/tmp7eirw3a9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-1,11,-11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns the number of elements which has a sum of digits > 0.\nIf any number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11])\
    \ == 1\n>>> count_nums([1, 1, 2]) == 3\n>>> count_nums([1, 2, -3]) == 3\n>>> count_nums([-1,\
    \ 2, -3]) == 3\n>>> count_nums([-1, 2, -3, 4]) == 3\n>>> count_nums([-1, 2, -3,\
    \ 4, -5]) == 3\n>>> count_nums([-1, 2, -3, 4, -5, 6]) == 3\n>>> count_nums([-1,\
    \ 2, -3, 4, -5, 6, 7]) == 3\n>>> count_nums([-1, 2, -3, 4, -5, 6, -7, 8]) == 3\n\
    >>> count_nums([-1, 2, -3, 4, -5, 6, -7, -8]) == 3\n>>> count_nums([-1, 2, -3,\
    \ 4, -5, 6, -7, -8, 9]) == 3\n>>> count_nums([-1, 2, -3, 4, -5, 6, -7, -8, -9])\
    \ == 3\n>>> count_nums([-1, 2, -3, 4, -5, 6, -7, -8, -9, 10]) == 3\n>>> count_nums([-1,\
    \ 2, -3, 4, -5, 6, -7, -8, -9, -10, 11]) == 3\n>>> count_nums([-1, 2, -3, 4, -5,\
    \ 6, -7, -8, -9, -10, 11, 12]) == 3\n>>> count_nums([-1, 2, -3, 4, -5, 6, -7,\
    \ -8, -9, -10, 11, 12, 13]) == 3\n>>> count_nums([-1, 2, -3, 4, -5, 6, -7, -8,\
    \ -9, -10, 11, 12, 13, 14]) == 3\n>>> count_nums([-1, 2, -3, 4, -5, 6, -7, -8,\
    \ -9, -10, 11, 12, 13, 14, 15]) == 3\n>>> count_nums([-1, 2, -3, 4, -5, 6, -7,\
    \ -8, -9, -10, 11, 12, 13, 14, 15, 16]) == 3\n>>> count_nums([-1, 2, -3, 4, -5,\
    \ 6, -7, -8, -9, -10, 11, 12, 13, 14, 15, 16, 17]) == 3\n>>> count_nums([-1, 2,\
    \ -3, 4, -5, 6, -7, -8, -9, -10, 11, 12, 13, 14, 15, 16, 17, 18]) == 3\n>>> count_nums([-1,\
    \ 2, -3, 4, -5, 6, -7, \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzknnyrep.jl:19\nin expression starting at\
    \ /tmp/tmpzknnyrep.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2, -4,\
    \ -6, -8])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0r6vjbmr.jl:19\nin expression starting at\
    \ /tmp/tmp0r6vjbmr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in arr\n        if x < 0\n            sum += abs(x)\n        else\n      \
    \      sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes an array of integers and returns the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kis58i3.jl:20\nin expression starting at\
    \ /tmp/tmp_kis58i3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-2, -1,\
    \ 1, 2, -3, 4, -5, -6, -7, -8])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_nums which takes an array of integers and returns\n    the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>>\
    \ count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sw13egy.jl:19\nin expression starting at\
    \ /tmp/tmp9sw13egy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([-1,11,-11])\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_nums which takes an array\
    \ of integers and returns\n    the number of elements which has a sum of digits\
    \ > 0.\n    If a number is negative, then its first signed digit will be negative:\n\
    \    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n\
    \    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4avan416.jl:19\nin expression starting at\
    \ /tmp/tmp4avan416.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x < 0\n            count += count_nums(x::Vector{Int64})\n\
    \        else\n            count += 1\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_nums([-2, -1, 0, 1, 2])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function count_nums which takes an array of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11,\
    \ -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpml6qe0qt.jl:20\nin expression starting at\
    \ /tmp/tmpml6qe0qt.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<text>\nExercise 3\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7zkkwx8.jl:19\nin expression starting at\
    \ /tmp/tmpj7zkkwx8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function count_nums which takes an array of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n   \
    \ >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n   \
    \ \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n   \
    \ for x in arr\n        if x > 0 \n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 11,\
    \ -11])\n</cell>\n<text>\nExercise 2\nWrite a function count_nums which takes\
    \ an array of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    If a number is negative, then its first signed digit will\
    \ be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\
    \ == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2])\
    \ == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2r0qw3f0.jl:19\nin expression starting at\
    \ /tmp/tmp2r0qw3f0.jl:19\n"
  exit_code: 1
  status: SyntaxError
