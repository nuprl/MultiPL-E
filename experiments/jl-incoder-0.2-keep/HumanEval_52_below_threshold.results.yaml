name: HumanEval_52_below_threshold
language: julia
results:
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpj9yymsvf.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpj9yymsvf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpj9yymsvf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt4tth7x0.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt4tth7x0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptf71ox0j.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptf71ox0j.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l \n        if n < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if all numbers\
    \ in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10],\
    \ 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0y4ohyuq.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0y4ohyuq.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n    end\n    return\
    \ below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8vdo3r_x.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8vdo3r_x.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8vdo3r_x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaqpthz8u.jl:20\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpaqpthz8u.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaqpthz8u.jl:19\ntest set: Test Failed at /tmp/tmpaqpthz8u.jl:22\n\
    \  Expression: candidate([1, 20, 4, 10], 21) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpaqpthz8u.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaqpthz8u.jl:19\ntest set: Test Failed at /tmp/tmpaqpthz8u.jl:23\n\
    \  Expression: candidate([1, 20, 4, 10], 22) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpaqpthz8u.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaqpthz8u.jl:19\ntest set: Test Failed at /tmp/tmpaqpthz8u.jl:24\n\
    \  Expression: candidate([1, 8, 4, 10], 11) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpaqpthz8u.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaqpthz8u.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaqpthz8u.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpek00_tf7.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpek00_tf7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the list l contains any number that is divisible by 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9lb1tfoh.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9lb1tfoh.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp836ppviz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp836ppviz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp836ppviz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd8l3yt0h.jl:15\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10], 100) == true\n  MethodError: no method\
    \ matching isless(::Array{Int64,1}, ::Int64)\n  Closest candidates are:\n    isless(!Matched::Missing,\
    \ ::Any) at missing.jl:87\n    isless(!Matched::AbstractFloat, ::Real) at operators.jl:158\n\
    \    isless(!Matched::Real, ::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Array{Int64,1}, ::Int64) at ./operators.jl:268\n   [2] <=(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:317\n   [3] below_threshold(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpd8l3yt0h.jl:8\n   [4] top-level scope at /tmp/tmpd8l3yt0h.jl:15\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpd8l3yt0h.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpd8l3yt0h.jl:16\n  Test threw exception\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n  MethodError: no method matching isless(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at\
    \ missing.jl:87\n    isless(!Matched::AbstractFloat, ::Real) at operators.jl:158\n\
    \    isless(!Matched::Real, ::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Array{Int64,1}, ::Int64) at ./operators.jl:268\n   [2] <=(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:317\n   [3] below_threshold(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpd8l3yt0h.jl:8\n   [4] top-level scope at /tmp/tmpd8l3yt0h.jl:16\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpd8l3yt0h.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpd8l3yt0h.jl:17\n  Test threw exception\n  Expression: candidate([1,\
    \ 20, 4, 10], 21) == true\n  MethodError: no method matching isless(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at\
    \ missing.jl:87\n    isless(!Matched::AbstractFloat, ::Real) at operators.jl:158\n\
    \    isless(!Matched::Real, ::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Array{Int64,1}, ::Int64) at ./operators.jl:268\n   [2] <=(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:317\n   [3] below_threshold(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpd8l3yt0h.jl:8\n   [4] top-level scope at /tmp/tmpd8l3yt0h.jl:17\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpd8l3yt0h.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpd8l3yt0h.jl:18\n  Test threw exception\n  Expression: candidate([1,\
    \ 20, 4, 10], 22) == true\n  MethodError: no method matching isless(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at\
    \ missing.jl:87\n    isless(!Matched::AbstractFloat, ::Real) at operators.jl:158\n\
    \    isless(!Matched::Real, ::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Array{Int64,1}, ::Int64) at ./operators.jl:268\n   [2] <=(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:317\n   [3] below_threshold(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpd8l3yt0h.jl:8\n   [4] top-level scope at /tmp/tmpd8l3yt0h.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpd8l3yt0h.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpd8l3yt0h.jl:19\n  Test threw exception\n  Expression: candidate([1,\
    \ 8, 4, 10], 11) == true\n  MethodError: no method matching isless(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at\
    \ missing.jl:87\n    isless(!Matched::AbstractFloat, ::Real) at operators.jl:158\n\
    \    isless(!Matched::Real, ::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Array{Int64,1}, ::Int64) at ./operators.jl:268\n   [2] <=(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:317\n   [3] below_threshold(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpd8l3yt0h.jl:8\n   [4] top-level scope at /tmp/tmpd8l3yt0h.jl:19\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpd8l3yt0h.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpd8l3yt0h.jl:20\n  Test threw exception\n  Expression: candidate([1,\
    \ 8, 4, 10], 10) == false\n  MethodError: no method matching isless(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at\
    \ missing.jl:87\n    isless(!Matched::AbstractFloat, ::Real) at operators.jl:158\n\
    \    isless(!Matched::Real, ::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Array{Int64,1}, ::Int64) at ./operators.jl:268\n   [2] <=(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:317\n   [3] below_threshold(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpd8l3yt0h.jl:8\n   [4] top-level scope at /tmp/tmpd8l3yt0h.jl:20\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpd8l3yt0h.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd8l3yt0h.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzc6sikag.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzc6sikag.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoovno6g1.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoovno6g1.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp2853qify.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2853qify.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2853qify.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpbns36wf3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbns36wf3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbns36wf3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function is_even(n::Int64) that returns True\
    \ if n is even, and False otherwise. Test it on all integers from 0 to 20.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp1pgzgu8.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp1pgzgu8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in a list that are less than a given threshold.\n\
    using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp01ogqa5y.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp01ogqa5y.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsyj1xeen.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsyj1xeen.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpllvxtqnj.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpllvxtqnj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb58vmzq3.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb58vmzq3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for n in l\n        if n\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnwulpjow.jl:23\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnwulpjow.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnwulpjow.jl:21\ntest set: Test Failed at /tmp/tmpnwulpjow.jl:27\n\
    \  Expression: candidate([1, 8, 4, 10], 10) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnwulpjow.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnwulpjow.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwulpjow.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzriw3rdf.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzriw3rdf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l == t || l == -t || l == -Int(t)\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"Return True if all numbers in the list l are above\
    \ threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>>\
    \ above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfgmnrp80.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfgmnrp80.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpisaunbz8.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpisaunbz8.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp17rdht3a.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp17rdht3a.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4l7teiq0.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4l7teiq0.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    end \n    return true \nend \n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n>>> above_threshold([1,\
    \ 2, 4, 10], 100)\nTrue\n>>> above_threshold([1, 20, 4, 10], 5)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 10)\nFalse\n>>> above_threshold([1, 20, 4, 10], 15)\nTrue\n>>> above_threshold([1,\
    \ 20, 4, 10], 20)\nTrue\n>>> above_threshold([1, 20, 4, 10], 25)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 30)\nFalse\n>>> above_threshold([1, 20, 4, 10], 35)\nFalse\n>>>\
    \ above_threshold([1, 20, 4, 10], 40)\nFalse\n>>> above_threshold([1, 20, 4, 10],\
    \ 45)\nFalse\n>>> above_threshold([1, 20, 4, 10], 50)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 55)\nFalse\n>>> above_threshold([1, 20, 4, 10], 60)\nFalse\n>>>\
    \ above_threshold([1, 20, 4, 10], 65)\nFalse\n>>> above_threshold([1, 20, 4, 10],\
    \ 70)\nFalse\n>>> above_threshold([1, 20, 4, 10], 75)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 80)\nFalse\n>>> above_threshold([1, 20, 4, 10], 85)\nFalse\n>>>\
    \ above_threshold([1, 20, 4, 10], 90)\nFalse\n>>> above_threshold([1, 20, 4, 10],\
    \ 95)\nFalse\n>>> above_threshold([1, 20, 4, 10], 100)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 105)\nFalse\n>>> above_threshold([1, 20, 4, 10], 110)\nFalse\n>>>\
    \ above_threshold([1, 20, 4, 10], 115)\nFalse\n>>> above_threshold([1, 20, 4,\
    \ 10], 120)\nFalse\n>>> above_threshold([1, 20, 4, 10], 125)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 130)\nFalse\n>>> above_threshold([1, 20, 4, 10], 135)\nFalse\n>>>\
    \ above_threshold([1, 20, 4, 10], 140)\nFalse\n>>> above_threshold([1, 20, 4,\
    \ 10], 145)\nFalse\n>>> above_threshold([1, 20, 4, 10], 150)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 155)\nFalse\n>>> above_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxud8o2q2.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxud8o2q2.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns True if all numbers in the list l are greater than threshold t.\n\
    Write a function that returns True if all numbers in the list l are greater than\
    \ or equal to threshold t.\nWrite a function that returns True if all numbers\
    \ in the list l are less than threshold t.\nWrite a function that returns True\
    \ if all numbers in the list l are less than or equal to threshold t.\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvvyg1dvi.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvvyg1dvi.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns True if all numbers\
    \ in the list l are below threshold t or if all numbers in the list l are equal\
    \ to threshold t.\nHint: Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_h93idpy.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_h93idpy.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpu_a__2p9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu_a__2p9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu_a__2p9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \n</cell>\n<code language=julia-1.5>\n\"\"\"Return True\
    \ if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp235vi6x4.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp235vi6x4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpnaa21gm7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnaa21gm7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnaa21gm7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if all numbers\
    \ in the list l are equal to threshold t.\nHint: Use below_threshold.\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprf824nhp.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprf824nhp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz6s4w_sv.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz6s4w_sv.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return True\
    \ if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjee3pgnw.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjee3pgnw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq1usc99y.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq1usc99y.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    t <= sum(l)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 2\nWrite a function is_sorted(l::Vector{Int64})\
    \ that returns True if l is sorted in ascending order. Otherwise, return False.\n\
    Write a test that checks if l is sorted in ascending order using the function\
    \ is_sorted(l::Vector{Int64}).\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkkcbop9h.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkkcbop9h.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpuzkjy2fm.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuzkjy2fm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuzkjy2fm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp35neadja.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp35neadja.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp5fcjk31m.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5fcjk31m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5fcjk31m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpphygccua.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpphygccua.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph387dr22.jl:23\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmph387dr22.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph387dr22.jl:21\ntest set: Test Failed at /tmp/tmph387dr22.jl:27\n\
    \  Expression: candidate([1, 8, 4, 10], 10) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph387dr22.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph387dr22.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph387dr22.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpsufqecsu.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsufqecsu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsufqecsu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of elements in a list that are less than a given threshold.\n\
    using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwqah_ka0.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwqah_ka0.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwttnyg21.jl:21\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwttnyg21.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwttnyg21.jl:20\ntest set: Test Failed at /tmp/tmpwttnyg21.jl:23\n\
    \  Expression: candidate([1, 20, 4, 10], 21) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwttnyg21.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwttnyg21.jl:20\ntest set: Test Failed at /tmp/tmpwttnyg21.jl:24\n\
    \  Expression: candidate([1, 20, 4, 10], 22) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwttnyg21.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwttnyg21.jl:20\ntest set: Test Failed at /tmp/tmpwttnyg21.jl:25\n\
    \  Expression: candidate([1, 8, 4, 10], 11) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwttnyg21.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwttnyg21.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwttnyg21.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ovvp4f3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9ovvp4f3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9ovvp4f3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfv9z0ye3.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfv9z0ye3.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    below_threshold([1, 2, 4, 10], 100)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy0fnqo64.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy0fnqo64.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold t.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwaxmg38g.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwaxmg38g.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l = sort(l)\n    return all(l .< t)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns True if all numbers in the list l are\
    \ above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n\
    \    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg6rjhyrp.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg6rjhyrp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpwazt_c9z.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwazt_c9z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwazt_c9z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo6l1ck8u.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpo6l1ck8u.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo6l1ck8u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l \n        if n < t \n            return false\
    \ \n    end \n    return true \nend \n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1, 20,\
    \ 4, 10], 5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of elements in a list that are less than a given threshold.\nusing Test\n\n\
    @testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10],\
    \ 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplil9xc3k.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplil9xc3k.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpkwdjjdsa.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkwdjjdsa.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkwdjjdsa.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi16d88kc.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpi16d88kc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpi16d88kc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks whether a number is even.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_carckfy.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_carckfy.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyzt_q2cf.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyzt_q2cf.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    False\n    >>> above_threshold([1, 20, 4, 10], 5)\n   \
    \ True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqis26sx9.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqis26sx9.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr7l9fdb0.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr7l9fdb0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr9km2ak_.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr9km2ak_.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the list l\
    \ contains any number that is evenly divisible by 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps__2bgwj.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps__2bgwj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the list l\
    \ contains any number that is divisible by 3.\nusing Test\n\n@testset begin\n\n\
    candidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq13307gc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq13307gc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk_d_8wx.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppk_d_8wx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppk_d_8wx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector l and a threshold\
    \ t, and returns a vector containing only those elements that are above threshold\
    \ t.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2eyq_451.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2eyq_451.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if all numbers\
    \ in the list l are above threshold t.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzyjpzuxc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzyjpzuxc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuzjm75ws.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuzjm75ws.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp20xuge79.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp20xuge79.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp20xuge79.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns true if the list l contains any number that is divisible by 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp21gv52mk.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp21gv52mk.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps6bec78o.jl:20\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmps6bec78o.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps6bec78o.jl:19\ntest set: Test Failed at /tmp/tmps6bec78o.jl:22\n\
    \  Expression: candidate([1, 20, 4, 10], 21) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps6bec78o.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps6bec78o.jl:19\ntest set: Test Failed at /tmp/tmps6bec78o.jl:23\n\
    \  Expression: candidate([1, 20, 4, 10], 22) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps6bec78o.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps6bec78o.jl:19\ntest set: Test Failed at /tmp/tmps6bec78o.jl:24\n\
    \  Expression: candidate([1, 8, 4, 10], 11) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps6bec78o.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps6bec78o.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps6bec78o.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a list that are less than a certain threshold. For example, if the list is\
    \ [1, 2, 3, 4, 5] and threshold is 3, then the function should return 2.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphyqo8t58.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphyqo8t58.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmposejo5gu.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmposejo5gu.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    t < sum(l) < t \nend\nusing Test\n\n@testset begin\n\n\
    candidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfwk74txu.jl:15\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfwk74txu.jl:15\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfwk74txu.jl:14\ntest set: Test Failed at /tmp/tmpfwk74txu.jl:17\n\
    \  Expression: candidate([1, 20, 4, 10], 21) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfwk74txu.jl:17\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfwk74txu.jl:14\ntest set: Test Failed at /tmp/tmpfwk74txu.jl:18\n\
    \  Expression: candidate([1, 20, 4, 10], 22) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfwk74txu.jl:18\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfwk74txu.jl:14\ntest set: Test Failed at /tmp/tmpfwk74txu.jl:19\n\
    \  Expression: candidate([1, 8, 4, 10], 11) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfwk74txu.jl:19\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfwk74txu.jl:14\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfwk74txu.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are below threshold t.\nWrite a function that\
    \ returns True if all numbers in the list l are above threshold t.\nWrite a function\
    \ that returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all \nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiiqk2ru_.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiiqk2ru_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if the list l has at least two elements and all elements are equal,\
    \ false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpopyrm_gp.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpopyrm_gp.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbbmjqp01.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbbmjqp01.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    t < sum(l)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times the value v appears in the list l.\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw329i4mc.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw329i4mc.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp5c6rraeb.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5c6rraeb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5c6rraeb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl_1o1ry4.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl_1o1ry4.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns True if all numbers in the list l are above\
    \ threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>>\
    \ above_threshold([1, 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuq58c7zn.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuq58c7zn.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4jzeks10.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4jzeks10.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the list l\
    \ has at least two elements and all elements are positive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ec1xjxc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5ec1xjxc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps7ezt_sl.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps7ezt_sl.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.4>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<code language=julia-1.4>\nbelow_threshold([1, 20,\
    \ 4, 10], 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns true\
    \ if all numbers in the list l are greater than threshold t.\nWrite a function\
    \ that returns true if all numbers in the list l are greater than or equal to\
    \ threshold t.\nWrite a function that returns true if all numbers in the list\
    \ l are less than threshold t.\nWrite a function that returns true if all numbers\
    \ in the list l are less than or equal to threshold t.\nWrite a function that\
    \ returns true if all numbers in the list l are equal to threshold t.\nWrite a\
    \ function that returns true if all numbers in the list l are less than threshold\
    \ t, and all numbers in the list l are greater than or equal to threshold t.\n\
    Write a function that returns true if all numbers in the list l are greater than\
    \ threshold t, and all numbers in the list l are less than or equal to threshold\
    \ t.\nWrite a function that returns true if all numbers in the list l are equal\
    \ to threshold t, and all numbers in the list l are greater than or equal to threshold\
    \ t.\nWrite a function that returns true if all numbers in the list l are less\
    \ than threshold t, and all numbers in the list l are less than or equal to threshold\
    \ t.\nWrite a function that returns true if all numbers in the list l are greater\
    \ than threshold t, and all numbers in the list l are equal to threshold t.\n\
    Write a function that returns true if all numbers in the list l are equal to threshold\
    \ t, and all numbers in the list l are less than or equal to threshold t.\nWrite\
    \ a function that returns true if all numbers in the list l are less than threshold\
    \ t, and all numbers in the list l are greater than or equal to threshold t.\n\
    Write a function that returns true if all numbers in the list l are greater than\
    \ threshold t, and all numbers in the list l are equal to threshold t.\nWrite\
    \ a function that returns true if all numbers in the list l are equal to threshold\
    \ t, and all numbers in the list l are greater than or equal to threshold t.\n\
    Write a function that returns true if all numbers in the list l are less than\
    \ threshold t, and all numbers in the list l are less than or equal to threshold\
    \ t.\nWrite a function that returns true if all numbers in the list l are greater\
    \ than threshold t, and all numbers in the list l are equal to threshold t.\n\
    Write a function that returns true if all numbers in the list l are equal to threshold\
    \ t, and all numbers in the list l are less than or equal to threshold t.\nWrite\
    \ a function that returns true if all numbers in the list l are less than threshold\
    \ t, and all numbers in the list l are greater than or equal to threshold t.\n\
    Write a function that returns true if all numbers in the list l are greater than\
    \ threshold t, and all numbers in the list l are \nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpat38bm79.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpat38bm79.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are greater than threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaml9cp_i.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaml9cp_i.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpte2oy8g8.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpte2oy8g8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n>>> above_threshold([1,\
    \ 2, 4, 10], 100)\nFalse\n>>> above_threshold([1, 20, 4, 10], 5)\nTrue\n\"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf_wz0vw9.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf_wz0vw9.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmppp4715ck.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppp4715ck.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppp4715ck.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps3b17z4r.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps3b17z4r.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsg3ob12g.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsg3ob12g.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n    end\n    return\
    \ below_threshold\nend\n</cell>\n<code language=julia-1.5>\n@test below_threshold([1,\
    \ 2, 4, 10], 100)\n@test below_threshold([1, 20, 4, 10], 5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a list that\
    \ are less than a specified value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy_lh6ywa.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy_lh6ywa.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return\
    \ True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjrn8p0wa.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjrn8p0wa.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise: Write a function that returns\
    \ True if all numbers in the list l are above threshold t.\nHint: Use a for loop.\n\
    using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcvh_zlop.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcvh_zlop.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a list that are less than a specified value.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp027hqcnz.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp027hqcnz.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if all numbers\
    \ in the list l are above threshold t.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpobbfzc0u.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpobbfzc0u.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphiu_cxvd.jl:21\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphiu_cxvd.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphiu_cxvd.jl:20\ntest set: Test Failed at /tmp/tmphiu_cxvd.jl:23\n\
    \  Expression: candidate([1, 20, 4, 10], 21) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphiu_cxvd.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphiu_cxvd.jl:20\ntest set: Test Failed at /tmp/tmphiu_cxvd.jl:24\n\
    \  Expression: candidate([1, 20, 4, 10], 22) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphiu_cxvd.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphiu_cxvd.jl:20\ntest set: Test Failed at /tmp/tmphiu_cxvd.jl:25\n\
    \  Expression: candidate([1, 8, 4, 10], 11) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphiu_cxvd.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphiu_cxvd.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphiu_cxvd.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphi5fs9rx.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphi5fs9rx.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if all numbers\
    \ in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10],\
    \ 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5osk_mp7.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5osk_mp7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10],\
    \ 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfdiwe1ao.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfdiwe1ao.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l \n        if n < t \n            return False\
    \ \n    end \n    return True \nend \n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if all numbers in the list l are greater than threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjq8gl4v_.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjq8gl4v_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp7ssike1n.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7ssike1n.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7ssike1n.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks whether a number is\
    \ even or odd.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxwg1eyeb.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxwg1eyeb.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfqevhvmo.jl:23\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfqevhvmo.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfqevhvmo.jl:21\ntest set: Test Failed at /tmp/tmpfqevhvmo.jl:27\n\
    \  Expression: candidate([1, 8, 4, 10], 10) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfqevhvmo.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfqevhvmo.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfqevhvmo.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of elements in a list that are less than a given threshold.\n\
    using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt4l7hni8.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt4l7hni8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmptl_9lc2w.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptl_9lc2w.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptl_9lc2w.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqmel1eji.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqmel1eji.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqmel1eji.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8pprnuqq.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8pprnuqq.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqk6u_pzu.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqk6u_pzu.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l = sort(l)\n    l = l[l .< t]\n    length(l) == 0 ||\
    \ length(l) == 1 || length(l) == length(l)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf2z9f3xk.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf2z9f3xk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm7c248xa.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm7c248xa.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l = sort(l)\n    l = l[l .< t]\n    return length(l) ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj0hp33ww.jl:17\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpj0hp33ww.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj0hp33ww.jl:16\ntest set: Test Failed at /tmp/tmpj0hp33ww.jl:19\n\
    \  Expression: candidate([1, 20, 4, 10], 21) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj0hp33ww.jl:19\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj0hp33ww.jl:16\ntest set: Test Failed at /tmp/tmpj0hp33ww.jl:20\n\
    \  Expression: candidate([1, 20, 4, 10], 22) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj0hp33ww.jl:20\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj0hp33ww.jl:16\ntest set: Test Failed at /tmp/tmpj0hp33ww.jl:21\n\
    \  Expression: candidate([1, 8, 4, 10], 11) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj0hp33ww.jl:21\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj0hp33ww.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj0hp33ww.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp327zt4f8.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp327zt4f8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp327zt4f8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the list l\
    \ contains any numbers that are divisible by 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjrwavk1n.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjrwavk1n.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8wnkbn_g.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8wnkbn_g.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    l = sort(l)\n    \n    for x in l\n        if x\
    \ < t\n            return false\n        end\n    end\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1, 2, 4, 10],\
    \ 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns True if all numbers in the list\
    \ l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n\
    \    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ky7dr0n.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ky7dr0n.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpo6pfazor.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpo6pfazor.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo6pfazor.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmjwlxp2y.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmjwlxp2y.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpqea_y22p.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqea_y22p.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqea_y22p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa1bjp78w.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa1bjp78w.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpyy6u5vl6.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyy6u5vl6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyy6u5vl6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp5w6ntg92.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5w6ntg92.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5w6ntg92.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpivo73j82.jl:23\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpivo73j82.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpivo73j82.jl:21\ntest set: Test Failed at /tmp/tmpivo73j82.jl:27\n\
    \  Expression: candidate([1, 8, 4, 10], 10) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpivo73j82.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpivo73j82.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpivo73j82.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if all numbers\
    \ in the list l are below threshold t or if all numbers in the list l are equal\
    \ to threshold t.\nHint: Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz_97cebc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz_97cebc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l = sort(l)\n    l = l[l .< t]\n    length(l)==0\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the number of elements\
    \ in a list that are greater than a given threshold.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi80xwonp.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi80xwonp.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns True if all numbers\
    \ in the list l are below threshold t or if all numbers in the list l are equal\
    \ to threshold t.\nHint: Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdsff32id.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdsff32id.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns True if all numbers in the list l are above\
    \ threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>>\
    \ above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbwr9555u.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbwr9555u.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp0ijadg59.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0ijadg59.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0ijadg59.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmplcx8bktz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplcx8bktz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplcx8bktz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmptjlf6z3y.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptjlf6z3y.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptjlf6z3y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return True\
    \ if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuwguvzhk.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuwguvzhk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpig2968e9.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpig2968e9.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp1rk9gy6r.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1rk9gy6r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1rk9gy6r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmppw6hvf22.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppw6hvf22.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppw6hvf22.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbq_h4syr.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbq_h4syr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbq_h4syr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l == sort(l)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    False\n    >>> above_threshold([1, 20, 4, 10], 5)\n   \
    \ True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptax4x172.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptax4x172.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpmm88mk7x.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmm88mk7x.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmm88mk7x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the list l\
    \ contains any numbers that are not in the list l2.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbqwi7jf7.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbqwi7jf7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc8rravar.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpc8rravar.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc8rravar.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function is_prime(number::Int64) which returns\
    \ true if the given number is a prime number. Hint: use the sieve of Eratosthenes\
    \ or the Sieve of Atkin.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkq_sby62.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkq_sby62.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \n</cell>\n<code language=julia-1.3>\n\"\"\"Return True\
    \ if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe8_m2rk1.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe8_m2rk1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<code language=julia-1.4>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\nHint: use the function\
    \ below_threshold.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv12ys0vr.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv12ys0vr.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @test below_threshold([1, 2, 4, 10], 100)\n@test below_threshold([1, 20, 4, 10],\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns True if all numbers\
    \ in the list l are above threshold t.\n>>> above_threshold([1, 2, 4, 10], 100)\n\
    True\n>>> above_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsm8d0_jp.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsm8d0_jp.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwwkwc21u.jl:15\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10], 100) == true\n  MethodError: no method\
    \ matching isless(::Array{Int64,1}, ::Int64)\n  Closest candidates are:\n    isless(!Matched::Missing,\
    \ ::Any) at missing.jl:87\n    isless(!Matched::AbstractFloat, ::Real) at operators.jl:158\n\
    \    isless(!Matched::Real, ::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Array{Int64,1}, ::Int64) at ./operators.jl:268\n   [2] <=(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:317\n   [3] below_threshold(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpwwkwc21u.jl:8\n   [4] top-level scope at /tmp/tmpwwkwc21u.jl:15\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwwkwc21u.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwwkwc21u.jl:16\n  Test threw exception\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n  MethodError: no method matching isless(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at\
    \ missing.jl:87\n    isless(!Matched::AbstractFloat, ::Real) at operators.jl:158\n\
    \    isless(!Matched::Real, ::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Array{Int64,1}, ::Int64) at ./operators.jl:268\n   [2] <=(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:317\n   [3] below_threshold(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpwwkwc21u.jl:8\n   [4] top-level scope at /tmp/tmpwwkwc21u.jl:16\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwwkwc21u.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwwkwc21u.jl:17\n  Test threw exception\n  Expression: candidate([1,\
    \ 20, 4, 10], 21) == true\n  MethodError: no method matching isless(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at\
    \ missing.jl:87\n    isless(!Matched::AbstractFloat, ::Real) at operators.jl:158\n\
    \    isless(!Matched::Real, ::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Array{Int64,1}, ::Int64) at ./operators.jl:268\n   [2] <=(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:317\n   [3] below_threshold(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpwwkwc21u.jl:8\n   [4] top-level scope at /tmp/tmpwwkwc21u.jl:17\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwwkwc21u.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwwkwc21u.jl:18\n  Test threw exception\n  Expression: candidate([1,\
    \ 20, 4, 10], 22) == true\n  MethodError: no method matching isless(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at\
    \ missing.jl:87\n    isless(!Matched::AbstractFloat, ::Real) at operators.jl:158\n\
    \    isless(!Matched::Real, ::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Array{Int64,1}, ::Int64) at ./operators.jl:268\n   [2] <=(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:317\n   [3] below_threshold(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpwwkwc21u.jl:8\n   [4] top-level scope at /tmp/tmpwwkwc21u.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwwkwc21u.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwwkwc21u.jl:19\n  Test threw exception\n  Expression: candidate([1,\
    \ 8, 4, 10], 11) == true\n  MethodError: no method matching isless(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at\
    \ missing.jl:87\n    isless(!Matched::AbstractFloat, ::Real) at operators.jl:158\n\
    \    isless(!Matched::Real, ::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Array{Int64,1}, ::Int64) at ./operators.jl:268\n   [2] <=(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:317\n   [3] below_threshold(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpwwkwc21u.jl:8\n   [4] top-level scope at /tmp/tmpwwkwc21u.jl:19\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwwkwc21u.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwwkwc21u.jl:20\n  Test threw exception\n  Expression: candidate([1,\
    \ 8, 4, 10], 10) == false\n  MethodError: no method matching isless(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at\
    \ missing.jl:87\n    isless(!Matched::AbstractFloat, ::Real) at operators.jl:158\n\
    \    isless(!Matched::Real, ::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Array{Int64,1}, ::Int64) at ./operators.jl:268\n   [2] <=(::Array{Int64,1},\
    \ ::Int64) at ./operators.jl:317\n   [3] below_threshold(::Array{Int64,1}, ::Int64)\
    \ at /tmp/tmpwwkwc21u.jl:8\n   [4] top-level scope at /tmp/tmpwwkwc21u.jl:20\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpwwkwc21u.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwwkwc21u.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5o0zhm68.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5o0zhm68.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfk8yxn_1.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfk8yxn_1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiep4i_59.jl:23\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpiep4i_59.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiep4i_59.jl:21\ntest set: Test Failed at /tmp/tmpiep4i_59.jl:27\n\
    \  Expression: candidate([1, 8, 4, 10], 10) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiep4i_59.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiep4i_59.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiep4i_59.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmxd2w3k7.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmxd2w3k7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpopnc9zj1.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpopnc9zj1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpopnc9zj1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi84n8etb.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi84n8etb.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3jliwo0g.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3jliwo0g.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj269mxeh.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj269mxeh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    end \n    return true \nend \n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpowjo717u.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpowjo717u.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpgdwo6sh5.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgdwo6sh5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgdwo6sh5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx6au7pdo.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx6au7pdo.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpm_yvjjbh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm_yvjjbh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm_yvjjbh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbr8_g3ip.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbr8_g3ip.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbr8_g3ip.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1skje4aw.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1skje4aw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    t < length(l)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp41r_3bcq.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp41r_3bcq.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of elements in a list that are less than a given threshold.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9s4w85k5.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9s4w85k5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp3o98jsss.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3o98jsss.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3o98jsss.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1, 20,\
    \ 4, 10], 5)\n</cell>\n<text>\nExercise: Write a function that returns True if\
    \ all numbers in the list l are below threshold t.\nHint: Use below_threshold.\n\
    using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmecdcewz.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmecdcewz.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ejt0q63.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ejt0q63.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    t < l[1]\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx7f327l2.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx7f327l2.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpwc3tgrd7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwc3tgrd7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwc3tgrd7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l == t || l == -t || l == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if all numbers in the list l are above threshold t.\nHint: Use\
    \ below_threshold.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpthhdso8a.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpthhdso8a.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in a list that are less\
    \ than a given threshold.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphwwi5hth.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphwwi5hth.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n>>> above_threshold([1,\
    \ 2, 4, 10], 100)\nFalse\n>>> above_threshold([1, 20, 4, 10], 5)\nTrue\n\"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmjf2nqmq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmjf2nqmq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = l .< t\n    return below_threshold\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that returns True if all numbers\
    \ in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10],\
    \ 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy5uf57_u.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy5uf57_u.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns True if all numbers in the list l are above\
    \ threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    False\n    >>>\
    \ above_threshold([1, 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp77sr62ll.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp77sr62ll.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    t < length(l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiwkv5tim.jl:15\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpiwkv5tim.jl:15\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiwkv5tim.jl:14\ntest set: Test Failed at /tmp/tmpiwkv5tim.jl:17\n\
    \  Expression: candidate([1, 20, 4, 10], 21) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiwkv5tim.jl:17\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiwkv5tim.jl:14\ntest set: Test Failed at /tmp/tmpiwkv5tim.jl:18\n\
    \  Expression: candidate([1, 20, 4, 10], 22) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiwkv5tim.jl:18\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiwkv5tim.jl:14\ntest set: Test Failed at /tmp/tmpiwkv5tim.jl:19\n\
    \  Expression: candidate([1, 8, 4, 10], 11) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiwkv5tim.jl:19\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiwkv5tim.jl:14\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiwkv5tim.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp4d6f5dq.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp4d6f5dq.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfv88cfoc.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfv88cfoc.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp2e_iydqk.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2e_iydqk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2e_iydqk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    end \n    return true \nend \n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1, 20,\
    \ 4, 10], 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns True\
    \ if all numbers in the list l are above threshold t.\n>>> below_threshold([1,\
    \ 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], 10)\nFalse\n>>> below_threshold([1, 20, 4, 10], 0)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], -10)\nFalse\n>>> below_threshold([1, 20, 4, 10], -5)\nFalse\n>>>\
    \ below_threshold([1, 20, 4, 10], -100)\nFalse\n>>> below_threshold([1, 20, 4,\
    \ 10], -1000)\nFalse\n>>> below_threshold([1, 20, 4, 10], -10000)\nFalse\n>>>\
    \ below_threshold([1, 20, 4, 10], -100000)\nFalse\n>>> below_threshold([1, 20,\
    \ 4, 10], -1000000)\nFalse\n>>> below_threshold([1, 20, 4, 10], -10000000)\nFalse\n\
    >>> below_threshold([1, 20, 4, 10], -100000010)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], -100000020)\nFalse\n>>> below_threshold([1, 20, 4, 10], -100000030)\n\
    False\n>>> below_threshold([1, 20, 4, 10], -100000040)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], -100000050)\nFalse\n>>> below_threshold([1, 20, 4, 10], -100000060)\n\
    False\n>>> below_threshold([1, 20, 4, 10], -100000070)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], -100000080)\nFalse\n>>> below_threshold([1, 20, 4, 10], -100000090)\n\
    False\n>>> below_threshold([1, 20, 4, 10], -1000000100)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], -1000000110)\nFalse\n>>> below_threshold([1, 20, 4, 10], -1000000120)\n\
    False\n>>> below_threshold([1, 20, 4, 10], -1000000130)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], -1000000140)\nFalse\n>>> below_threshold([1, 20, 4, 10], -1000000150)\n\
    False\n>>> be\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc5odo7yg.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc5odo7yg.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpxg9zua2s.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxg9zua2s.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxg9zua2s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\n</cell>\n<code language=julia-1.5>\n\
    below_threshold([1, 2, 4, 10], 100)\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 20, 4, 10], 5)\n</cell>\n<text>\nExercise 4\nWrite a function that returns True\
    \ if all numbers in the list l are below threshold t, and False otherwise.\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpakf3qcqa.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpakf3qcqa.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for n in l\n        if n\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpegduqkas.jl:23\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpegduqkas.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpegduqkas.jl:21\ntest set: Test Failed at /tmp/tmpegduqkas.jl:27\n\
    \  Expression: candidate([1, 8, 4, 10], 10) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpegduqkas.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpegduqkas.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpegduqkas.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp96kd3tbr.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp96kd3tbr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp96kd3tbr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ returns True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp801ov0y6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp801ov0y6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are greater than threshold t.\n\
    \    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphwfbrg1o.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphwfbrg1o.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5a5jtpz8.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5a5jtpz8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    end \n    return true \nend \n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in a list that are less than a given threshold.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4okzhw1x.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4okzhw1x.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmprx5kq44a.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprx5kq44a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprx5kq44a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    l = sort(l)\n    \n    for x in l\n        if x\
    \ < t\n            return false\n        end\n    end\n    \n    return true\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns True if all numbers\
    \ in the list l are greater than threshold t.\n>>> below_threshold([1, 2, 4, 10],\
    \ 100)\nFalse\n>>> below_threshold([1, 20, 4, 10], 5)\nTrue\n</text>\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps79jri85.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps79jri85.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp151medwv.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp151medwv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp151medwv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ each element appears in the list l.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyon2ttgc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyon2ttgc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are below threshold t.\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+2.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+3.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+4.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+5.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+6.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+7.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+8.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+9.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+10.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+11.\nWrite a function\
    \ that returns True if all numbers in the list l are between threshold t and threshold\
    \ t+12.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+13.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+14.\nWrite a function\
    \ that returns True if all numbers in the list l are between threshold t and threshold\
    \ t+15.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+16.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+17.\nWrite a function\
    \ that returns True if all numbers in the list l are between threshold t and threshold\
    \ t+18.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+19.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+20.\nWrite a function\
    \ that returns True if all numbers in the list l are between threshold t and threshold\
    \ t+21.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+22.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+23.\nWrite a function\
    \ that returns True if all numbers in the list l are between threshold t and threshold\
    \ t+24.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+25.\nWrite a \nusing Test\n\n@testset begin\n\n\
    candidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4k1xonya.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4k1xonya.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @test below_threshold([1, 2, 4, 10], 100)\n@test below_threshold([1, 20, 4, 10],\
    \ 5)\n</cell>\n<text>\nExercise: Write a function that returns True if all numbers\
    \ in the list l are above threshold t.\nHint: Use below_threshold.\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1cm04or6.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1cm04or6.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp26ia8uct.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp26ia8uct.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp26ia8uct.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpo3hhy4a8.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpo3hhy4a8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo3hhy4a8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1s2jiikj.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1s2jiikj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    l = sort(l)\n    \n    if length(l) < 2\n      \
    \  return true\n    end\n    \n    if l[1] < t\n        return false\n    end\n\
    \    \n    if l[end] < t\n        return true\n    end\n    \n    if l[1] > t\n\
    \        return false\n    end\n    \n    if l[end] > t\n        return true\n\
    \    end\n    \n    if l[1] < t && l[end] < t\n        return false\n    end\n\
    \    \n    if l[1] > t && l[end] > t\n        return false\n    end\n    \n  \
    \  if l[1] < t && l[end] > t\n        return true\n    end\n    \n    if l[1]\
    \ > t && l[end] < t\n        return true\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprnq_gzn9.jl:49\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprnq_gzn9.jl:49\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpj8ub4byj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpj8ub4byj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpj8ub4byj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp28z3twbd.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp28z3twbd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp28z3twbd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    end \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2954rdwp.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2954rdwp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2954rdwp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that returns True if all numbers in the list l are equal to threshold\
    \ t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpikzmpmpw.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpikzmpmpw.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    l = sort(l)\n    \n    for n in l\n        if n\
    \ <= t\n            return false\n        end\n    end\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@test below_threshold([1, 2, 4, 10],\
    \ 100)\n</cell>\n<code language=julia-1.5>\n@test below_threshold([1, 20, 4, 10],\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns True if all numbers\
    \ in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10],\
    \ 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2ptib4by.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2ptib4by.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp8k9bhx9_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8k9bhx9_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8k9bhx9_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the list l\
    \ contains at least one number that is greater than or equal to threshold t.\n\
    using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgsqrxneq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgsqrxneq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold t.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppgrjdcjs.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppgrjdcjs.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgjx_pm09.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgjx_pm09.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgjx_pm09.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l = sort(l)\n    return all(l[i] <= t for i in 1:length(l)-1)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1, 2, 4, 10],\
    \ 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the list l contains\
    \ any number that is divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpstzwww83.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpstzwww83.jl:11\n"
  exit_code: 1
  status: Exception
