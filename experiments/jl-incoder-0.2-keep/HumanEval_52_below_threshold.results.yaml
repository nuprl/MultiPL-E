name: HumanEval_52_below_threshold
language: julia
results:
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp6ak9odqz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6ak9odqz.jl:1\n\
    in expression starting at /tmp/tmp6ak9odqz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6owwps19.jl:13\nin expression starting at\
    \ /tmp/tmp6owwps19.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps50dx72m.jl:15\nin expression starting at\
    \ /tmp/tmps50dx72m.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l \n        if n < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if all numbers\
    \ in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10],\
    \ 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpricmyq1f.jl:13\nin expression starting at\
    \ /tmp/tmpricmyq1f.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n    end\n    return\
    \ below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg9o_v012.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg9o_v012.jl:1\n\
    in expression starting at /tmp/tmpg9o_v012.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj7wtr_ih.jl:20\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj7wtr_ih.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7wtr_ih.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpj7wtr_ih.jl:22\n  Expression: candidate([1, 20, 4, 10], 21)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj7wtr_ih.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7wtr_ih.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpj7wtr_ih.jl:23\n  Expression: candidate([1, 20, 4, 10], 22)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj7wtr_ih.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7wtr_ih.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpj7wtr_ih.jl:24\n  Expression: candidate([1, 8, 4, 10], 11)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj7wtr_ih.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7wtr_ih.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj7wtr_ih.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptmicf4v.jl:14\nin expression starting at\
    \ /tmp/tmpptmicf4v.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the list l contains any number that is divisible by 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp52h6f5fy.jl:10\nin expression starting at\
    \ /tmp/tmp52h6f5fy.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp_27nhm1q.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_27nhm1q.jl:1\n\
    in expression starting at /tmp/tmp_27nhm1q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp58kvihej.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 4, 10], 100) == true\\n  MethodError:\
    \ no method matching isless(::Vector{Int64}, ::Int64)\\n  Closest candidates are:\\\
    n    isless(::AbstractVector, !Matched::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2550\\\
    n    isless(!Matched::AbstractFloat, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\\\
    n    isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\\\
    n    ...\\n  Stacktrace:\\n   [1] <(x::Vector{Int64}, y::Int64)\\n     @ Base\
    \ ./operators.jl:352\\n   [2] <=(x::Vector{Int64}, y::Int64)\\n     @ Base ./operators.jl:401\\\
    n   [3] below_threshold(l::Vector{Int64}, t::Int64)\\n     @ Main /tmp/tmp58kvihej.jl:8\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [5] macro expansion\\n     @ /tmp/tmp58kvihej.jl:15 [inlined]\\\
    n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp58kvihej.jl:14\\ntest set:\
    \ Error During Test at /tmp/tmp58kvihej.jl:16\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 20, 4, 10], 5) == false\\n  MethodError: no method matching isless(::Vector{Int64},\
    \ ::Int64)\\n  Closest candidates are:\\n    isless(::AbstractVector, !Matched::AbstractVector)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2550\\n   \
    \ isless(!Matched::AbstractFloat, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\\\
    n    isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\\\
    n    ...\\n  Stacktrace:\\n   [1] <(x::Vector{Int64}, y::Int64)\\n     @ Base\
    \ ./operators.jl:352\\n   [2] <=(x::Vector{Int64}, y::Int64)\\n     @ Base ./operators.jl:401\\\
    n   [3] below_threshold(l::Vector{Int64}, t::Int64)\\n     @ Main /tmp/tmp58kvihej.jl:8\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/shar"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ktw7w6w.jl:13\nin expression starting at\
    \ /tmp/tmp3ktw7w6w.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cpa93ir.jl:10\nin expression starting at\
    \ /tmp/tmp6cpa93ir.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpe9gmvnvh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe9gmvnvh.jl:1\n\
    in expression starting at /tmp/tmpe9gmvnvh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpllmjuqdq.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllmjuqdq.jl:1\n\
    in expression starting at /tmp/tmpllmjuqdq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function is_even(n::Int64) that returns True\
    \ if n is even, and False otherwise. Test it on all integers from 0 to 20.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxomg6qvq.jl:13\nin expression starting at\
    \ /tmp/tmpxomg6qvq.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in a list that are less than a given threshold.\n\
    using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtwongoj.jl:17\nin expression starting at\
    \ /tmp/tmpwtwongoj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3g3p1un9.jl:14\nin expression starting at\
    \ /tmp/tmp3g3p1un9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpogiqok0n.jl:13\nin expression starting at\
    \ /tmp/tmpogiqok0n.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29xw2l9n.jl:13\nin expression starting at\
    \ /tmp/tmp29xw2l9n.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for n in l\n        if n\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpke1h4e5i.jl:23\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpke1h4e5i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpke1h4e5i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpke1h4e5i.jl:27\n  Expression: candidate([1, 8, 4, 10], 10)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpke1h4e5i.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpke1h4e5i.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpke1h4e5i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vacmfgg.jl:14\nin expression starting at\
    \ /tmp/tmp2vacmfgg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l == t || l == -t || l == -Int(t)\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"Return True if all numbers in the list l are above\
    \ threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>>\
    \ above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_5r271o.jl:10\nin expression starting at\
    \ /tmp/tmpq_5r271o.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8aipsr0.jl:10\nin expression starting at\
    \ /tmp/tmpg8aipsr0.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmwwvuaid.jl:14\nin expression starting at\
    \ /tmp/tmpmwwvuaid.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgeezudi5.jl:14\nin expression starting at\
    \ /tmp/tmpgeezudi5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    end \n    return true \nend \n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n>>> above_threshold([1,\
    \ 2, 4, 10], 100)\nTrue\n>>> above_threshold([1, 20, 4, 10], 5)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 10)\nFalse\n>>> above_threshold([1, 20, 4, 10], 15)\nTrue\n>>> above_threshold([1,\
    \ 20, 4, 10], 20)\nTrue\n>>> above_threshold([1, 20, 4, 10], 25)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 30)\nFalse\n>>> above_threshold([1, 20, 4, 10], 35)\nFalse\n>>>\
    \ above_threshold([1, 20, 4, 10], 40)\nFalse\n>>> above_threshold([1, 20, 4, 10],\
    \ 45)\nFalse\n>>> above_threshold([1, 20, 4, 10], 50)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 55)\nFalse\n>>> above_threshold([1, 20, 4, 10], 60)\nFalse\n>>>\
    \ above_threshold([1, 20, 4, 10], 65)\nFalse\n>>> above_threshold([1, 20, 4, 10],\
    \ 70)\nFalse\n>>> above_threshold([1, 20, 4, 10], 75)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 80)\nFalse\n>>> above_threshold([1, 20, 4, 10], 85)\nFalse\n>>>\
    \ above_threshold([1, 20, 4, 10], 90)\nFalse\n>>> above_threshold([1, 20, 4, 10],\
    \ 95)\nFalse\n>>> above_threshold([1, 20, 4, 10], 100)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 105)\nFalse\n>>> above_threshold([1, 20, 4, 10], 110)\nFalse\n>>>\
    \ above_threshold([1, 20, 4, 10], 115)\nFalse\n>>> above_threshold([1, 20, 4,\
    \ 10], 120)\nFalse\n>>> above_threshold([1, 20, 4, 10], 125)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 130)\nFalse\n>>> above_threshold([1, 20, 4, 10], 135)\nFalse\n>>>\
    \ above_threshold([1, 20, 4, 10], 140)\nFalse\n>>> above_threshold([1, 20, 4,\
    \ 10], 145)\nFalse\n>>> above_threshold([1, 20, 4, 10], 150)\nFalse\n>>> above_threshold([1,\
    \ 20, 4, 10], 155)\nFalse\n>>> above_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprenlq8tq.jl:14\nin expression starting at\
    \ /tmp/tmprenlq8tq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns True if all numbers in the list l are greater than threshold t.\n\
    Write a function that returns True if all numbers in the list l are greater than\
    \ or equal to threshold t.\nWrite a function that returns True if all numbers\
    \ in the list l are less than threshold t.\nWrite a function that returns True\
    \ if all numbers in the list l are less than or equal to threshold t.\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpakoxpg2i.jl:10\nin expression starting at\
    \ /tmp/tmpakoxpg2i.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns True if all numbers\
    \ in the list l are below threshold t or if all numbers in the list l are equal\
    \ to threshold t.\nHint: Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8s_wr204.jl:13\nin expression starting at\
    \ /tmp/tmp8s_wr204.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpcfcdymct.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcfcdymct.jl:1\n\
    in expression starting at /tmp/tmpcfcdymct.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \n</cell>\n<code language=julia-1.5>\n\"\"\"Return True\
    \ if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmm21k2d7.jl:13\nin expression starting at\
    \ /tmp/tmpmm21k2d7.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpw53skwxe.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw53skwxe.jl:1\n\
    in expression starting at /tmp/tmpw53skwxe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if all numbers\
    \ in the list l are equal to threshold t.\nHint: Use below_threshold.\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51763t7t.jl:14\nin expression starting at\
    \ /tmp/tmp51763t7t.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplcch0noe.jl:10\nin expression starting at\
    \ /tmp/tmplcch0noe.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return True\
    \ if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gffxmtb.jl:13\nin expression starting at\
    \ /tmp/tmp6gffxmtb.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmmsfb1sw.jl:13\nin expression starting at\
    \ /tmp/tmpmmsfb1sw.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    t <= sum(l)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 2\nWrite a function is_sorted(l::Vector{Int64})\
    \ that returns True if l is sorted in ascending order. Otherwise, return False.\n\
    Write a test that checks if l is sorted in ascending order using the function\
    \ is_sorted(l::Vector{Int64}).\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprd8xhsqb.jl:10\nin expression starting at\
    \ /tmp/tmprd8xhsqb.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmps27dvg4s.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps27dvg4s.jl:1\n\
    in expression starting at /tmp/tmps27dvg4s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpggpa8ert.jl:10\nin expression starting at\
    \ /tmp/tmpggpa8ert.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpp616tco4.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp616tco4.jl:1\n\
    in expression starting at /tmp/tmpp616tco4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zsbg48b.jl:10\nin expression starting at\
    \ /tmp/tmp4zsbg48b.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwfufcz1l.jl:23\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfufcz1l.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfufcz1l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwfufcz1l.jl:27\n  Expression: candidate([1, 8, 4, 10], 10)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwfufcz1l.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwfufcz1l.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwfufcz1l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpfyyt69hp.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfyyt69hp.jl:1\n\
    in expression starting at /tmp/tmpfyyt69hp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of elements in a list that are less than a given threshold.\n\
    using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51gh4y11.jl:10\nin expression starting at\
    \ /tmp/tmp51gh4y11.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ac8ein5.jl:21\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ac8ein5.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ac8ein5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp8ac8ein5.jl:23\n  Expression: candidate([1, 20, 4, 10], 21)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8ac8ein5.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ac8ein5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp8ac8ein5.jl:24\n  Expression: candidate([1, 20, 4, 10], 22)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8ac8ein5.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ac8ein5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp8ac8ein5.jl:25\n  Expression: candidate([1, 8, 4, 10], 11)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8ac8ein5.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ac8ein5.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ac8ein5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5tjd3l6v.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5tjd3l6v.jl:1\n\
    in expression starting at /tmp/tmp5tjd3l6v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_p4i7hvj.jl:14\nin expression starting at\
    \ /tmp/tmp_p4i7hvj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    below_threshold([1, 2, 4, 10], 100)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphunvwd3v.jl:15\nin expression starting at\
    \ /tmp/tmphunvwd3v.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold t.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp48eyh8pg.jl:13\nin expression starting at\
    \ /tmp/tmp48eyh8pg.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l = sort(l)\n    return all(l .< t)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns True if all numbers in the list l are\
    \ above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n\
    \    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpturt1hz7.jl:11\nin expression starting at\
    \ /tmp/tmpturt1hz7.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpqmvgnlfg.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqmvgnlfg.jl:1\n\
    in expression starting at /tmp/tmpqmvgnlfg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxmlx6sbe.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmlx6sbe.jl:1\n\
    in expression starting at /tmp/tmpxmlx6sbe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l \n        if n < t \n            return false\
    \ \n    end \n    return true \nend \n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1, 20,\
    \ 4, 10], 5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of elements in a list that are less than a given threshold.\nusing Test\n\n\
    @testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10],\
    \ 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx2grhcs.jl:14\nin expression starting at\
    \ /tmp/tmpsx2grhcs.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpcs4a4i1r.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcs4a4i1r.jl:1\n\
    in expression starting at /tmp/tmpcs4a4i1r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdjqbivqa.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdjqbivqa.jl:1\n\
    in expression starting at /tmp/tmpdjqbivqa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks whether a number is even.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1pjicks.jl:15\nin expression starting at\
    \ /tmp/tmpc1pjicks.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6saqfesl.jl:13\nin expression starting at\
    \ /tmp/tmp6saqfesl.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    False\n    >>> above_threshold([1, 20, 4, 10], 5)\n   \
    \ True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpag9x9mm_.jl:10\nin expression starting at\
    \ /tmp/tmpag9x9mm_.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbqmpf63.jl:13\nin expression starting at\
    \ /tmp/tmprbqmpf63.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmq7iuory.jl:10\nin expression starting at\
    \ /tmp/tmpmq7iuory.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the list l\
    \ contains any number that is evenly divisible by 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0znijiz8.jl:13\nin expression starting at\
    \ /tmp/tmp0znijiz8.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the list l\
    \ contains any number that is divisible by 3.\nusing Test\n\n@testset begin\n\n\
    candidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiw5a8k0y.jl:13\nin expression starting at\
    \ /tmp/tmpiw5a8k0y.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmwz_z31n.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmwz_z31n.jl:1\n\
    in expression starting at /tmp/tmpmwz_z31n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector l and a threshold\
    \ t, and returns a vector containing only those elements that are above threshold\
    \ t.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_pxe62f7.jl:14\nin expression starting at\
    \ /tmp/tmp_pxe62f7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if all numbers\
    \ in the list l are above threshold t.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7p5ihpg.jl:13\nin expression starting at\
    \ /tmp/tmpd7p5ihpg.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiu5aqnoj.jl:14\nin expression starting at\
    \ /tmp/tmpiu5aqnoj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplyo424hq.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplyo424hq.jl:1\n\
    in expression starting at /tmp/tmplyo424hq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns true if the list l contains any number that is divisible by 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgiumylby.jl:15\nin expression starting at\
    \ /tmp/tmpgiumylby.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3wtnnlya.jl:20\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3wtnnlya.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wtnnlya.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3wtnnlya.jl:22\n  Expression: candidate([1, 20, 4, 10], 21)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3wtnnlya.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wtnnlya.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3wtnnlya.jl:23\n  Expression: candidate([1, 20, 4, 10], 22)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3wtnnlya.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wtnnlya.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3wtnnlya.jl:24\n  Expression: candidate([1, 8, 4, 10], 11)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3wtnnlya.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3wtnnlya.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3wtnnlya.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a list that are less than a certain threshold. For example, if the list is\
    \ [1, 2, 3, 4, 5] and threshold is 3, then the function should return 2.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3f6rq2ib.jl:14\nin expression starting at\
    \ /tmp/tmp3f6rq2ib.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wwv3xt7.jl:15\nin expression starting at\
    \ /tmp/tmp8wwv3xt7.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    t < sum(l) < t \nend\nusing Test\n\n@testset begin\n\n\
    candidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgr5l6jnb.jl:15\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgr5l6jnb.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr5l6jnb.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpgr5l6jnb.jl:17\n  Expression: candidate([1, 20, 4, 10], 21)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgr5l6jnb.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr5l6jnb.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpgr5l6jnb.jl:18\n  Expression: candidate([1, 20, 4, 10], 22)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgr5l6jnb.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr5l6jnb.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpgr5l6jnb.jl:19\n  Expression: candidate([1, 8, 4, 10], 11)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgr5l6jnb.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgr5l6jnb.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgr5l6jnb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are below threshold t.\nWrite a function that\
    \ returns True if all numbers in the list l are above threshold t.\nWrite a function\
    \ that returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+1.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+1.\nWrite a function that returns True if all \nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoojufy1a.jl:13\nin expression starting at\
    \ /tmp/tmpoojufy1a.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if the list l has at least two elements and all elements are equal,\
    \ false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcppd4_uz.jl:17\nin expression starting at\
    \ /tmp/tmpcppd4_uz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzytdbk8d.jl:13\nin expression starting at\
    \ /tmp/tmpzytdbk8d.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    t < sum(l)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times the value v appears in the list l.\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppciog4o5.jl:10\nin expression starting at\
    \ /tmp/tmppciog4o5.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpwkwr41jn.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwkwr41jn.jl:1\n\
    in expression starting at /tmp/tmpwkwr41jn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2dkcv0m.jl:10\nin expression starting at\
    \ /tmp/tmpd2dkcv0m.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns True if all numbers in the list l are above\
    \ threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>>\
    \ above_threshold([1, 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8q8yav2f.jl:16\nin expression starting at\
    \ /tmp/tmp8q8yav2f.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcxqor9a3.jl:10\nin expression starting at\
    \ /tmp/tmpcxqor9a3.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the list l\
    \ has at least two elements and all elements are positive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjo0fvs9.jl:13\nin expression starting at\
    \ /tmp/tmpfjo0fvs9.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl99rgein.jl:15\nin expression starting at\
    \ /tmp/tmpl99rgein.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.4>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<code language=julia-1.4>\nbelow_threshold([1, 20,\
    \ 4, 10], 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns true\
    \ if all numbers in the list l are greater than threshold t.\nWrite a function\
    \ that returns true if all numbers in the list l are greater than or equal to\
    \ threshold t.\nWrite a function that returns true if all numbers in the list\
    \ l are less than threshold t.\nWrite a function that returns true if all numbers\
    \ in the list l are less than or equal to threshold t.\nWrite a function that\
    \ returns true if all numbers in the list l are equal to threshold t.\nWrite a\
    \ function that returns true if all numbers in the list l are less than threshold\
    \ t, and all numbers in the list l are greater than or equal to threshold t.\n\
    Write a function that returns true if all numbers in the list l are greater than\
    \ threshold t, and all numbers in the list l are less than or equal to threshold\
    \ t.\nWrite a function that returns true if all numbers in the list l are equal\
    \ to threshold t, and all numbers in the list l are greater than or equal to threshold\
    \ t.\nWrite a function that returns true if all numbers in the list l are less\
    \ than threshold t, and all numbers in the list l are less than or equal to threshold\
    \ t.\nWrite a function that returns true if all numbers in the list l are greater\
    \ than threshold t, and all numbers in the list l are equal to threshold t.\n\
    Write a function that returns true if all numbers in the list l are equal to threshold\
    \ t, and all numbers in the list l are less than or equal to threshold t.\nWrite\
    \ a function that returns true if all numbers in the list l are less than threshold\
    \ t, and all numbers in the list l are greater than or equal to threshold t.\n\
    Write a function that returns true if all numbers in the list l are greater than\
    \ threshold t, and all numbers in the list l are equal to threshold t.\nWrite\
    \ a function that returns true if all numbers in the list l are equal to threshold\
    \ t, and all numbers in the list l are greater than or equal to threshold t.\n\
    Write a function that returns true if all numbers in the list l are less than\
    \ threshold t, and all numbers in the list l are less than or equal to threshold\
    \ t.\nWrite a function that returns true if all numbers in the list l are greater\
    \ than threshold t, and all numbers in the list l are equal to threshold t.\n\
    Write a function that returns true if all numbers in the list l are equal to threshold\
    \ t, and all numbers in the list l are less than or equal to threshold t.\nWrite\
    \ a function that returns true if all numbers in the list l are less than threshold\
    \ t, and all numbers in the list l are greater than or equal to threshold t.\n\
    Write a function that returns true if all numbers in the list l are greater than\
    \ threshold t, and all numbers in the list l are \nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01zpz_kn.jl:13\nin expression starting at\
    \ /tmp/tmp01zpz_kn.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are greater than threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ek7m_3u.jl:14\nin expression starting at\
    \ /tmp/tmp3ek7m_3u.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjw3r3n39.jl:13\nin expression starting at\
    \ /tmp/tmpjw3r3n39.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n>>> above_threshold([1,\
    \ 2, 4, 10], 100)\nFalse\n>>> above_threshold([1, 20, 4, 10], 5)\nTrue\n\"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzqz4py3f.jl:10\nin expression starting at\
    \ /tmp/tmpzqz4py3f.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpy4gqq7ut.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4gqq7ut.jl:1\n\
    in expression starting at /tmp/tmpy4gqq7ut.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpir7yawy0.jl:16\nin expression starting at\
    \ /tmp/tmpir7yawy0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5q0n_6j3.jl:15\nin expression starting at\
    \ /tmp/tmp5q0n_6j3.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n    end\n    return\
    \ below_threshold\nend\n</cell>\n<code language=julia-1.5>\n@test below_threshold([1,\
    \ 2, 4, 10], 100)\n@test below_threshold([1, 20, 4, 10], 5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a list that\
    \ are less than a specified value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplte4e8vu.jl:16\nin expression starting at\
    \ /tmp/tmplte4e8vu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return\
    \ True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbyt11iw.jl:14\nin expression starting at\
    \ /tmp/tmpzbyt11iw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise: Write a function that returns\
    \ True if all numbers in the list l are above threshold t.\nHint: Use a for loop.\n\
    using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vf4zgco.jl:13\nin expression starting at\
    \ /tmp/tmp2vf4zgco.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a list that are less than a specified value.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfqvwjk6_.jl:13\nin expression starting at\
    \ /tmp/tmpfqvwjk6_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if all numbers\
    \ in the list l are above threshold t.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazry1tu3.jl:13\nin expression starting at\
    \ /tmp/tmpazry1tu3.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvmb3r4cm.jl:21\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvmb3r4cm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvmb3r4cm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvmb3r4cm.jl:23\n  Expression: candidate([1, 20, 4, 10], 21)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvmb3r4cm.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvmb3r4cm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvmb3r4cm.jl:24\n  Expression: candidate([1, 20, 4, 10], 22)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvmb3r4cm.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvmb3r4cm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvmb3r4cm.jl:25\n  Expression: candidate([1, 8, 4, 10], 11)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvmb3r4cm.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvmb3r4cm.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvmb3r4cm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4se__l8.jl:15\nin expression starting at\
    \ /tmp/tmpi4se__l8.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if all numbers\
    \ in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10],\
    \ 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpszbe93ru.jl:14\nin expression starting at\
    \ /tmp/tmpszbe93ru.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10],\
    \ 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1lcmpky_.jl:13\nin expression starting at\
    \ /tmp/tmp1lcmpky_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l \n        if n < t \n            return False\
    \ \n    end \n    return True \nend \n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if all numbers in the list l are greater than threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1fr5bpl3.jl:14\nin expression starting at\
    \ /tmp/tmp1fr5bpl3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpi6mqnava.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6mqnava.jl:1\n\
    in expression starting at /tmp/tmpi6mqnava.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks whether a number is\
    \ even or odd.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9wgh_ab.jl:13\nin expression starting at\
    \ /tmp/tmpa9wgh_ab.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsye6nceo.jl:23\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsye6nceo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsye6nceo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsye6nceo.jl:27\n  Expression: candidate([1, 8, 4, 10], 10)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsye6nceo.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsye6nceo.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsye6nceo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of elements in a list that are less than a given threshold.\n\
    using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9s5p1ax6.jl:14\nin expression starting at\
    \ /tmp/tmp9s5p1ax6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpu6xqzymh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu6xqzymh.jl:1\n\
    in expression starting at /tmp/tmpu6xqzymh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpncvc_ag6.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpncvc_ag6.jl:1\n\
    in expression starting at /tmp/tmpncvc_ag6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9g409r7.jl:10\nin expression starting at\
    \ /tmp/tmpn9g409r7.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bh6zcsz.jl:14\nin expression starting at\
    \ /tmp/tmp0bh6zcsz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l = sort(l)\n    l = l[l .< t]\n    length(l) == 0 ||\
    \ length(l) == 1 || length(l) == length(l)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfupm_536.jl:12\nin expression starting at\
    \ /tmp/tmpfupm_536.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpze9hkv4u.jl:10\nin expression starting at\
    \ /tmp/tmpze9hkv4u.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l = sort(l)\n    l = l[l .< t]\n    return length(l) ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo68vgtm7.jl:17\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo68vgtm7.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo68vgtm7.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpo68vgtm7.jl:19\n  Expression: candidate([1, 20, 4, 10], 21)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo68vgtm7.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo68vgtm7.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpo68vgtm7.jl:20\n  Expression: candidate([1, 20, 4, 10], 22)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo68vgtm7.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo68vgtm7.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpo68vgtm7.jl:21\n  Expression: candidate([1, 8, 4, 10], 11)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpo68vgtm7.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo68vgtm7.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo68vgtm7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpb5ccc1g7.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb5ccc1g7.jl:1\n\
    in expression starting at /tmp/tmpb5ccc1g7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the list l\
    \ contains any numbers that are divisible by 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8pyt0al5.jl:13\nin expression starting at\
    \ /tmp/tmp8pyt0al5.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_bpd8xn.jl:13\nin expression starting at\
    \ /tmp/tmp5_bpd8xn.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    l = sort(l)\n    \n    for x in l\n        if x\
    \ < t\n            return false\n        end\n    end\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1, 2, 4, 10],\
    \ 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns True if all numbers in the list\
    \ l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n\
    \    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthk_q5mp.jl:19\nin expression starting at\
    \ /tmp/tmpthk_q5mp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpd4hwxgfo.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd4hwxgfo.jl:1\n\
    in expression starting at /tmp/tmpd4hwxgfo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ooqv8ko.jl:13\nin expression starting at\
    \ /tmp/tmp6ooqv8ko.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp6b9bg9wg.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6b9bg9wg.jl:1\n\
    in expression starting at /tmp/tmp6b9bg9wg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmixuhohh.jl:15\nin expression starting at\
    \ /tmp/tmpmixuhohh.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp5_jljcul.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5_jljcul.jl:1\n\
    in expression starting at /tmp/tmp5_jljcul.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp2l_8ij3u.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2l_8ij3u.jl:1\n\
    in expression starting at /tmp/tmp2l_8ij3u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps6enn89g.jl:23\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6enn89g.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6enn89g.jl:21\ntest set: Test\
    \ Failed at /tmp/tmps6enn89g.jl:27\n  Expression: candidate([1, 8, 4, 10], 10)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps6enn89g.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps6enn89g.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps6enn89g.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if all numbers\
    \ in the list l are below threshold t or if all numbers in the list l are equal\
    \ to threshold t.\nHint: Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpku0kr8gk.jl:13\nin expression starting at\
    \ /tmp/tmpku0kr8gk.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l = sort(l)\n    l = l[l .< t]\n    length(l)==0\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the number of elements\
    \ in a list that are greater than a given threshold.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpopp2vmfs.jl:12\nin expression starting at\
    \ /tmp/tmpopp2vmfs.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns True if all numbers\
    \ in the list l are below threshold t or if all numbers in the list l are equal\
    \ to threshold t.\nHint: Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm6plynt5.jl:14\nin expression starting at\
    \ /tmp/tmpm6plynt5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns True if all numbers in the list l are above\
    \ threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>>\
    \ above_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf9_bi54y.jl:16\nin expression starting at\
    \ /tmp/tmpf9_bi54y.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp6gak75jy.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6gak75jy.jl:1\n\
    in expression starting at /tmp/tmp6gak75jy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmprjtxr2_0.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprjtxr2_0.jl:1\n\
    in expression starting at /tmp/tmprjtxr2_0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmph89rfjwp.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph89rfjwp.jl:1\n\
    in expression starting at /tmp/tmph89rfjwp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return True\
    \ if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9g605l9_.jl:13\nin expression starting at\
    \ /tmp/tmp9g605l9_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnp9eyqap.jl:10\nin expression starting at\
    \ /tmp/tmpnp9eyqap.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp3ydvnar3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ydvnar3.jl:1\n\
    in expression starting at /tmp/tmp3ydvnar3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpsw3uhnpd.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsw3uhnpd.jl:1\n\
    in expression starting at /tmp/tmpsw3uhnpd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprhgkqzrq.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprhgkqzrq.jl:1\n\
    in expression starting at /tmp/tmprhgkqzrq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l == sort(l)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    False\n    >>> above_threshold([1, 20, 4, 10], 5)\n   \
    \ True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dkodi4w.jl:10\nin expression starting at\
    \ /tmp/tmp6dkodi4w.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp1zq8idjn.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1zq8idjn.jl:1\n\
    in expression starting at /tmp/tmp1zq8idjn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the list l\
    \ contains any numbers that are not in the list l2.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpac979jat.jl:14\nin expression starting at\
    \ /tmp/tmpac979jat.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa_4sdib2.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa_4sdib2.jl:1\n\
    in expression starting at /tmp/tmpa_4sdib2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function is_prime(number::Int64) which returns\
    \ true if the given number is a prime number. Hint: use the sieve of Eratosthenes\
    \ or the Sieve of Atkin.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe18ercv2.jl:13\nin expression starting at\
    \ /tmp/tmpe18ercv2.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \n</cell>\n<code language=julia-1.3>\n\"\"\"Return True\
    \ if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkkzm7y82.jl:13\nin expression starting at\
    \ /tmp/tmpkkzm7y82.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<code language=julia-1.4>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\nHint: use the function\
    \ below_threshold.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehrs9a7x.jl:10\nin expression starting at\
    \ /tmp/tmpehrs9a7x.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for i in l\n        if i < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @test below_threshold([1, 2, 4, 10], 100)\n@test below_threshold([1, 20, 4, 10],\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns True if all numbers\
    \ in the list l are above threshold t.\n>>> above_threshold([1, 2, 4, 10], 100)\n\
    True\n>>> above_threshold([1, 20, 4, 10], 5)\nFalse\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5dqqb_r.jl:15\nin expression starting at\
    \ /tmp/tmpp5dqqb_r.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjc6a9oy5.jl:15\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 10], 100) == true\n  MethodError: no method\
    \ matching isless(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    isless(::AbstractVector,\
    \ !Matched::AbstractVector) at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2550\n\
    \    isless(!Matched::AbstractFloat, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\n\
    \    isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Vector{Int64}, y::Int64)\n     @ Base ./operators.jl:352\n\
    \   [2] <=(x::Vector{Int64}, y::Int64)\n     @ Base ./operators.jl:401\n   [3]\
    \ below_threshold(l::Vector{Int64}, t::Int64)\n     @ Main /tmp/tmpjc6a9oy5.jl:8\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpjc6a9oy5.jl:15 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpjc6a9oy5.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpjc6a9oy5.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([1, 20, 4, 10], 5) == false\n  MethodError: no method matching isless(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    isless(::AbstractVector, !Matched::AbstractVector)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:2550\n    isless(!Matched::AbstractFloat,\
    \ ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\n \
    \   isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Vector{Int64}, y::Int64)\n     @ Base ./operators.jl:352\n\
    \   [2] <=(x::Vector{Int64}, y::Int64)\n     @ Base ./operators.jl:401\n   [3]\
    \ below_threshold(l::Vector{Int64}, t::Int64)\n     @ Main /tmp/tmpjc6a9oy5.jl:8\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjc6a9oy5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1kz7r_k.jl:13\nin expression starting at\
    \ /tmp/tmpq1kz7r_k.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcc4vozc3.jl:13\nin expression starting at\
    \ /tmp/tmpcc4vozc3.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ji2bb_3.jl:23\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ji2bb_3.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ji2bb_3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9ji2bb_3.jl:27\n  Expression: candidate([1, 8, 4, 10], 10)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ji2bb_3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ji2bb_3.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ji2bb_3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vw7azpq.jl:14\nin expression starting at\
    \ /tmp/tmp5vw7azpq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp_im7kgit.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_im7kgit.jl:1\n\
    in expression starting at /tmp/tmp_im7kgit.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppr43579d.jl:15\nin expression starting at\
    \ /tmp/tmppr43579d.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgaaxm4on.jl:13\nin expression starting at\
    \ /tmp/tmpgaaxm4on.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp900pmtas.jl:13\nin expression starting at\
    \ /tmp/tmp900pmtas.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    end \n    return true \nend \n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiexz6ygd.jl:14\nin expression starting at\
    \ /tmp/tmpiexz6ygd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmprsk7evdr.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprsk7evdr.jl:1\n\
    in expression starting at /tmp/tmprsk7evdr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"Return True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptd1m0e4c.jl:17\nin expression starting at\
    \ /tmp/tmptd1m0e4c.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp5cr74s6y.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5cr74s6y.jl:1\n\
    in expression starting at /tmp/tmp5cr74s6y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb8e8m_o4.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb8e8m_o4.jl:1\n\
    in expression starting at /tmp/tmpb8e8m_o4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return True if\
    \ all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0cpwwdf.jl:13\nin expression starting at\
    \ /tmp/tmpc0cpwwdf.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    t < length(l)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0jjtn26i.jl:10\nin expression starting at\
    \ /tmp/tmp0jjtn26i.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of elements in a list that are less than a given threshold.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgpt1azf.jl:13\nin expression starting at\
    \ /tmp/tmpqgpt1azf.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpk4ked5fg.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk4ked5fg.jl:1\n\
    in expression starting at /tmp/tmpk4ked5fg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1, 20,\
    \ 4, 10], 5)\n</cell>\n<text>\nExercise: Write a function that returns True if\
    \ all numbers in the list l are below threshold t.\nHint: Use below_threshold.\n\
    using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiorh353x.jl:13\nin expression starting at\
    \ /tmp/tmpiorh353x.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5eo793r0.jl:14\nin expression starting at\
    \ /tmp/tmp5eo793r0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    t < l[1]\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n    >>>\
    \ above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20,\
    \ 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xv3fk2e.jl:10\nin expression starting at\
    \ /tmp/tmp_xv3fk2e.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpee2_3j8e.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpee2_3j8e.jl:1\n\
    in expression starting at /tmp/tmpee2_3j8e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l == t || l == -t || l == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1,\
    \ 20, 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if all numbers in the list l are above threshold t.\nHint: Use\
    \ below_threshold.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1dzs6yuo.jl:10\nin expression starting at\
    \ /tmp/tmp1dzs6yuo.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in a list that are less\
    \ than a given threshold.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpseshg30z.jl:16\nin expression starting at\
    \ /tmp/tmpseshg30z.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if all numbers in the list l are above threshold t.\n>>> above_threshold([1,\
    \ 2, 4, 10], 100)\nFalse\n>>> above_threshold([1, 20, 4, 10], 5)\nTrue\n\"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcoe01_t2.jl:14\nin expression starting at\
    \ /tmp/tmpcoe01_t2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = l .< t\n    return below_threshold\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that returns True if all numbers\
    \ in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10],\
    \ 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vdr6hhi.jl:11\nin expression starting at\
    \ /tmp/tmp8vdr6hhi.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns True if all numbers in the list l are above\
    \ threshold t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    False\n    >>>\
    \ above_threshold([1, 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ijlidbc.jl:16\nin expression starting at\
    \ /tmp/tmp7ijlidbc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    t < length(l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbht5e5w1.jl:15\n  Expression: candidate([1,\
    \ 2, 4, 10], 100) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbht5e5w1.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbht5e5w1.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpbht5e5w1.jl:17\n  Expression: candidate([1, 20, 4, 10], 21)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbht5e5w1.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbht5e5w1.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpbht5e5w1.jl:18\n  Expression: candidate([1, 20, 4, 10], 22)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbht5e5w1.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbht5e5w1.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpbht5e5w1.jl:19\n  Expression: candidate([1, 8, 4, 10], 11)\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbht5e5w1.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbht5e5w1.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbht5e5w1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\n    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    True\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpez7ea8a5.jl:15\nin expression starting at\
    \ /tmp/tmpez7ea8a5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l <= t\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ below_threshold([1, 2, 4, 10], 100) == true\n@assert below_threshold([1, 20,\
    \ 4, 10], 5) == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_vq8cgz5.jl:10\nin expression starting at\
    \ /tmp/tmp_vq8cgz5.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp7uajsok9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uajsok9.jl:1\n\
    in expression starting at /tmp/tmp7uajsok9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    end \n    return true \nend \n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1, 20,\
    \ 4, 10], 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns True\
    \ if all numbers in the list l are above threshold t.\n>>> below_threshold([1,\
    \ 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], 10)\nFalse\n>>> below_threshold([1, 20, 4, 10], 0)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], -10)\nFalse\n>>> below_threshold([1, 20, 4, 10], -5)\nFalse\n>>>\
    \ below_threshold([1, 20, 4, 10], -100)\nFalse\n>>> below_threshold([1, 20, 4,\
    \ 10], -1000)\nFalse\n>>> below_threshold([1, 20, 4, 10], -10000)\nFalse\n>>>\
    \ below_threshold([1, 20, 4, 10], -100000)\nFalse\n>>> below_threshold([1, 20,\
    \ 4, 10], -1000000)\nFalse\n>>> below_threshold([1, 20, 4, 10], -10000000)\nFalse\n\
    >>> below_threshold([1, 20, 4, 10], -100000010)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], -100000020)\nFalse\n>>> below_threshold([1, 20, 4, 10], -100000030)\n\
    False\n>>> below_threshold([1, 20, 4, 10], -100000040)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], -100000050)\nFalse\n>>> below_threshold([1, 20, 4, 10], -100000060)\n\
    False\n>>> below_threshold([1, 20, 4, 10], -100000070)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], -100000080)\nFalse\n>>> below_threshold([1, 20, 4, 10], -100000090)\n\
    False\n>>> below_threshold([1, 20, 4, 10], -1000000100)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], -1000000110)\nFalse\n>>> below_threshold([1, 20, 4, 10], -1000000120)\n\
    False\n>>> below_threshold([1, 20, 4, 10], -1000000130)\nFalse\n>>> below_threshold([1,\
    \ 20, 4, 10], -1000000140)\nFalse\n>>> below_threshold([1, 20, 4, 10], -1000000150)\n\
    False\n>>> be\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzp2oro0i.jl:14\nin expression starting at\
    \ /tmp/tmpzp2oro0i.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpce_8xs50.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpce_8xs50.jl:1\n\
    in expression starting at /tmp/tmpce_8xs50.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\n</cell>\n<code language=julia-1.5>\n\
    below_threshold([1, 2, 4, 10], 100)\n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 20, 4, 10], 5)\n</cell>\n<text>\nExercise 4\nWrite a function that returns True\
    \ if all numbers in the list l are below threshold t, and False otherwise.\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdsnldop.jl:17\nin expression starting at\
    \ /tmp/tmpcdsnldop.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for n in l\n        if n\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_xmtfxps.jl:23\n  Expression: candidate([1,\
    \ 20, 4, 10], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xmtfxps.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xmtfxps.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_xmtfxps.jl:27\n  Expression: candidate([1, 8, 4, 10], 10)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_xmtfxps.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_xmtfxps.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_xmtfxps.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprtfacsi2.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprtfacsi2.jl:1\n\
    in expression starting at /tmp/tmprtfacsi2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ returns True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpns_ecgd8.jl:14\nin expression starting at\
    \ /tmp/tmpns_ecgd8.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l .< t \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are greater than threshold t.\n\
    \    >>> above_threshold([1, 2, 4, 10], 100)\n    True\n    >>> above_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwehd0pgo.jl:10\nin expression starting at\
    \ /tmp/tmpwehd0pgo.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100)\
    \ == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2gsemyq7.jl:13\nin expression starting at\
    \ /tmp/tmp2gsemyq7.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    end \n    return true \nend \n</cell>\n<code language=julia-1.5>\nbelow_threshold([1,\
    \ 2, 4, 10], 100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in a list that are less than a given threshold.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdprsq_v3.jl:14\nin expression starting at\
    \ /tmp/tmpdprsq_v3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp04awyjl6.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp04awyjl6.jl:1\n\
    in expression starting at /tmp/tmp04awyjl6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    l = sort(l)\n    \n    for x in l\n        if x\
    \ < t\n            return false\n        end\n    end\n    \n    return true\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns True if all numbers\
    \ in the list l are greater than threshold t.\n>>> below_threshold([1, 2, 4, 10],\
    \ 100)\nFalse\n>>> below_threshold([1, 20, 4, 10], 5)\nTrue\n</text>\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxlhgmck.jl:19\nin expression starting at\
    \ /tmp/tmplxlhgmck.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmptsiiw1yj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptsiiw1yj.jl:1\n\
    in expression starting at /tmp/tmptsiiw1yj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ each element appears in the list l.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5i2byix.jl:13\nin expression starting at\
    \ /tmp/tmpt5i2byix.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    for x in l\n        if x < t\n            return\
    \ false\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if all numbers in the list l are below threshold t.\nWrite\
    \ a function that returns True if all numbers in the list l are above threshold\
    \ t.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+1.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+2.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+3.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+4.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+5.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+6.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+7.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+8.\nWrite a function that\
    \ returns True if all numbers in the list l are between threshold t and threshold\
    \ t+9.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+10.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+11.\nWrite a function\
    \ that returns True if all numbers in the list l are between threshold t and threshold\
    \ t+12.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+13.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+14.\nWrite a function\
    \ that returns True if all numbers in the list l are between threshold t and threshold\
    \ t+15.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+16.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+17.\nWrite a function\
    \ that returns True if all numbers in the list l are between threshold t and threshold\
    \ t+18.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+19.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+20.\nWrite a function\
    \ that returns True if all numbers in the list l are between threshold t and threshold\
    \ t+21.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+22.\nWrite a function that returns True if all numbers\
    \ in the list l are between threshold t and threshold t+23.\nWrite a function\
    \ that returns True if all numbers in the list l are between threshold t and threshold\
    \ t+24.\nWrite a function that returns True if all numbers in the list l are between\
    \ threshold t and threshold t+25.\nWrite a \nusing Test\n\n@testset begin\n\n\
    candidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8r5zcnu.jl:15\nin expression starting at\
    \ /tmp/tmps8r5zcnu.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @test below_threshold([1, 2, 4, 10], 100)\n@test below_threshold([1, 20, 4, 10],\
    \ 5)\n</cell>\n<text>\nExercise: Write a function that returns True if all numbers\
    \ in the list l are above threshold t.\nHint: Use below_threshold.\nusing Test\n\
    \n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4,\
    \ 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1,\
    \ 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmbjx5mn.jl:15\nin expression starting at\
    \ /tmp/tmptmbjx5mn.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmptmr78_eh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptmr78_eh.jl:1\n\
    in expression starting at /tmp/tmptmr78_eh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpx2u6vv_a.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx2u6vv_a.jl:1\n\
    in expression starting at /tmp/tmpx2u6vv_a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return\
    \ True if all numbers in the list l are above threshold t.\n    >>> above_threshold([1,\
    \ 2, 4, 10], 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    False\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t\
    @test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpovjfbg4y.jl:14\nin expression starting at\
    \ /tmp/tmpovjfbg4y.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    l = sort(l)\n    \n    if length(l) < 2\n      \
    \  return true\n    end\n    \n    if l[1] < t\n        return false\n    end\n\
    \    \n    if l[end] < t\n        return true\n    end\n    \n    if l[1] > t\n\
    \        return false\n    end\n    \n    if l[end] > t\n        return true\n\
    \    end\n    \n    if l[1] < t && l[end] < t\n        return false\n    end\n\
    \    \n    if l[1] > t && l[end] > t\n        return false\n    end\n    \n  \
    \  if l[1] < t && l[end] > t\n        return true\n    end\n    \n    if l[1]\
    \ > t && l[end] < t\n        return true\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdczz25c0.jl:49\nin expression starting at\
    \ /tmp/tmpdczz25c0.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpzes17y_t.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzes17y_t.jl:1\n\
    in expression starting at /tmp/tmpzes17y_t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpzw6sqt3k.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzw6sqt3k.jl:1\n\
    in expression starting at /tmp/tmpzw6sqt3k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l \n        if x < t \n            return false\
    \ \n    end \n    return true \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd2x8dezc.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd2x8dezc.jl:1\n\
    in expression starting at /tmp/tmpd2x8dezc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    below_threshold = false\n    for x in l\n        if x\
    \ < t\n            below_threshold = true\n            break\n        end\n  \
    \  end\n    return below_threshold\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that returns True if all numbers in the list l are equal to threshold\
    \ t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nlimiht.jl:17\nin expression starting at\
    \ /tmp/tmp3nlimiht.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    \n    l = sort(l)\n    \n    for n in l\n        if n\
    \ <= t\n            return false\n        end\n    end\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@test below_threshold([1, 2, 4, 10],\
    \ 100)\n</cell>\n<code language=julia-1.5>\n@test below_threshold([1, 20, 4, 10],\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns True if all numbers\
    \ in the list l are above threshold t.\n    >>> above_threshold([1, 2, 4, 10],\
    \ 100)\n    True\n    >>> above_threshold([1, 20, 4, 10], 5)\n    True\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70b_g501.jl:19\nin expression starting at\
    \ /tmp/tmp70b_g501.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for n in l\n        if n < t\n            return false\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpc9ait9_y.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc9ait9_y.jl:1\n\
    in expression starting at /tmp/tmpc9ait9_y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the list l\
    \ contains at least one number that is greater than or equal to threshold t.\n\
    using Test\n\n@testset begin\n\ncandidate = below_threshold;\n\t@test(candidate([1,\
    \ 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10], 5) == false)\n\t\
    @test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqtc4mv_3.jl:14\nin expression starting at\
    \ /tmp/tmpqtc4mv_3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1,\
    \ 2, 4, 10], 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that are less than a given threshold t.\nusing Test\n\n@testset begin\n\
    \ncandidate = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\
    \t@test(candidate([1, 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10],\
    \ 21) == true)\n\t@test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1,\
    \ 8, 4, 10], 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpam53214y.jl:13\nin expression starting at\
    \ /tmp/tmpam53214y.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    for x in l\n        if x < t\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = below_threshold;\n\
    \t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1, 20, 4, 10],\
    \ 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10], 11) == true)\n\t\
    @test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoj6_2qx2.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoj6_2qx2.jl:1\n\
    in expression starting at /tmp/tmpoj6_2qx2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return True if all numbers in the list l are below threshold t.\n\
    \    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1,\
    \ 20, 4, 10], 5)\n    False\n    \"\"\"\nfunction below_threshold(l::Vector{Int64},\
    \ t::Int64)::Bool \n    l = sort(l)\n    return all(l[i] <= t for i in 1:length(l)-1)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert below_threshold([1, 2, 4, 10],\
    \ 100) == true\n@assert below_threshold([1, 20, 4, 10], 5) == false\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the list l contains\
    \ any number that is divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = below_threshold;\n\t@test(candidate([1, 2, 4, 10], 100) == true)\n\t@test(candidate([1,\
    \ 20, 4, 10], 5) == false)\n\t@test(candidate([1, 20, 4, 10], 21) == true)\n\t\
    @test(candidate([1, 20, 4, 10], 22) == true)\n\t@test(candidate([1, 8, 4, 10],\
    \ 11) == true)\n\t@test(candidate([1, 8, 4, 10], 10) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps0azd7yj.jl:11\nin expression starting at\
    \ /tmp/tmps0azd7yj.jl:11\n"
  exit_code: 1
  status: SyntaxError
