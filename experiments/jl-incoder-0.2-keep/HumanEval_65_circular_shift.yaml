name: HumanEval_65_circular_shift
language: julia
prompt: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
  \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12,\
  \ 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64, shift::Int64)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
  \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
  \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) ==\
  \ \"11\")\nend\n"
completions: ["    if shift > length(x)\n        return reverse(x)\n    else\n   \
    \     return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        return reverse(x)\n    else if shift < 0\n      \
    \  return reverse(reverse(x))\n    else\n        return reverse(reverse(x)[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits() is defined in the\
    \ file digits.py:", "    if shift > length(x) || shift < 0\n        error(\"shift\
    \ must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n \
    \       digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        digits = digits[0..(length(digits)-1)]\n\
    \        return join(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer, rounded up to\
    \ the nearest integer.\nWrite a function that returns the number of digits in\
    \ an integer, rounded down to the nearest integer.\nWrite a function that returns\
    \ the number of digits in an integer, rounded up to the nearest integer, and rounded\
    \ down to the nearest integer.\nWrite a function that returns the number of digits\
    \ in an integer, rounded up to the nearest integer, and rounded down to the nearest\
    \ integer.\nWrite a function that returns the number of digits in an integer,\
    \ rounded up to the nearest integer, and rounded down to the nearest integer,\
    \ and rounded up to the nearest integer.\nWrite a function that returns the number\
    \ of digits in an integer, rounded up to the nearest integer, and rounded down\
    \ to the nearest integer, and rounded up to the nearest integer, and rounded down\
    \ to the nearest integer.\nWrite a function that returns the number of digits\
    \ in an integer, rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer.\nWrite a function that returns\
    \ the number of digits in an integer, rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer, and rounded\
    \ down to the nearest integer.\nWrite a function that returns the number of digits\
    \ in an integer, rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer.\nWrite a function that returns\
    \ the number of digits in an integer, rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer.\nWrite a\
    \ function that returns the number of digits in an integer, rounded up to the\
    \ nearest integer, and rounded down to the nearest integer, and rounded up to\
    \ the nearest integer, and rounded down to the nearest integer, and rounded up\
    \ to the nearest integer, and rounded down to the nearest integer, and rounded\
    \ up to the nearest integer.\nWrite a function that returns the number of digits\
    \ in an integer, rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer.\nWrite a function that returns\
    \ the number of digits in an integer, rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest ", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123, 2)\n</cell>\n\
    <text>\nExercise: Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n    and return the result as a string.\n    If shift > number\
    \ of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\
    \n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = digits(x)\n    digits\
    \ = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code language=julia-1.3>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    digits = reverse(digits)\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.4>", "    if shift >\
    \ length(x) || shift < 0\n        error(\"shift must be between 0 and length(x)\"\
    )\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    if shift > length(x)\
    \ || shift < 0\n        error(\"shift must be in range 0 to length(x)\")\n   \
    \ else\n        digits = digits(x)\n        digits[shift] = digits[shift] % 10\n\
    \        digits = digits[0..(length(digits)-shift-1)]\n        return join(digits,\
    \ \"\")\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n@assert\
    \ circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer. Test it on $10$ and $12$.", "  \
    \  if shift > length(x) || shift < 0\n        error(\"shift must be in range 0\
    \ to length(x)\")\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 2)\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of digits in an integer.\
    \ Test it on integers from 0 to 20.", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.4>", "    if shift >\
    \ length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 2)\n</cell>\n<text>\nExercise: Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"\
    12\"\n    \"\"\"", "    if shift > length(x)\n        digits = reverse(x)\n  \
    \  else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    digits = reverse(digits)\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>", "    if shift >\
    \ length(x)\n        return reverse(x)\n    else if shift < 0\n        return\
    \ reverse(circular_shift(reverse(x), -shift))\n    else\n        return x[shift:length(x)+shift]\n\
    end\n</cell>\n<code language=julia-1.3>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    end\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.4>", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  digits = join(digits)\n        return digits\nend\n</cell>\n<code language=julia-1.3>",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be in range 0\
    \ to length(x)\")\n    elseif shift < length(x)\n        return reverse(x)\n \
    \   else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = digits(x)\n    digits\
    \ = digits[-shift:-1]\n    return join(digits)\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x) || shift <\
    \ 0\n        error(\"shift must be in range 0 to length(x)\")\n    else\n    \
    \    digits = digits(x)\n        digits = digits[shift:end]\n        digits =\
    \ reverse(digits)\n        return join(digits)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer. Test it\
    \ on all integers between 0 and 10 to see that it works.", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x) || shift < 0\n        error(\"shift must be in range 0 to length(x)\"\
    )\n    elseif shift == 0\n        return toString(x)\n    else\n        digits\
    \ = toString(x)\n        digits = digits[-shift:end]\n        digits = digits[::-1]\n\
    \        return digits\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    end\n    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise: Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(123456789, 2)\n    \"987654321\"\
    \n    >>> circular_shift(123456789, 3)\n    \"987654321\"\n    \"\"\"", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n@assert circular_shift(12,\
    \ 2) == 12\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.", "    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(digits)] =\
    \ digits[length(digits)] % 10\n        digits = reverse(digits)\n        return\
    \ join(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        digits = reverse(digits(x))\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits, \"\")\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n\
    @assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer. For example, length(123) should\
    \ return 3.", "    if shift > length(x)\n        return reverse(x)\n    else if\
    \ shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n    else\n\
    \        return reverse(circular_shift(reverse(x), shift))\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        return join(digits, \"\")\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer. Test it on all\
    \ integers from 0 to 20.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(digits, digits[shift:end])\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\n    >>> count_words(\"the quick brown fox jumps over the lazy dog\"\
    )\n    8\n    >>> count_words(\"the quick brown fox jumps over the lazy dog.\"\
    )\n    8\n    >>> count_words(\"the quick brown fox jumps over the lazy dog. \
    \ \")\n    8\n    >>> count_words(\"the quick brown fox jumps over the lazy dog.\
    \  \", 2)\n    7\n    >>> count_words(\"the quick brown fox jumps over the lazy\
    \ dog.  \", 3)\n    6\n    >>> count_words(\"the quick brown fox jumps over the\
    \ lazy dog.  \", 4)\n    5\n    >>> count_words(\"the quick brown fox jumps over\
    \ the lazy dog.  \", 5)\n    4\n    >>> count_words(\"the quick brown fox jumps\
    \ over the lazy dog.  \", 6)\n    3\n    >>> count_words(\"the quick brown fox\
    \ jumps over the lazy dog.  \", 7)\n    2\n    >>> count_words(\"the quick brown\
    \ fox jumps over the lazy dog.  \", 8)\n    1\n    >>> count_words(\"the quick\
    \ brown fox jumps over the lazy dog.  \", 9)\n    0\n    >>> count_words(\"the\
    \ quick brown fox jumps over the lazy dog.  \", 10)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 11)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 12)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 13)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 14)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 15)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 16)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 17)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 18)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 19)\n    0\n    >>> count_words(\"",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return x[shift:end]\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x) || shift <\
    \ 0\n        error(\"shift must be in range 0 to length(x)\")\n    else\n    \
    \    digits = digits(x)\n        digits = digits[shift:end]\n        digits =\
    \ reverse(digits)\n        digits = reverse(digits)\n        return join(digits)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that converts a string to a\
    \ list of integers. If the string cannot be converted to a list of integers, return\
    \ an empty list.\nFor example, if the string \"123abc\" can be converted to a\
    \ list of integers, return [123, 123, 123].\nIf the string \"123abc\" cannot be\
    \ converted to a list of integers, return an empty list.\nFor example, if the\
    \ string \"123abc\" cannot be converted to a list of integers, return an empty\
    \ list.\nIf the string \"123abc\" cannot be converted to a list of integers, return\
    \ an empty list.\nFor example, if the string \"123abc\" cannot be converted to\
    \ a list of integers, return an empty list.\nFor example, if the string \"123abc\"\
    \ cannot be converted to a list of integers, return an empty list.\nFor example,\
    \ if the string \"123abc\" cannot be converted to a list of integers, return an\
    \ empty list.\nFor example, if the string \"123abc\" cannot be converted to a\
    \ list of integers, return an empty list.\nFor example, if the string \"123abc\"\
    \ cannot be converted to a list of integers, return an empty list.\nFor example,\
    \ if the string \"123abc\" cannot be converted to a list of integers, return an\
    \ empty list.\nFor example, if the string \"123abc\" cannot be converted to a\
    \ list of integers, return an empty list.\nFor example, if the string \"123abc\"\
    \ cannot be converted to a list of integers, return an empty list.\nFor example,\
    \ if the string \"123abc\" cannot be converted to a list of integers, return an\
    \ empty list.\nFor example, if the string \"123abc\" cannot be converted to a\
    \ list of integers, return an empty list.\nFor example, if the string \"123abc\"\
    \ cannot be converted to a list of integers, return an empty list.\nFor example,\
    \ if the string \"123abc\" cannot be converted to a list of integers, return an\
    \ empty list.\nFor example, if the string \"123abc\" cannot be converted to a\
    \ list of integers, return an empty list.\nFor example, if the string \"123abc\"\
    \ cannot be converted to a list of integers, return an empty list.\nFor example,\
    \ if the string \"123abc\" cannot be converted to a list of integers, return an\
    \ empty list.\nFor example, if the string \"123abc\" cannot be converted to a\
    \ list of integers, return an empty list.\nFor example, if the string \"123abc\"\
    \ cannot be converted to a list of integers, return an empty list.\nFor example,\
    \ if the string \"123abc\" cannot be converted to a list of integers, return an\
    \ empty list.\nFor example, if the string \"123abc\" cannot be converted to a\
    \ list of integers, return an empty list.\nFor example, if the string \"123abc\"\
    \ cannot be converted to a list of integers, return an empty list.\nFor example,\
    \ if the string \"123abc\" cannot be converted to a list of integers, return an\
    \ empty list.\nFor example, if the string \"123abc\" cannot be converted to a\
    \ list of integers, return an empty list.\nFor example, if the string ", "   \
    \ if shift > length(x)\n        return reverse(x)\n    else\n        return x[shift:length(x)+shift]\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<text>\nThe function digits() is\
    \ defined in the file digits.py:", "    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        digits =\
    \ digits(x)\n        digits[shift] = digits[shift] % 10\n        return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    end\n    digits[shift] = digits[shift] % 10\n    digits[-shift]\
    \ = digits[-shift] % 10\n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x) || shift <\
    \ 0\n        error(\"shift must be between 0 and length(x)\")\n    else\n    \
    \    digits = digits(x)\n        digits = digits[shift:end]\n        digits =\
    \ reverse(digits)\n        return join(digits)\n    end\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=0 |>\n<code>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n@assert circular_shift(12,\
    \ 2) == 12\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of digits in an integer.", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits[shift] = digits[shift]\
    \ % 10\n    digits = reverse(digits)\n    return join(digits, \"\")\nend\n</cell>\n\
    <text>\nThe function digits(x::Int64) returns a string containing the digits of\
    \ x, as a string.\nThe function reverse(x::String) reverses the string x.\nThe\
    \ function join(digits::String, separator::String) joins the elements of digits\
    \ into a string, separated by separator.\nThe function length(x::String) returns\
    \ the length of x, in characters.\nThe function reverse(x::String) reverses the\
    \ string x.", "    if shift > length(x)\n        digits = reverse(x)\n    else\n\
    \        digits = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n\
    @assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.\nFor example, length(123) returns\
    \ 3.\nWrite a function that returns the number of digits in an integer, rounded\
    \ to the nearest integer.\nFor example, length(123.4) returns 4.\nWrite a function\
    \ that returns the number of digits in an integer, rounded to the nearest integer,\
    \ including fractions.\nFor example, length(123.456) returns 5.\nWrite a function\
    \ that returns the number of digits in an integer, rounded to the nearest integer,\
    \ including fractions, including negative numbers.\nFor example, length(123.456)\
    \ returns 6.\nWrite a function that returns the number of digits in an integer,\
    \ rounded to the nearest integer, including fractions, including negative numbers,\
    \ including fractions.\nFor example, length(123.456) returns 6.\nWrite a function\
    \ that returns the number of digits in an integer, rounded to the nearest integer,\
    \ including fractions, including negative numbers, including fractions, including\
    \ negative numbers.\nFor example, length(123.456) returns 6.\nWrite a function\
    \ that returns the number of digits in an integer, rounded to the nearest integer,\
    \ including fractions, including negative numbers, including fractions, including\
    \ negative numbers, including fractions.\nFor example, length(123.456) returns\
    \ 6.\nWrite a function that returns the number of digits in an integer, rounded\
    \ to the nearest integer, including fractions, including negative numbers, including\
    \ fractions, including negative numbers, including fractions, including negative\
    \ numbers.\nFor example, length(123.456) returns 6.\nWrite a function that returns\
    \ the number of digits in an integer, rounded to the nearest integer, including\
    \ fractions, including negative numbers, including fractions, including negative\
    \ numbers, including fractions, including negative numbers, including fractions.\n\
    For example, length(123.456) returns 6.\nWrite a function that returns the number\
    \ of digits in an integer, rounded to the nearest integer, including fractions,\
    \ including negative numbers, including fractions, including negative numbers,\
    \ including fractions, including negative numbers, including fractions, including\
    \ negative numbers.\nFor example, length(123.456) returns 6.\nWrite a function\
    \ that returns the number of digits in an integer, rounded to the nearest integer,\
    \ including fractions, including negative numbers, including fractions, including\
    \ negative numbers, including fractions, including negative numbers, including\
    \ fractions, including negative numbers, including fractions.\nFor example, length(123.456)\
    \ returns 6.\nWrite a function that returns the number of digits in an integer,\
    \ rounded to the nearest integer, including fractions, including negative numbers,\
    \ including fractions, including negative numbers, including fractions, including\
    \ negative numbers, including fractions, including ", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x) || shift < 0\n        error(\"shift must be between 0 and $length(x)\"\
    )\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\n    end\nend\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nA simple and efficient solution:\n\
    <code>", "    if shift > length(x)\n        digits = reverse(digits(x))\n    else\n\
    \        digits = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n\
    @assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer. For example, length(123) ==\
    \ 3.", "    if shift > length(x)\n        digits = reverse(x)\n    else\n    \
    \    digits = digits(x)\n    return join(digits, digits[shift+1:end])\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x) || shift < 0\n\
    \        error(\"shift must be between 0 and length(x)\")\n    elseif shift ==\
    \ 0\n        return x\n    else\n        digits = digits(x)\n        digits_reversed\
    \ = reverse(digits)\n        digits_shifted = shift(digits_reversed, shift)\n\
    \        digits_shifted_reversed = reverse(digits_shifted)\n        return digits_shifted_reversed\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n\
    \        return reverse(x)\n    else if shift < 0\n        return reverse(x)\n\
    \    else\n        return x[shift:end] + reverse(substring(x, 0, shift))\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x) || shift < 0\n\
    \        error(\"shift must be in range 0 to length(x)\")\n    elseif shift ==\
    \ 0\n        return x\n    else\n        digits = split(x, \"\")\n        digits[shift]\
    \ = digits[shift][end-1]\n        join(digits, \"\")\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    circular_shift(x::Int64, shift::Int64)::String\n\
    \    \n    Shift the digits of the integer x, shift the digits right by shift\n\
    \    and return the result as a string.\n    If shift > number of digits, return\
    \ digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12,\
    \ 2)\n    \"12\"\n    \"\"\"", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    end\n    return join(reverse(digits[shift:end]))\nend\n</cell>\n\
    <text>\nThe function digits() is defined in the file digit.jl and looks like this:",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    digits = reverse(digits)\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>", "    if shift > length(x)\
    \ || shift < 0\n        error(\"shift must be in range 0 to length(x)\")\n   \
    \ else\n        digits = digits(x)\n        digits = digits[shift:end]\n     \
    \   digits = reverse(digits)\n        digits = join(digits, \"\")\n        return\
    \ digits\nend\n</cell>\n<text>\nThe function digits() returns a list of digits\
    \ of an integer, x, starting from index 1 to the length of the integer. For example,\
    \ digits(12) returns [1, 2, 3, 4, 5].", "    if shift > length(x) || shift < 0\n\
    \        error(\"shift must be in range 0 to length(x)\")\n    else\n        digits\
    \ = digits(x)\n        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        return join(digits)\n    end\nend\n\
    </cell>\n<text>\nThe function digits(x) returns a string containing the digits\
    \ of x. For example, digits(12) returns \"12\".", "    if shift > length(x) -\
    \ 1 \n        shift %= length(x) - 1\n        x >>= shift\n        x <<= shift\n\
    \        return to_string(x)\n    else \n        return x\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else if shift < 0\n        return reverse(circular_shift(reverse(x),\
    \ -shift))\n    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n@assert circular_shift(12,\
    \ 2) == 12\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer.\n    >>> digits(123)\n    3\n    >>> digits(0)\n  \
    \  0\n    >>> digits(-10)\n    1\n    >>> digits(123456789)\n    10\n    >>> digits(1234567890)\n\
    \    11\n    >>> digits(123456789012345)\n    12\n    >>> digits(1234567890123456789)\n\
    \    13\n    >>> digits(12345678901234567890)\n    14\n    >>> digits(1234567890123456789012345)\n\
    \    15\n    >>> digits(12345678901234567890123456789)\n    16\n    >>> digits(12345678901234567890123456789012345)\n\
    \    17\n    >>> digits(123456789012345678901234567890123456789)\n    18\n   \
    \ >>> digits(123456789012345678901234567890123456789012345)\n    19\n    >>> digits(1234567890123456789012345678901234567890123456789012345)\n\
    \    20\n    >>> digits(12345678901234567890123456789012345678901234567890123456789012345)\n\
    \    21\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    22\n    >>> digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    23\n    >>> digits(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    24\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    25\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    26\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    27\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    28\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    29\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    30\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    31\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    32\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    33\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    34\n    >>> digits(12345678901234567890123456789", "    if shift > length(x)\n\
    \        return reverse(x)\n    else if shift < 0\n        return circular_shift(x,\
    \ -shift)\n    else\n        return reverse(x[shift:end-1]) + circular_shift(x,\
    \ shift-length(x))\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of digits in an integer.", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert circular_shift(12, 1) == 21\n@assert circular_shift(12,\
    \ 2) == 12\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer. Test it on all of the\nintegers from 1 to 10, and on\
    \ negative integers. What happens if you call it on a\nnegative integer?", " \
    \   if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    end\n    digits[shift] = digits[shift] % 10\n    digits[length(digits)]\
    \ = digits[length(digits)] % 10\n    return join(digits, \"\")\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.\
    \ Test it on $10$ and $100$.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return circular_shift(x, -shift)\n    else\n \
    \       return circular_shift(shift(x), shift)\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else if shift < 0\n        return circular_shift(x, -shift)\n\
    \    else\n        return circular_shift(shift(x), shift)\nend\n</cell>\n<text>\n\
    Now let's try it out!", "    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        return join(digits, \"\")\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)::Array{Int64}\nReturn the digits of x in a vector.\n\
    \"\"\"", "    if shift > length(x)\n        digits = reverse(x)\n    else\n  \
    \      digits = digits(x)\n    return join(digits, digits[shift-1:shift-1:-1])\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n\
    @assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer. Test it on $10$ and $20$.",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.\
    \ For example, length(1234) = 4.", "    if shift > length(x)\n        digits =\
    \ reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.4>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nFor example,\
    \ length(123) == 3.", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise\nWrite a function that returns the number of digits\
    \ in an integer.", "    if shift > length(x)\n        digits = reverse(x)\n  \
    \  else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return digits\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns a string with all\
    \ occurrences of its first character replaced by its second character.\nIf the\
    \ first character does not appear in the string, return an empty string.\nIf the\
    \ second character does not appear in the string, return the same string as input.\n\
    If the second character appears more than once in the string, return the same\
    \ string as input.\nIf the second character appears only once in the string, return\
    \ the same string as input.\nIf the second character appears more than once in\
    \ the string, return the same string as input.\nIf the second character appears\
    \ more than once in the string, return the same string as input.\nIf the second\
    \ character appears more than once in the string, return the same string as input.\n\
    If the second character appears more than once in the string, return the same\
    \ string as input.\nIf the second character appears more than once in the string,\
    \ return the same string as input.\nIf the second character appears more than\
    \ once in the string, return the same string as input.\nIf the second character\
    \ appears more than once in the string, return the same string as input.\nIf the\
    \ second character appears more than once in the string, return the same string\
    \ as input.\nIf the second character appears more than once in the string, return\
    \ the same string as input.\nIf the second character appears more than once in\
    \ the string, return the same string as input.\nIf the second character appears\
    \ more than once in the string, return the same string as input.\nIf the second\
    \ character appears more than once in the string, return the same string as input.\n\
    If the second character appears more than once in the string, return the same\
    \ string as input.\nIf the second character appears more than once in the string,\
    \ return the same string as input.\nIf the second character appears more than\
    \ once in the string, return the same string as input.\nIf the second character\
    \ appears more than once in the string, return the same string as input.\nIf the\
    \ second character appears more than once in the string, return the same string\
    \ as input.\nIf the second character appears more than once in the string, return\
    \ the same string as input.\nIf the second character appears more than once in\
    \ the string, return the same string as input.\nIf the second character appears\
    \ more than once in the string, return the same string as input.\nIf the second\
    \ character appears more than once in the string, return the same string as input.\n\
    If the second character appears more than once in the string, return the same\
    \ string as input.\nIf the second character appears more than once in the string,\
    \ return the same string as input.\nIf the second character appears more than\
    \ once in the string, return the same string as input.\nIf the second character\
    \ appears more than once in the string, return the same string as input.\nIf the\
    \ second character appears more than once in the string, return the same string\
    \ as input.\nIf the second character ", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(digits(x))\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ digits\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 1)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(12, 2)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the number of digits in an integer. Test\
    \ it on integers from 1 to 10 and on integers from 0 to 9. How many digits does\
    \ it return for integers from 1 to 10?", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  digits(x::Int64)", "    if shift > length(x)\n        return reverse(x)\n \
    \   else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x) || shift <\
    \ 0\n        error(\"shift must be in range 0 to length(x)\")\n    else\n    \
    \    digits = digits(x)\n        digits[shift] = digits[shift] % 10\n        digits\
    \ = digits[shift+1:end]\n        digits = reverse(digits)\n        return join(digits)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = digits(x)\n    digits\
    \ = digits[-shift:] + digits[: shift]\n    return digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end-1]) +\
    \ reverse(x[1:shift])\nend\n</cell>\n<text>\nThe function reverse() reverses a\
    \ string. For example, circular_shift(reverse(\"hello\"), 1) returns \"olleh\"\
    .", "    if shift > length(x) || shift < 0\n        error(\"shift must be in range\
    \ 0 to length(x)\")\n    else\n        digits = digits(x)\n        digits[shift]\
    \ = digits[shift] % 10\n        digits = reverse(digits)\n        return join(digits)\n\
    end\n</cell>\n<code language=julia-1.3>", "    if shift > length(x) || shift <\
    \ 0\n        error(\"shift must be in range 0 to length(x)\")\n    else\n    \
    \    digits = digits(x)\n        digits_reversed = reverse(digits)\n        digits_shifted\
    \ = shift(digits_reversed, shift)\n        digits_shifted_reversed = reverse(digits_shifted)\n\
    \        return digits_shifted_reversed\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)::Vector{Int64}\nReturn the digits of x in a vector.\n\
    \"\"\"", "    if shift > length(x)\n        digits = reverse(x)\n    else\n  \
    \      digits = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<text>\n\
    The function digits() returns a list of digits of an integer, starting with the\
    \ least significant digit.", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nExercise: Write a function that converts\
    \ a string to a list of integers. If the string contains non-numeric characters,\
    \ return an empty list.\nThe function should handle negative numbers, too. For\
    \ example, if the string contains \"-\", the function should return [-3, -2, -1,\
    \ 0, 1, 2, 3].\nThe function should handle strings with spaces, too. For example,\
    \ if the string contains \"1 2 3\", the function should return [1, 2, 3].\nThe\
    \ function should handle strings with spaces, too. For example, if the string\
    \ contains \"1 2 3\", the function should return [1, 2, 3].\nThe function should\
    \ handle strings with spaces, too. For example, if the string contains \"1 2 3\"\
    , the function should return [1, 2, 3].\nThe function should handle strings with\
    \ spaces, too. For example, if the string contains \"1 2 3\", the function should\
    \ return [1, 2, 3].\nThe function should handle strings with spaces, too. For\
    \ example, if the string contains \"1 2 3\", the function should return [1, 2,\
    \ 3].\nThe function should handle strings with spaces, too. For example, if the\
    \ string contains \"1 2 3\", the function should return [1, 2, 3].\nThe function\
    \ should handle strings with spaces, too. For example, if the string contains\
    \ \"1 2 3\", the function should return [1, 2, 3].\nThe function should handle\
    \ strings with spaces, too. For example, if the string contains \"1 2 3\", the\
    \ function should return [1, 2, 3].\nThe function should handle strings with spaces,\
    \ too. For example, if the string contains \"1 2 3\", the function should return\
    \ [1, 2, 3].\nThe function should handle strings with spaces, too. For example,\
    \ if the string contains \"1 2 3\", the function should return [1, 2, 3].\nThe\
    \ function should handle strings with spaces, too. For example, if the string\
    \ contains \"1 2 3\", the function should return [1, 2, 3].\nThe function should\
    \ handle strings with spaces, too. For example, if the string contains \"1 2 3\"\
    , the function should return [1, 2, 3].\nThe function should handle strings with\
    \ spaces, too. For example, if the string contains \"1 2 3\", the function should\
    \ return [1, 2, 3].\nThe function should handle strings with spaces, too. For\
    \ example, if the string contains \"1 2 3\", the function should return [1, 2,\
    \ 3].\nThe function should handle strings with spaces, too. For example, if the\
    \ string contains \"1 2 3\", the function should return [1, 2, 3].\nThe function\
    \ should handle strings with spaces, too. For example, if the string contains\
    \ \"1 2 3\", the function should return [1, 2, 3].\nThe ", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    digits = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer. For example,\
    \ length(1234) = 4.", "    if shift > length(x)\n        return reverse(x)\n \
    \   else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be in range 0\
    \ to length(x)\")\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.4>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n\
    \        return reverse(x)\n    else \n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x) - 1 \n   \
    \     then return reverse(x)\n    else \n        digits = digits(x)\n        digits\
    \ = digits[shift:end-1]\n        digits = reverse(digits)\n        return join(digits)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer. For example,\n    length(1234) = 4.", "    if shift >\
    \ length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer. For example,\
    \ length(123456789) returns 10. You may use length(x::Int64).\nWrite a function\
    \ that returns the number of digits in an integer, but for negative numbers. For\
    \ example, length(123456789) returns 10. You may use length(x::Int64).\nWrite\
    \ a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write a function that returns the number of digits in an integer, but for negative\
    \ numbers. For example, length(123456789) returns 10. You may use length(x::Int64).\n\
    Write ", "    if shift > length(x)\n        digits = reverse(x)\n    else\n  \
    \      digits = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = x\n    digits = digits[shift:end]\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>", "    if shift >\
    \ length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    end\n    digits[shift] = digits[shift] % 10\n    digits[shift] = digits[shift]\
    \ / 10\n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 5)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 7)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 10)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 11)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 12)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 13)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 14)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 18)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 19)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 20)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 21)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 24)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 25)\n", "    if shift > length(x)\n        return reverse(x)\n    else\n   \
    \     return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x) || shift < 0\n\
    \        error(\"shift must be in range 0 to length(x)\")\n    else\n        digits\
    \ = digits(x)\n        digits_reversed = reverse(digits)\n        digits_shifted\
    \ = shift(digits_reversed, shift)\n        return join(digits_shifted)\nend",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = x\n    digits = digits[shift:end]\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be between 0\
    \ and length(x)\")\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else \n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    circular_shift(x, shift)",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    end\n    return join(reverse(digits[shift:end]))\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = digits(x)\n    digits\
    \ = digits[shift:end]\n    return join(digits, \"\")\nend\n</cell>\n<text>\nThe\
    \ function digits(x::Int64) returns a string containing the digits of x, in reverse\
    \ order. For example, digits(123456789) returns \"987654321\".", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(digits(x))\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    \n    digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns a\
    \ string containing the digits of x. For example, digits(12) returns \"12\".",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<text>\nThe function digits() is defined in the file digits_test.jl and\
    \ looks like this:", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be in range 0\
    \ to length(x)\")\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[-shift:]+digits[:shift]\n    return join(digits)\nend\n</cell>\n\
    <text>\nCircular shift the digits of the integer x, shift the digits right by\
    \ shift and return the result as a string.\n    If shift > number of digits, return\
    \ digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12,\
    \ 2)\n    \"12\"\n    \"\"\"", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in it.\nWrite a function that takes a string and returns\
    \ a string with all the characters in reverse order.\nWrite a function that takes\
    \ a string and returns a string with all the characters in reverse order but starting\
    \ with the first character.\nWrite a function that takes a string and returns\
    \ a string with all the characters in reverse order but starting with the last\
    \ character.\nWrite a function that takes a string and returns a string with all\
    \ the characters in reverse order but starting with the second last character.\n\
    Write a function that takes a string and returns a string with all the characters\
    \ in reverse order but starting with the third last character.\nWrite a function\
    \ that takes a string and returns a string with all the characters in reverse\
    \ order but starting with the fourth last character.\nWrite a function that takes\
    \ a string and returns a string with all the characters in reverse order but starting\
    \ with the fifth last character.\nWrite a function that takes a string and returns\
    \ a string with all the characters in reverse order but starting with the sixth\
    \ last character.\nWrite a function that takes a string and returns a string with\
    \ all the characters in reverse order but starting with the seventh last character.\n\
    Write a function that takes a string and returns a string with all the characters\
    \ in reverse order but starting with the eighth last character.\nWrite a function\
    \ that takes a string and returns a string with all the characters in reverse\
    \ order but starting with the ninth last character.\nWrite a function that takes\
    \ a string and returns a string with all the characters in reverse order but starting\
    \ with the tenth last character.\nWrite a function that takes a string and returns\
    \ a string with all the characters in reverse order but starting with the eleventh\
    \ last character.\nWrite a function that takes a string and returns a string with\
    \ all the characters in reverse order but starting with the twelfth last character.\n\
    Write a function that takes a string and returns a string with all the characters\
    \ in reverse order but starting with the thirteenth last character.\nWrite a function\
    \ that takes a string and returns a string with all the characters in reverse\
    \ order but starting with the fourteenth last character.\nWrite a function that\
    \ takes a string and returns a string with all the characters in reverse order\
    \ but starting with the fifteenth last character.\nWrite a function that takes\
    \ a string and returns a string with all the characters in reverse order but starting\
    \ with the sixteenth last character.\nWrite a function that takes a string and\
    \ returns a string with all the characters in reverse order but starting with\
    \ the seventeenth last character.\nWrite a function that takes a string and returns\
    \ a string with all the characters in reverse order but starting with the eighteenth\
    \ last character.\nWrite a function that takes a string and returns a string with\
    \ all the characters in reverse order but starting with the nineteenth last character.\n\
    Write a ", "    if shift > length(x) || shift < 0\n        error(\"shift must\
    \ be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n      \
    \  digits = digits[shift:end]\n        digits = reverse(digits)\n        return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\
    \ || shift < 0\n        error(\"shift must be in range 0 to length(x)\")\n   \
    \ else\n        digits = digits(x)\n        digits = digits[shift:end]\n     \
    \   digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n<text>\n\
    The function digits() returns the digits of the integer x, as a string.\nThe function\
    \ length() returns the number of digits of x.\nThe function reverse() reverses\
    \ the digits of the integer x.\nThe function join() joins the digits of the integer\
    \ x into a string.\nThe function error() raises an error if shift is out of range.\n\
    The function circular_shift() shifts the digits of the integer x by shift.\nThe\
    \ function digits() returns the digits of the integer x, as a string.\nThe function\
    \ length() returns the number of digits of x.\nThe function reverse() reverses\
    \ the digits of the integer x.\nThe function join() joins the digits of the integer\
    \ x into a string.\nThe function error() raises an error if shift is out of range.\n\
    The function circular_shift() shifts the digits of the integer x by shift.\nThe\
    \ function digits() returns the digits of the integer x, as a string.\nThe function\
    \ length() returns the number of digits of x.\nThe function reverse() reverses\
    \ the digits of the integer x.\nThe function join() joins the digits of the integer\
    \ x into a string.\nThe function error() raises an error if shift is out of range.\n\
    The function circular_shift() shifts the digits of the integer x by shift.\nThe\
    \ function digits() returns the digits of the integer x, as a string.\nThe function\
    \ length() returns the number of digits of x.\nThe function reverse() reverses\
    \ the digits of the integer x.\nThe function join() joins the digits of the integer\
    \ x into a string.\nThe function error() raises an error if shift is out of range.\n\
    The function circular_shift() shifts the digits of the integer x by shift.\nThe\
    \ function digits() returns the digits of the integer x, as a string.\nThe function\
    \ length() returns the number of digits of x.\nThe function reverse() reverses\
    \ the digits of the integer x.\nThe function join() joins the digits of the integer\
    \ x into a string.\nThe function error() raises an error if shift is out of range.\n\
    The function circular_shift() shifts the digits of the integer x by shift.\nThe\
    \ function digits() returns the digits of the integer x, as a string.\nThe function\
    \ length() returns the number of digits of x.\nThe function reverse() reverses\
    \ the digits of the integer x.\nThe function join() joins the digits of the integer\
    \ x into a string.\nThe function error() raises an error if shift is out of range.\n\
    The function circular_shift() shifts the digits of the integer x by shift.\nThe\
    \ function digit", "    if shift > length(x) || shift < 0\n        error(\"shift\
    \ must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n \
    \       digits[shift] = digits[shift] % 10\n        digits = digits[shift..-1]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.4>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    digits = reverse(digits)\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.4>", "    if shift >\
    \ length(x)\n        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be in range 0\
    \ to length(x)\")\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of occurrences of its first character in that string.", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else if shift < 0\n        return reverse(circular_shift(reverse(x),\
    \ -shift))\n    else\n        return reverse(circular_shift(reverse(x), shift))\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else if shift < 0\n        return circular_shift(x, -shift)\n\
    \    else\n        digits = digits(x)\n        digits = digits[shift:end]\n  \
    \      return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = reverse(x[shift:end])\n    return digits\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a ", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return digits(x)[end - shift + 1 : end]\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(reverse(x))\n    else\n       \
    \ return reverse(reverse(x)[1:shift]) + reverse(reverse(x)[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = x\n    digits = digits[shift:end]\n    return digits\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\n    >>> count_chars(\"hello\")\n    5\n    >>>\
    \ count_chars(\"hello world\")\n    11\n    >>> count_chars(\"hello world!\")\n\
    \    9\n    >>> count_chars(\"\")\n    0\n    \"\"\"", "    if shift > length(x)\
    \ || shift < 0\n        error(\"shift must be in range 0 to length(x)\")\n   \
    \ else\n        digits = digits(x)\n        digits_reversed = reverse(digits)\n\
    \        digits_shifted = shift(digits_reversed, shift)\n        digits_shifted_reversed\
    \ = reverse(digits_shifted)\n        return digits_shifted_reversed\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a string to a list of integers.\
    \ If the string contains non-numeric characters, return an error. Otherwise, return\
    \ the list of integers contained in the string.\nFor example, if the string \"\
    123abc\" were passed into the function, return [123, 123, 123].\nIf the string\
    \ \"abc\" were passed into the function, return an error.\nIf the string \"123\"\
    \ were passed into the function, return [123, 123, 123].\nIf the string \"abc\"\
    \ were passed into the function, return an error.\nIf the string \"abc\" were\
    \ passed into the function, return an error.\nIf the string \"abc\" were passed\
    \ into the function, return an error.\nIf the string \"abc\" were passed into\
    \ the function, return an error.\nIf the string \"abc\" were passed into the function,\
    \ return an error.\nIf the string \"abc\" were passed into the function, return\
    \ an error.\nIf the string \"abc\" were passed into the function, return an error.\n\
    If the string \"abc\" were passed into the function, return an error.\nIf the\
    \ string \"abc\" were passed into the function, return an error.\nIf the string\
    \ \"abc\" were passed into the function, return an error.\nIf the string \"abc\"\
    \ were passed into the function, return an error.\nIf the string \"abc\" were\
    \ passed into the function, return an error.\nIf the string \"abc\" were passed\
    \ into the function, return an error.\nIf the string \"abc\" were passed into\
    \ the function, return an error.\nIf the string \"abc\" were passed into the function,\
    \ return an error.\nIf the string \"abc\" were passed into the function, return\
    \ an error.\nIf the string \"abc\" were passed into the function, return an error.\n\
    If the string \"abc\" were passed into the function, return an error.\nIf the\
    \ string \"abc\" were passed into the function, return an error.\nIf the string\
    \ \"abc\" were passed into the function, return an error.\nIf the string \"abc\"\
    \ were passed into the function, return an error.\nIf the string \"abc\" were\
    \ passed into the function, return an error.\nIf the string \"abc\" were passed\
    \ into the function, return an error.\nIf the string \"abc\" were passed into\
    \ the function, return an error.\nIf the string \"abc\" were passed into the function,\
    \ return an error.\nIf the string \"abc\" were passed into the function, return\
    \ an error.\nIf the string \"abc\" were passed into the function, return an ",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 1)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(12, 2)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of digits in an integer.", "    if\
    \ shift > length(x)\n        return reverse(x)\n    else\n        return x[shift:end]\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x) || shift <\
    \ 0\n        error(\"shift must be between 0 and $length(x)\")\n    else\n   \
    \     digits = digits(x)\n        digits[shift] = digits[shift] % 10\n       \
    \ digits[length(digits)] = digits[length(digits)] / 10\n        return join(digits,\
    \ \"\")\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nHere's a solution\
    \ that doesn't use any packages:\n<code>", "    if shift > length(x)\n       \
    \ digits = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  digits(x::Int64)", "    if shift > length(x)\n        return reverse(x)\n \
    \   else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + x[(shift+1):length(x)]\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ shift > length(x)\n        return reverse(x)\n    else if shift < 0\n      \
    \  return reverse(circular_shift(reverse(x), -shift))\n    else\n        return\
    \ x[shift:end-1] + reverse(circular_shift(reverse(x[shift:end-1]), shift))\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[-shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.\
    \ For example, length(1234) = 4.", "    if shift > length(x)\n        digits =\
    \ reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    digits(x::Int64)", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return digits(x)[shift:end]\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer. For example,\
    \ length(1234) = 4.", "    if shift > length(x)\n        return reverse(x)\n \
    \   else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)::Vector{Int64}\nReturn the digits of x in reverse\
    \ order.\n\"\"\"", "    if shift > length(x)\n        return reverse(x)\n    else\n\
    \        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x) || shift <\
    \ 0\n        error(\"shift must be between 0 and length(x)\")\n    else\n    \
    \    digits = digits(x)\n        digits[shift] = digits[shift] % 10\n        digits[length(digits)]\
    \ = digits[length(digits)] % 10\n        digits = reverse(digits)\n        return\
    \ join(digits)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times each character appears in the string.\
    \ For example, if the string \"abcabc\" was passed into the function, the function\
    \ should return [('a', 3), ('b', 2), ('c', 3)]. The order of the characters should\
    \ not matter.", "    if shift > length(x)\n        digits = reverse(x)\n    else\n\
    \        digits = digits(x)\n    digits = digits[shift:end]\n    digits = reverse(digits)\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>", "    if shift >\
    \ length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    elseif shift < length(x)\n     \
    \   return reverse(x[shift:end])\n    else\n        return x\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a string and returns the number of characters\
    \ in that string.\nWrite a function that takes a string and returns the number\
    \ of words in that string.\nWrite a function that takes a string and returns the\
    \ number of sentences in that string.\nWrite a function that takes a string and\
    \ returns the number of lines in that string.\nWrite a function that takes a string\
    \ and returns the number of characters in that string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of words in that string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of sentences in that string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in that string that are not spaces.\n\
    Write a function that takes a string and returns the number of characters in that\
    \ string that are not spaces and words in that string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of words in that string\
    \ that are not spaces and characters in that string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of sentences in that string\
    \ that are not spaces and words in that string that are not spaces.\nWrite a function\
    \ that takes a string and returns the number of lines in that string that are\
    \ not spaces and characters in that string that are not spaces.\nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are not spaces and words in that string that are not spaces and sentences in\
    \ that string that are not spaces.\nWrite a function that takes a string and returns\
    \ the number of words in that string that are not spaces and characters in that\
    \ string that are not spaces and sentences in that string that are not spaces.\n\
    Write a function that takes a string and returns the number of sentences in that\
    \ string that are not spaces and words in that string that are not spaces and\
    \ characters in that string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in that string that are not spaces\
    \ and characters in that string that are not spaces and words in that string that\
    \ are not spaces and sentences in that string that are not spaces.\nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are not spaces and words in that string that are not spaces and sentences in\
    \ that string that are not spaces and lines in that string that are not spaces.\n\
    Write a function that takes a string and returns the number of words in that string\
    \ that are not spaces and characters in that string that are not spaces and sentences\
    \ in that string that are not spaces and lines in that string that are not spaces.\n\
    Write a function that takes a string and returns the number of sentences in that\
    \ string that are not spaces and words in that ", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x)\n        digits = reverse(digits(x))\n    else\n        digits =\
    \ digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end-1]) +\
    \ reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ digits(x::Int64)", "    if shift > length(x)\n        return reverse(x)\n  \
    \  else \n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else if shift < 0\n  \
    \      return reverse(circular_shift(reverse(x), -shift))\n    else\n        return\
    \ reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n   \
    \ digits(x::Int64)", "    if shift > length(x)\n        return reverse(x)\n  \
    \  else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + x[(shift + 1):length(x)]\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ shift > length(x)\n        digits = reverse(digits(x))\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits, \"\")\n\
    end\n</cell>\n<text>\nThe function digits(x::Int64) returns a list of digits of\
    \ x, starting with the first\n    digit.", "    if shift > length(x)\n       \
    \ digits = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
