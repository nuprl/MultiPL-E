name: HumanEval_72_will_it_fly
language: julia
results:
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp927w_rns.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp927w_rns.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp927w_rns.jl:29\ntest set: Test Failed at /tmp/tmp927w_rns.jl:34\n\
    \  Expression: candidate([1, 2, 3], 6) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp927w_rns.jl:34\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp927w_rns.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp927w_rns.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for i in q\n        sum += i\n    end\n    \n    if sum == w\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb0499k7x.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb0499k7x.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</code>\n<|/ a tags=julia,function,performance |>\n<| c |>\n\
    Thanks for your answer! I tried to run your code, but I got this error `ERROR:\
    \ LoadError: MethodError: no method matching is_palindromic(::Array{Int64,1})`.\
    \ I think it's because `is_palindromic(q)` doesn't accept `q` as an array, but\
    \ I'm not sure how to fix it.\n<|/ c |>\n<| c |>\nI edited my answer to fix the\
    \ error you mentioned. I also added a link to my answer that explains why your\
    \ original code didn't work.\n<|/ c |>\n<| c |>\nThanks for your answer! I tried\
    \ to run your code, but I got this error `ERROR: LoadError: MethodError: no method\
    \ matching is_palindromic(::Array{Int64,1})`. I think it's because `is_palindromic(q)`\
    \ doesn't accept `q` as an array, but I'm not sure how to fix it.\n<|/ c |>\n\
    <| c |>\nI edited my answer to fix the error you mentioned. I also added a link\
    \ to my answer that explains why your original code didn't work.\n<|/ c |>\n<|\
    \ c |>\nThanks for your answer! I tried to run your code, but I got this error\
    \ `ERROR: LoadError: MethodError: no method matching is_palindromic(::Array{Int64,1})`.\
    \ I think it's because `is_palindromic(q)` doesn't accept `q` as an array, but\
    \ I'm not sure how to fix it.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a function\
    \ that checks if a vector is palindrome or not. \n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkmgvlcy8.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkmgvlcy8.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t\
    @test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1zeazjik.jl:30\n  Expression: candidate([3,\
    \ 2, 3], 9) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1zeazjik.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1zeazjik.jl:29\ntest set: Test Failed at /tmp/tmp1zeazjik.jl:32\n\
    \  Expression: candidate([3], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1zeazjik.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1zeazjik.jl:29\ntest set: Error During Test at\
    \ /tmp/tmp1zeazjik.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: is_palindromic not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp1zeazjik.jl:23\n   [2]\
    \ top-level scope at /tmp/tmp1zeazjik.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1zeazjik.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp1zeazjik.jl:35\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: is_palindromic not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp1zeazjik.jl:23\n   [2] top-level\
    \ scope at /tmp/tmp1zeazjik.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1zeazjik.jl:29\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    2     2      2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1zeazjik.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nPart 2: Palindromic Arrays\nWrite a function\
    \ that returns True if the array palindromic will fly, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmcmkyg8u.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmcmkyg8u.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nPart 2: Write a function that checks if a number is palindromic (it is\
    \ the same forwards and backwards)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkumxwjdk.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkumxwjdk.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for `will_it_fly([3, 2, 3],\
    \ 9)` because `sum` will equal `9` before `sum < w` is evaluated.\n<|/ c |>\n\
    <| c |>\nI edited my answer to fix the problem you mentioned. Thanks!\n<|/ c |>\n\
    <| a tags=julia,function,arrays |>\nI believe that your function can be rewritten\
    \ as:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp672zk4i.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp672zk4i.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && is_palindromic(q)\
    \ && sum == sum(q)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ True if the object q will fly, and False otherwise.\nThe object q will fly if\
    \ it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp626w27u4.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp626w27u4.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nPart III: Palindrome Numbers\nWrite a function\
    \ that checks if a given number is palindrome or not.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbouig83o.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbouig83o.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && sum == sum(q)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns True if the object\
    \ q will fly, and False otherwise.\nThe object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvdj8khlv.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvdj8khlv.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `will_it_fly([3, 2, 3], 9) \u279E\
    \ True` returns true because `sum` is still equal to `w`.\n<|/ c |>\n<| c |>\n\
    I fixed it. I had forgotten to update the sum variable in the for loop. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx875qo8b.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx875qo8b.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns True if the object q will fly,\
    \ and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkoumpzpx.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkoumpzpx.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if w\
    \ == 0 \n        true\n    else\n        sum(q) == w && is_palindromic(q) && w\
    \ <= maximum(q)\n    end\nend\n</cell>\n<text>\nPart 2: Palindromic Arrays\nA\
    \ palindromic array is a list that is a palindrome when read from left to right.\
    \ For example, these are palindromes:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3hyjv_90.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3hyjv_90.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</cell>\n<text>\nPart 2: Palindrome Numbers\nWrite a function\
    \ that takes an array of numbers and returns True if all the numbers in the array\
    \ are palindromic, and False if there are any non-palindromic numbers in the array.\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbh578hru.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbh578hru.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the\
    \ question. `will_it_fly` should return `true` if the sum of its elements is less\
    \ than or equal to the maximum possible weight, and `false` otherwise.\n<|/ c\
    \ |>\n<| c |>\nI edited my answer, I hope it helps you\n<|/ c |>\n<| c |>\nThis\
    \ doesn't answer the question. `will_it_fly` should return `true` if the sum of\
    \ its elements is less than or equal to the maximum possible weight, and `false`\
    \ otherwise.\n<|/ c |>\n<| c |>\nI edited my answer, I hope it helps you\n<|/\
    \ c |>\n<| c |>\nThis doesn't answer the question. `will_it_fly` should return\
    \ `true` if the sum of its elements is less than or equal to the maximum possible\
    \ weight, and `false` otherwise.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuws5p9v_.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuws5p9v_.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if the object q will fly, and False otherwise.\nThe object q will fly if\
    \ it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdszs_a1i.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdszs_a1i.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</code>\n<|/ a tags=julia,function,if-statement |>\n<| c |>\n\
    This doesn't work for me. `will_it_fly([3,2,3], 9) \u279E true` returns true instead\
    \ of false. `will_it_fly([3,2,3], 10) \u279E true` returns false instead of true.\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 and it returns true for me. Are\
    \ you sure you copied it correctly? The function `is_palindromic` returns true\
    \ for me on Julia 1.5.1.\n<|/ c |>\n<| c |>\nI copied it correctly. I'm running\
    \ Julia 1.5.1 on Ubuntu 14.04.\n<|/ c |>\n<| c |>\nI tested it on Julia 1.5.1\
    \ and it returns true for me. Are you sure you copied it correctly? The function\
    \ `is_palindromic` returns true for me on Julia 1.5.1.\n<|/ c |>\n<| c |>\nI copied\
    \ it correctly. I'm running Julia 1.5.1 on Ubuntu 14.04.\n<|/ c |>\n<| a tags=julia,function,if-statement\
    \ |>\nI believe this should work:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp07u4gd2q.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp07u4gd2q.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5679yjq5.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp5679yjq5.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5679yjq5.jl:29\ntest set: Test Failed at /tmp/tmp5679yjq5.jl:34\n\
    \  Expression: candidate([1, 2, 3], 6) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5679yjq5.jl:34\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5679yjq5.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5679yjq5.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp2wn3fzpo.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: is_palindromic\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmp2wn3fzpo.jl:23\n   [2] top-level scope at /tmp/tmp2wn3fzpo.jl:30\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2wn3fzpo.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp2wn3fzpo.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: is_palindromic not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp2wn3fzpo.jl:23\n   [2]\
    \ top-level scope at /tmp/tmp2wn3fzpo.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2wn3fzpo.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp2wn3fzpo.jl:32\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: is_palindromic not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp2wn3fzpo.jl:23\n   [2] top-level\
    \ scope at /tmp/tmp2wn3fzpo.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2wn3fzpo.jl:29\n  \ntest set: Test Failed at\
    \ /tmp/tmp2wn3fzpo.jl:35\n  Expression: candidate([5], 5) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp2wn3fzpo.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2wn3fzpo.jl:29\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    2     1      3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2wn3fzpo.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum(q) <= w\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplnllcyti.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplnllcyti.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   if sum(q) <= w \n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns True if the object q will fly,\
    \ and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmdy06dwy.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmdy06dwy.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        return true\n    else \n        return false\n    end\nend\n\
    </cell>\n<text>\nPart III: Palindromic Lists\nWrite a function that checks if\
    \ a list is a palindromic list. Palindromic lists are lists whose elements are\
    \ in descending order. For example, [3, 2, 1] is a palindromic list, but [3, 2,\
    \ 1] is not a palindromic list.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0z1ebizu.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0z1ebizu.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if w\
    \ == 0 \n        true\n    else\n        sum (q) == w && will_it_fly(reverse(sort(q)),\
    \ w-sum(q))\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns True if the object q will fly, and False otherwise.\nThe object q will\
    \ fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"sum (\" at\
    \ /tmp/tmpfhvrd1r8.jl:22\nStacktrace:\n [1] top-level scope at /tmp/tmpfhvrd1r8.jl:22\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfhvrd1r8.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) ==\
    \ true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) ==\
    \ true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3],\
    \ 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv07595yf.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv07595yf.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\
    \ || sum > w && sum == sum(reverse(q))\nend\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([3, 2, 3], 9)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns True if the object q will fly, and False otherwise.\nThe object q will\
    \ fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi_6uzhsc.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi_6uzhsc.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for i in q\n        sum += i\n    end\n    \n    if sum < w\n\
    \        return false\n    end\n    \n    for i in q\n        if i != q[end-i-1]\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaf20g58h.jl:37\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaf20g58h.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum == w\nend\n</cell>\n<text>\nPart 2\nWrite a function that takes a string\
    \ and returns True if it is palindromic, and False otherwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) ==\
    \ true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) ==\
    \ true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3],\
    \ 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph91gjclm.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph91gjclm.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   if w == 0\n        return true\n    end\n    \n    if sum(q) == w\n      \
    \  return true\n    end\n    \n    if sum(q) > (w - 1)\n        return false\n\
    \    end\n    \n    return will_it_fly(reverse(sort(q)), w)\nend\n</cell>\n<text>\n\
    Part III. Palindrome Numbers\nWrite a function that checks if a given number is\
    \ a palindrome. An integer is a palindrome if its digits are the same when read\
    \ from left to right and from right to left. For example, 5 is a palindrome while\
    \ 9 is not because of the different position of 9 in the digits. A palindrome\
    \ is a number that is the same when read from left to right and from right to\
    \ left. For example, 121 is a palindrome while 121 is not because of the different\
    \ position of 1 in the digits.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6hpq8keq.jl:34\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6hpq8keq.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t\
    @test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7l300kw_.jl:30\n  Expression: candidate([3,\
    \ 2, 3], 9) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7l300kw_.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7l300kw_.jl:29\ntest set: Test Failed at /tmp/tmp7l300kw_.jl:32\n\
    \  Expression: candidate([3], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7l300kw_.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7l300kw_.jl:29\ntest set: Error During Test at\
    \ /tmp/tmp7l300kw_.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: is_palindromic not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp7l300kw_.jl:23\n   [2]\
    \ top-level scope at /tmp/tmp7l300kw_.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7l300kw_.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7l300kw_.jl:35\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: is_palindromic not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp7l300kw_.jl:23\n   [2] top-level\
    \ scope at /tmp/tmp7l300kw_.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7l300kw_.jl:29\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    2     2      2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7l300kw_.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for i in q\n        sum += i\n    end\n    \n    if sum < w\n\
    \        return false\n    end\n    \n    for i in q\n        sum += i\n    end\n\
    \    \n    if sum == w\n        return true\n    end\n    \n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc4qp1g0y.jl:44\n  Expression: candidate([3,\
    \ 2, 3], 9) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpc4qp1g0y.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc4qp1g0y.jl:43\ntest set: Test Failed at /tmp/tmpc4qp1g0y.jl:46\n\
    \  Expression: candidate([3], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc4qp1g0y.jl:46\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc4qp1g0y.jl:43\ntest set: Test Failed at /tmp/tmpc4qp1g0y.jl:49\n\
    \  Expression: candidate([5], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc4qp1g0y.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc4qp1g0y.jl:43\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc4qp1g0y.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for i in q\n        sum += i\n    end\n    \n    if sum == w\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns True if the object q will fly, and False otherwise.\n\
    The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp08mvhw_4.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp08mvhw_4.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum == w\nend\n</code>\n<|/ a tags=julia,function,performance |>\n<| a tags=julia,function,performance\
    \ |>\nI wrote a package called Palindromic that does this and more. \n<code>\n\
    julia> using Palindromic\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfl5yinl2.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfl5yinl2.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nQ. Write a function that returns True if the\
    \ object q will fly, and False otherwise.\nThe object q will fly if it's balanced\
    \ (it is a palindromic list) and the sum of its elements is less than or equal\
    \ the maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyej04epx.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyej04epx.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum == w\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if the object q will fly, and False otherwise.\nThe object q will fly if\
    \ it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz3iwy8h0.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz3iwy8h0.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</cell>\n<text>\nPart 2: Palindromic Arrays\nWrite a function\
    \ that returns True if the array palindromic is palindromic, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9jkvbyoj.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9jkvbyoj.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk2dfzwd7.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk2dfzwd7.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns True if the object q will fly, and False\
    \ otherwise.\nThe object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsxvhwvt3.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsxvhwvt3.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\
    \ \nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis solution doesn't work for me.\
    \ `will_it_fly([3, 2, 3], 9) \u279E true` but `will_it_fly([3, 2, 3], 10) \u279E\
    \ false`\n<|/ c |>\n<| c |>\nI edited my answer to fix the problem you mentioned.\n\
    <|/ c |>\n<| c |>\nI edited my answer to fix the problem you mentioned.\n<|/ c\
    \ |>\n<| c |>\nI edited my answer to fix the problem you mentioned.\n<|/ c |>\n\
    <| a dscore=1 |>\nI believe this should work:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ze68pda.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0ze68pda.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum <= w\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ True if the object q will fly, and False otherwise.\nThe object q will fly if\
    \ it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnr2zd6u5.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnr2zd6u5.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum <= w\nend\n</cell>\n<text>\nQ9. Write a function that returns True if\
    \ the object q will fly, and False otherwise.\nThe object q will fly if it's balanced\
    \ (it is a palindromic list) and the sum of its elements is less than or equal\
    \ the maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmqb1fkx_.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmqb1fkx_.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</cell>\n<text>\nPart 2\nWrite a function that returns True\
    \ if q will fly, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph0j7z155.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph0j7z155.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum < w\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx8qs66fw.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpx8qs66fw.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx8qs66fw.jl:29\ntest set: Test Failed at /tmp/tmpx8qs66fw.jl:35\n\
    \  Expression: candidate([5], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx8qs66fw.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx8qs66fw.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx8qs66fw.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum == sum(q)\nend\n</cell>\n<text>\nQ. Write a function that returns True\
    \ if the object q will fly, and False otherwise.\nThe object q will fly if it's\
    \ balanced (it is a palindromic list) and the sum of its elements is less than\
    \ or equal the maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt1oiulyo.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt1oiulyo.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</code>\n<|/ a tags=julia,function,arrays |>\n<| c |>\nI like\
    \ your solution, although I feel like it could be made more efficient by not having\
    \ to iterate over the array twice. Also, your function doesn't work for `will_it_fly([3,\
    \ 2, 3], 9)`, which returns `true` instead of `false`. Maybe you could fix that?\n\
    <|/ c |>\n<| c |>\nThanks for your comment. I fixed the issue you mentioned. I\
    \ also added a more efficient solution that doesn't iterate over the array twice.\n\
    <|/ c |>\n<| c |>\nThanks for your solution! I like it because it uses `sum` instead\
    \ of `reduce`.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution using reduce:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5fp2724s.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5fp2724s.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0 \n        return true\n    end\n    \n    if sum(q) == w \n \
    \       return true\n    end\n    \n    if sum(q) < w \n        return false\n\
    \    end\n    \n    return will_it_fly(reverse(sort(q)), w)\nend\n</cell>\n<text>\n\
    Let's test the function by writing some tests.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_8ze9hms.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_8ze9hms.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2, 3],\
    \ 9)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2, 3], 1)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 5)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 3)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 2)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 1)\n</cell>\n<code\
    \ language=julia-1.5>\nwill_it_fly([1, 2], 0)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], -1)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ -2)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], -3)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], -4)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], -5)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ -6)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], -7)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], -8)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], -9)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ -10)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], -11)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], -12)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], -13)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1,\
    \ 2], -14)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], -15)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], -16)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], -17)\n</cell>\n<code language=julia-\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzzmtsnl_.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzzmtsnl_.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum < w\nend\n</code>\n\
    <|/ a tags=julia,functional-programming |>\n<| a dscore=2 |>\nThe most efficient\
    \ solution I can think of is to use Julia's built-in function palindrome:\n<code>\n\
    julia> palindrome([1,2,3])\ntrue\nusing Test\n\n@testset begin\n\ncandidate =\
    \ will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfudn0evs.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfudn0evs.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ == w && maximum(q) <= w\n        return true\n    else\n        return false\n\
    \    end\nend\n</code>\n<|/ a tags=julia,arrays,function,loops |>\n<| c |>\nThank\
    \ you so much! I really appreciate your help.\n<|/ c |>\n<| c |>\nNo problem!\
    \ If this answer solved your problem, please consider marking it as accepted by\
    \ clicking the check mark next to it. This helps future readers and awards reputation\
    \ points to the author. Thanks!\n<|/ c |>\n<| c |>\nI tried to do that, but I\
    \ guess I need a reputation of 15 to do that. Thanks again!\n<|/ c |>\n<| c |>\n\
    No problem! Glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjypj753k.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjypj753k.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && sum == sum(q)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,function,arrays |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbkei40xe.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbkei40xe.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\
    \ \nend\n</code>\n<|/ a tags=julia,function,arrays |>\n<| c |>\nThanks for your\
    \ answer! I edited my question to make it more clear. Sorry for the confusion.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution for your updated question.\n\
    <|/ c |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n\
    <| a tags=julia,function,arrays |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgyik5p4g.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgyik5p4g.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns True if the object q will fly, and False\
    \ otherwise.\nThe object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzas_zchq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzas_zchq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && sum == sum(q)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a solution in Julia\
    \ that uses only basic functions. I hope it helps.\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgc5hk_j0.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgc5hk_j0.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nLet's test the function will_it_fly.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7i70uj2k.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7i70uj2k.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n        if sum > w\n            return\
    \ false\n    end\n    return true\nend\n</code>\n<|/ a tags=julia,function,arrays\
    \ |>\n<| c |>\nThank you so much! I appreciate your help.\n<|/ c |>\n<| c |>\n\
    No problem! If this answer solved your question, please consider marking it as\
    \ accepted (click the check mark next to the answer). Thanks!\n<|/ c |>\n<| c\
    \ |>\nI tried to upvote your answer, but I don't have enough reputation to do\
    \ so. Sorry about that.\n<|/ c |>\n<| c |>\nNo worries, thanks for accepting it!\
    \ You can still upvote it though, if you want.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5u_g0uw5.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5u_g0uw5.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        return true\n    else \n        return false\n    end\nend\n\
    </cell>\n<text>\nPart 2: Solution\nusing Test\n\n@testset begin\n\ncandidate =\
    \ will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5fuohsiu.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5fuohsiu.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0\n        return true\n    end\n    if sum(q) > (w-1)\n      \
    \  return false\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7idffvql.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7idffvql.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7idffvql.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2, 3],\
    \ 9)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2, 3], 1)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([3, 2, 3], 5)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 5)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 10)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 20)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 30)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 40)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 50)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 60)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 70)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 80)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 90)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 100)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 110)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 120)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1,\
    \ 2], 130)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 140)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 150)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 160)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1,\
    \ 2], 170)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 180)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 190)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 200)\n</cell>\n<code language=julia-1.5>\nwill_\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqgwdghuy.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqgwdghuy.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > (w-w)/2 \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns True if the object q will fly, and False\
    \ otherwise.\nThe object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiqcetkut.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiqcetkut.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns True if the object q will fly, and False\
    \ otherwise.\nThe object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqpwfoo4s.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqpwfoo4s.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for i in q\n        sum += i\n    end\n    \n    if sum < w\n\
    \        return false\n    end\n    \n    if sum == w\n        return true\n \
    \   end\n    \n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7x4p5pg2.jl:40\n  Expression: candidate([3,\
    \ 2, 3], 9) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7x4p5pg2.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7x4p5pg2.jl:39\ntest set: Test Failed at /tmp/tmp7x4p5pg2.jl:42\n\
    \  Expression: candidate([3], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7x4p5pg2.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7x4p5pg2.jl:39\ntest set: Test Failed at /tmp/tmp7x4p5pg2.jl:44\n\
    \  Expression: candidate([1, 2, 3], 6) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7x4p5pg2.jl:44\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7x4p5pg2.jl:39\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7x4p5pg2.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > (w-w)/2 \n        return true\n    else \n        return false\n    end\n\
    end\n</cell>\n<text>\nQ. Write a function that returns True if the object q will\
    \ fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9a9kcysy.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9a9kcysy.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if the object q will fly, and False otherwise.\nThe object q will fly if\
    \ it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy3mjt2pq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy3mjt2pq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0 \n        return true\n    end\n    \n    if sum(q) > (w-w%2)\n\
    \        return false\n    end\n    \n    return will_it_fly(q[1:end-1], w-w%2)\
    \ && will_it_fly(q[end], w)\nend\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1,2],\
    \ 5)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2, 3], 1)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([3, 2, 3], 9)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([3], 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if q will fly, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgdchigik.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgdchigik.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for i in q\n        sum += i\n    end\n    \n    if sum == w\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptx_ek4hh.jl:36\n  Expression: candidate([3,\
    \ 2, 3], 9) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmptx_ek4hh.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptx_ek4hh.jl:35\ntest set: Test Failed at /tmp/tmptx_ek4hh.jl:38\n\
    \  Expression: candidate([3], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptx_ek4hh.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptx_ek4hh.jl:35\ntest set: Test Failed at /tmp/tmptx_ek4hh.jl:40\n\
    \  Expression: candidate([1, 2, 3], 6) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptx_ek4hh.jl:40\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptx_ek4hh.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptx_ek4hh.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp__ep24n8.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: is_palindromic\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmp__ep24n8.jl:23\n   [2] top-level scope at /tmp/tmp__ep24n8.jl:30\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp__ep24n8.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp__ep24n8.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: is_palindromic not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp__ep24n8.jl:23\n   [2]\
    \ top-level scope at /tmp/tmp__ep24n8.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp__ep24n8.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp__ep24n8.jl:32\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: is_palindromic not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp__ep24n8.jl:23\n   [2] top-level\
    \ scope at /tmp/tmp__ep24n8.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp__ep24n8.jl:29\n  \ntest set: Test Failed at\
    \ /tmp/tmp__ep24n8.jl:35\n  Expression: candidate([5], 5) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp__ep24n8.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__ep24n8.jl:29\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    2     1      3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp__ep24n8.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of palindromic lists in a\
    \ list of lists.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t\
    @test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaszoxdqd.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaszoxdqd.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0 \n        return true\n    end\n    \n    if sum(q) > (w-w%2)\
    \ \n        return false\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3j8h8y1o.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3j8h8y1o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3j8h8y1o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `will_it_fly([3,\
    \ 2, 3], 9) \u279E true` but `will_it_fly([3, 2, 3], 10) \u279E false`\n<|/ c\
    \ |>\n<| c |>\nI added a solution that works with any weight and any list of integers.\
    \ I tested it on Julia 1.5.2\n<|/ c |>\n<| c |>\nI added a solution that works\
    \ with any weight and any list of integers. I tested it on Julia 1.5.2\n<|/ c\
    \ |>\n<| c |>\nI added a solution that works with any weight and any list of integers.\
    \ I tested it on Julia 1.5.2\n<|/ c |>\n<| a dscore=0 |>\nThis solution works\
    \ with any weight and any list of integers. It uses no recursion and no loops.\
    \ \n<code>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr6jbx5qw.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr6jbx5qw.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum < w\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxxbn275h.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpxxbn275h.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxxbn275h.jl:29\ntest set: Test Failed at /tmp/tmpxxbn275h.jl:35\n\
    \  Expression: candidate([5], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxxbn275h.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxxbn275h.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxxbn275h.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsss5rovi.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpsss5rovi.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsss5rovi.jl:29\ntest set: Test Failed at /tmp/tmpsss5rovi.jl:35\n\
    \  Expression: candidate([5], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsss5rovi.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsss5rovi.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsss5rovi.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxibbpnm0.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxibbpnm0.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && sum == sum(q)\
    \ \nend\n</code>\n<|/ a tags=julia,function,performance |>\n<| c |>\nI believe\
    \ this answer is wrong. `sum` should be calculated outside the loop. Also, the\
    \ `sum` should be calculated outside the function and passed as a parameter. Otherwise\
    \ the function will always return the same result (true or false).\n<|/ c |>\n\
    <| c |>\nThanks for pointing out my mistakes. I edited my answer to fix them.\n\
    <|/ c |>\n<| c |>\nI believe this answer is still wrong. `sum` should be calculated\
    \ outside the loop. Also, the `sum` should be calculated outside the function\
    \ and passed as a parameter. Otherwise the function will always return the same\
    \ result (true or false).\n<|/ c |>\n<| c |>\nI believe this answer is still wrong.\
    \ `sum` should be calculated outside the loop. Also, the `sum` should be calculated\
    \ outside the function and passed as a parameter. Otherwise the function will\
    \ always return the same result (true or false).\n<|/ c |>\n<| c |>\nI believe\
    \ this answer is still wrong. `sum` should be calculated outside the loop. Also,\
    \ the `sum` should be calculated outside the function and passed as a parameter.\
    \ Otherwise the function will always return the same result (true or false).\n\
    <|/ c |>\n<| a tags=julia,function,performance |>\nThis is not an answer to your\
    \ question, but a suggestion to improve the performance of your code. \nIn Julia\
    \ you can write your code in a more compact way. For example, you can write:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppc6zg25q.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppc6zg25q.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum == w\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the number of palindromic lists whose elements are less than or equal to a given\
    \ value k.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy7py685h.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy7py685h.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   if length(q) == 0 || w == 0\n        return true\n    end\n    \n    if sum(q)\
    \ == w\n        return true\n    end\n    \n    if w > sum(q)\n        return\
    \ false\n    end\n    \n    if w == sum(q)\n        return true\n    end\n   \
    \ \n    if w == sum(q) + length(q)\n        return true\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9rdp4xfp.jl:42\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9rdp4xfp.jl:42\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2t1zsle5.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp2t1zsle5.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2t1zsle5.jl:29\ntest set: Test Failed at /tmp/tmp2t1zsle5.jl:34\n\
    \  Expression: candidate([1, 2, 3], 6) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2t1zsle5.jl:34\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2t1zsle5.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2t1zsle5.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</code>\n<|/ a tags=julia,function,performance |>\n<| c |>\n\
    Thank you for your answer. Could you please explain me what does `sum < w && is_palindromic(q)\
    \ && sum >= w` do? I understand that `sum < w` checks if the sum of the elements\
    \ is less than the maximum possible weight, but I don't understand what `sum >=\
    \ w` does.\n<|/ c |>\n<| c |>\n`sum >= w` checks if the sum of the elements is\
    \ greater than or equal to the maximum possible weight. `sum >= w` checks if the\
    \ sum of the elements is greater than or equal to the maximum possible weight.\
    \ `sum >= w` checks if the sum of the elements is greater than or equal to the\
    \ maximum possible weight.\n<|/ c |>\n<| c |>\nThank you for your explanation.\
    \ Could you please explain me what does `sum < w && is_palindromic(q) && sum >=\
    \ w` do? I understand that `sum < w` checks if the sum of the elements is less\
    \ than the maximum possible weight, but I don't understand what `sum >= w` does.\n\
    <|/ c |>\n<| c |>\n`sum < w` checks if the sum of the elements is less than the\
    \ maximum possible weight. `sum >= w` checks if the sum of the elements is greater\
    \ than or equal to the maximum possible weight. `sum >= w` checks if the sum of\
    \ the elements is greater than or equal to the maximum possible weight.\n<|/ c\
    \ |>\n<| c |>\nThank you for your explanation. Could you please explain me what\
    \ does `sum < w && is_palindromic(q) && sum >= w` do? I understand that `sum <\
    \ w` checks if the sum of the elements is less than the maximum possible weight,\
    \ but I don't understand what `sum >= w` does.\n<|/ c |>\n<| a tags=julia,function,performance\
    \ |>\nI wrote a function that checks if a vector is a palindrome:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprm9nabvt.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprm9nabvt.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t\
    @test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpuitlege5.jl:30\n  Expression: candidate([3,\
    \ 2, 3], 9) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpuitlege5.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuitlege5.jl:29\ntest set: Test Failed at /tmp/tmpuitlege5.jl:32\n\
    \  Expression: candidate([3], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuitlege5.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuitlege5.jl:29\ntest set: Error During Test at\
    \ /tmp/tmpuitlege5.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: is_palindromic not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpuitlege5.jl:23\n   [2]\
    \ top-level scope at /tmp/tmpuitlege5.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuitlege5.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpuitlege5.jl:35\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: is_palindromic not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpuitlege5.jl:23\n   [2] top-level\
    \ scope at /tmp/tmpuitlege5.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuitlege5.jl:29\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    2     2      2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuitlege5.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum == sum(q)\nend\n</cell>\n<text>\nQ16\nWrite a function that returns the\
    \ number of palindromic lists whose elements are less than or equal to a given\
    \ integer n.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmq2hnu34.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmq2hnu34.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && sum == sum(q[end-1:end])\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I understand\
    \ that my code is not the most efficient one, but I wanted to know if there was\
    \ a way to make it more efficient. Also, thanks for the tip about using sum instead\
    \ of sum!\n<|/ c |>\n<| c |>\nI added a more efficient solution. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks again! I really appreciate it!\n<|/ c |>\n<| a dscore=1\
    \ |>\nHere's a solution that uses no loops and no recursion:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp24xg4qsq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp24xg4qsq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   # Your code here\n    \nend\n</cell>\n<text>\nPart 2: Palindrome Numbers\n\
    Write a function that returns True if q will be a palindrome number, and False\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6p5irdc1.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6p5irdc1.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for i in q\n        sum += i\n    end\n    if sum < w\n     \
    \   return false\n    end\n    \n    for i in q\n        sum += i\n    end\n \
    \   return sum == w\nend\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1,2],\
    \ 5)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2, 3], 1)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([3, 2, 3], 9)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([3], 5)\n</cell>\n<text>\nPart 2\nWrite a function that returns the\
    \ maximum possible weight of a palindromic list q.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdmm1x_fy.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdmm1x_fy.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</code>\n<|/ a |>\n<| c |>\nI believe this solution will fail\
    \ if `sum < w` but `is_palindromic(q)` returns false. `sum < w` will always be\
    \ true because `sum` is initialized to zero and `sum < w` will always be false\
    \ because `sum` is initialized to zero.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out! I edited my answer to fix it.\n<|/ c |>\n<| a tags=julia,functional-programming\
    \ |>\nI believe this solution will fail if sum < w but is_palindromic(q) returns\
    \ false. sum < w will always be true because sum is initialized to zero and sum\
    \ < w will always be false because sum is initialized to zero.\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzsmn1gcr.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzsmn1gcr.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI believe this answer would be better if you added some explanation\
    \ as to why it works.\n<|/ c |>\n<| c |>\nI added some explanation to the answer\n\
    <|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpof61xw_2.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpof61xw_2.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0\n        return true\n    end\n    \n    if sum(q) > (w-1)\n\
    \        return false\n    end\n    \n    if sum(q) == w\n        return true\n\
    \    end\n    \n    if sum(q) == (w-1)\n        return true\n    end\n    \n \
    \   return will_it_fly(reverse(sort(q)), w-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb56vpqed.jl:43\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpb56vpqed.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb56vpqed.jl:41\ntest set: Test Failed at /tmp/tmpb56vpqed.jl:47\n\
    \  Expression: candidate([5], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb56vpqed.jl:47\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb56vpqed.jl:41\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb56vpqed.jl:39\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0 \n        return true\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7u4jhhb9.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7u4jhhb9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7u4jhhb9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if the object q will fly, and False otherwise.\nThe object q will fly if\
    \ it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcox_wf8_.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcox_wf8_.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum == w\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if q will fly, and False otherwise.\nThe object q will fly if it's balanced\
    \ (it is a palindromic list) and the sum of its elements is less than or equal\
    \ the maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpszrp05g9.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpszrp05g9.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && sum == reverse(sum)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your code works\
    \ perfectly for small lists, but for large lists, it takes too much time to compute.\
    \ Do you have any idea to improve the speed of computing?\n<|/ c |>\n<| c |>\n\
    I added a faster version. Hope it helps.\n<|/ c |>\n<| c |>\nThank you very much!\
    \ Your code is very helpful for me. :)\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmz7yb3e_.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmz7yb3e_.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0\n        return true\n    end\n    if sum(q) > (w-1)\n      \
    \  return false\n    end\n    return will_it_fly(reverse(sort(q)), w)\nend\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([3, 2, 3], 9)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsix56pcv.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsix56pcv.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if w\
    \ == 0 \n        return true\n    else \n        sum = 0\n        for i in q\n\
    \            sum += i\n            if sum > w\n                return false\n\
    \            else\n                sum = 0\n        end\n        return true\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpej4ohy2_.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpej4ohy2_.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_balanced(q)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ik_01qf.jl:30\n  Expression: candidate([3,\
    \ 2, 3], 9) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9ik_01qf.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ik_01qf.jl:29\ntest set: Test Failed at /tmp/tmp9ik_01qf.jl:32\n\
    \  Expression: candidate([3], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ik_01qf.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ik_01qf.jl:29\ntest set: Error During Test at\
    \ /tmp/tmp9ik_01qf.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: is_balanced not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp9ik_01qf.jl:23\n   [2]\
    \ top-level scope at /tmp/tmp9ik_01qf.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9ik_01qf.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp9ik_01qf.jl:35\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: is_balanced not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp9ik_01qf.jl:23\n   [2] top-level\
    \ scope at /tmp/tmp9ik_01qf.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9ik_01qf.jl:29\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    2     2      2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ik_01qf.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nPart 2: Palindromic Numbers\nWrite a function\
    \ that takes an integer $n$ and returns True if $n$ is a palindrome, False otherwise.\
    \ Your function should work for any $n$ that is an integer.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi63zrulc.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi63zrulc.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd38lhz9z.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd38lhz9z.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && is_balanced(q)\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer! I understand\
    \ your solution, but I still don't understand how it works. Can you please explain\
    \ how it works?\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThank you for your explanation! I understand it now.\
    \ One more question: why do you use \"sum < w && is_balanced(q)\" instead of \"\
    sum < w\"?\n<|/ c |>\n<| c |>\nBecause `sum < w` will be true only if the sum\
    \ of elements is less than or equal to `w`. But `is_balanced(q)` returns true\
    \ only if the list is balanced. So `sum < w && is_balanced(q)` will only be true\
    \ if `sum < w` is true and `is_balanced(q)` is true.\n<|/ c |>\n<| c |>\nThank\
    \ you for your explanation! I understand it now. One more question: why do you\
    \ use \"sum < w && is_balanced(q)\" instead of \"sum < w\"?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq9j0jbvt.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq9j0jbvt.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nPart 2: Palindrome Numbers\nWrite a function\
    \ that takes in a positive integer and returns True if it's a palindrome, False\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp20cy_x8y.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp20cy_x8y.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Part III. Palindrome Numbers\nWrite a function that checks if a number is palindrome\
    \ or not.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphk90ppng.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphk90ppng.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > (w-w)/2\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<text>\nPart 2: Palindrome Partitioning\nThe palindrome partitioning\
    \ problem is also known as \"longest palindromic subsequence\", or \"longest palindromic\
    \ substring problem\". The longest palindromic subsequence problem is to find\
    \ the longest palindromic subsequence of a given string. For example, for the\
    \ string \"aab\", the longest palindromic subsequence is \"aab\", which has length\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3plnvfdr.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3plnvfdr.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Part III: Solution\nNow that we have written the will_it_fly() function, we can\
    \ use it to solve the problem of finding the longest palindromic subsequence of\
    \ a given list. Let's start by writing a function that will find the longest palindromic\
    \ subsequence of a given list. We'll start by writing a function that will find\
    \ the longest palindromic subsequence of a given list. We'll start by writing\
    \ a function that will find the longest palindromic subsequence of a given list.\
    \ We'll start by writing a function that will find the longest palindromic subsequence\
    \ of a given list. We'll start by writing a function that will find the longest\
    \ palindromic subsequence of a given list. We'll start by writing a function that\
    \ will find the longest palindromic subsequence of a given list. We'll start by\
    \ writing a function that will find the longest palindromic subsequence of a given\
    \ list. We'll start by writing a function that will find the longest palindromic\
    \ subsequence of a given list. We'll start by writing a function that will find\
    \ the longest palindromic subsequence of a given list. We'll start by writing\
    \ a function that will find the longest palindromic subsequence of a given list.\
    \ We'll start by writing a function that will find the longest palindromic subsequence\
    \ of a given list. We'll start by writing a function that will find the longest\
    \ palindromic subsequence of a given list. We'll start by writing a function that\
    \ will find the longest palindromic subsequence of a given list. We'll start by\
    \ writing a function that will find the longest palindromic subsequence of a given\
    \ list. We'll start by writing a function that will find the longest palindromic\
    \ subsequence of a given list. We'll start by writing a function that will find\
    \ the longest palindromic subsequence of a given list. We'll start by writing\
    \ a function that will find the longest palindromic subsequence of a given list.\
    \ We'll start by writing a function that will find the longest palindromic subsequence\
    \ of a given list. We'll start by writing a function that will find the longest\
    \ palindromic subsequence of a given list. We'll start by writing a function that\
    \ will find the longest palindromic subsequence of a given list. We'll start by\
    \ writing a function that will \nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk7bauj93.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk7bauj93.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0\n        return true\n    end\n    if sum(q) <= w\n        return\
    \ true\n    end\n    return false\nend\n</cell>\n<text>\nQ9. Write a function\
    \ that returns the maximum possible weight of a palindromic list q.\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp303anhgn.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp303anhgn.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n        if sum > w\n            return\
    \ false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwymar4x_.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwymar4x_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwymar4x_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for i in q\n        sum += i\n    end\n    \n    if sum == w\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns True if the object q will fly,\
    \ and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpho9ziqve.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpho9ziqve.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ vector of weights and a vector of objects, and returns a vector of the weights\
    \ of the objects that will fly.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplja2z_1p.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplja2z_1p.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2, 3],\
    \ 9)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ palindromic lists whose elements are less than or equal to a given number.\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9jyrzvwt.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9jyrzvwt.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns True if the object\
    \ q will fly, and False otherwise.\nThe object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy8aa5rax.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy8aa5rax.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    \n    if sum == w\n    \
    \    return true\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) ==\
    \ true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) ==\
    \ true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3],\
    \ 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx5d_ka_c.jl:35\n  Expression: candidate([3,\
    \ 2, 3], 9) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpx5d_ka_c.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx5d_ka_c.jl:34\ntest set: Test Failed at /tmp/tmpx5d_ka_c.jl:37\n\
    \  Expression: candidate([3], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx5d_ka_c.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx5d_ka_c.jl:34\ntest set: Test Failed at /tmp/tmpx5d_ka_c.jl:39\n\
    \  Expression: candidate([1, 2, 3], 6) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpx5d_ka_c.jl:39\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx5d_ka_c.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx5d_ka_c.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for your answer. Unfortunately, I cannot use any external\
    \ libraries. I only can use basic functions like sum, max, and min.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that uses only basic functions.\
    \ I hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqjuadjm0.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqjuadjm0.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0 \n        return true\n    end\n    \n    if sum(q) <= w \n \
    \       return true\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswocq1bm.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpswocq1bm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpswocq1bm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        return true\n    else \n        return false\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if the object\
    \ q will fly, and False otherwise.\nThe object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcg71fxiu.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcg71fxiu.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if w\
    \ == 0 \n        true\n    else\n        sum (q) == w && will_it_fly(reverse(sort(q)),\
    \ w-sum (q))\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) ==\
    \ true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) ==\
    \ true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3],\
    \ 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"sum (\" at\
    \ /tmp/tmpsus1_hnk.jl:22\nStacktrace:\n [1] top-level scope at /tmp/tmpsus1_hnk.jl:22\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsus1_hnk.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    \n    if sum == w\n    \
    \    return true\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) ==\
    \ true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) ==\
    \ true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3],\
    \ 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6bxv10r_.jl:35\n  Expression: candidate([3,\
    \ 2, 3], 9) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp6bxv10r_.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6bxv10r_.jl:34\ntest set: Test Failed at /tmp/tmp6bxv10r_.jl:37\n\
    \  Expression: candidate([3], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6bxv10r_.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6bxv10r_.jl:34\ntest set: Test Failed at /tmp/tmp6bxv10r_.jl:39\n\
    \  Expression: candidate([1, 2, 3], 6) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6bxv10r_.jl:39\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6bxv10r_.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6bxv10r_.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_m9g845p.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp_m9g845p.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_m9g845p.jl:29\ntest set: Test Failed at /tmp/tmp_m9g845p.jl:35\n\
    \  Expression: candidate([5], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_m9g845p.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_m9g845p.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_m9g845p.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if q will fly, and False otherwise.\nThe object q will fly if it's balanced\
    \ (it is a palindromic list) and the sum of its elements is less than or equal\
    \ the maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp48e_oler.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp48e_oler.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `will_it_fly([3, 2, 3], 9) \u279E\
    \ true` but `will_it_fly([3, 2, 3], 1) \u279E false`\n<|/ c |>\n<| c |>\nI fixed\
    \ the code so it works. I forgot to add the `sum < w` condition. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe_yuwe5k.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe_yuwe5k.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9rt6g7pw.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9rt6g7pw.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for i in q\n        sum += i\n    end\n    \n    if sum < w\n\
    \        return false\n    end\n    \n    if sum == w\n        return true\n \
    \   end\n    \n    return will_it_fly(reverse(sort(q)), w)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) ==\
    \ true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) ==\
    \ true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3],\
    \ 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw2ttx49k.jl:40\n  Expression: candidate([3,\
    \ 2, 3], 9) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpw2ttx49k.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw2ttx49k.jl:39\ntest set: Test Failed at /tmp/tmpw2ttx49k.jl:42\n\
    \  Expression: candidate([3], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw2ttx49k.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw2ttx49k.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpw2ttx49k.jl:43\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3], 1) == false\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at ./boot.jl:405\
    \ [inlined]\n   [2] similar at ./array.jl:356 [inlined]\n   [3] copymutable at\
    \ ./abstractarray.jl:898 [inlined]\n   [4] #sort#8 at ./sort.jl:763 [inlined]\n\
    \   [5] sort at ./sort.jl:763 [inlined]\n   [6] will_it_fly(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpw2ttx49k.jl:33 (repeats 65391 times)\n   [7] top-level scope\
    \ at /tmp/tmpw2ttx49k.jl:43\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpw2ttx49k.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpw2ttx49k.jl:44\n  Expression: candidate([1, 2, 3], 6) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] top-level scope at /tmp/tmpw2ttx49k.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw2ttx49k.jl:39\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    2     3      1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw2ttx49k.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the\
    \ number of palindromic lists whose elements are less than or equal to a given\
    \ number n.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfdb4uick.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfdb4uick.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector v of positive integers\
    \ and returns the number of palindromic subsequences of length at most k.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq89aeqte.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq89aeqte.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the minimum number of moves required to convert a palindromic list to a non-palindromic\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpapl3qxj2.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpapl3qxj2.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0\n        return true\n    end\n    if sum(q) > (w-1)\n      \
    \  return false\n    end\n    \n    if sum(q) == w\n        return true\n    end\n\
    \    \n    if sum(q) == (w-1)\n        return false\n    end\n    \n    if sum(q)\
    \ == (w-2)\n        return true\n    end\n    \n    if sum(q) == (w-3)\n     \
    \   return false\n    end\n    \n    if sum(q) == (w-4)\n        return true\n\
    \    end\n    \n    if sum(q) == (w-5)\n        return false\n    end\n    \n\
    \    if sum(q) == (w-6)\n        return true\n    end\n    \n    if sum(q) ==\
    \ (w-7)\n        return false\n    end\n    \n    if sum(q) == (w-8)\n       \
    \ return true\n    end\n    \n    if sum(q) == (w-9)\n        return false\n \
    \   end\n    \n    if sum(q) == (w-10)\n        return true\n    end\n    \n \
    \   if sum(q) == (w-11)\n        return false\n    end\n    \n    if sum(q) ==\
    \ (w-12)\n        return true\n    end\n    \n    if sum(q) == (w-13)\n      \
    \  return false\n    end\n    \n    if sum(q) == (w-14)\n        return true\n\
    \    end\n    \n    if sum(q) == (w-15)\n        return false\n    end\n    \n\
    \    if sum(q) == (w-16)\n        return true\n    end\n    \n    if sum(q) ==\
    \ (w-17)\n        return false\n    end\n    \n    if sum(q) == (w-18)\n     \
    \   return true\n    end\n    \n    if sum(q) == (w-19)\n        return false\n\
    \    end\n    \n    if sum(q) == (w-20)\n        return true\n    end\n    \n\
    \    if sum(q) == (w-21)\n        return false\n    end\n    \n    if sum(q) ==\
    \ (w-22)\n        return true\n    end\n    \n    if sum(q) == (w-23)\n      \
    \  return false\n    end\n    \n    if sum(q) == (w-24)\n        return true\n\
    \    end\n    \n    if sum(q) == (w-25)\n        return false\n    end\n    \n\
    \    if sum(q) == (w-26)\n        return true\n    end\n    \n    if sum(q) ==\
    \ (w-27)\n        return false\n    end\n    \n    if sum(q) == (w-28)\n     \
    \   return true\n    end\n    \n    if sum(q) == (w-29)\n        return false\n\
    \    end\n    \n    if sum(q) == (w-30)\n        return true\n    end\n    \n\
    \    if sum(q) == (w-31)\n        return false\n    end\n    \n    if \nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmp70vtmvr0.jl:154\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp70vtmvr0.jl:155\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp70vtmvr0.jl:155\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum == sum(q)\nend\n</cell>\n<text>\nQ. Write a function that returns True\
    \ if the object q will fly, and False otherwise.\nThe object q will fly if it's\
    \ balanced (it is a palindromic list) and the sum of its elements is less than\
    \ or equal the maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpev7kbvyu.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpev7kbvyu.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0\n        return true\n    end\n    if sum(q) > (w-1)\n      \
    \  return false\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9s7c0zeb.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9s7c0zeb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9s7c0zeb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</cell>\n<text>\nPart 2: Palindromic Arrays\nWrite a function\
    \ that takes an array of integers and returns True if it is palindromic, and False\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ihlje4d.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ihlje4d.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer!\
    \ I didn't know about `sum` function. I think I should learn more about it.\n\
    <|/ c |>\n<| c |>\n`sum` is an extremely useful function in any programming language.\
    \ There are many other useful functions in any programming language, such as `max`,\
    \ `min`, `append`, `sort`, `reverse`, `map`, `filter`, `reduce`, `zip`, `enumerate`,\
    \ etc. I highly recommend you learn more about `sum` before you start writing\
    \ any more code.\n<|/ c |>\n<| c |>\nI see. Thank you so much for your help!\n\
    <|/ c |>\n<| a tags=julia,function,if-statement |>\nThe problem is that the function\
    \ returns nothing (nothing = nothing).\n<code>\njulia> function will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool \n           sum = 0\n           for x in q\n              \
    \ sum += x\n           end\n           sum < w && is_palindromic(q) && sum >=\
    \ w\n       end\nwill_it_fly(::Vector{Int64}, ::Int64) where {Int64}\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvzyx1vji.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvzyx1vji.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 \n        return true\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1ckzs3yn.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1ckzs3yn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1ckzs3yn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for x in q\n        sum += x\n    end\n    \n    if sum == w\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpykezk1_l.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpykezk1_l.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\n</code>\n<|/ a tags=julia,function,arrays\
    \ |>\n<| c |>\nI see that you are using Julia 1.x syntax. Is there a way to do\
    \ this in Julia 1.x?\n<|/ c |>\n<| c |>\nI added a Julia 1.x solution. Let me\
    \ know if it works for you.\n<|/ c |>\n<| c |>\nI added a Julia 1.x solution.\
    \ Let me know if it works for you.\n<|/ c |>\n<| c |>\nThanks for your help. I\
    \ appreciate it!\n<|/ c |>\n<| a tags=julia,function,arrays |>\nHere's a Julia\
    \ 1.x solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd63yndte.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd63yndte.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && sum == reverse(sum)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns True if the object\
    \ q will fly, and False otherwise.\nThe object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4jjyoth1.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4jjyoth1.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ True if q will fly, and False otherwise.\nThe object q will fly if it's balanced\
    \ (it is a palindromic list) and the sum of its elements is less than or equal\
    \ the maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpil61xdjt.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpil61xdjt.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for i in q\n        sum += i\n    end\n    \n    if sum == w\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns True if the object q will fly,\
    \ and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx665g0yt.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx665g0yt.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if w\
    \ == 0 \n        true\n    elseif w == 1 \n        true\n    elseif w == 2 \n\
    \        true\n    elseif w == 3 \n        true\n    elseif w == 4 \n        true\n\
    \    elseif w == 5 \n        true\n    elseif w == 6 \n        true\n    elseif\
    \ w == 7 \n        true\n    elseif w == 8 \n        true\n    elseif w == 9 \n\
    \        true\n    elseif w == 10 \n        true\n    elseif w == 11 \n      \
    \  true\n    elseif w == 12 \n        true\n    elseif w == 13 \n        true\n\
    \    elseif w == 14 \n        true\n    elseif w == 15 \n        true\n    elseif\
    \ w == 16 \n        true\n    elseif w == 17 \n        true\n    elseif w == 18\
    \ \n        true\n    elseif w == 19 \n        true\n    elseif w == 20 \n   \
    \     true\n    elseif w == 21 \n        true\n    elseif w == 22 \n        true\n\
    \    elseif w == 23 \n        true\n    elseif w == 24 \n        true\n    elseif\
    \ w == 25 \n        true\n    elseif w == 26 \n        true\n    elseif w == 27\
    \ \n        true\n    elseif w == 28 \n        true\n    elseif w == 29 \n   \
    \     true\n    elseif w == 30 \n        true\n    elseif w == 31 \n        true\n\
    \    elseif w == 32 \n        true\n    elseif w == 33 \n        true\n    elseif\
    \ w == 34 \n        true\n    elseif w == 35 \n        true\n    elseif w == 36\
    \ \n        true\n    elseif w == 37 \n        true\n    elseif w == 38 \n   \
    \     true\n    elseif w == 39 \n        true\n    elseif w == 40 \n        true\n\
    \    elseif w == 41 \n        true\n    elseif w == 42 \n        true\n    elseif\
    \ w == 43 \n        true\n    elseif w == 44 \n        true\n    elseif w == 45\
    \ \n        true\n    elseif w == 46 \n        true\n    elseif w == 47 \n   \
    \     true\n    elseif w == 48 \n        true\n    elseif w == 49 \n        true\n\
    \    elseif w == 50 \n        true\n    elseif w == 51 \n        true\n    elseif\
    \ w == 52 \n        true\n    elseif w == 53 \n        true\n    elseif w == 54\
    \ \n        true\n    elseif w == \nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo_od8j8u.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo_od8j8u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum == w\nend\n</cell>\n<text>\nQ16\nWrite a function that returns True if\
    \ q will fly, and False otherwise.\nThe object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp93byh8vu.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp93byh8vu.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</cell>\n<text>\nPart 2\nWrite a function that takes a list\
    \ of integers and a number k, and returns a list of all possible combinations\
    \ of k numbers from the list.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp44f63mg5.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp44f63mg5.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        return true\n    else \n        return false\n    end\nend\n\
    </cell>\n<text>\nPart 2: Write a function that returns True if the object q will\
    \ fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyvazxjzq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyvazxjzq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0\n        return true\n    end\n    \n    if sum(q) == w\n   \
    \     return true\n    end\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqzobpijz.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqzobpijz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqzobpijz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer!\
    \ I appreciate it! But I still don't understand why my code doesn't work. Could\
    \ you please explain to me why my code doesn't work?\n<|/ c |>\n<| c |>\nThe code\
    \ doesn't work because you didn't implement the function `is_palindromic`. You\
    \ didn't even call it anywhere. Your code doesn't work because you didn't implement\
    \ the function `will_it_fly`. You didn't even call it anywhere. Your code doesn't\
    \ work because you didn't implement the function `is_balanced`. You didn't even\
    \ call it anywhere. Your code doesn't work because you didn't implement the function\
    \ `sum`. You didn't even call it anywhere. Your code doesn't work because you\
    \ didn't implement the function `is_palindromic`. You didn't even call it anywhere.\
    \ Your code doesn't work because you didn't implement the function `sum`. You\
    \ didn't even call it anywhere. Your code doesn't work because you didn't implement\
    \ the function `is_palindromic`. You didn't even call it anywhere. Your code doesn't\
    \ work because you didn't implement the function `sum`. You didn't even call it\
    \ anywhere. Your code doesn't work because you didn't implement the function `is_palindromic`.\
    \ You didn't even call it anywhere. Your code doesn't work because you didn't\
    \ implement the function `sum`. You didn't even call it anywhere. Your code doesn't\
    \ work because you didn't implement the function `is_palindromic`. You didn't\
    \ even call it anywhere. Your code doesn't work because you didn't implement the\
    \ function `sum`. You didn't even call it anywhere. Your code doesn't work because\
    \ you didn't implement the function `is_palindromic`. You didn't even call it\
    \ anywhere. Your code doesn't work because you didn't implement the function `sum`.\
    \ You didn't even call it anywhere. Your code doesn't work because you didn't\
    \ implement the function `is_palindromic`. You didn't even call it anywhere. Your\
    \ code doesn't work because you didn't implement the function `sum`. You didn't\
    \ even call it anywhere. Your code doesn't work because you didn't implement the\
    \ function `is_palindromic`. You didn't even call it anywhere. Your code doesn't\
    \ work because you didn't implement the function `sum`. You didn't even call it\
    \ anywhere. Your code doesn't work because you \nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ch869g5.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ch869g5.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w\nend\n</cell>\n\
    <text>\nPart III. Palindrome numbers\nWrite a function that returns True if the\
    \ object q is a palindrome, and False otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphck8982q.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphck8982q.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\
    \ || sum > w && sum == sum(reverse(sort(q)))\nend\n</cell>\n<text>\nPart 2\nWrite\
    \ a function that takes as input a palindromic list q and a maximum weight w,\
    \ and returns a new list that is the reverse of q (i.e. the list q is reversed).\
    \ \nThe new list will have a maximum weight of w, and if the new list would be\
    \ shorter than w, then it will have as many elements as are needed to reach the\
    \ maximum weight.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t\
    @test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4hws0dg8.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4hws0dg8.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for i in q\n        sum += i\n    end\n    \n    if sum < w\n\
    \        return false\n    end\n    \n    if sum == w\n        return true\n \
    \   end\n    \n    return will_it_fly(reverse(sort(q)), w)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns True if q will fly, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptzbtzp9w.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptzbtzp9w.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w\nend\n</cell>\n\
    <text>\nPart II: Palindromic Lists\nWrite a function that checks if a list is\
    \ palindromic (it is a palindromic list if the sum of its elements is less than\
    \ or equal the maximum possible weight w).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgup8q3i5.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgup8q3i5.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n        if sum > w\n            return\
    \ false\n    end\n    return true\nend\n</cell>\n<text>\nQ12. Write a function\
    \ that returns True if the object q will fly, and False otherwise.\nThe object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9esm1q9g.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9esm1q9g.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ == w && is_palindromic(q) && w <= maximum(w)\n        return true\n    end\n\
    \    return false\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptx8erq9z.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptx8erq9z.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > (w-w)/2 \n        true\n    else\n        false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkeo07gyf.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpkeo07gyf.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkeo07gyf.jl:29\ntest set: Test Failed at /tmp/tmpkeo07gyf.jl:33\n\
    \  Expression: candidate([3, 2, 3], 1) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkeo07gyf.jl:33\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkeo07gyf.jl:29\ntest set: Test Failed at /tmp/tmpkeo07gyf.jl:34\n\
    \  Expression: candidate([1, 2, 3], 6) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkeo07gyf.jl:34\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkeo07gyf.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkeo07gyf.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum == w\nend\n</cell>\n<text>\nPart 2: Palindromic Arrays\nWrite a function\
    \ that returns True if the array q will fly, and False otherwise.\nThe array q\
    \ will fly if and only if it is a palindromic array.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr5k45gv2.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr5k45gv2.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if the object q will fly, and False otherwise.\nThe object q will fly if\
    \ it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnnqnbjkk.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnnqnbjkk.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ True if the object q will fly, and False otherwise.\nThe object q will fly if\
    \ it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzm1jst_x.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzm1jst_x.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum == w\nend\n</code>\n<|/ a tags=julia,functional-programming |>\n<| c\
    \ |>\nThank you for the answer! I understand that my code is not the most efficient\
    \ one, but I still don't understand why my code doesn't work. Could you please\
    \ explain me why my code doesn't work?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you for the explanation!\
    \ I still don't understand why my code doesn't work. Could you please explain\
    \ me why my code doesn't work?\n<|/ c |>\n<| c |>\nI added some comments to my\
    \ answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you for the explanation! I\
    \ still don't understand why my code doesn't work. Could you please explain me\
    \ why my code doesn't work?\n<|/ c |>\n<| a tags=julia,functional-programming\
    \ |>\nThe reason why your code doesn't work is that your function is_palindromic\
    \ doesn't work properly. \n<code>\njulia> is_palindromic([3,2,3])\nfalse\n</code>\n\
    It returns false because you compare the elements of the list with each other,\
    \ but they aren't equal:\n<code>\njulia> [3,2,3] == [3,2,3]\nfalse\n</code>\n\
    The function is_palindromic should look like this:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9fk_tv2y.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9fk_tv2y.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjjz5rxjj.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpjjz5rxjj.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjjz5rxjj.jl:29\ntest set: Test Failed at /tmp/tmpjjz5rxjj.jl:35\n\
    \  Expression: candidate([5], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjjz5rxjj.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjjz5rxjj.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjjz5rxjj.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   # Write your solution here\n    \nend\n</cell>\n<text>\nSolution\nSolution\
    \ notebook\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpecregg00.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpecregg00.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    \n    if sum == w\n    \
    \    return true\n    end\n    \n    if sum > w\n        return false\n    end\n\
    \    \n    if sum < w\n        return true\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph11j84y_.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph11j84y_.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0 \n        return true\n    end\n    \n    if sum(q) > (w-1)\n\
    \        return false\n    end\n    \n    sum = 0\n    for i in q\n        sum\
    \ += i\n    end\n    \n    if sum == (w-1)\n        return true\n    end\n   \
    \ \n    return false\nend\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3,\
    \ 2, 3], 9)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2, 3], 1)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([3, 2, 3], 5)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 5)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 1)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 9)\n</cell>\n<code\
    \ language=julia-1.5>\nwill_it_fly([1, 2], 10)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 11)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 12)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 13)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 14)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 15)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 16)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 17)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 18)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 19)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 20)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 21)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 22)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 23)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 24)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 25)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 26)\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplp4r28p1.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplp4r28p1.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0\n        return true\n    end\n    if sum(q) <= w\n        return\
    \ true\n    end\n    \n    return false\nend\n</cell>\n<text>\nQ12. Write a function\
    \ that returns True if the object q will fly, and False otherwise.\nThe object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgn27xjdm.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgn27xjdm.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector v and a number k, and\
    \ returns the number of times v has length k.\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiecg27jx.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiecg27jx.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns True if q will fly, and False\
    \ otherwise. \nThe object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk9qu3gcd.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk9qu3gcd.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_balanced(q)\n\
    end\n</cell>\n<text>\nPart III. Palindromic Lists\nWrite a function that checks\
    \ if a list is palindromic. Palindromic lists are lists whose elements are the\
    \ same when read from left to right and from right to left.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0l8h489_.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0l8h489_.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t\
    @test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpd09fbtzo.jl:30\n  Expression: candidate([3,\
    \ 2, 3], 9) == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpd09fbtzo.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd09fbtzo.jl:29\ntest set: Test Failed at /tmp/tmpd09fbtzo.jl:32\n\
    \  Expression: candidate([3], 5) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd09fbtzo.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd09fbtzo.jl:29\ntest set: Error During Test at\
    \ /tmp/tmpd09fbtzo.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: is_palindromic not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpd09fbtzo.jl:23\n   [2]\
    \ top-level scope at /tmp/tmpd09fbtzo.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd09fbtzo.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpd09fbtzo.jl:35\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: is_palindromic not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpd09fbtzo.jl:23\n   [2] top-level\
    \ scope at /tmp/tmpd09fbtzo.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd09fbtzo.jl:29\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    2     2      2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd09fbtzo.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   sum = 0\n    for i in q\n        sum += i\n    end\n    \n    if sum == w\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3nvahh5h.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3nvahh5h.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\
    \ || sum > w && sum == sum(reverse(q))\nend\n</code>\n<|/ a tags=julia,function,arrays\
    \ |>\n<| a tags=julia,function,arrays |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpauej1hst.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpauej1hst.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    return sum <= w\nend\n</cell>\n\
    <text>\nPart III. Palindrome Numbers\nWrite a function that returns True if n\
    \ is a palindrome number, and False otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmso3_nc6.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmso3_nc6.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if w\
    \ == 0 \n        true\n    else\n        sum(q) <= w\n    end\nend\n</cell>\n\
    <text>\nPart 2\nWrite a function that takes an array of integers and returns the\
    \ maximum number in the array. \nThe function should return 0 if the array is\
    \ empty.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzq810mti.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzq810mti.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\
    \ || sum > w && sum == sum(reverse(q))\nend\n</code>\n<|/ a tags=julia,performance\
    \ |>\n<| c |>\nThanks for your answer! I didn't know that `sum` could be used\
    \ like that. I'm going to try it out and see how it performs.\n<|/ c |>\n<| c\
    \ |>\nI added a solution that uses `sum` like you suggested. I also added a benchmark\
    \ comparing it to my original solution. I'm surprised that `sum` can be used in\
    \ this way. Do you know why it can?\n<|/ c |>\n<| c |>\n`sum` is an alias for\
    \ `Base.sum`, which has special optimizations for `Int64` types. `sum` does not\
    \ actually perform the summation, but rather it just checks if the sum is less\
    \ than the given `w` and then checks if the sum is equal to the sum of the elements\
    \ in the given vector. `sum` does not actually perform the summation, but rather\
    \ it just checks if the sum is less than the given `w` and then checks if the\
    \ sum is equal to the sum of the elements in the given vector. `sum` does not\
    \ actually perform the summation, but rather it just checks if the sum is less\
    \ than the given `w` and then checks if the sum is equal to the sum of the elements\
    \ in the given vector. `sum` does not actually perform the summation, but rather\
    \ it just checks if the sum is less than the given `w` and then checks if the\
    \ sum is equal to the sum of the elements in the given vector. `sum` does not\
    \ actually perform the summation, but rather it just checks if the sum is less\
    \ than the given `w` and then checks if the sum is equal to the sum of the elements\
    \ in the given vector. `sum` does not actually perform the summation, but rather\
    \ it just checks if the sum is less than the given `w` and then checks if the\
    \ sum is equal to the sum of the elements in the given vector. `sum` does not\
    \ actually perform the summation, but rather it just checks if the sum is less\
    \ than the given `w` and then checks if the sum is equal to the sum of the elements\
    \ in the given vector. `sum` does not actually perform the summation, but rather\
    \ it just checks if the sum is less than the given `w` and then checks if the\
    \ sum is equal to the sum of the elements in the given vector. `sum` does not\
    \ actually perform the summation, but rather it just checks if the sum is less\
    \ than the given `w` and then checks if the sum is equal to the sum of the elements\
    \ in the given vector. `sum` does not actually perform the summation, but rather\
    \ it just checks if the sum is less than the given \nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfp00sohy.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfp00sohy.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/27812871)\n<|/ c\
    \ |>\n<| c |>\nI believe this does answer the question. He wants to know if an\
    \ object will fly, and he has written a function that returns true if the object\
    \ will fly, and false otherwise. He also asked if there is a better way to write\
    \ this function, and I believe my answer is an improvement on his existing function.\n\
    <|/ c |>\n<| c |>\nI agree with you, but this does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/27812871)\n<|/ c\
    \ |>\n<| c |>\nI believe this does answer the question. He wants to know if an\
    \ object will fly, and he has written a function that returns true if the object\
    \ will fly, and false otherwise. He also asked if there is a better way to write\
    \ this function, and I believe my answer is an improvement on his existing function.\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to know if\
    \ an object will fly, and he has written a function that returns true if the object\
    \ will fly, and false otherwise. He also asked if there is a better way to write\
    \ this function, and I believe my answer is an improvement on his existing function.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjmicoq1a.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjmicoq1a.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && is_balanced(q)\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<text>\nPart 3: Palindrome Test\nWrite a function that\
    \ returns true if the object q is a palindrome, and false otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5jgq1lxm.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5jgq1lxm.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2, 3],\
    \ 9)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2, 3], 1)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 5)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 4)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 3)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 2)\n</cell>\n<code\
    \ language=julia-1.5>\nwill_it_fly([1, 2], 1)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 0)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ -1)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], -2)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], -3)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], -4)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ -5)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], -6)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], -7)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], -8)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ -9)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], -10)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], -11)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], -12)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1,\
    \ 2], -13)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], -14)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], -15)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], -16)\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqgud8m9_.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqgud8m9_.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nQ. Write a function that returns True if the\
    \ object q will fly, and False otherwise.\nThe object q will fly if it's balanced\
    \ (it is a palindromic list) and the sum of its elements is less than or equal\
    \ the maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb6_r736b.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb6_r736b.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   # Write your code here\n    \n    return true\nend\n</cell>\n<text>\nSolution\n\
    Solution notebook\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t\
    @test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1scvzzwc.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1scvzzwc.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if length(q)\
    \ == 0 || w == 0\n        return true\n    end\n    if sum(q) <= w\n        return\
    \ true\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if the object q will fly, and False otherwise.\nThe object\
    \ q will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4aavpmgm.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4aavpmgm.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nQ. Write a function that returns True if the\
    \ object q will fly, and False otherwise.\nThe object q will fly if it's balanced\
    \ (it is a palindromic list) and the sum of its elements is less than or equal\
    \ the maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpikrk8i3u.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpikrk8i3u.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   if length(q) == 0 || w == 0\n        return true\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) ==\
    \ true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) ==\
    \ true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3],\
    \ 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7bmr2wp0.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7bmr2wp0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7bmr2wp0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nQ. Write a function that returns True if the\
    \ object q will fly, and False otherwise.\nThe object q will fly if it's balanced\
    \ (it is a palindromic list) and the sum of its elements is less than or equal\
    \ the maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe0ipukik.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe0ipukik.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > (w-w)/2 \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Q12. Write a function that returns the minimum number of moves needed to fly.\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvg0hixyu.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvg0hixyu.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum == w && is_palindromic(q)\
    \ && sum <= w\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThank you for your answer!\
    \ I understand your code, but I still don't understand how it works. Could you\
    \ please explain how it works? I understand that `is_palindromic(q)` returns true\
    \ if the list is a palindrome, but I don't understand how `sum == w && is_palindromic(q)\
    \ && sum <= w` works.\n<|/ c |>\n<| c |>\n`sum == w && is_palindromic(q) && sum\
    \ <= w` means `sum == w && is_palindromic(q)` means `sum == w` means `sum == w`\
    \ means `sum == w` means `sum == w` means `sum == w` means `sum == w` means `sum\
    \ == w` means `sum == w` means `sum == w` means `sum == w` means `sum == w` means\
    \ `sum == w` means `sum == w` means `sum == w` means `sum == w` means `sum ==\
    \ w` means `sum == w` means `sum == w` means `sum == w` means `sum == w` means\
    \ `sum == w` means `sum == w` means `sum == w` means `sum == w` means `sum ==\
    \ w` means `sum == w` means `sum == w` means `sum == w` means `sum == w` means\
    \ `sum == w` means `sum == w` means `sum == w` means `sum == w` means `sum ==\
    \ w` means `sum == w` means `sum == w` means `sum == w` means `sum == w` means\
    \ `sum == w` means `sum == w` means `sum == w` means `sum == w` means `sum ==\
    \ w` means `sum == w` means `sum == w` means `sum == w` means `sum == w` means\
    \ `sum == w` means `sum == w` means `sum == w` means `sum == w` means `sum ==\
    \ w` means `sum == w` means `sum == w` means `sum == w` means `sum == w` means\
    \ `sum == w` means `sum == w` means `sum == w` means \nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzfz_x4sr.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzfz_x4sr.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ == w \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns True if the object q will fly, and False\
    \ otherwise.\nThe object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjkp3dtex.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjkp3dtex.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > (w-w)/2\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if the object\
    \ q will fly, and False otherwise.\nThe object q will fly if it's balanced (it\
    \ is a palindromic list) and the sum of its elements is less than or equal the\
    \ maximum possible weight w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps5ppat46.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps5ppat46.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwca_angh.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpwca_angh.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwca_angh.jl:29\ntest set: Test Failed at /tmp/tmpwca_angh.jl:34\n\
    \  Expression: candidate([1, 2, 3], 6) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwca_angh.jl:34\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwca_angh.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwca_angh.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsat7hoyi.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsat7hoyi.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > (w-w)/2 \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns True if the object q will fly, and False\
    \ otherwise.\nThe object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpok7tbybq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpok7tbybq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && sum == sum(q)\n\
    end\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2, 3], 9)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpah026b7p.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpah026b7p.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I tried to run\
    \ your code, but I got an error message saying \"ERROR: LoadError: ArgumentError:\
    \ invalid argument to 'isa'; no method 'isa' for type Int64\". Do you know what\
    \ this means?\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that\
    \ uses `isa`. Hope it helps!\n<|/ c |>\n<| c |>\nThanks for your answer! I tried\
    \ to run your code, but I got an error message saying \"ERROR: LoadError: ArgumentError:\
    \ invalid argument to 'isa'; no method 'isa' for type Int64\". Do you know what\
    \ this means?\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that\
    \ uses `isa`. Hope it helps!\n<|/ c |>\n<| c |>\nThanks for your answer! I tried\
    \ to run your code, but I got an error message saying \"ERROR: LoadError: ArgumentError:\
    \ invalid argument to 'isa'; no method 'isa' for type Int64\". Do you know what\
    \ this means?\n<|/ c |>\n<| a tags=julia,function,arrays |>\nThe function below\
    \ will check if a vector is palindromic and returns true if it is. It also checks\
    \ if the sum of the elements is less than or equal to the maximum possible weight\
    \ w. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2vkkxcae.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2vkkxcae.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps6m8fpms.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  MethodError: objects of type\
    \ Int64 are not callable\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmps6m8fpms.jl:23\n   [2] top-level scope at /tmp/tmps6m8fpms.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps6m8fpms.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmps6m8fpms.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmps6m8fpms.jl:23\n   [2]\
    \ top-level scope at /tmp/tmps6m8fpms.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps6m8fpms.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmps6m8fpms.jl:32\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmps6m8fpms.jl:23\n   [2]\
    \ top-level scope at /tmp/tmps6m8fpms.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmps6m8fpms.jl:29\n  \ntest set: Test Failed at\
    \ /tmp/tmps6m8fpms.jl:35\n  Expression: candidate([5], 5) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmps6m8fpms.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps6m8fpms.jl:29\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    2     1      3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps6m8fpms.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum(q) <= w\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the maximum possible weight of a palindromic list q that contains at most n\
    \ elements.\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_v8z9w4i.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_v8z9w4i.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum == w && is_palindromic(q)\
    \ && sum <= w\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer!\
    \ I tried to run your code, but I got this error:\n`julia> will_it_fly([3,2,3],\
    \ 9)\nERROR: MethodError: no method matching will_it_fly(::Array{Int64,1})`\n\
    <|/ c |>\n<| c |>\nI forgot to add `will_it_fly(q::Vector{Int64}, w::Int64)` at\
    \ the end. I've edited my answer.\n<|/ c |>\n<| c |>\nThank you for your answer!\
    \ I tried to run your code, but I got this error:\n`julia> will_it_fly([3,2,3],\
    \ 9)\nERROR: MethodError: no method matching will_it_fly(::Array{Int64,1})`\n\
    <|/ c |>\n<| c |>\nI forgot to add `will_it_fly(q::Vector{Int64}, w::Int64)` at\
    \ the end. I've edited my answer.\n<|/ c |>\n<| c |>\nThank you for your answer!\
    \ I tried to run your code, but I got this error:\n`julia> will_it_fly([3,2,3],\
    \ 9)\nERROR: MethodError: no method matching will_it_fly(::Array{Int64,1})`\n\
    <|/ c |>\n<| a tags=julia,function,arrays |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp41jux9jb.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp41jux9jb.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && sum == sum(q)\
    \ \nend\n</code>\n<|/ a tags=julia,function,arrays |>\n<| c |>\nThank you for\
    \ answering my question! I appreciate it!\n<|/ c |>\n<| a |>\nThe answer by is\
    \ very good, but I thought I'd add some explanation as to why it works.\nThe function\
    \ will_it_fly(q::Vector{Int64}, w::Int64)::Bool takes two arguments: q and w.\
    \ q is an array of Int64s, and w is an Int64. \nThe function will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool returns true if the sum of the elements of q is less than or\
    \ equal to w, and false otherwise. \nThe function will_it_fly(q::Vector{Int64},\
    \ w::Int64)::Bool can be rewritten as:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy7hicu00.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy7hicu00.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns True if q will fly, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgg1n24qp.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgg1n24qp.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w \n        true\n    else\n        false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpofbpj_z9.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpofbpj_z9.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpofbpj_z9.jl:29\ntest set: Test Failed at /tmp/tmpofbpj_z9.jl:34\n\
    \  Expression: candidate([1, 2, 3], 6) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpofbpj_z9.jl:34\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpofbpj_z9.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpofbpj_z9.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum(q) <= w\nend\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2,\
    \ 3], 9)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([3, 2, 3], 1)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([3, 2, 3], 5)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 5)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 10)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 15)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 20)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 25)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 30)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 35)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 40)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 45)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 50)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 55)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 60)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 65)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 70)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 75)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 80)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 85)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2],\
    \ 90)\n</cell>\n<code language=julia-1.5>\nwill_it_fly([1, 2], 95)\n</cell>\n\
    <code language=julia-1.5>\nwill_it_fly([1, 2], 100)\n</cell>\n<code language=julia-1.5>\n\
    will_it_fly([1, 2], 105)\n</cell>\n<code language=julia-1.5>\nwill_it_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvjun2697.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvjun2697.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum == w\nend\n</cell>\n<text>\nPart III: Palindrome Numbers\nNow that we\
    \ have defined our palindrome function, let's see how we can use it to solve the\
    \ problem of finding palindrome numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy1534dby.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy1534dby.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nPart 2\nWrite a function that takes as input\
    \ a palindromic list q and an integer w, and returns the maximum possible weight\
    \ of q after it has been balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb5mg1yit.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb5mg1yit.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum < w\nend\n</cell>\n<text>\nPart III. Palindrome numbers\nWrite a function\
    \ that returns True if the number is a palindrome, and False otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_e46a6eu.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_e46a6eu.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    \n \
    \   if length(q) == 0 || w == 0\n        return true\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) ==\
    \ true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) ==\
    \ true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3],\
    \ 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0wmnxp_9.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0wmnxp_9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0wmnxp_9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) ==\
    \ true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) ==\
    \ true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3],\
    \ 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp47ndhq7a.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp47ndhq7a.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_balanced(q)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5a4w7yah.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: is_balanced not\
    \ defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp5a4w7yah.jl:23\n\
    \   [2] top-level scope at /tmp/tmp5a4w7yah.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5a4w7yah.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp5a4w7yah.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: is_balanced not defined\n  Stacktrace:\n \
    \  [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp5a4w7yah.jl:23\n   [2]\
    \ top-level scope at /tmp/tmp5a4w7yah.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5a4w7yah.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp5a4w7yah.jl:32\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: is_balanced not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp5a4w7yah.jl:23\n   [2] top-level\
    \ scope at /tmp/tmp5a4w7yah.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5a4w7yah.jl:29\n  \ntest set: Test Failed at\
    \ /tmp/tmp5a4w7yah.jl:35\n  Expression: candidate([5], 5) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp5a4w7yah.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5a4w7yah.jl:29\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    2     1      3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5a4w7yah.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum == w && is_palindromic(q)\
    \ && sum <= w\nend\n</cell>\n<code language=julia-1.0>\nwill_it_fly([3, 2, 3],\
    \ 9)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ palindromic lists whose elements are less than or equal to a given value x.\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp95vo54fg.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp95vo54fg.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum < w && is_palindromic(q)\
    \ && sum == w\nend\n</code>\n<|/ a tags=julia,function,arrays |>\n<| c |>\nThank\
    \ you so much! I really appreciate it!\n<|/ c |>\n<| a tags=julia,function,arrays\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_n2vtp9m.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_n2vtp9m.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</code>\n<|/ a tags=julia,arrays,palindrome |>\n<| c |>\n\
    This answer does not work if `q` is an empty array. `sum` will throw an error\
    \ when `q` is an empty array.\n<|/ c |>\n<| c |>\nI added a version that handles\
    \ the empty array case\n<|/ c |>\n<| a tags=julia,arrays,palindrome |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2glkzulk.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2glkzulk.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    return sum == w && is_palindromic(q)\
    \ && sum(q) <= w\nend\n</code>\n<|/ a tags=julia,function,arrays |>\n<| c |>\n\
    Thank you for your answer! I tried to run your code, but I got this error `ERROR:\
    \ LoadError: ArgumentError: invalid argument to sum: Int64`. I think it's because\
    \ `sum` doesn't work on `Int64` type. Do you know how I can fix this?\n<|/ c |>\n\
    <| c |>\nI fixed the error, but now it says `ERROR: LoadError: ArgumentError:\
    \ invalid argument to sum: Int64`\n<|/ c |>\n<| c |>\nI fixed the error, but now\
    \ it says `ERROR: LoadError: ArgumentError: invalid argument to sum: Int64`\n\
    <|/ c |>\n<| c |>\nI fixed the error, but now it says `ERROR: LoadError: ArgumentError:\
    \ invalid argument to sum: Int64`\n<|/ c |>\n<| c |>\nI fixed the error, but now\
    \ it says `ERROR: LoadError: ArgumentError: invalid argument to sum: Int64`\n\
    <|/ c |>\n<| a tags=julia,function,arrays |>\nThe function is_palindromic can\
    \ be implemented as follows:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp79gkj6vo.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp79gkj6vo.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for x in q\n        sum += x\n    end\n    sum < w && sum == sum(q)\n\
    end\n</cell>\n<text>\nPart 3: Problem Solving\nLet's now write a function that\
    \ takes in a vector of digits and a maximum weight and returns True if the vector\
    \ represents a palindrome and False otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplcmuerzp.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplcmuerzp.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum\
    \ = 0\n    for i in q\n        sum += i\n    end\n    sum < w && is_palindromic(q)\
    \ && sum >= w\nend\n</code>\n<|/ a tags=julia,function,arrays |>\n<| c |>\nThank\
    \ you for your answer! I appreciate it!\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses `@inbounds`, which I believe is more efficient.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI believe that your solution is correct, but you can improve it a little\
    \ bit by avoiding looping over all elements in the array. \n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9)\
    \ == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5)\
    \ == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2,\
    \ 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq202knjq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq202knjq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if w\
    \ == 0 \n        true\n    elseif w == 1 \n        true\n    elseif w == 2 \n\
    \        true\n    elseif w == 3 \n        true\n    elseif w == 4 \n        true\n\
    \    elseif w == 5 \n        true\n    elseif w == 6 \n        true\n    elseif\
    \ w == 7 \n        true\n    elseif w == 8 \n        true\n    elseif w == 9 \n\
    \        true\n    elseif w == 10 \n        true\n    elseif w == 11 \n      \
    \  true\n    elseif w == 12 \n        true\n    elseif w == 13 \n        true\n\
    \    elseif w == 14 \n        true\n    elseif w == 15 \n        true\n    elseif\
    \ w == 16 \n        true\n    elseif w == 17 \n        true\n    elseif w == 18\
    \ \n        true\n    elseif w == 19 \n        true\n    elseif w == 20 \n   \
    \     true\n    elseif w == 21 \n        true\n    elseif w == 22 \n        true\n\
    \    elseif w == 23 \n        true\n    elseif w == 24 \n        true\n    elseif\
    \ w == 25 \n        true\n    elseif w == 26 \n        true\n    elseif w == 27\
    \ \n        true\n    elseif w == 28 \n        true\n    elseif w == 29 \n   \
    \     true\n    elseif w == 30 \n        true\n    elseif w == 31 \n        true\n\
    \    elseif w == 32 \n        true\n    elseif w == 33 \n        true\n    elseif\
    \ w == 34 \n        true\n    elseif w == 35 \n        true\n    elseif w == 36\
    \ \n        true\n    elseif w == 37 \n        true\n    elseif w == 38 \n   \
    \     true\n    elseif w == 39 \n        true\n    elseif w == 40 \n        true\n\
    \    elseif w == 41 \n        true\n    elseif w == 42 \n        true\n    elseif\
    \ w == 43 \n        true\n    elseif w == 44 \n        true\n    elseif w == 45\
    \ \n        true\n    elseif w == 46 \n        true\n    elseif w == 47 \n   \
    \     true\n    elseif w == 48 \n        true\n    elseif w == 49 \n        true\n\
    \    elseif w == 50 \n        true\n    elseif w == 51 \n        true\n    elseif\
    \ w == 52 \n        true\n    elseif w == 53 \n        true\n    elseif w == 54\
    \ \n        true\n    elseif w == \nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdetjdrjp.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdetjdrjp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ == w && is_palindromic(q) && w <= maximum(w)\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<text>\nPart 2: Palindrome Partitioning\n\
    The palindrome partitioning problem is a classic computer science problem in combinatorics.\
    \ Given a number n, find all partitions of n into two non-empty subsets.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpax092adq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpax092adq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ == w && is_palindromic(q) && w <= sum(q)\n        return true\n    else\n  \
    \      return false\n    end\nend\n</cell>\n<text>\nPart III. Palindromic Numbers\n\
    Write a function that returns True if the object q will fly, and False otherwise.\n\
    The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2,\
    \ 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa1vyrhjh.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa1vyrhjh.jl:25\n"
  exit_code: 1
  status: Exception
