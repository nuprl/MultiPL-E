name: HumanEval_11_string_xor
language: julia
results:
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) != length(b) \n        error(\"\
    Strings must have same length\")\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_p7t9tq.jl:1\nin expression starting at /tmp/tmph_p7t9tq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    if a==\"\" || b==\"\"\n        return \"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsie8w3la.jl:1\nin expression starting at /tmp/tmpsie8w3la.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        return char(xor(ord(a[i]), ord(b[i])))\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a binary string to a decimal\
    \ integer. \nFor example the string \"0101\" should return 3\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9q5su4xo.jl:12\nin expression starting at\
    \ /tmp/tmp9q5su4xo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"String\
    \ is empty\")\n    elseif length(a) == 1 \n        return a\n    else\n      \
    \  return a^b\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    string_xor(a::String,\
    \ b::String)::String \n    Perform binary XOR on two strings a and b and return\
    \ result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf3k5o9bm.jl:16\nin expression starting at\
    \ /tmp/tmpf3k5o9bm.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) then return \"\" \n    else\
    \ \n        string_xor_recursive(a, b, \"\")\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2std8c73.jl:7\nin expression starting at /tmp/tmp2std8c73.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) == length(b) \n        \n      \
    \  \n        if length(a) == 1 \n            return a\n        \n        if length(b)\
    \ == 1 \n            return b\n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgdkdl6zo.jl:1\nin expression starting at /tmp/tmpgdkdl6zo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6dpk4fwg.jl:8\nin expression starting at /tmp/tmp6dpk4fwg.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3wc80m0o.jl:8\nin expression starting at /tmp/tmp3wc80m0o.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a, b), b)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of 1s\
    \ in the string.\n>>> count_ones(\"010\")\n2\n>>> count_ones(\"1010\")\n3\n>>>\
    \ count_ones(\"10101010\")\n4\n>>> count_ones(\"101010101010\")\n5\n>>> count_ones(\"\
n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsnttadcx.jl:8\nin expression starting at /tmp/tmpsnttadcx.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5gzj1irn.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5gzj1irn.jl:1\n\
    in expression starting at /tmp/tmp5gzj1irn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), string_xor(b, a))\n        else return string_xor(a, string_xor(b, a))\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstring_xor('010', '110')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that performs XOR on two strings\
    \ a and b of equal length and returns the result as a string.\nWrite a function\
    \ that performs XOR on two strings a and b of equal length and returns the result\
    \ as a string.\nWrite a function that performs XOR on two strings a and b of equal\
    \ length and returns the result as a string.\nWrite a function that performs XOR\
    \ on two strings a and b of equal length and returns the result as a string.\n\
    Write a function that performs XOR on two strings a and b of equal length and\
    \ returns the result as a string.\nWrite a function that performs XOR on two strings\
    \ a and b of equal length and returns the result as a string.\nWrite a function\
    \ that performs XOR on two strings a and b of equal length and returns the result\
    \ as a string.\nWrite a function that performs XOR on two strings a and b of equal\
    \ length and returns the result as a string.\nWrite a function that performs XOR\
    \ on two strings a and b of equal length and returns the result as a string.\n\
    Write a function that performs XOR on two strings a and b of equal length and\
    \ returns the result as a string.\nWrite a function that performs XOR on two strings\
    \ a and b of equal length and returns the result as a string.\nWrite a function\
    \ that performs XOR on two strings a and b of equal length and returns the result\
    \ as a string.\nWrite a function that performs XOR on two strings a and b of equal\
    \ length and returns the result as a string.\nWrite a function that performs XOR\
    \ on two strings a and b of equal length and returns the result as a string.\n\
    Write a function that performs XOR on two strings a and b of equal length and\
    \ returns the result as a string.\nWrite a function that performs XOR on two strings\
    \ a and b of equal length and returns the result as a string.\nWrite a function\
    \ that performs XOR on two strings a and b of equal length and returns the result\
    \ as a string.\nWrite a function that performs XOR on two strings a and b of equal\
    \ length and returns the result as a string.\nWrite a function that performs XOR\
    \ on two strings a and b of equal length and returns the result as a string.\n\
    Write a function that performs XOR on two strings a and b of equal length and\
    \ returns the result as a string.\nWrite a function that performs X\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbhfvbvpw.jl:8\nin expression starting at /tmp/tmpbhfvbvpw.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) == length(b) \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphsy_4d97.jl:1\nin expression starting at /tmp/tmphsy_4d97.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphu99j729.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphu99j729.jl:1\n\
    in expression starting at /tmp/tmphu99j729.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        string_xor = zeros(length(a))\n\
    \        for i in 1:length(a)\n            string_xor[i] = (a[i] ^ b[i])\n   \
    \     end\n        return string_xor\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpufk36mxu.jl:16\nin expression starting at\
    \ /tmp/tmpufk36mxu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1lu42g1b.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1lu42g1b.jl:1\n\
    in expression starting at /tmp/tmp1lu42g1b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), string_xor(b, a))\n        else return \"\"\n    end\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1a0msqx5.jl:8\nin expression starting at /tmp/tmp1a0msqx5.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsx4h7dvr.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsx4h7dvr.jl:1\n\
    in expression starting at /tmp/tmpsx4h7dvr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) then \n        string_xor_recursive(a,\
    \ b, \"\")\n    else \n        string_xor_recursive(a, b, \"\")\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwwba8spn.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ then not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n \
    \    @ Main /tmp/tmpwwba8spn.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwwba8spn.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwwba8spn.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwwba8spn.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: then not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpwwba8spn.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwwba8spn.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwwba8spn.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpwwba8spn.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: then not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpwwba8spn.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwwba8spn.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwwba8spn.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwwba8spn.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a, b), string_xor(b, a))\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2sqxpi40.jl:8\nin expression starting at /tmp/tmp2sqxpi40.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) != length(b) \n        error(\"\
    Length of strings do not match\")\n    else \n        \n        ans = \"\"\n \
    \       for i in each(a) \n            ans = ans + char(i) ^ char(b[i])\n    \
    \    return ans\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplaz1hw2u.jl:17\nin expression starting at\
    \ /tmp/tmplaz1hw2u.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a,b),a)\n    end\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph3kot_64.jl:8\nin expression starting at /tmp/tmph3kot_64.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) then\n        local c = 0\n\
    \        for i in a:gmatch(\"%d\") do c = c + i end\n        return string(c,2)\n\
    \    else\n        return \"Invalid input\"\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ performs bitwise AND on two strings a and b. Input are two strings a and b consisting\
    \ only of 1s and 0s.\n    Perform binary AND on these inputs and return result\
    \ also as a string.\n    >>> string_and('010', '110')\n    '111'\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcbuhrbil.jl:9\nin expression starting at /tmp/tmpcbuhrbil.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return a ^ b\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuyt_vqm4.jl:9\nin expression starting at /tmp/tmpuyt_vqm4.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        return chars(xor(a,b))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbsg0y0l8.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbsg0y0l8.jl:1\n\
    in expression starting at /tmp/tmpbsg0y0l8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n\
    </cell>\n<code language=julia-1.3>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of times each character appears in the string. \nFor example if the input string\
    \ is \"abcabc\" the function should return {\"a\" => 3, \"b\" => 2, \"c\" => 3}.\n\
    The function should work for strings of any length.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpluxyuwpc.jl:8\nin expression starting at /tmp/tmpluxyuwpc.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwc9b4o_s.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwc9b4o_s.jl:1\n\
    in expression starting at /tmp/tmpwc9b4o_s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpep7pw6_3.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpep7pw6_3.jl:1\n\
    in expression starting at /tmp/tmpep7pw6_3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return a\n\
    \        else return b\n    end\n    if length(a) > length(b) \n        then return\
    \ b\n        else return a\n    end\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr2_lkrr.jl:8\nin expression starting at /tmp/tmphr2_lkrr.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp25fig_d9.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp25fig_d9.jl:1\n\
    in expression starting at /tmp/tmp25fig_d9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a, b), b)\n    else if length(a) >\
    \ length(b) \n        then return string_xor(a, string_xor(b, a))\n        else\
    \ return string_xor(string_xor(a, b), a)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmu_0dkb4.jl:8\nin expression starting at /tmp/tmpmu_0dkb4.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        return chars(xor(ord(a), ord(b)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5ejnkgyj.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5ejnkgyj.jl:1\n\
    in expression starting at /tmp/tmp5ejnkgyj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return bin(bin(a) XOR bin(b))[2:]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphns6ofnu.jl:7\nin expression starting at /tmp/tmphns6ofnu.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), a)\n        else return string_xor(a, b)\n    else return \"\"\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary string to a decimal integer.\nThe\
    \ function should take two arguments: a binary string and a base (an integer between\
    \ 2 and 36).\nThe function should return the decimal integer represented by the\
    \ binary string.\nThe function should raise an error if the base is not between\
    \ 2 and 36.\nThe function should raise an error if the binary string contains\
    \ more than 1 '1'.\nThe function should raise an error if the binary string contains\
    \ more than 1 '0'.\nThe function should raise an error if the binary string contains\
    \ more than 2 characters.\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary string\
    \ is not a multiple of 2).\nThe function should raise an error if the binary string\
    \ contains more than 2 digits (i.e. if the number of digits in the binary \nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz6lfl0q0.jl:8\nin expression starting at /tmp/tmpz6lfl0q0.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), b)\n        else return string_xor(a, string_xor(b, a))\n    else return\
    \ \"\"\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of 1s in the string.\n>>> count_ones(\"010\")\n2\n>>> count_ones(\"\
    011\")\n1\n>>> count_ones(\"100\")\n1\n>>> count_ones(\"101\")\n0\n>>> count_ones(\"\
    110\")\n1\n>>> count_ones(\"111\")\n2\n>>> count_ones(\"1010\")\n2\n>>> count_ones(\"\
    1011\")\n1\n>>> count_ones(\"1110\")\n1\n>>> count_ones(\"1111\")\n3\n>>> count_ones(\"\
    11111\")\n4\n>>> count_ones(\"111111\")\n5\n>>> count_ones(\"1111111\")\n6\n>>>\
    \ count_ones(\"11111111\")\n7\n>>> count_ones(\"111111111\")\n8\n>>> count_ones(\"\
    1111111111\")\n9\n>>> count_ones(\"11111111111\")\n10\n>>> count_ones(\"111111111111\"\
    )\n11\n>>> count_ones(\"1111111111111\")\n12\n>>> count_ones(\"11111111111111\"\
    )\n13\n>>> count_ones(\"111111111111111\")\n14\n>>> count_ones(\"111111111111111\"\
    )\n15\n>>> count_ones(\"111111111111111\")\n16\n>>> count_ones(\"111111111111111\"\
    )\n17\n>>> count_ones(\"111111111111111\")\n18\n>>> count_ones(\"111111111111111\"\
    )\n19\n>>> count_ones(\"111111111111111\")\n20\n>>> count_ones(\"111111111111111\"\
    )\n21\n>>> count_ones(\"111111111111111\")\n22\n>>> count_ones(\"111111111111111\"\
    )\n23\n>>> count_ones(\"111111111111111\")\n24\n>>> count_ones(\"111111111111111\"\
    )\n25\n>>> count_ones(\"111111111111111\")\n26\n>>> count_ones(\"111111111111111\"\
    )\n27\n>>> count_ones(\"111111111111111\")\n28\n>>> count_ones(\"111111111111111\"\
    )\n29\n>>> count_ones(\"111111111111111\")\n30\n>>> count_ones(\"111111111111111\"\
    )\n31\n>>> count_ones(\"111111111111111\")\n32\n>>> count_ones(\"111111111111111\"\
    )\n33\n>>> count_ones(\"111111111111111\")\n34\n>>> count_ones(\"111111111111111\"\
    )\n35\n\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6_860o3s.jl:8\nin expression starting at /tmp/tmp6_860o3s.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"Strings\
    \ must have at least one character\")\n    elseif length(a) == 1 \n        return\
    \ b\n    elseif length(a) == 2 \n        return a\n    elseif length(a) == 3 \n\
    \        return string_xor(a[1:2], b[1:2])\n    elseif length(a) == 4 \n     \
    \   return string_xor(a[1:3], b[1:3])\n    elseif length(a) == 5 \n        return\
    \ string_xor(a[1:4], b[1:4])\n    elseif length(a) == 6 \n        return string_xor(a[1:5],\
    \ b[1:5])\n    elseif length(a) == 7 \n        return string_xor(a[1:6], b[1:6])\n\
    \    elseif length(a) == 8 \n        return string_xor(a[1:7], b[1:7])\n    elseif\
    \ length(a) == 9 \n        return string_xor(a[1:8], b[1:8])\n    elseif length(a)\
    \ == 10 \n        return string_xor(a[1:9], b[1:9])\n    elseif length(a) == 11\
    \ \n        return string_xor(a[1:10], b[1:10])\n    elseif length(a) == 12 \n\
    \        return string_xor(a[1:11], b[1:11])\n    elseif length(a) == 13 \n  \
    \      return string_xor(a[1:12], b[1:12])\n    elseif length(a) == 14 \n    \
    \    return string_xor(a[1:13], b[1:13])\n    elseif length(a) == 15 \n      \
    \  return string_xor(a[1:14], b[1:14])\n    elseif length(a) == 16 \n        return\
    \ string_xor(a[1:15], b[1:15])\n    elseif length(a) == 17 \n        return string_xor(a[1:16],\
    \ b[1:16])\n    elseif length(a) == 18 \n        return string_xor(a[1:17], b[1:17])\n\
    \    elseif length(a) == 19 \n        return string_xor(a[1:18], b[1:18])\n  \
    \  elseif length(a) == 20 \n        return string_xor(a[1:19], b[1:19])\n    elseif\
    \ length(a) == 21 \n        return string_xor(a[1:20], b[1:20])\n    elseif length(a)\
    \ == 22 \n        return string_xor(a[1:21], b[1:21])\n    elseif length(a) ==\
    \ 23 \n        return string_xor(a[1:22], b[1:22])\n    elseif length(a) == 24\
    \ \n        return string_xor(a[1:23], b[1:23])\n    elseif length(a) == 25 \n\
    \        return string_xor(a[1:24], b[1:24])\n    elseif length(a) == 26 \n  \
    \      return string_xor(a[1:25], b[1:25])\n    elseif length(a) == 27 \n    \
    \    return string_xor(a[1:26], \nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpez51w1xm.jl:67\nin expression starting at\
    \ /tmp/tmpez51w1xm.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfv0uwx7f.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfv0uwx7f.jl:1\n\
    in expression starting at /tmp/tmpfv0uwx7f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) then\n        local c = 0\n\
    \        for i in a:gmatch(\"%d\") do c = c + i end\n        return string(c ==\
    \ 0)\n    else\n        return \"\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzl9_3or9.jl:9\nin expression starting at /tmp/tmpzl9_3or9.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"Strings\
    \ must have at least one character\")\n    elseif length(a) == 1 \n        return\
    \ b\n    elseif length(a) == 2 \n        return a xor b\n    elseif length(a)\
    \ == 3 \n        return a xor b xor c\n    elseif length(a) == 4 \n        return\
    \ a xor b xor c xor d\n    elseif length(a) == 5 \n        return a xor b xor\
    \ c xor d xor e\n    elseif length(a) == 6 \n        return a xor b xor c xor\
    \ d xor e xor f\n    elseif length(a) == 7 \n        return a xor b xor c xor\
    \ d xor e xor f xor g\n    elseif length(a) == 8 \n        return a xor b xor\
    \ c xor d xor e xor f xor g xor h\n    elseif length(a) == 9 \n        return\
    \ a xor b xor c xor d xor e xor f xor g xor h xor i\n    elseif length(a) == 10\
    \ \n        return a xor b xor c xor d xor e xor f xor g xor h xor i xor j\n \
    \   elseif length(a) == 11 \n        return a xor b xor c xor d xor e xor f xor\
    \ g xor h xor i xor j xor k\n    elseif length(a) == 12 \n        return a xor\
    \ b xor c xor d xor e xor f xor g xor h xor i xor j xor k xor l\n    elseif length(a)\
    \ == 13 \n        return a xor b xor c xor d xor e xor f xor g xor h xor i xor\
    \ j xor k xor l xor m\n    elseif length(a) == 14 \n        return a xor b xor\
    \ c xor d xor e xor f xor g xor h xor i xor j xor k xor l xor m xor n\n    elseif\
    \ length(a) == 15 \n        return a xor b xor c xor d xor e xor f xor g xor h\
    \ xor i xor j xor k xor l xor m xor n xor o\n    elseif length(a) == 16 \n   \
    \     return a xor b xor \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"xor\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6dsq5obl.jl:14\nin expression starting at /tmp/tmp6dsq5obl.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"String\
    \ is empty\")\n    elseif length(a) == 1 \n        return b\n    else\n      \
    \  return a^b\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\"\
    ) == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv57rk_z2.jl:17\nin expression starting at\
    \ /tmp/tmpv57rk_z2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3ubx7pum.jl:8\nin expression starting at /tmp/tmp3ubx7pum.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp40ntwms7.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp40ntwms7.jl:1\n\
    in expression starting at /tmp/tmp40ntwms7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) then return \"Invalid input\"\
    \n    else return string_xor(string_xor(a,b),string_xor(a,b)) end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp595dlc8p.jl:7\nin expression starting at /tmp/tmp595dlc8p.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"String\
    \ is empty\")\n    elseif length(a) == 1 \n        return b\n    elseif length(a)\
    \ == 2 \n        return a\n    elseif length(a) == 3 \n        return a\n    elseif\
    \ length(a) == 4 \n        return a\n    elseif length(a) == 5 \n        return\
    \ a\n    elseif length(a) == 6 \n        return a\n    elseif length(a) == 7 \n\
    \        return a\n    elseif length(a) == 8 \n        return a\n    elseif length(a)\
    \ == 9 \n        return a\n    elseif length(a) == 10 \n        return a\n   \
    \ elseif length(a) == 11 \n        return a\n    elseif length(a) == 12 \n   \
    \     return a\n    elseif length(a) == 13 \n        return a\n    elseif length(a)\
    \ == 14 \n        return a\n    elseif length(a) == 15 \n        return a\n  \
    \  elseif length(a) == 16 \n        return a\n    elseif length(a) == 17 \n  \
    \      return a\n    elseif length(a) == 18 \n        return a\n    elseif length(a)\
    \ == 19 \n        return a\n    elseif length(a) == 20 \n        return a\n  \
    \  elseif length(a) == 21 \n        return a\n    elseif length(a) == 22 \n  \
    \      return a\n    elseif length(a) == 23 \n        return a\n    elseif length(a)\
    \ == 24 \n        return a\n    elseif length(a) == 25 \n        return a\n  \
    \  elseif length(a) == 26 \n        return a\n    elseif length(a) == 27 \n  \
    \      return a\n    elseif length(a) == 28 \n        return a\n    elseif length(a)\
    \ == 29 \n        return a\n    elseif length(a) == 30 \n        return a\n  \
    \  elseif length(a) == 31 \n        return a\n    elseif length(a) == 32 \n  \
    \      return a\n    elseif length(a) == 33 \n        return a\n    elseif length(a)\
    \ == 34 \n        return a\n    elseif length(a) == 35 \n        return a\n  \
    \  elseif length(a) == 36 \n        return a\n    elseif length(a) == 37 \n  \
    \      return a\n    elseif length(a) == 38 \n        return a\n    elseif length(a)\
    \ == 39 \n        return a\n    elseif length(a) == 40 \n        return a\n  \
    \  elseif length(a) == 41 \n        return a\n    elseif length(a) == 42 \n  \
    \      return a\n    elseif length(a) == 43 \n        return a\n    elseif length(a)\
    \ == 44 \n        return a\n    elseif length(a) == 45 \n        return a\n  \
    \  elseif length(a) == 46 \n        return a\n    elseif length(a) == 47 \n  \
    \      return a\n    elseif length\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7952la6p.jl:1\nin expression starting at /tmp/tmp7952la6p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have the same length\")\n    else \n        return a^b\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppuhthabm.jl:12\nin expression starting at\
    \ /tmp/tmppuhthabm.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"String\
    \ is empty\")\n    elseif length(a) == 1 \n        return b\n    else\n      \
    \  return (a^b)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5tdz4uj.jl:17\nin expression starting at\
    \ /tmp/tmpq5tdz4uj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfsm1a3gc.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfsm1a3gc.jl:1\n\
    in expression starting at /tmp/tmpfsm1a3gc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcrf25m3h.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcrf25m3h.jl:1\n\
    in expression starting at /tmp/tmpcrf25m3h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a,b),a)\n    else return string_xor(a,string_xor(b,a))\n\
    end\n</cell>\n<code language=julia-1.4>\nstring_xor(\"010\", \"110\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two strings a and b as input and\
    \ returns the number of times each character appears in both strings.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpegojnwmu.jl:8\nin expression starting at /tmp/tmpegojnwmu.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaigja226.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaigja226.jl:1\n\
    in expression starting at /tmp/tmpaigja226.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return a^b\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiv0a0pvs.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching ^(::String, ::String)\n  Closest candidates are:\n    ^(::Union{AbstractChar,\
    \ AbstractString}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpiv0a0pvs.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiv0a0pvs.jl:14 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiv0a0pvs.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpiv0a0pvs.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching ^(::String,\
    \ ::String)\n  Closest candidates are:\n    ^(::Union{AbstractChar, AbstractString},\
    \ !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpiv0a0pvs.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiv0a0pvs.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiv0a0pvs.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpiv0a0pvs.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ ^(::String, ::String)\n  Closest candidates are:\n    ^(::Union{AbstractChar,\
    \ AbstractString}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpiv0a0pvs.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdli"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiv0a0pvs.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        return bin(ord(a) ^ ord(b))\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that performs XOR on two strings and returns the\
    \ result as a string.\nThe function should take two strings as inputs and return\
    \ a single string as output.\nThe function should also handle errors by printing\
    \ a message and returning a default value.\nThe function should also handle invalid\
    \ input by printing a message and returning a default value.\nThe function should\
    \ also handle invalid input by printing a message and returning a default value.\n\
    The function should also handle invalid input by printing a message and returning\
    \ a default value.\nThe function should also handle invalid input by printing\
    \ a message and returning a default value.\nThe function should also handle invalid\
    \ input by printing a message and returning a default value.\nThe function should\
    \ also handle invalid input by printing a message and returning a default value.\n\
    The function should also handle invalid input by printing a message and returning\
    \ a default value.\nThe function should also handle invalid input by printing\
    \ a message and returning a default value.\nThe function should also handle invalid\
    \ input by printing a message and returning a default value.\nThe function should\
    \ also handle invalid input by printing a message and returning a default value.\n\
    The function should also handle invalid input by printing a message and returning\
    \ a default value.\nThe function should also handle invalid input by printing\
    \ a message and returning a default value.\nThe function should also handle invalid\
    \ input by printing a message and returning a default value.\nThe function should\
    \ also handle invalid input by printing a message and returning a default value.\n\
    The function should also handle invalid input by printing a message and returning\
    \ a default value.\nThe function should also handle invalid input by printing\
    \ a message and returning a default value.\nThe function should also handle invalid\
    \ input by printing a message and returning a default value.\nThe function should\
    \ also handle invalid input by printing a message and returning a default value.\n\
    The function should also handle invalid input by printing a message and returning\
    \ a default value.\nThe function should also handle invalid input by printing\
    \ a message and returning a default value.\nThe function should also handle invalid\
    \ input by printing a message and returning a default value.\nThe function should\
    \ also handle invalid input by printing a message and returning a default value.\n\
    The function should also handle invalid input by printing a message and returning\
    \ a default value.\nThe function should also handle invalid input by printing\
    \ a message and return\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt91gof8m.jl:12\nin expression starting at\
    \ /tmp/tmpt91gof8m.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaj4mjqlf.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaj4mjqlf.jl:1\n\
    in expression starting at /tmp/tmpaj4mjqlf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"String\
    \ is empty\")\n    elseif length(a) == 1 \n        return a\n    elseif length(a)\
    \ == 2 \n        return string_xor(a[1:], b[1:])\n    elseif length(a) == 3 \n\
    \        return string_xor(a[1:], b[1:2]) + a[1]\n    elseif length(a) == 4 \n\
    \        return string_xor(a[1:], b[1:3]) + a[1] + a[2]\n    elseif length(a)\
    \ == 5 \n        return string_xor(a[1:], b[1:4]) + a[1] + a[2] + a[3]\n    elseif\
    \ length(a) == 6 \n        return string_xor(a[1:], b[1:5]) + a[1] + a[2] + a[3]\
    \ + a[4]\n    elseif length(a) == 7 \n        return string_xor(a[1:], b[1:6])\
    \ + a[1] + a[2] + a[3] + a[4] + a[5]\n    elseif length(a) == 8 \n        return\
    \ string_xor(a[1:], b[1:7]) + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n    elseif\
    \ length(a) == 9 \n        return string_xor(a[1:], b[1:8]) + a[1] + a[2] + a[3]\
    \ + a[4] + a[5] + a[6] + a[7]\n    elseif length(a) == 10 \n        return string_xor(a[1:],\
    \ b[1:9]) + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n    elseif\
    \ length(a) == 11 \n        return string_xor(a[1:], b[1:10]) + a[1] + a[2] +\
    \ a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]\n    elseif length(a) == 12 \n\
    \        return string_xor(a[1:], b[1:11]) + a[1] + a[2] + a[3] + a[4] + a[5]\
    \ + a[6] + a[7] + a[8] + a[9] + a[10]\n    elseif length(a) == 13 \n        return\
    \ string_xor(a[1:], b[1:12]) + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\
    \ + a[8] + a[9] + a[10] + a[11]\n    elseif length(a) == 14 \n        return string_xor(a[1:],\
    \ b[1:13]) + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10]\
    \ + a[11] + a[12]\n    elseif length(a) == 15 \n        return string_xor(a[1:],\
    \ b[1:14]) + a[1] + a[2] + a[3] + a[4] + a[5] + a[6\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptp4k32yq.jl:14\nin expression\
    \ starting at /tmp/tmptp4k32yq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return a ^ b\nend\n</cell>\n<code language=julia-1.5>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ performs bitwise AND on two strings a and b. \n    Input are two strings a and\
    \ b consisting only of 1s and 0s.\n    Perform binary AND on these inputs and\
    \ return result also as a string.\n    >>> string_and('010', '110')\n    '10'\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ezf9_yr.jl:9\nin expression starting at /tmp/tmp3ezf9_yr.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) == length(b) \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpydc0aiqe.jl:1\nin expression starting at /tmp/tmpydc0aiqe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpler0s51x.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpler0s51x.jl:1\n\
    in expression starting at /tmp/tmpler0s51x.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) then\n        local result\
    \ = \"\"\n        for i = 1, length(a) do\n            result = (result + tostring(a[i])\
    \ ^ tostring(b[i]))\n        end\n        return result\n    else\n        return\
    \ \"Invalid input\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"\
    010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of 1s in the string.\n>>> count_ones(\"010\"\
    )\n3\n>>> count_ones(\"1010\")\n4\n>>> count_ones(\"01010\")\n5\n>>> count_ones(\"\
    010100\")\n6\n>>> count_ones(\"01010001\")\n7\n>>> count_ones(\"010100011010\"\
    )\n8\n>>> count_ones(\"0101000110100\")\n9\n>>> count_ones(\"010100011010001\"\
    )\n10\n>>> count_ones(\"0101000110100011010\")\n11\n>>> count_ones(\"01010001101000110100\"\
    )\n12\n>>> count_ones(\"0101000110100011010001\")\n13\n>>> count_ones(\"01010001101000110100011010\"\
    )\n14\n>>> count_ones(\"010100011010001101000110100\")\n15\n>>> count_ones(\"\
    01010001101000110100011010001\")\n16\n>>> count_ones(\"010100011010001101000110100011010\"\
    )\n17\n>>> count_ones(\"0101000110100011010001101000110100\")\n18\n>>> count_ones(\"\
    010100011010001101000110100011010001\")\n19\n>>> count_ones(\"0101000110100011010001101000110100011010\"\
    )\n20\n>>> count_ones(\"01010001101000110100011010001101000110100\")\n21\n>>>\
    \ count_ones(\"0101000110100011010001101000110100011010001\")\n22\n>>> count_ones(\"\
    01010001101000110100011010001101000110100011010\")\n23\n>>> count_ones(\"010100011010001101000110100011010001101000110100\"\
    )\n24\n>>> count_ones(\"0101000110\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdx03powd.jl:12\nin expression starting at\
    \ /tmp/tmpdx03powd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have the same length\")\n    else \n        return string(a) ^ string(b)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a binary string to a decimal\
    \ integer. \nThe input is a string consisting of 0s and 1s.\nThe output is an\
    \ integer that represents the binary string in decimal.\nThe function should raise\
    \ an error if the input string is not in binary form.\nThe function should raise\
    \ an error if the input string contains more than 1 '1'.\nThe function should\
    \ raise an error if the input string contains more than 1 '0'.\nThe function should\
    \ raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bit\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqg5w5ba.jl:12\nin expression starting at\
    \ /tmp/tmpgqg5w5ba.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn5ziltvc.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn5ziltvc.jl:1\n\
    in expression starting at /tmp/tmpn5ziltvc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzep6so6a.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzep6so6a.jl:1\n\
    in expression starting at /tmp/tmpzep6so6a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that performs binary AND on two strings a and b consisting\
    \ only of 1s and 0s.\n    Perform binary AND on these inputs and return result\
    \ also as a string.\n    >>> string_and('010', '110')\n    '100'\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcv7henaq.jl:8\nin expression starting at /tmp/tmpcv7henaq.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        string_xor = zeros(length(a))\n\
    \        for i in 1:length(a)\n            string_xor[i] = (a[i] ^ b[i])\n   \
    \     end\n        return string_xor\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    string_xor(a::String, b::String)::String\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphzahi2yn.jl:16\nin expression starting at\
    \ /tmp/tmphzahi2yn.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy9vmtj1q.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy9vmtj1q.jl:1\n\
    in expression starting at /tmp/tmpy9vmtj1q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if a==\"\" || b==\"\"\n        return \"\"\n    elseif\
    \ a==b\n        return a\n    else\n        return (a^b)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_i6llj_9.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching ^(::String, ::String)\n  Closest candidates are:\n    ^(::Union{AbstractChar,\
    \ AbstractString}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp_i6llj_9.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_i6llj_9.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_i6llj_9.jl:19\ntest set:\
    \ Test Failed at /tmp/tmp_i6llj_9.jl:21\n  Expression: candidate(\"1\", \"1\"\
    ) == \"0\"\n   Evaluated: \"1\" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_i6llj_9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_i6llj_9.jl:19\ntest set: Error\
    \ During Test at /tmp/tmp_i6llj_9.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ ^(::String, ::String)\n  Closest candidates are:\n    ^(::Union{AbstractChar,\
    \ AbstractString}, !Matched::Integer) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:721\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp_i6llj_9.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_i6llj_9.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_i6llj_9.jl:19\nTest Summary:\
    \ | Fail  Error  Total\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_i6llj_9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpckhzxk2c.jl:8\nin expression starting at /tmp/tmpckhzxk2c.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Input strings\
    \ are not same length\")\n    elseif length(a) == 0 \n        error(\"Input string\
    \ is empty\")\n    elseif length(a) == 1 \n        return b\n    elseif length(a)\
    \ == 2 \n        return a\n    elseif length(a) == 3 \n        return string_xor(a[1:2],\
    \ b[1:2])\n    elseif length(a) == 4 \n        return string_xor(a[1:3], b[1:3])\n\
    \    elseif length(a) == 5 \n        return string_xor(a[1:4], b[1:4])\n    elseif\
    \ length(a) == 6 \n        return string_xor(a[1:5], b[1:5])\n    elseif length(a)\
    \ == 7 \n        return string_xor(a[1:6], b[1:6])\n    elseif length(a) == 8\
    \ \n        return string_xor(a[1:7], b[1:7])\n    elseif length(a) == 9 \n  \
    \      return string_xor(a[1:8], b[1:8])\n    elseif length(a) == 10 \n      \
    \  return string_xor(a[1:9], b[1:9])\n    elseif length(a) == 11 \n        return\
    \ string_xor(a[1:10], b[1:10])\n    elseif length(a) == 12 \n        return string_xor(a[1:11],\
    \ b[1:11])\n    elseif length(a) == 13 \n        return string_xor(a[1:12], b[1:12])\n\
    \    elseif length(a) == 14 \n        return string_xor(a[1:13], b[1:13])\n  \
    \  elseif length(a) == 15 \n        return string_xor(a[1:14], b[1:14])\n    elseif\
    \ length(a) == 16 \n        return string_xor(a[1:15], b[1:15])\n    elseif length(a)\
    \ == 17 \n        return string_xor(a[1:16], b[1:16])\n    elseif length(a) ==\
    \ 18 \n        return string_xor(a[1:17], b[1:17])\n    elseif length(a) == 19\
    \ \n        return string_xor(a[1:18], b[1:18])\n    elseif length(a) == 20 \n\
    \        return string_xor(a[1:19], b[1:19])\n    elseif length(a) == 21 \n  \
    \      return string_xor(a[1:20], b[1:20])\n    elseif length(a) == 22 \n    \
    \    return string_xor(a[1:21], b[1:21])\n    elseif length(a) == 23 \n      \
    \  return string_xor(a[1:22], b[1:22])\n    elseif length(a) == 24 \n        return\
    \ string_xor(a[1:23], b[1:23])\n    elseif length(a) == 25 \n        return string_xor(a[1:24],\
    \ b[1:24])\n    elseif length(a) == 26 \n        return string_xor(a[1:25], b[1:25])\n\
    \    elseif length(a) == 27 \n        return string_xor(a[1:26], b[1:\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaqz3nt93.jl:65\nin expression starting at\
    \ /tmp/tmpaqz3nt93.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return a xor b\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpt4ebg6el.jl:6 expected\
    \ \"end\", got \"xor\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt4ebg6el.jl:7\n\
    in expression starting at /tmp/tmpt4ebg6el.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    if length(a) == length(b) \n        \n\
    \        if length(a) == 1 \n            \n            return b\n            \n\
    \        else \n            \n            return a\n            \n    else \n\
    \        \n        return a\n    \nend\n</cell>\n<code language=julia-1.5>\nstring_xor('010',\
    \ '110')\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as\
    \ input and returns the string with all characters that are not digits removed.\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpnpl5ihe1.jl:11 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnpl5ihe1.jl:19\n\
    in expression starting at /tmp/tmpnpl5ihe1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Input strings\
    \ have different lengths\") \n    else \n        return char(xor(ord(a), ord(b)))\
    \ \nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    string_xor(a::String,\
    \ b::String)::String\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpylwlju6h.jl:12\nin expression starting at\
    \ /tmp/tmpylwlju6h.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"Strings\
    \ must have at least one character\")\n    elseif length(a) == 1 \n        return\
    \ b\n    else\n        return a^b\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthbzb2fe.jl:16\nin expression starting at\
    \ /tmp/tmpthbzb2fe.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9g3wu3ya.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9g3wu3ya.jl:1\n\
    in expression starting at /tmp/tmp9g3wu3ya.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) != length(b) \n        error(\"\
    Strings must have same length\")\n    end\n    \n    ans = \"\"\n    for (i in\
    \ 1:length(a))\n        ans = ans + char(a[i]) ^ char(b[i])\n    end\n    return\
    \ ans\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of times each character appears in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaunhw3c5.jl:14\nin expression starting at\
    \ /tmp/tmpaunhw3c5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpclfae9bk.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpclfae9bk.jl:1\n\
    in expression starting at /tmp/tmpclfae9bk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfhht2upn.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfhht2upn.jl:1\n\
    in expression starting at /tmp/tmpfhht2upn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) then return \"Invalid input\"\
    \n    else return string_xor(string_xor(a,b),string_xor(b,a))\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgvq1j661.jl:7\nin expression starting at /tmp/tmpgvq1j661.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"Strings\
    \ must have at least one character\")\n    elseif length(a) == 1 \n        return\
    \ b\n    else\n        return a^b\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzx3h3ta.jl:16\nin expression starting at\
    \ /tmp/tmpxzx3h3ta.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a, b), a)\n    else return \"\"\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4njxwd_f.jl:8\nin expression starting at /tmp/tmp4njxwd_f.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1p83sb52.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1p83sb52.jl:1\n\
    in expression starting at /tmp/tmp1p83sb52.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) == length(b) \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprc9zmt_g.jl:1\nin expression starting at /tmp/tmprc9zmt_g.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) then\n        local result\
    \ = \"\"\n        for i = 1, length(a) do\n            local c = a[i] xor b[i]\n\
    \            result = (result + string(c))\n        end\n        return result\n\
    \    else\n        return \"Invalid input\"\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"do\" at /tmp/tmp5rc7r_bi.jl:9 expected \"end\"\
    , got \"xor\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5rc7r_bi.jl:10\n\
    in expression starting at /tmp/tmp5rc7r_bi.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), b)\n        else return string_xor(a, string_xor(a, b))\n    else return\
    \ \"\"\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw9rp3n6g.jl:8\nin expression starting at /tmp/tmpw9rp3n6g.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) then\n        return ''\n\
    \    elseif length(a) > length(b) then\n        return string_xor(b, a)\n    else\n\
    \        return string_xor(a, b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8kivszwq.jl:8\nin expression starting at /tmp/tmp8kivszwq.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7wco7mfe.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7wco7mfe.jl:1\n\
    in expression starting at /tmp/tmp7wco7mfe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxnngiine.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxnngiine.jl:1\n\
    in expression starting at /tmp/tmpxnngiine.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9wdlc500.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wdlc500.jl:1\n\
    in expression starting at /tmp/tmp9wdlc500.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpubkajjib.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpubkajjib.jl:1\n\
    in expression starting at /tmp/tmpubkajjib.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a, b), a)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string as input and returns the number of 1s\
    \ in the string.\nFor example string_count(\"010\") should return 3.\nHint: Use\
    \ a for loop to iterate over the characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq8d11apj.jl:8\nin expression starting at /tmp/tmpq8d11apj.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"Strings\
    \ must have length > 0\")\n    elseif length(a) == 1 \n        return b\n    elseif\
    \ length(a) == 2 \n        return a xor b\n    elseif length(a) == 3 \n      \
    \  return a xor b xor c\n    elseif length(a) == 4 \n        return a xor b xor\
    \ c xor d\n    elseif length(a) == 5 \n        return a xor b xor c xor d xor\
    \ e\n    elseif length(a) == 6 \n        return a xor b xor c xor d xor e xor\
    \ f\n    elseif length(a) == 7 \n        return a xor b xor c xor d xor e xor\
    \ f xor g\n    elseif length(a) == 8 \n        return a xor b xor c xor d xor\
    \ e xor f xor g xor h\n    elseif length(a) == 9 \n        return a xor b xor\
    \ c xor d xor e xor f xor g xor h xor i\n    elseif length(a) == 10 \n       \
    \ return a xor b xor c xor d xor e xor f xor g xor h xor i xor j\n    elseif length(a)\
    \ == 11 \n        return a xor b xor c xor d xor e xor f xor g xor h xor i xor\
    \ j xor k\n    elseif length(a) == 12 \n        return a xor b xor c xor d xor\
    \ e xor f xor g xor h xor i xor j xor k xor l\n    elseif length(a) == 13 \n \
    \       return a xor b xor c xor d xor e xor f xor g xor h xor i xor j xor k xor\
    \ l xor m\n    elseif length(a) == 14 \n        return a xor b xor c xor d xor\
    \ e xor f xor g xor h xor i xor j xor k xor l xor m xor n\n    elseif length(a)\
    \ == 15 \n        return a xor b xor c xor d xor e xor f xor g xor h xor i xor\
    \ j xor k xor l xor m xor n xor o\n    elseif length(a) == 16 \n        return\
    \ a xor b xor c \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"xor\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3egpixx_.jl:14\nin expression starting at /tmp/tmp3egpixx_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4o2uctis.jl:8\nin expression starting at /tmp/tmp4o2uctis.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp71dxwcyn.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp71dxwcyn.jl:1\n\
    in expression starting at /tmp/tmp71dxwcyn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) then \n        string_xor_res\
    \ = ''\n        for i in a:\n            string_xor_res = string_xor_res + string_reverse(i)\n\
    \        for i in b:\n            string_xor_res = string_xor_res + string_reverse(i)\n\
    \        return string_xor_res \n    else \n        return '0'\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_xor('010', '110')\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbl37luy6.jl:8\nin expression starting at /tmp/tmpbl37luy6.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphl1vp0jt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphl1vp0jt.jl:1\n\
    in expression starting at /tmp/tmphl1vp0jt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9v6xmcey.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9v6xmcey.jl:1\n\
    in expression starting at /tmp/tmp9v6xmcey.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"Strings\
    \ must have length > 0\")\n    elseif length(a) == 1 \n        return b\n    else\n\
    \        return a^b\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9kfr4tj.jl:16\nin expression starting at\
    \ /tmp/tmpp9kfr4tj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        string_xor = zeros(length(a))\n\
    \        for i in 1:length(a)\n            string_xor[i] = (a[i] != b[i]) ? 1\
    \ : 0\n        end\n        return string_xor\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    string_xor(a::String, b::String)::String\n    Perform binary XOR on\
    \ two strings a and b and return result as a string.\n    >>> string_xor('010',\
    \ '110')\n    '100'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0jdb6wnj.jl:16\nin expression starting at\
    \ /tmp/tmp0jdb6wnj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpahs73bwo.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpahs73bwo.jl:1\n\
    in expression starting at /tmp/tmpahs73bwo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp5v8rvdw.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp5v8rvdw.jl:1\n\
    in expression starting at /tmp/tmpp5v8rvdw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9kbq4kyb.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9kbq4kyb.jl:1\n\
    in expression starting at /tmp/tmp9kbq4kyb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) == length(b) \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdc0hfk8p.jl:1\nin expression starting at /tmp/tmpdc0hfk8p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), a)\n        else return string_xor(a, string_xor(b, a))\n    else return\
    \ \"\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2lxatr6l.jl:8\nin expression starting at /tmp/tmp2lxatr6l.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return (a^b)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns the number of 1s in the string.\n>>> count_ones(\"\
    010\")\n2\n>>> count_ones(\"0101\")\n3\n>>> count_ones(\"1010\")\n1\n>>> count_ones(\"\
    1111\")\n0\n>>> count_ones(\"11111\")\n1\n>>> count_ones(\"111111\")\n2\n>>> count_ones(\"\
    1111111\")\n3\n>>> count_ones(\"11111111\")\n4\n>>> count_ones(\"111111111\")\n\
    5\n>>> count_ones(\"1111111111\")\n6\n>>> count_ones(\"11111111111\")\n7\n>>>\
    \ count_ones(\"111111111111\")\n8\n>>> count_ones(\"1111111111111\")\n9\n>>> count_ones(\"\
    11111111111111\")\n10\n>>> count_ones(\"111111111111111\")\n11\n>>> count_ones(\"\
    111111111111111\")\n12\n>>> count_ones(\"111111111111111\")\n13\n>>> count_ones(\"\
    111111111111111\")\n14\n>>> count_ones(\"111111111111111\")\n15\n>>> count_ones(\"\
    111111111111111\")\n16\n>>> count_ones(\"111111111111111\")\n17\n>>> count_ones(\"\
    111111111111111\")\n18\n>>> count_ones(\"111111111111111\")\n19\n>>> count_ones(\"\
    111111111111111\")\n20\n>>> count_ones(\"111111111111111\")\n21\n>>> count_ones(\"\
    111111111111111\")\n22\n>>> count_ones(\"111111111111111\")\n23\n>>> count_ones(\"\
    111111111111111\")\n24\n>>> count_ones(\"111111111111111\")\n25\n>>> count_ones(\"\
    111111111111111\")\n26\n>>> count_ones(\"111111111111111\")\n27\n>>> count_ones(\"\
    111111111111111\")\n28\n>>> count_ones(\"111111111111111\")\n29\n>>> count_ones(\"\
    111111111111111\")\n30\n>>> count_ones(\"111111111111111\")\n31\n>>> count_ones(\"\
    111111111111111\")\n32\n>>> count_ones(\"111111111111111\")\n33\n>>> count_ones(\"\
    111111111111111\")\n34\n>>> count_ones(\"111111111111111\")\n35\n>>> count_ones(\"\
    111111111111111\")\n36\n>>> count_ones(\"111111111111111\")\n37\n>>> count_ones(\"\
    111111111111111\")\n38\n>>> count_ones(\"111111111111111\")\n39\n>>> count_ones(\"\
    111111111111111\")\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpivhmqnrt.jl:9\nin expression starting at /tmp/tmpivhmqnrt.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkbvqiplk.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkbvqiplk.jl:1\n\
    in expression starting at /tmp/tmpkbvqiplk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeicyhw16.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeicyhw16.jl:1\n\
    in expression starting at /tmp/tmpeicyhw16.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"Strings\
    \ cannot be empty\")\n    elseif length(a) == 1 \n        return b\n    else\n\
    \        return a^b\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxuvyzrv.jl:16\nin expression starting at\
    \ /tmp/tmpzxuvyzrv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5gvl6uy6.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5gvl6uy6.jl:1\n\
    in expression starting at /tmp/tmp5gvl6uy6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq3prmpkt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq3prmpkt.jl:1\n\
    in expression starting at /tmp/tmpq3prmpkt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) then return \"Invalid input\"\
    \n    else return (a .^ b)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyjrzde3w.jl:7\nin expression starting at /tmp/tmpyjrzde3w.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphto0nw0a.jl:8\nin expression starting at /tmp/tmphto0nw0a.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a, b), a)\n    end\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr5o5hokz.jl:8\nin expression starting at /tmp/tmpr5o5hokz.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxff4ybvl.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxff4ybvl.jl:1\n\
    in expression starting at /tmp/tmpxff4ybvl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return a.chars.zip(b).map(|(a, b)| a ^ b).collect::String\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpektdifpc.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  type String\
    \ has no field chars\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] string_xor(a::String, b::String)\n     @ Main /tmp/tmpektdifpc.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpektdifpc.jl:14 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpektdifpc.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpektdifpc.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  type String has no field chars\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpektdifpc.jl:7\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpektdifpc.jl:15 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpektdifpc.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpektdifpc.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  type String has no field chars\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] string_xor(a::String,\
    \ b::String)\n     @ Main /tmp/tmpektdifpc.jl:7\n   [3] macro expansion\n    \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpektdifpc.jl:16 [inlined]\n   [5] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpektdifpc.jl:13\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpektdifpc.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return a\n\
    \        else return b\n    else return b\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppgrwaf84.jl:8\nin expression starting at /tmp/tmppgrwaf84.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp37nkddze.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp37nkddze.jl:1\n\
    in expression starting at /tmp/tmp37nkddze.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1oj9fctr.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1oj9fctr.jl:1\n\
    in expression starting at /tmp/tmp1oj9fctr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoa4p0f21.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoa4p0f21.jl:1\n\
    in expression starting at /tmp/tmpoa4p0f21.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) then return \"Invalid input\"\
    \n    else return (a .- b) .* a\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe_6ahvo1.jl:7\nin expression starting at /tmp/tmpe_6ahvo1.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) != length(b) \n        error(\"\
    Input strings have different lengths!\")\n    \n    ans = \"\"\n    for i in each(a)\
    \ \n        ans = ans + char2int(b[i])\n    end\n    return ans\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwf2sqp4s.jl:17\nin expression starting at\
    \ /tmp/tmpwf2sqp4s.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if a==b\n        return a\n    else\n        return\
    \ \"\"\n    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp575lkl2.jl:13\nin expression starting at\
    \ /tmp/tmpp575lkl2.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return bin(a) ^ bin(b)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ converts a binary string to a decimal integer. \nThe function should accept\
    \ a binary string as an argument and return the decimal integer as a string.\n\
    The function should raise an error if the input string contains non-binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters.\nThe function should raise an error if the input string\
    \ contains less than 32 binary characters.\nThe function should raise an error\
    \ if the input string contains more than 32 binary characters.\nThe function should\
    \ raise an error if the input string contains less than 32 binary characters.\n\
    The function should raise an error if the input string contains more than 32 binary\
    \ characters.\nThe function should raise an error if the input string contains\
    \ less than 32 binary characters.\nThe function should raise an error if the input\
    \ string contains more than 32 binary characters.\nThe function should raise an\
    \ error if the input string contains less than 32 binary characters.\nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\n\
    The function should raise an error if the input string contains less than 32 binary\
    \ characters.\nThe function should raise an error if the input string contains\
    \ more than 32 binary characters.\nThe function should raise an error if the input\
    \ string contains less than 32 binary characters.\nThe function should raise an\
    \ error if the input string contains more than 32 binary characters.\nThe function\
    \ should raise an error if the input string contains less than 32 binary characters.\n\
    The function should raise an error if the input string contains more than 32 binary\
    \ characters.\nThe function should raise an error if the input string contains\
    \ less than 32 binary characters.\nThe function should raise an error if the input\
    \ string contains more than 32 binary characters.\nThe function should raise an\
    \ error if the input string contains less than 32 binary characters.\nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\n\
    The function should raise an error if the input string contains less than 32 binary\
    \ characters.\nThe function should raise an error if the input string contains\
    \ more than 32 binary characters.\nThe function should raise an error if the input\
    \ string contains less than 32 binary characters.\nThe function should raise an\
    \ error if the input string contains more than 32 binary characters.\nThe function\
    \ should raise an error if the input string contains less than 32 binary characters.\n\
    The function should raise an error if the input string contains more than 32 binary\
    \ characters.\nThe function should raise an error if the input string contains\
    \ less than 32 binary characters.\nThe function should raise an error if the input\
    \ string contains more than 32 binary characters.\nThe function should raise an\
    \ error if the input string contains less than 32 binary characters.\nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\n\
    The function should raise an error if the input string contains less than 32 binary\
    \ characters.\nThe function should raise an error if the input string contains\
    \ more than 32 \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30gchghv.jl:9\nin expression starting at /tmp/tmp30gchghv.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if a==\"\" || b==\"\"\n        return \"\"\n    elseif\
    \ a==b\n        return a\n    else\n        return string_xor(a[1:], b) + a[0]\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprqxx9hhw.jl:12\nin expression\
    \ starting at /tmp/tmprqxx9hhw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpczqoqu5m.jl:8\nin expression starting at /tmp/tmpczqoqu5m.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk3na__12.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk3na__12.jl:1\n\
    in expression starting at /tmp/tmpk3na__12.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s_9yz_p.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s_9yz_p.jl:1\n\
    in expression starting at /tmp/tmp3s_9yz_p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwus8jbnb.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwus8jbnb.jl:1\n\
    in expression starting at /tmp/tmpwus8jbnb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) then\n        local result\
    \ = \"\"\n        for i in a:gmatch(\"%d\") do \n            local c = tostring(i)\
    \ ^ tostring(b[i])\n            result += tostring(c)\n        end\n        return\
    \ result\n    else\n        return \"Invalid input\"\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpxt121hue.jl:9 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxt121hue.jl:14\n\
    in expression starting at /tmp/tmpxt121hue.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprso8se50.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprso8se50.jl:1\n\
    in expression starting at /tmp/tmprso8se50.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        return a^b\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3l7sbq5w.jl:12\nin expression starting at\
    \ /tmp/tmp3l7sbq5w.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"Strings\
    \ must have at least one character\")\n    elseif length(a) == 1 \n        return\
    \ b\n    else\n        return (a^b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of times each character appears\
    \ in the string.\nFor example, if the input string is \"abcabc\", the function\
    \ should return {\"a\" => 3, \"b\" => 2, \"c\" => 3}.\nIf the input string is\
    \ empty, return an empty dictionary.\nIf the input string has length other than\
    \ 1, return an empty dictionary.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy56agny2.jl:17\nin expression starting at\
    \ /tmp/tmpy56agny2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpagap1wnx.jl:8\nin expression starting at /tmp/tmpagap1wnx.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgnsnjcnx.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgnsnjcnx.jl:1\n\
    in expression starting at /tmp/tmpgnsnjcnx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpob3ch04s.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpob3ch04s.jl:1\n\
    in expression starting at /tmp/tmpob3ch04s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) == length(b) \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp05lhmhvd.jl:1\nin expression starting at /tmp/tmp05lhmhvd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), a)\n        else return string_xor(a, string_xor(b, a))\n    else return\
    \ \"\"\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the string with all characters that are not alphabetic removed. \nFor\
    \ example if the input is \"010110\" the output should be \"010\".\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps9gh396g.jl:8\nin expression starting at /tmp/tmps9gh396g.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppjstulhq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppjstulhq.jl:1\n\
    in expression starting at /tmp/tmppjstulhq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if a==\"\" || b==\"\"\n        return \"\"\n    elseif\
    \ a==b\n        return a\n    else\n        return (a^b)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6q6o2ye3.jl:15\nin expression starting at\
    \ /tmp/tmp6q6o2ye3.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmsa3tz3w.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmsa3tz3w.jl:1\n\
    in expression starting at /tmp/tmpmsa3tz3w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3fufojaf.jl:8\nin expression starting at /tmp/tmp3fufojaf.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"String\
    \ is empty\")\n    elseif length(a) == 1 \n        return b\n    elseif length(a)\
    \ == 2 \n        return (a[1]) xor (a[0])\n    elseif length(a) == 3 \n      \
    \  return (a[2]) xor (a[1]) xor (a[0])\n    elseif length(a) == 4 \n        return\
    \ (a[3]) xor (a[2]) xor (a[1]) xor (a[0])\n    elseif length(a) == 5 \n      \
    \  return (a[4]) xor (a[3]) xor (a[2]) xor (a[1]) xor (a[0])\n    elseif length(a)\
    \ == 6 \n        return (a[5]) xor (a[4]) xor (a[3]) xor (a[2]) xor (a[1]) xor\
    \ (a[0])\n    elseif length(a) == 7 \n        return (a[6]) xor (a[5]) xor (a[4])\
    \ xor (a[3]) xor (a[2]) xor (a[1]) xor (a[0])\n    elseif length(a) == 8 \n  \
    \      return (a[7]) xor (a[6]) xor (a[5]) xor (a[4]) xor (a[3]) xor (a[2]) xor\
    \ (a[1]) xor (a[0])\n    elseif length(a) == 9 \n        return (a[8]) xor (a[7])\
    \ xor (a[6]) xor (a[5]) xor (a[4]) xor (a[3]) xor (a[2]) xor (a[1]) xor (a[0])\n\
    \    elseif length(a) == 10 \n        return (a[9]) xor (a[8]) xor (a[7]) xor\
    \ (a[6]) xor (a[5]) xor (a[4]) xor (a[3]) xor (a[2]) xor (a[1]) xor (a[0])\n \
    \   elseif length(a) == 11 \n        return (a[10]) xor (a[9]) xor (a[8]) xor\
    \ (a[7]) xor (a[6]) xor (a[5]) xor (a[4]) xor (a[3]) xor (a[2]) xor (a[1]) xor\
    \ (a[0])\n    elseif length(a) == 12 \n        return (a[11]) xor (a[10]) xor\
    \ (a[9]) xor (a[8]) xor (a[7]) xor (a[6]) xor (a[5]) xor (a[4]) xor (a[3]) xor\
    \ (a[2]) xor (a[1]) xor (a[0])\n    elseif length(a) == 13 \n        return (a[12])\
    \ xor (a[11]) \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"xor\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpak_rlqtg.jl:14\nin expression starting at /tmp/tmpak_rlqtg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\n    if length(a)\
    \ == 0 \n        then return b\n    else if length(b) == 0 \n        then return\
    \ a\n    else if a[1] == '0' and b[1] == '0' \n        then return string_xor(a[2:length(a)],b[2:length(b)])\n\
    \    else return a[1] == '0' ? string_xor(a[2:length(a)],b) : string_xor(a[1:length(a)],b[1:length(b)])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of 1s in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeysvqwyg.jl:8\nin expression starting at /tmp/tmpeysvqwyg.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj__94qx9.jl:8\nin expression starting at /tmp/tmpj__94qx9.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return string_to_bits(a) ^ string_to_bits(b)\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    string_xor(a::String, b::String)::String\n\
    \    Perform binary XOR on two strings a and b and return result as a string.\n\
    \    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7z2ulxq.jl:9\nin expression starting at /tmp/tmpv7z2ulxq.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return a^b\nend\n</cell>\n<code language=julia-1.5>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk79ess0s.jl:9\nin expression starting at /tmp/tmpk79ess0s.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppbuhhvcy.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppbuhhvcy.jl:1\n\
    in expression starting at /tmp/tmppbuhhvcy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"String\
    \ a is empty\")\n    elseif length(b) == 0 \n        error(\"String b is empty\"\
    )\n    elseif length(a) == 1 \n        return b\n    elseif length(b) == 1 \n\
    \        return a\n    elseif a[0] != b[0] \n        error(\"Strings must have\
    \ same first character\")\n    elseif a[1] != b[1] \n        error(\"Strings must\
    \ have same second character\")\n    else\n        return a[1] ^ b[1]\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9sxbvck.jl:25\nin expression starting at\
    \ /tmp/tmp_9sxbvck.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        return ''.join(map(str, map(xor,\
    \ a, b)))\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9d4nia_.jl:10\nin expression starting at\
    \ /tmp/tmpn9d4nia_.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Input strings\
    \ have different lengths\") \n    else \n        string_xor = zeros(length(a))\n\
    \        for i in 1:length(a)\n            string_xor[i] = (a[i] ^ b[i])\n   \
    \     end\n        return string_xor\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjw1dmsv.jl:16\nin expression starting at\
    \ /tmp/tmpcjw1dmsv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp65dhek0p.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp65dhek0p.jl:1\n\
    in expression starting at /tmp/tmp65dhek0p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a,b),string_xor(b,a))\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of occurrences of \"0\" in that string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7guf99a3.jl:8\nin expression starting at /tmp/tmp7guf99a3.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) then return \"Error\" else\
    \ return a^b end\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\"\
    , \"110\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes two strings\
    \ a and b as input and returns the number of characters that are different between\
    \ the two strings.\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5ysnvqun.jl:7\nin expression starting at /tmp/tmp5ysnvqun.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) then return \"Invalid input\"\
    \ else return (a xor b) end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvr3ivku5.jl:7\nin expression starting at /tmp/tmpvr3ivku5.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"Strings\
    \ must have length > 0\")\n    elseif length(a) == 1 \n        return b\n    else\n\
    \        bits = zeros(length(a))\n        for i in 1:length(a)\n            bits[i]\
    \ = (a[i] ^ b[i])\n        end\n        return string(bits)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    string_xor(a::String, b::String)::String\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30ygp5lq.jl:21\nin expression starting at\
    \ /tmp/tmp30ygp5lq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a, b), b)\n    end\n    \n\"\"\"\n\
    \    string_xor(a::String, b::String)::String\n    Perform binary XOR on two strings\
    \ a and b and return result as a string.\n    >>> string_xor('010', '110')\n \
    \   '100'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3yge12nn.jl:8\nin expression starting at /tmp/tmp3yge12nn.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjml2924t.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjml2924t.jl:1\n\
    in expression starting at /tmp/tmpjml2924t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that converts a binary string to a decimal integer.\
    \ \nThe function should accept a binary string as input and return a decimal integer\
    \ as output. \nThe decimal integer should be represented as a string.\nThe function\
    \ should raise an error if the input string contains non-binary characters. \n\
    The function should raise an error if the input string contains more than 32 binary\
    \ characters. \nThe function should raise an error if the input string contains\
    \ more than 32 binary characters. \nThe function should raise an error if the\
    \ input string contains more than 32 binary characters. \nThe function should\
    \ raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters. \nThe function should raise an error if the input string\
    \ contains more than 32 binary characters. \nThe function should raise an error\
    \ if the input string contains more than 32 binary characters. \nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters. \nThe function should raise an error if the input string\
    \ contains more than 32 binary characters. \nThe function should raise an error\
    \ if the input string contains more than 32 binary characters. \nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters. \nThe function should raise an error if the input string\
    \ contains more than 32 binary characters. \nThe function should raise an error\
    \ if the input string contains more than 32 binary characters. \nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters. \nThe function should raise an error if the input string\
    \ contains more than 32 binary characters. \nThe function should raise an error\
    \ if the input string contains more than 32 binary characters. \nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters. \nThe function should raise an error if the input string\
    \ contains more than 32 binary characters. \nThe function should raise an error\
    \ if the input string contains more than 32 binary characters. \nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters. \nThe function should raise an error if the input string\
    \ contains more than 32 binary characters. \nThe function should \nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0vo9nfox.jl:8\nin expression starting at /tmp/tmp0vo9nfox.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe0ce6kx5.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe0ce6kx5.jl:1\n\
    in expression starting at /tmp/tmpe0ce6kx5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyur17v7q.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyur17v7q.jl:1\n\
    in expression starting at /tmp/tmpyur17v7q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nstring_xor(\"010\", \"110\")\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpooair6rb.jl:8\nin expression starting at /tmp/tmpooair6rb.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return a^b\nend\n</cell>\n<code language=julia-1.0>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes two strings as input and returns the number of characters that are different\
    \ between the two strings. \nThe function should ignore the case of the characters.\
    \ \nThe function should ignore spaces.\nThe function should ignore punctuation.\
    \ \nThe function should ignore empty strings.\nThe function should ignore all\
    \ non-alphabetic characters. \nThe function should ignore all non-alphanumeric\
    \ characters. \nThe function should ignore all non-numeric characters.\nThe function\
    \ should ignore all non-alphabetic and non-alphanumeric characters.\nThe function\
    \ should ignore all non-numeric characters.\nThe function should ignore all non-alphabetic\
    \ and non-alphanumeric characters.\nThe function should ignore all non-numeric\
    \ characters.\nThe function should ignore all non-alphabetic and non-alphanumeric\
    \ characters.\nThe function should ignore all non-numeric characters.\nThe function\
    \ should ignore all non-alphabetic and non-alphanumeric characters.\nThe function\
    \ should ignore all non-numeric characters.\nThe function should ignore all non-alphabetic\
    \ and non-alphanumeric characters.\nThe function should ignore all non-numeric\
    \ characters.\nThe function should ignore all non-alphabetic and non-alphanumeric\
    \ characters.\nThe function should ignore all non-numeric characters.\nThe function\
    \ should ignore all non-alphabetic and non-alphanumeric characters.\nThe function\
    \ should ignore all non-numeric characters.\nThe function should ignore all non-alphabetic\
    \ and non-alphanumeric characters.\nThe function should ignore all non-numeric\
    \ characters.\nThe function should ignore all non-alphabetic and non-alphanumeric\
    \ characters.\nThe function should ignore all non-numeric characters.\nThe function\
    \ should ignore all non-alphabetic and non-alphanumeric characters.\nThe function\
    \ should ignore all non-numeric characters.\nThe function should ignore all non-alphabetic\
    \ and non-alphanumeric characters.\nThe function should ignore all non-numeric\
    \ characters.\nThe function should ignore all non-alphabetic and non-alphanumeric\
    \ characters.\nThe function should ignore all non-numeric characters.\nThe function\
    \ should ignore all non-alphabetic and non-alphanumeric characters.\nThe function\
    \ should ignore all non-numeric characters.\nThe function should ignore all non-alphabetic\
    \ and non-alphanumeric characters.\nThe function should ignore all non-numeric\
    \ characters.\nThe function should ignore all non-alphabetic and non-alphanumeric\
    \ characters.\nThe function should ignore all non-numeric characters.\nThe function\
    \ should ignore all non-alphabetic and non-alphanumeric characters.\nThe function\
    \ \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb0dzdqdk.jl:9\nin expression starting at /tmp/tmpb0dzdqdk.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa_rmr76i.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa_rmr76i.jl:1\n\
    in expression starting at /tmp/tmpa_rmr76i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgdxh2wn1.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgdxh2wn1.jl:1\n\
    in expression starting at /tmp/tmpgdxh2wn1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary string to a decimal integer. \nThe\
    \ function should take one string as input and return the decimal integer represented\
    \ by the string.\nThe function should raise an error if the string contains non-binary\
    \ digits. \nThe function should raise an error if the string contains more than\
    \ 32 binary digits. \nThe function should raise an error if the string contains\
    \ leading zeroes. \nThe function should raise an error if the string contains\
    \ leading zeroes and more than 32 binary digits. \nThe function should raise an\
    \ error if the string contains leading zeroes and more than 32 binary digits and\
    \ a leading '1'. \nThe function should raise an error if the string contains leading\
    \ zeroes and more than 32 binary digits and a leading '0'. \nThe function should\
    \ raise an error if the string contains leading zeroes and more than 32 binary\
    \ digits and a leading '0' and a leading '1'. \nThe function should raise an error\
    \ if the string contains leading zeroes and more than 32 binary digits and a leading\
    \ '0' and a leading '0' and a leading '1'. \nThe function should raise an error\
    \ if the string contains leading zeroes and more than 32 binary digits and a leading\
    \ '0' and a leading '0' and a leading '0' and a leading '1'. \nThe function should\
    \ raise an error if the string contains leading zeroes and more than 32 binary\
    \ digits and a leading '0' and a leading '0' and a leading '0' and a leading '0'\
    \ and a leading '1'. \nThe function should raise an error if the string contains\
    \ leading zeroes and more than 32 binary digits and a leading '0' and a leading\
    \ '0' and a leading '0' and a leading '0' and a leading '0' and a leading '0'\
    \ and a leading '1'. \nThe function should raise an error if the string contains\
    \ leading zeroes and more than 32 binary digits and a leading '0' and a leading\
    \ '0' and a leading '0' and a leading '0' and a leading '0' and a leading '0'\
    \ and a leading '0' and a leading '0' and a leading '0' and a leading '0' and\
    \ a leading '0' and a leading '0' and a leading '0' and a leading '0' and a leading\
    \ '0' and a leading '0' and a leading '0' and a leading '0' and a leading '0'\
    \ and a leading '0' and a leading '0' and a leading '0' and a leading '0' and\
    \ a leading '0' and a leading '0' and a leading '0' and a leading '0' and a leading\
    \ '0' and a leading '0' and a leading '0' \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaaesmblp.jl:8\nin expression starting at /tmp/tmpaaesmblp.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl3jn7b8j.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl3jn7b8j.jl:1\n\
    in expression starting at /tmp/tmpl3jn7b8j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxq17nmua.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxq17nmua.jl:1\n\
    in expression starting at /tmp/tmpxq17nmua.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_yx80m0r.jl:8\nin expression starting at /tmp/tmp_yx80m0r.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) == length(b) \n        \n      \
    \  \n        if length(a) == 0 \n            return b\n        \n        if length(b)\
    \ == 0 \n            return a\n        \n        \n        if a[0] == b[0] \n\
    \            return string_xor(a[1:], b[1:])\n        \n        if a[0] == b[-1]\
    \ \n            return string_xor(a[1:], b[:-1])\n        \n        if a[-1] ==\
    \ b[0] \n            return string_xor(a[:-1], b[1:])\n        \n        if a[-1]\
    \ == b[-1] \n            return string_xor(a[:-1], b[:-1])\n        \n       \
    \ \n    else \n        \n        if length(a) > length(b) \n            return\
    \ string_xor(b, a)\n        \n        if length(a) < length(b) \n            return\
    \ string_xor(a, b)\n        \n        if a[0] == b[0] \n            return string_xor(a[1:],\
    \ b[1:])\n        \n        if a[0] == b[-1] \n            return string_xor(a[1:],\
    \ b[:-1])\n        \n        if a[-1] == b[0] \n            return string_xor(a[:-1],\
    \ b[1:])\n        \n        if a[-1] == b[-1] \n            return string_xor(a[:-1],\
    \ b[:-1])\n        \n        \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_zhnfky2.jl:19\nin expression\
    \ starting at /tmp/tmp_zhnfky2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn7smuzs_.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn7smuzs_.jl:1\n\
    in expression starting at /tmp/tmpn7smuzs_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphos8elrz.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphos8elrz.jl:1\n\
    in expression starting at /tmp/tmphos8elrz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return string_to_bits(a) ^ string_to_bits(b)\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1x4j__49.jl:9\nin expression starting at /tmp/tmp1x4j__49.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) then \n        string_xor_res\
    \ = \"\"\n        for i in eachindex(a) do \n            string_xor_res = string_xor_res\
    \ + char(a[i]) ^ char(b[i]) \n        return string_xor_res \n    else \n    \
    \    return \"Invalid input\" \nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"do\" at /tmp/tmp8w1ntx6h.jl:9 expected \"end\"\
    , got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8w1ntx6h.jl:12\n\
    in expression starting at /tmp/tmp8w1ntx6h.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp647645r4.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp647645r4.jl:1\n\
    in expression starting at /tmp/tmp647645r4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"Strings\
    \ must have length > 0\")\n    elseif length(a) == 1 \n        return a\n    else\n\
    \        return a^b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    string_xor(a::String, b::String)::String\n    Perform binary XOR on two strings\
    \ a and b and return result also as a string.\n    >>> string_xor('010', '110')\n\
    \    '100'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63e_ldyp.jl:17\nin expression starting at\
    \ /tmp/tmp63e_ldyp.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n\
    </cell>\n<code language=julia-1.3>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of times each character appears in the string. \nFor example the string \"abcabc\"\
    \ would return {\"a\":3, \"b\":2, \"c\":3}.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any character type.\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6d22pn6n.jl:8\nin expression starting at /tmp/tmp6d22pn6n.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8xotieb2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8xotieb2.jl:1\n\
    in expression starting at /tmp/tmp8xotieb2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptsa0lped.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptsa0lped.jl:1\n\
    in expression starting at /tmp/tmptsa0lped.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        string_xor = zeros(length(a))\n\
    \        for i in 1:length(a)\n            string_xor[i] = (a[i] ^ b[i])\n   \
    \     end\n        return string_xor\nend\n</cell>\n<code language=julia-1.3>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ converts a binary string to a decimal integer. \nThe function should take a\
    \ string as input and return the decimal integer as output.\nThe input string\
    \ may contain leading zeros, for example, \"010\" should return 10.\nThe function\
    \ should raise an error if the input string contains non-binary characters, for\
    \ example, \"abc\" should raise an error.\nThe function should raise an error\
    \ if the input string contains more than 32 characters, for example, \"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvdv3dr9c.jl:16\nin expression starting at\
    \ /tmp/tmpvdv3dr9c.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuskoxvmq.jl:8\nin expression starting at /tmp/tmpuskoxvmq.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0jsqigvt.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0jsqigvt.jl:1\n\
    in expression starting at /tmp/tmp0jsqigvt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) then \n        string_xor_res\
    \ = \"\"\n        for i in each(a) do \n            string_xor_res = string_xor_res\
    \ + char2int(b) \n        end\n        return string_xor_res \n    else \n   \
    \     return \"Invalid input\"\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp501kdb_i.jl:9 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp501kdb_i.jl:13\n\
    in expression starting at /tmp/tmp501kdb_i.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of times\
    \ each character appears in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpan06104p.jl:8\nin expression starting at /tmp/tmpan06104p.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) == length(b) \n        \n      \
    \  if length(a) == 0 \n            return b \n        \n        if length(b) ==\
    \ 0 \n            return a \n        \n        if a[0] == b[0] \n            return\
    \ string_xor(a[1:], b[1:]) \n        \n        if a[0] != b[0] \n            return\
    \ string_xor(a[1:], b) \n        \n    else \n        return \"\"\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string as input and returns the number of times\
    \ each character appears in the string.\nThe function should ignore case when\
    \ counting characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore empty strings.\nThe function should\
    \ ignore duplicate characters.\nThe function should ignore leading or trailing\
    \ spaces.\nThe function should ignore leading or trailing punctuation.\nThe function\
    \ should ignore leading or trailing digits.\nThe function should ignore leading\
    \ or trailing spaces and punctuation.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqlqpr4ly.jl:17\nin expression\
    \ starting at /tmp/tmpqlqpr4ly.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnuo_3ush.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnuo_3ush.jl:1\n\
    in expression starting at /tmp/tmpnuo_3ush.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) then \n        string_xor_res\
    \ = \"\"\n        for i in a:\n            string_xor_res = string_xor_res + string_to_int(i)\
    \ ^ string_to_int(b) \n        return string_xor_res \n    else \n        return\
    \ \"Invalid input\"\nend\n</cell>\n<code language=julia-1.3>\nstring_xor(\"010\"\
    , \"110\")\n</cell>\n<text>\nExercise 3\nWrite a Julia function which performs\
    \ XOR on two strings a and b and returns result as a string.\nThe function should\
    \ return an error if any of the inputs are of invalid lengths.\nThe function should\
    \ return an error if any of the inputs are of invalid characters.\nThe function\
    \ should return an error if any of the inputs are of invalid characters.\nThe\
    \ function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjlhmxk8.jl:10\nin expression starting at\
    \ /tmp/tmpxjlhmxk8.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), a)\n        else return string_xor(b, a)\n    else return \"\"\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    string_xor(a::String, b::String)::String\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqfqq96ql.jl:8\nin expression starting at /tmp/tmpqfqq96ql.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_eky1mcz.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_eky1mcz.jl:1\n\
    in expression starting at /tmp/tmp_eky1mcz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"Strings\
    \ must have length > 0\")\n    elseif length(a) == 1 \n        return b\n    elseif\
    \ length(a) == 2 \n        return a\n    elseif length(a) == 3 \n        return\
    \ a\n    elseif length(a) == 4 \n        return a\n    elseif length(a) == 5 \n\
    \        return a\n    elseif length(a) == 6 \n        return a\n    elseif length(a)\
    \ == 7 \n        return a\n    elseif length(a) == 8 \n        return a\n    elseif\
    \ length(a) == 9 \n        return a\n    elseif length(a) == 10 \n        return\
    \ a\n    elseif length(a) == 11 \n        return a\n    elseif length(a) == 12\
    \ \n        return a\n    elseif length(a) == 13 \n        return a\n    elseif\
    \ length(a) == 14 \n        return a\n    elseif length(a) == 15 \n        return\
    \ a\n    elseif length(a) == 16 \n        return a\n    elseif length(a) == 17\
    \ \n        return a\n    elseif length(a) == 18 \n        return a\n    elseif\
    \ length(a) == 19 \n        return a\n    elseif length(a) == 20 \n        return\
    \ a\n    elseif length(a) == 21 \n        return a\n    elseif length(a) == 22\
    \ \n        return a\n    elseif length(a) == 23 \n        return a\n    elseif\
    \ length(a) == 24 \n        return a\n    elseif length(a) == 25 \n        return\
    \ a\n    elseif length(a) == 26 \n        return a\n    elseif length(a) == 27\
    \ \n        return a\n    elseif length(a) == 28 \n        return a\n    elseif\
    \ length(a) == 29 \n        return a\n    elseif length(a) == 30 \n        return\
    \ a\n    elseif length(a) == 31 \n        return a\n    elseif length(a) == 32\
    \ \n        return a\n    elseif length(a) == 33 \n        return a\n    elseif\
    \ length(a) == 34 \n        return a\n    elseif length(a) == 35 \n        return\
    \ a\n    elseif length(a) == 36 \n        return a\n    elseif length(a) == 37\
    \ \n        return a\n    elseif length(a) == 38 \n        return a\n    elseif\
    \ length(a) == 39 \n        return a\n    elseif length(a) == 40 \n        return\
    \ a\n    elseif length(a) == 41 \n        return a\n    elseif length(a) == 42\
    \ \n        return a\n    elseif length(a) == 43 \n        return a\n    elseif\
    \ length(a) == 44 \n        return a\n    elseif length(a) == 45 \n        return\
    \ a\n    elseif length(a) == 46 \n        return a\n    elseif length(a) == 47\
    \ \n        return a\n    elseif \nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"elseif\" at /tmp/tmp4wqse32r.jl:105\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp4wqse32r.jl:106\nin expression\
    \ starting at /tmp/tmp4wqse32r.jl:106\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a,b),a)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of times\
    \ each character appears in the string. \nFor example the string \"abcabc\" should\
    \ return [('a', 3), ('b', 2), ('c', 3)]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg96ib89g.jl:8\nin expression starting at /tmp/tmpg96ib89g.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) then return \"Invalid input\"\
    \n    else return string_xor(string_to_int_array(a), string_to_int_array(b))\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a binary string to a decimal\
    \ integer.\nThe function should take two arguments: a binary string and a base\
    \ (an integer between 2 and 36).\nThe function should return the decimal integer\
    \ represented by the binary string.\nThe function should raise an error if the\
    \ base is out of range.\nThe function should raise an error if the binary string\
    \ contains invalid characters.\nThe function should raise an error if the binary\
    \ string contains leading zeros.\nThe function should raise an error if the binary\
    \ string contains trailing zeros.\nThe function should raise an error if the binary\
    \ string contains leading or trailing zeros.\nThe function should raise an error\
    \ if the binary string contains leading or trailing spaces.\nThe function should\
    \ raise an error if the binary string contains leading or trailing spaces.\nThe\
    \ function should raise an error if the binary string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the binary string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the binary string\
    \ contains leading or trailing spaces.\nThe function should raise an error if\
    \ the binary string contains leading or trailing spaces.\nThe function should\
    \ raise an error if the binary string contains leading or trailing spaces.\nThe\
    \ function should raise an error if the binary string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the binary string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the binary string\
    \ contains leading or trailing spaces.\nThe function should raise an error if\
    \ the binary string contains leading or trailing spaces.\nThe function should\
    \ raise an error if the binary string contains leading or trailing spaces.\nThe\
    \ function should raise an error if the binary string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the binary string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the binary string\
    \ contains leading or trailing spaces.\nThe function should raise an error if\
    \ the binary string contains leading or trailing spaces.\nThe function should\
    \ raise an error if the binary string contains leading or trailing spaces.\nThe\
    \ function should raise an error if the binary string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the binary string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the binary string\
    \ contains leading or trailing spaces.\nThe function should raise an error if\
    \ the binary string contains leading or trailing spaces.\nThe function should\
    \ raise an error if the binary string contains leading or trailing spaces.\nThe\
    \ function should raise an error if the binary string contains leading or trailing\
    \ spaces.\n\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpki9gv1ne.jl:7\nin expression starting at /tmp/tmpki9gv1ne.jl:7\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv2xq68og.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv2xq68og.jl:1\n\
    in expression starting at /tmp/tmpv2xq68og.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), string_xor(b, a))\n        else return string_xor(string_xor(a, b), string_xor(b,\
    \ a))\n    else return \"\"\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm43ijbnl.jl:8\nin expression starting at /tmp/tmpm43ijbnl.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), b)\n        else return string_xor(a, string_xor(b, a))\n    else return\
    \ \"\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppkhcyqt6.jl:8\nin expression starting at /tmp/tmppkhcyqt6.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) != length(b) \n        error(\"\
    Strings must have same length\")\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9cvh2zwt.jl:1\nin expression starting at /tmp/tmp9cvh2zwt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), b)\n        else return string_xor(a, string_xor(b, a))\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp037ai7sk.jl:8\nin expression starting at /tmp/tmp037ai7sk.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq6gcn6u2.jl:8\nin expression starting at /tmp/tmpq6gcn6u2.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0dnqee7s.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0dnqee7s.jl:1\n\
    in expression starting at /tmp/tmp0dnqee7s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) == length(b) \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb8s9vl0.jl:1\nin expression starting at /tmp/tmpdb8s9vl0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of times\
    \ each character appears in the string.\nFor example the string \"abcabc\" should\
    \ return [('a', 3), ('b', 2), ('c', 3)]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp36rg7y8g.jl:8\nin expression starting at /tmp/tmp36rg7y8g.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    \n    if length(a) == length(b) \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4xddo7k.jl:1\nin expression starting at /tmp/tmpx4xddo7k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        return string(a) ^ string(b)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6evzcsu4.jl:12\nin expression starting at\
    \ /tmp/tmp6evzcsu4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if a==\"\" || b==\"\"\n        return \"\"\n    else\n\
    \        return (a^b)\n    end\nend\n</cell>\n<code language=julia-1.0>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3vauhxff.jl:13\nin expression starting at\
    \ /tmp/tmp3vauhxff.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor('010', '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return bin(bin(a) xor bin(b))[2:]\nend\n</cell>\n<code\
    \ language=julia-1.0>\nstring_xor('010', '110')\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string as input and returns the number of characters\
    \ in the string.\nHint: Use length() function\nusing Test\n\n@testset begin\n\n\
    candidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa26dg5j0.jl:7\nin expression starting at /tmp/tmpa26dg5j0.jl:7\n"
  exit_code: 1
  status: SyntaxError
