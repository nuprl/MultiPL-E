name: HumanEval_126_is_sorted
language: julia
results:
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4zdd_wn1.jl:32\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zdd_wn1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zdd_wn1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4zdd_wn1.jl:35\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zdd_wn1.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zdd_wn1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4zdd_wn1.jl:38\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zdd_wn1.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zdd_wn1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4zdd_wn1.jl:39\n  Expression: candidate([1, 2, 2, 2, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4zdd_wn1.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4zdd_wn1.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp4zdd_wn1.jl:40\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4zdd_wn1.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last-1 if last\
    \ > 0 else last\n    last = sorted[last]\n    last = last-1 if last > 0 else last\n\
    \    return last == 0\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 2, 7, 1, 3, 8, 4])\n</cell>\n<text>\nis_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    is_sorted([1, 3, 2, 4, 5]) \u279E False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\nis_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]) \u279E False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E True\nis_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nis_sorted([5, 6, 2, 7, 1, 3, 8, 4]) \u279E True\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp_s4d4vhq.jl:16 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_s4d4vhq.jl:19\n\
    in expression starting at /tmp/tmp_s4d4vhq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6f55_zbs.jl:23\nin expression starting at\
    \ /tmp/tmp6f55_zbs.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    unique = unique(sorted)\n    return length(unique)\
    \ == length(sorted)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw7tzn1xk.jl:26\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  UndefVarError: unique not defined\n \
    \ Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpw7tzn1xk.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw7tzn1xk.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw7tzn1xk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpw7tzn1xk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpw7tzn1xk.jl:18\n  \
    \ [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw7tzn1xk.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw7tzn1xk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpw7tzn1xk.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5]) == false\n  UndefVarError: unique not defined\n \
    \ Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpw7tzn1xk.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw7tzn1xk.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw7tzn1xk.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpw7tzn1xk.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5, 6]) == true\n  UndefVarError: unique not defined\n\
    \  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpw7tzn1xk.jl:18\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 13 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw7tzn1xk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_uc64xwx.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_uc64xwx.jl:1\n\
    in expression starting at /tmp/tmp_uc64xwx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    lengths = lengths(sorted)\n\
    \    \n    trues = trues(lengths)\n    \n    trues = trues[uniques]\n    \n  \
    \  return all(trues)\nend\n</cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz0unb8f5.jl:27\nin expression starting at\
    \ /tmp/tmpz0unb8f5.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last-1 if last\
    \ > 1 else last\n    return last == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp56hw_n3l.jl:16 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp56hw_n3l.jl:19\n\
    in expression starting at /tmp/tmp56hw_n3l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of unique elements in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vzzqnxc.jl:25\nin expression starting at\
    \ /tmp/tmp1vzzqnxc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<text>\n\
    Exercise: Write a function that checks if a list is sorted in\ndescending order.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mbx7gyx.jl:25\nin expression starting at\
    \ /tmp/tmp2mbx7gyx.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy0as6nl3.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy0as6nl3.jl:1\n\
    in expression starting at /tmp/tmpy0as6nl3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2,\
    \ 2, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7byncutc.jl:25\nin expression starting at\
    \ /tmp/tmp7byncutc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7_xt28k1.jl:23\nin expression starting at\
    \ /tmp/tmp7_xt28k1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4bqrplrv.jl:25\nin expression starting at\
    \ /tmp/tmp4bqrplrv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 else last\n    return last == lst[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ checks if a vector is sorted in descending order.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpicc9ftou.jl:16 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpicc9ftou.jl:19\n\
    in expression starting at /tmp/tmpicc9ftou.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk0vblon8.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk0vblon8.jl:1\n\
    in expression starting at /tmp/tmpk0vblon8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5]) \u2248 true\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2,\
    \ 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of unique elements in a given list. Assume that all elements are\
    \ unique.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkcdmb9am.jl:25\nin expression starting at\
    \ /tmp/tmpkcdmb9am.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i,x) in enumerate(lst)\n            if x != sorted[i]\n             \
    \   return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0sbm984c.jl:44\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0sbm984c.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0sbm984c.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0sbm984c.jl:45\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0sbm984c.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0sbm984c.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0sbm984c.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    for x in lst\n        if x != sort(x)\n     \
    \       sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1rkx1sq.jl:26\nin expression starting at\
    \ /tmp/tmpx1rkx1sq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpirj5nsza.jl:28\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpirj5nsza.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpirj5nsza.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpirj5nsza.jl:31\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpirj5nsza.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpirj5nsza.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpirj5nsza.jl:34\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpirj5nsza.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpirj5nsza.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpirj5nsza.jl:37\n  Expression: candidate([1, 2, 2, 3, 3, 4])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpirj5nsza.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpirj5nsza.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     4     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpirj5nsza.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 3, 2, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 3, 2, 4, 2]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 3])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 4]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 5]) \u2248 true\n@assert is_sorted([5, 3, 2, 4, 6]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7]) \u2248 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 8]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 9]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 10]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 11]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 12]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 13]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 14]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 15]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 16])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 17]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 18]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 19]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 20]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 21]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 22]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 23]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 24])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 25]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 26]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 27]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 28]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 29]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjc3hxv5.jl:25\nin expression starting at\
    \ /tmp/tmpkjc3hxv5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    for x in lst\n        if x != sort(x)\n     \
    \       sorted = false\n            break\n    end\n    return sorted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphts9dndf.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphts9dndf.jl:1\n\
    in expression starting at /tmp/tmphts9dndf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfuenghi.jl:25\nin expression starting at\
    \ /tmp/tmptfuenghi.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_empty(lst)\n        return true\n    \n    sorted_list = sort(lst)\n\
    \    \n    if length(sorted_list) == length(lst)\n        return true\n    \n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, \nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_85e6hzf.jl:27\nin expression starting at\
    \ /tmp/tmp_85e6hzf.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp43zc4sb6.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp43zc4sb6.jl:1\n\
    in expression starting at /tmp/tmp43zc4sb6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    trues = trues(last)\n\
    \    for i in 1:length(lst)\n        if lst[i] != last\n            trues = falses(trues)\n\
    \        end\n    end\n    return trues\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5])\
    \ == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2,\
    \ 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2,\
    \ 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2,\
    \ 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2,\
    \ 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplja5se87.jl:27\nin expression starting at\
    \ /tmp/tmplja5se87.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    \n    for x in lst\n        if sorted == false\n\
    \            if x == lst[1]\n                sorted = true\n            else\n\
    \                sorted = false\n        end\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5]) \u2248 true\n\
    @assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4,\
    \ 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4,\
    \ 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\n3.3 Find\
    \ all duplicates\nGiven a list of numbers, return a list of all duplicates. Assume\
    \ no negative numbers and only integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0v4baum4.jl:31\nin expression starting at\
    \ /tmp/tmp0v4baum4.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj8btvi2s.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpj8btvi2s.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj8btvi2s.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj8btvi2s.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpj8btvi2s.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpj8btvi2s.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj8btvi2s.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj8btvi2s.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpj8btvi2s.jl:32\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj8btvi2s.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    for x in lst\n        if x != sort(x)\n     \
    \       sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsrtev2xi.jl:31\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpsrtev2xi.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsrtev2xi.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsrtev2xi.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpsrtev2xi.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpsrtev2xi.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsrtev2xi.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsrtev2xi.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpsrtev2xi.jl:33\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsrtev2xi.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5dr6eqni.jl:25\nin expression starting at\
    \ /tmp/tmp5dr6eqni.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_6pd2em.jl:19\nin expression starting at\
    \ /tmp/tmpz_6pd2em.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   return true\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn8865tvi.jl:32\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8865tvi.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8865tvi.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpn8865tvi.jl:35\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8865tvi.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8865tvi.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpn8865tvi.jl:38\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8865tvi.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8865tvi.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpn8865tvi.jl:39\n  Expression: candidate([1, 2, 2, 2, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn8865tvi.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn8865tvi.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpn8865tvi.jl:40\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn8865tvi.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    return last == last -\
    \ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwg55gj0g.jl:26\n  Expression: candidate([5])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwg55gj0g.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwg55gj0g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpwg55gj0g.jl:27\n  Expression: candidate([1, 2, 3, 4, 5]) ==\
    \ true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwg55gj0g.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwg55gj0g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpwg55gj0g.jl:29\n  Expression: candidate([1, 2, 3, 4, 5, 6])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwg55gj0g.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwg55gj0g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpwg55gj0g.jl:30\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwg55gj0g.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwg55gj0g.jl:25\ntest set: Error\
    \ During Test at /tmp/tmpwg55gj0g.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index ["
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwg55gj0g.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<text>\nis_sorted([5, 4, 3, 2, 1]) \u279E True\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp922bhp4h.jl:19\nin expression starting at\
    \ /tmp/tmp922bhp4h.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 3, 2, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 3, 2, 4, 2]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 3])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 4]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 5]) \u2248 true\n@assert is_sorted([5, 3, 2, 4, 6]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 8]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 9]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 10]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 11, 12]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 11, 13, 14]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11,\
    \ 13, 14, 15]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16,\
    \ 17]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17, 18])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17, 19, 20])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17, 19, 20,\
    \ 21]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17, 19,\
    \ 20, 21, 22]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16,\
    \ 17, 19, 20, 21, 23, 24]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11,\
    \ 13, 14, 16, 17, 19, 20, 21, 23, 24, 25]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 26, 27]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 26,\
    \ 28, 29]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17,\
    \ 19, 20, 21, 23, 24, 26, 28, 30, 31]) \u2248 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 11, 13, 14, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp411rgv7j.jl:25\nin expression starting at\
    \ /tmp/tmp411rgv7j.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if sorted == false\n        \
    \    break\n        if x == sorted\n            sorted = false\n        else\n\
    \            sorted = true\n        end\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of unique elements in a given list. Assume no duplicates.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplf6140az.jl:29\nin expression starting at\
    \ /tmp/tmplf6140az.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n        \
    \    sorted = false\n            break\n        end\n    end\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\n\
    is_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a vector is sorted in descending order. Assume no negative numbers\
    \ and only integers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwm9obxr4.jl:26\nin expression starting at\
    \ /tmp/tmpwm9obxr4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptfdo7sgg.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmptfdo7sgg.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfdo7sgg.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfdo7sgg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmptfdo7sgg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmptfdo7sgg.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfdo7sgg.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfdo7sgg.jl:29\ntest set:\
    \ Error During Test at /tmp/tmptfdo7sgg.jl:32\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptfdo7sgg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3,\
    \ 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise\nWrite a function that takes a vector of numbers\
    \ and returns the number of unique numbers in the vector. Assume no negative numbers\
    \ and only integers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6pgvy84t.jl:25\nin expression starting at\
    \ /tmp/tmp6pgvy84t.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([1,2,3,4,5])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.3>\nis_sorted([1,2,3,4,5,6,7])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,2,3,4])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4])\n</cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprehm54ru.jl:25\nin expression starting at\
    \ /tmp/tmprehm54ru.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkcjevhq4.jl:25\nin expression starting at\
    \ /tmp/tmpkcjevhq4.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns True if a number is\
    \ evenly divisible by 3, and False otherwise. Test it on all numbers from 0 to\
    \ 20.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoctm6cqs.jl:25\nin expression starting at\
    \ /tmp/tmpoctm6cqs.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1milseb.jl:1\nin expression starting at /tmp/tmpg1milseb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if sorted == false\n        \
    \    break\n        if x != lst[findfirst(x == lst)]\n            sorted = false\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\n\
    is_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the number\
    \ of unique elements in the vector. Assume no duplicates.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjiiqydib.jl:27\nin expression starting at\
    \ /tmp/tmpjiiqydib.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of numbers and returns the number of unique numbers in that vector.\
    \ Assume no negative numbers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdlret_ph.jl:25\nin expression starting at\
    \ /tmp/tmpdlret_ph.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted(\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpspmyx20v.jl:26\nin expression starting at\
    \ /tmp/tmpspmyx20v.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    sorted = sorted[sorted.!=0]\n    return length(sorted)\
    \ == length(lst)\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2,\
    \ 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2,\
    \ 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2,\
    \ 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2,\
    \ 3, 1])\n</cell>\n<code language=julia-1.5>\nis_\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4me_z6wp.jl:21\nin expression starting at\
    \ /tmp/tmp4me_z6wp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo98g61v6.jl:25\nin expression starting at\
    \ /tmp/tmpo98g61v6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 true\n@assert is_sorted([5, 3, 2, 4, 2]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 3]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 4]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 5]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 6]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 8]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 9]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 10]) \u2261 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 11]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 12])\
    \ \u2261 false\n@assert is_sorted([5, 3, 2, 4, 13]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 14]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 15]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 16]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 17]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 18]) \u2261 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 19]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 20])\
    \ \u2261 false\n@assert is_sorted([5, 3, 2, 4, 21]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 22]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 23]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 24]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 25]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 26]) \u2261 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 27]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 28])\
    \ \u2261 false\n@assert is_sorted([5, 3, 2, 4, 29]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 30]) \uFFFD\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pgti5ma.jl:21\nin expression starting at\
    \ /tmp/tmp7pgti5ma.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptce6eebt.jl:32\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptce6eebt.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptce6eebt.jl:29\ntest set: Test\
    \ Failed at /tmp/tmptce6eebt.jl:35\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptce6eebt.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptce6eebt.jl:29\ntest set: Test\
    \ Failed at /tmp/tmptce6eebt.jl:38\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptce6eebt.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptce6eebt.jl:29\ntest set: Test\
    \ Failed at /tmp/tmptce6eebt.jl:39\n  Expression: candidate([1, 2, 2, 2, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptce6eebt.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptce6eebt.jl:29\ntest set: Test\
    \ Failed at /tmp/tmptce6eebt.jl:40\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptce6eebt.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    seen = Set()\n    for x in lst\n        if x in seen\n\
    \            sorted = false\n            break\n        seen.add(x)\n    end\n\
    \    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyl069y95.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyl069y95.jl:1\n\
    in expression starting at /tmp/tmpyl069y95.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n\
    \        for (i,val) in enumerate(lst)\n            if val != sorted[i]\n    \
    \            return false\n            end\n        end\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijm7fchf.jl:31\nin expression starting at\
    \ /tmp/tmpijm7fchf.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i, j) in zip(sorted, lst)\n            if i != j\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zkb8aun.jl:29\nin expression starting at\
    \ /tmp/tmp1zkb8aun.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(lst) == length(sorted)\n     \
    \   for (i,x) in enumerate(lst)\n            if x != sorted[i]\n             \
    \   return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5, 3, 2, 4, 1]) \u2261 true\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261\
    \ false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted(\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpano7edfv.jl:30\nin expression starting at\
    \ /tmp/tmpano7edfv.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7ruhulgt.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp7ruhulgt.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7ruhulgt.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7ruhulgt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp7ruhulgt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp7ruhulgt.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7ruhulgt.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7ruhulgt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp7ruhulgt.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5]) == false\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp7ruhulgt.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7ruhulgt.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7ruhulgt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ruhulgt.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\n\
    is_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns True if a list contains all unique elements.\
    \ Assume no duplicate elements.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wvrxhu4.jl:25\nin expression starting at\
    \ /tmp/tmp4wvrxhu4.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n     \
    \   if lst[i] > last\n            return false\n        last = lst[i]\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8bqq2mu.jl:26\nin expression starting at\
    \ /tmp/tmpg8bqq2mu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if sorted == false\n        \
    \    sorted = x < lst[end]\n        else\n            sorted = sorted && x < lst[end]\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, \nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0lgxsk9n.jl:27\nin expression starting at\
    \ /tmp/tmp0lgxsk9n.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyjhstevx.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpyjhstevx.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyjhstevx.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyjhstevx.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpyjhstevx.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpyjhstevx.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyjhstevx.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyjhstevx.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpyjhstevx.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5]) == false\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpyjhstevx.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyjhstevx.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyjhstevx.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpy"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjhstevx.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5]) \u2248 true\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2,\
    \ 2, 3, 4]) \u2248 false\n</cell>\n<text>\nis_sorted_decreasing\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4bqrq_o1.jl:25\nin expression starting at\
    \ /tmp/tmp4bqrq_o1.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    return length(sorted) == length(lst) and all(sorted\
    \ .== lst)\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmppn6qip_z.jl:16 expected\
    \ \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppn6qip_z.jl:18\n\
    in expression starting at /tmp/tmppn6qip_z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for x in lst[2:end]\n        if\
    \ x != last\n            return false\n        last = x\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp3fuv2e30.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fuv2e30.jl:1\n\
    in expression starting at /tmp/tmp3fuv2e30.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2,\
    \ 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32ux1vf7.jl:25\nin expression starting at\
    \ /tmp/tmp32ux1vf7.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    \n    for x in lst\n        if x != sort(x)[1]\n\
    \            sorted = false\n            break\n        end\n    end\n    \n \
    \   return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mzojhrp.jl:29\nin expression starting at\
    \ /tmp/tmp2mzojhrp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    for x in sorted\n    \
    \    if x == last\n            return false\n        end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ny7asuy.jl:25\nin expression starting at\
    \ /tmp/tmp5ny7asuy.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphjyuqi7y.jl:25\nin expression starting at\
    \ /tmp/tmphjyuqi7y.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp038zfr8b.jl:25\nin expression starting at\
    \ /tmp/tmp038zfr8b.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvi5izr2p.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvi5izr2p.jl:1\n\
    in expression starting at /tmp/tmpvi5izr2p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last == last ?\
    \ last : last-1\n    for x in lst\n        if x == last\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp38_5aakw.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp38_5aakw.jl:1\n\
    in expression starting at /tmp/tmp38_5aakw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if \nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpczsl0jpb.jl:16 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpczsl0jpb.jl:19\n\
    in expression starting at /tmp/tmpczsl0jpb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxmasdak8.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmasdak8.jl:1\n\
    in expression starting at /tmp/tmpxmasdak8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\nis_sorted() is a higher-order function that takes a function\
    \ as its argument. is_sorted() returns a boolean indicating whether the function\
    \ is_sorted() was called on is sorted or not.\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1lzov3cp.jl:20\nin expression starting at\
    \ /tmp/tmp1lzov3cp.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise\nWrite a function that returns true if the\
    \ given list is a permutation of the given list. Assume no repeated numbers. Assume\
    \ no negative numbers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjopevzh9.jl:25\nin expression starting at\
    \ /tmp/tmpjopevzh9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    seen = Set()\n    for x in lst\n        if x in seen\n\
    \            sorted = false\n        else\n            seen.add(x)\n    end\n\
    \    sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 3,\
    \ 2, 4, 1]) \u2248 true\n@assert is_sorted([5, 3, 2, 4, 2]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 3]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 4])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 5]) \u2248 true\n@assert is_sorted([5,\
    \ 3, 2, 4, 6]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 1]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 2]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 3]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 4]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 5]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 6]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 1]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 7, 2]) \u2248 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 7, 3]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 4]) \u2248\
    \ false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 5]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 6]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 1])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 2]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 7, 7, 7, 3]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 7, 7, 4]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 5]) \u2248\
    \ false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 6]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 7, 7, 1]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7,\
    \ 7, 7, 2]) \u2248 false\n@assert is_sorted(\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpae2pi3xm.jl:27\nin expression starting at\
    \ /tmp/tmpae2pi3xm.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_3j2rik.jl:25\nin expression starting at\
    \ /tmp/tmpc_3j2rik.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i,j) in zip(sorted, lst)\n            if i != j\n                return\
    \ false\n            end\n        end\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xguyrfc.jl:30\nin expression starting at\
    \ /tmp/tmp9xguyrfc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5])\
    \ \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\n3.2.3 is_sorted(lst::Vector{Int64},\
    \ reverse::Bool)\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuejnnu4c.jl:23\nin expression starting at\
    \ /tmp/tmpuejnnu4c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != lst[findfirst(x == lst)]\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7zqg4sth.jl:25\nin expression starting at\
    \ /tmp/tmp7zqg4sth.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    \n    for x in lst\n        if x != lst[end]\n\
    \            if x < lst[end]\n                sorted = false\n               \
    \ break\n            elseif x == lst[end]\n                sorted = false\n  \
    \              break\n            else\n                sorted = true\n      \
    \          break\n        end\n    end\n    \n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5]) \u2248 true\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2,\
    \ 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if a number is even, and False if it is odd.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qa4yhri.jl:36\nin expression starting at\
    \ /tmp/tmp2qa4yhri.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for x in lst[2:end]\n        if\
    \ last < x\n            return false\n        last = x\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of integers and\
    \ returns the number of unique elements in the vector. Assume no negative numbers\
    \ and only integers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7_blnaa.jl:25\nin expression starting at\
    \ /tmp/tmpd7_blnaa.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    return lst == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of integers\
    \ in a list that are less than or equal to x. Assume that x is positive.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppkco7vim.jl:20\nin expression starting at\
    \ /tmp/tmppkco7vim.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1, 6]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1,\
    \ 6, 7]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n\
    @assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2,\
    \ 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp033vgrof.jl:25\nin expression starting at\
    \ /tmp/tmp033vgrof.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaaid4oql.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaaid4oql.jl:1\n\
    in expression starting at /tmp/tmpaaid4oql.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        for (i,j) in zip(sorted_list,lst)\n            if i == j\n          \
    \      return false\n            end\n        end\n        return true\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49c9trpx.jl:29\nin expression starting at\
    \ /tmp/tmp49c9trpx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last-1 if last\
    \ > 1 else last\n    last = sorted[last]\n    return last == 0\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpa0ak2hlo.jl:16 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa0ak2hlo.jl:19\n\
    in expression starting at /tmp/tmpa0ak2hlo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_empty(lst)\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgkbyzel3.jl:1\nin expression starting at /tmp/tmpgkbyzel3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the number of times a given number appears in a\
    \ given list. For example, how many times does 3 appear in [1, 2, 3, 4, 5]? How\
    \ about 3 in [1, 1, 2, 3, 4, 5]? How about 3 in [1, 1, 1, 2, 3, 4, 5]? How about\
    \ 3 in [1, 1, 1, 2, 3, 4, 5]?\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoa246aop.jl:25\nin expression starting at\
    \ /tmp/tmpoa246aop.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkfvndffq.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpkfvndffq.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkfvndffq.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkfvndffq.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkfvndffq.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpkfvndffq.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkfvndffq.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkfvndffq.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpkfvndffq.jl:32\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkfvndffq.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\nis_sorted() is a higher-order function. It takes a function as\
    \ its argument and returns a new function which takes an argument and returns\
    \ a boolean.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcivw5brq.jl:20\nin expression starting at\
    \ /tmp/tmpcivw5brq.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of unique elements in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ppomo3h.jl:25\nin expression starting at\
    \ /tmp/tmp0ppomo3h.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps956ljyb.jl:23\nin expression starting at\
    \ /tmp/tmps956ljyb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeowgzjh_.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeowgzjh_.jl:1\n\
    in expression starting at /tmp/tmpeowgzjh_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    seen = Set()\n    for x in lst\n        if x in seen\n\
    \            sorted = false\n            break\n        seen.add(x)\n    end\n\
    \    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmkie8kg8.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmkie8kg8.jl:1\n\
    in expression starting at /tmp/tmpmkie8kg8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    i = length(sorted)\n \
    \   while i > 1\n        if sorted[i-1] == last\n            return false\n  \
    \      i -= 1\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \uFFFD\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfkybqmd.jl:27\nin expression starting at\
    \ /tmp/tmptfkybqmd.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvtj1laj1.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvtj1laj1.jl:1\n\
    in expression starting at /tmp/tmpvtj1laj1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if sorted == false\n        \
    \    sorted = x < lst[end]\n        else\n            sorted = sorted && x < lst[end]\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\nis_sorted([1, 3, 2, 4, 5]) \u279E False\nis_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E\
    \ True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nis_sorted([1, 1, 2, 3, 4,\
    \ 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0e4bs110.jl:27\nin expression starting at\
    \ /tmp/tmp0e4bs110.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    lengths = length(uniques)\n\
    \    return lengths == length(lst)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqdzb9_9_.jl:22\nin expression starting at\
    \ /tmp/tmpqdzb9_9_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    if length(lst) == 1 \n        return true\n    \n    last = lst[1]\n\
    \    for i in lst[2:end]\n        if i > last\n            return false\n    \
    \    last = i\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp08hwyii7.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp08hwyii7.jl:1\n\
    in expression starting at /tmp/tmp08hwyii7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpujuwoaeg.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpujuwoaeg.jl:1\n\
    in expression starting at /tmp/tmpujuwoaeg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps55qwaul.jl:33\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps55qwaul.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps55qwaul.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps55qwaul.jl:34\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps55qwaul.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps55qwaul.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps55qwaul.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpou1uc6cb.jl:25\nin expression starting at\
    \ /tmp/tmpou1uc6cb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmjpt4fpp.jl:33\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjpt4fpp.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjpt4fpp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmjpt4fpp.jl:34\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjpt4fpp.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjpt4fpp.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjpt4fpp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3j3ol3g1.jl:19\nin expression starting at\
    \ /tmp/tmp3j3ol3g1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    for x in lst\n       \
    \ if last < x\n            return false\n        last = x\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp3g75_qsb.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3g75_qsb.jl:1\n\
    in expression starting at /tmp/tmp3g75_qsb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5]) \u2248 true\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2,\
    \ 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of unique elements in a given list. Assume no duplicates.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4niox_9.jl:25\nin expression starting at\
    \ /tmp/tmpi4niox_9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of numbers and returns the number of unique\
    \ numbers in the vector. Assume no negative numbers and only integers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphzakn5_y.jl:25\nin expression starting at\
    \ /tmp/tmphzakn5_y.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    unique = unique(sorted)\n    return length(unique)\
    \ == length(sorted)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmg8szv22.jl:26\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  UndefVarError: unique not defined\n \
    \ Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpmg8szv22.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg8szv22.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg8szv22.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmg8szv22.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpmg8szv22.jl:18\n  \
    \ [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg8szv22.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg8szv22.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmg8szv22.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5]) == false\n  UndefVarError: unique not defined\n \
    \ Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpmg8szv22.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg8szv22.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg8szv22.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpmg8szv22.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5, 6]) == true\n  UndefVarError: unique not defined\n\
    \  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpmg8szv22.jl:18\n\
    \   [2] macro expansion\n     @ /shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 13 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmg8szv22.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo35755_1.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpo35755_1.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo35755_1.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo35755_1.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpo35755_1.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpo35755_1.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo35755_1.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo35755_1.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpo35755_1.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5]) == false\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpo35755_1.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo35755_1.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo35755_1.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpo"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo35755_1.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp498xo072.jl:25\nin expression starting at\
    \ /tmp/tmp498xo072.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last-1 if last\
    \ > 1 else last\n    for x in lst\n        if x == last \n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp6fsi6ldg.jl:16 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6fsi6ldg.jl:19\n\
    in expression starting at /tmp/tmp6fsi6ldg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2,\
    \ 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2,\
    \ 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, \nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16ds53pq.jl:23\nin expression starting at\
    \ /tmp/tmp16ds53pq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of unique elements in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm8sujqg0.jl:25\nin expression starting at\
    \ /tmp/tmpm8sujqg0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i,x) in enumerate(lst)\n            if x != sorted[i]\n             \
    \   return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5]) \u2260 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2260 true\n\
    @assert is_sorted([1, 3, 2, 4, 5]) \u2260 false\n@assert is_sorted([1, 2, 3, 4,\
    \ 5, 6]) \u2260 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2260 true\n@assert\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2260 false\n@assert is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u2260 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2260 false\n@assert\
    \ is_sorted([1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 3,\
    \ 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3]) \u2260 false\n@assert\
    \ is_sorted([1, 1, 1, 2, 2, 3]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2,\
    \ 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n\
    @assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1,\
    \ 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1,\
    \ 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1,\
    \ 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1,\
    \ 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1,\
    \ 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted(\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxausiy4.jl:30\nin expression starting at\
    \ /tmp/tmpyxausiy4.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3b682udm.jl:25\nin expression starting at\
    \ /tmp/tmp3b682udm.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n     \
    \   if lst[i] != last\n            return false\n        last = lst[i]\n    end\n\
    \    return true\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7ftx3c8.jl:26\nin expression starting at\
    \ /tmp/tmpp7ftx3c8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5])\
    \ \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise\n\
    Write a function that returns whether a number is even.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfr25_qdz.jl:19\nin expression starting at\
    \ /tmp/tmpfr25_qdz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa87x4eb7.jl:26\nin expression starting at\
    \ /tmp/tmpa87x4eb7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(lst) == true\n        return true\n    else\n        last\
    \ = lst[1]\n        for elt in lst[2:end]\n            if elt > last\n       \
    \         return false\n            else\n                last = elt\n       \
    \ end\n        return true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\n\
    is_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the number of unique elements in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdljlfntj.jl:30\nin expression starting at\
    \ /tmp/tmpdljlfntj.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4,\
    \ 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_jme0k5.jl:20\nin expression starting at\
    \ /tmp/tmpk_jme0k5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of unique elements in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0xtn8d6.jl:25\nin expression starting at\
    \ /tmp/tmpa0xtn8d6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 else last\n    return last == lst[end]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpvfo6lj9s.jl:16 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvfo6lj9s.jl:19\n\
    in expression starting at /tmp/tmpvfo6lj9s.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if sorted == false\n        \
    \    if x == lst[1]\n                sorted = true\n            else\n       \
    \         sorted = false\n        end\n    end\n    return sorted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4pq0qxd8.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4pq0qxd8.jl:1\n\
    in expression starting at /tmp/tmp4pq0qxd8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3,\
    \ 2, 4, 1])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the number of unique numbers in that vector. Assume no\
    \ negative numbers and only integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxwql92s.jl:21\nin expression starting at\
    \ /tmp/tmpsxwql92s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(lst) == true\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(lst) == length(sorted)\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpan0_4zwh.jl:27\nin expression starting at\
    \ /tmp/tmpan0_4zwh.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i,j) in zip(sorted, lst)\n            if i != j\n                return\
    \ false\n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nis_sorted([1, 2, 3, 4, 5]) \u279E True\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7fluejyl.jl:28\nin expression starting at\
    \ /tmp/tmp7fluejyl.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_lst = sort(lst)\n    length(sorted_lst) == length(lst) && all(sorted_lst[i]\
    \ == lst[i] | i \u2208 1:length(sorted_lst))\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxn3co5yh.jl:20\nin expression starting at\
    \ /tmp/tmpxn3co5yh.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    if length(lst) == 0 \n        return true\n    end\n    \n    last\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x == last\n            return\
    \ false\n        else\n            last = x\n        end\n    end\n    \n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpinmdldv7.jl:41\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinmdldv7.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinmdldv7.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpinmdldv7.jl:44\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinmdldv7.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinmdldv7.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpinmdldv7.jl:47\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpinmdldv7.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinmdldv7.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpinmdldv7.jl:50\n  Expression: candidate([1, 2, 2, 3, 3, 4])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpinmdldv7.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpinmdldv7.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     4     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpinmdldv7.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicl_7vf0.jl:25\nin expression starting at\
    \ /tmp/tmpicl_7vf0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    sorted.length == 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplso8gvci.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmplso8gvci.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplso8gvci.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplso8gvci.jl:24\ntest set:\
    \ Error During Test at /tmp/tmplso8gvci.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmplso8gvci.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplso8gvci.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplso8gvci.jl:24\ntest set:\
    \ Error During Test at /tmp/tmplso8gvci.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5]) == false\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmplso8gvci.jl:18\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplso8gvci.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplso8gvci.jl:24\ntest set:\
    \ Error During Test at /tmp/tmplso8gvci.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5, 6]) == true\n  type Array has no"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 13 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplso8gvci.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(lst) == true \n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst) \n        return true\n    \n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp035xnjtt.jl:1\nin expression starting at /tmp/tmp035xnjtt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    return sorted == lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn1rcc6va.jl:34\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn1rcc6va.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn1rcc6va.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpn1rcc6va.jl:35\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn1rcc6va.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn1rcc6va.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn1rcc6va.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphqox2xzc.jl:32\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphqox2xzc.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphqox2xzc.jl:29\ntest set: Test\
    \ Failed at /tmp/tmphqox2xzc.jl:35\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphqox2xzc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphqox2xzc.jl:29\ntest set: Test\
    \ Failed at /tmp/tmphqox2xzc.jl:38\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphqox2xzc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphqox2xzc.jl:29\ntest set: Test\
    \ Failed at /tmp/tmphqox2xzc.jl:39\n  Expression: candidate([1, 2, 2, 2, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphqox2xzc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphqox2xzc.jl:29\ntest set: Test\
    \ Failed at /tmp/tmphqox2xzc.jl:40\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphqox2xzc.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    if length(lst) == 1 \n        return true\n    \n    last = lst[1]\n\
    \    for x in lst[2:end]\n        if x == last\n            return false\n   \
    \     last = x\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2,\
    \ 2, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxe5_r8f4.jl:28\nin expression starting at\
    \ /tmp/tmpxe5_r8f4.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    return all(sorted == lst)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxsu2zst9.jl:34\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxsu2zst9.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxsu2zst9.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpxsu2zst9.jl:35\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxsu2zst9.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxsu2zst9.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxsu2zst9.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    return all(sorted == lst)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwn1gjc5r.jl:20\nin expression starting at\
    \ /tmp/tmpwn1gjc5r.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(lst) == true\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, \nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ae3mj0p.jl:27\nin expression starting at\
    \ /tmp/tmp8ae3mj0p.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 \n    last = last.last if length(sorted) > 1 \n    return last == sorted[1]\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpl09qj_jy.jl:16 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl09qj_jy.jl:19\n\
    in expression starting at /tmp/tmpl09qj_jy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    lengths = length(uniques)\n\
    \    \n    if lengths == length(lst)\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nExercise: Write a function that checks if a list is sorted\n\
    in descending order. If list has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps4i7f01p.jl:27\nin expression starting at\
    \ /tmp/tmps4i7f01p.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    for x in lst\n       \
    \ if last < x\n            return false\n        last = x\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5erfi3s.jl:25\nin expression starting at\
    \ /tmp/tmp_5erfi3s.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsisqpkly.jl:25\nin expression starting at\
    \ /tmp/tmpsisqpkly.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo6g9uds2.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo6g9uds2.jl:1\n\
    in expression starting at /tmp/tmpo6g9uds2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 3, 2, 4, 2]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 3])\
    \ \u2261 false\n@assert is_sorted([5, 3, 2, 4, 4]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 5]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 6]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 1]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 2]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 3]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 4]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 5]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 6]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 7, 1]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 7, 2]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 3]) \u2261\
    \ false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 4]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 5]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 6]) \u2261\
    \ false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 7, 2]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7,\
    \ 3]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 4]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 7, 7, 5]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 7, 6]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7,\
    \ 7, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 7, 2]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 7, 7, 7, 3]\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_sq6b1i.jl:25\nin expression starting at\
    \ /tmp/tmph_sq6b1i.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 2]) == false\n@test is_sorted([5, 3, 2, 4, 3]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 4]) == false\n@test is_sorted([5, 3, 2, 4, 5]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 6]) == false\n@test is_sorted([5, 3, 2, 4, 7]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 8]) == false\n@test is_sorted([5, 3, 2, 4, 9]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 10]) == false\n@test is_sorted([5, 3, 2, 4, 11]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 12]) == false\n@test is_sorted([5, 3, 2, 4, 13]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 14]) == false\n@test is_sorted([5, 3, 2, 4, 15]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 16]) == false\n@test is_sorted([5, 3, 2, 4, 17]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 18]) == false\n@test is_sorted([5, 3, 2, 4, 19]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 20]) == false\n@test is_sorted([5, 3, 2, 4, 21]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 22]) == false\n@test is_sorted([5, 3, 2, 4, 23]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 24]) == false\n@test is_sorted([5, 3, 2, 4, 25]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 26]) == false\n@test is_sorted([5, 3, 2, 4, 27]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 28]) == false\n@test is_sorted([5, 3, 2, 4, 29]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 30]) == false\n@test is_sorted([5, 3, 2, 4, 31]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 32]) == false\n@test is_sorted([5, 3, 2, 4, 33]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 34]) == false\n@test is_sorted([5, 3, 2, 4, 35]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 36]) == false\n@test is_sorted([5, 3, 2, 4, 37]) == true\n@test \n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1tah22lx.jl:25\nin expression starting at\
    \ /tmp/tmp1tah22lx.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n     \
    \   if lst[i] > last\n            return false\n        last = lst[i]\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the numbers. Assume no negative numbers\
    \ and only integers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyaqu0i8i.jl:26\nin expression starting at\
    \ /tmp/tmpyaqu0i8i.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    for x in lst\n        if x != sort(x)[1]\n  \
    \          sorted = false\n            break\n        end\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpouwc6894.jl:27\nin expression starting at\
    \ /tmp/tmpouwc6894.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 else last\n    last = last.last if length(sorted) > 1 else last\n    return\
    \ last == lst[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp8uxem0tw.jl:16 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8uxem0tw.jl:19\n\
    in expression starting at /tmp/tmp8uxem0tw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    unique = unique(sorted)\n    return length(unique)\
    \ == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 true\n@assert is_sorted([5, 3, 2, 4, 2]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 3]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 4]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 5]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 6]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 8]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 9]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 10]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 11]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 12]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 13]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 14]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 15]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 16]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 17]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 18]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 19]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 20]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 21]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 22]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 23]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 24]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 25]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 26]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 27]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 28]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 29]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1nd2na4.jl:21\nin expression starting at\
    \ /tmp/tmpj1nd2na4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo425yt5t.jl:25\nin expression starting at\
    \ /tmp/tmpo425yt5t.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdrcsszn.jl:25\nin expression starting at\
    \ /tmp/tmpmdrcsszn.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the number of unique elements in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_jr2_r8.jl:25\nin expression starting at\
    \ /tmp/tmpw_jr2_r8.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        for (i,val) in enumerate(sorted_list)\n            if val != lst[i]\n\
    \                return false\n            end\n        end\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnnbynphe.jl:30\nin expression starting at\
    \ /tmp/tmpnnbynphe.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i,j) in zip(sorted, lst)\n            if i != j\n                return\
    \ false\n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a vector. Assume that vector has at least 1 element.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq90uoz07.jl:28\nin expression starting at\
    \ /tmp/tmpq90uoz07.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3,\
    \ 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise: Write a function that returns True if a list\
    \ is sorted in descending order. Assume no negative numbers and only integers.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkcnxghx5.jl:25\nin expression starting at\
    \ /tmp/tmpkcnxghx5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1q_tltsc.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1q_tltsc.jl:1\n\
    in expression starting at /tmp/tmp1q_tltsc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_lst = sort(lst)\n    \n    if length(sorted_lst) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj4n7wgpv.jl:25\nin expression starting at\
    \ /tmp/tmpj4n7wgpv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for x in lst[2:end]\n        if\
    \ x == last\n            return false\n        last = x\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzg_fkdmr.jl:25\nin expression starting at\
    \ /tmp/tmpzg_fkdmr.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwwoiri_8.jl:26\nin expression starting at\
    \ /tmp/tmpwwoiri_8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0b659i00.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0b659i00.jl:1\n\
    in expression starting at /tmp/tmp0b659i00.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.4>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.4>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_rpm__7.jl:25\nin expression starting at\
    \ /tmp/tmp4_rpm__7.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6nr7q0be.jl:26\nin expression starting at\
    \ /tmp/tmp6nr7q0be.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqsq6wxx7.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqsq6wxx7.jl:1\n\
    in expression starting at /tmp/tmpqsq6wxx7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    unique = unique(sorted)\n    length(unique) ==\
    \ length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4,\
    \ 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks whether a list contains all unique\
    \ numbers. Assume no negative numbers and only integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07b4khmy.jl:21\nin expression starting at\
    \ /tmp/tmp07b4khmy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    return all(sorted == lst)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, \nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjldybuln.jl:20\nin expression starting at\
    \ /tmp/tmpjldybuln.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5])\
    \ \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\nis_sorted()\
    \ is a generic function in Julia. Julia will automatically choose the most efficient\
    \ implementation for the data type you provide.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsi2j3jb2.jl:19\nin expression starting at\
    \ /tmp/tmpsi2j3jb2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5,\
    \ 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1,\
    \ 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2,\
    \ 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3,\
    \ 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4,\
    \ 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n\
    @time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time\
    \ is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5,\
    \ 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1,\
    \ 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2,\
    \ 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3,\
    \ 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4,\
    \ 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n\
    @time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time\
    \ is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5,\
    \ 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1,\
    \ 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2,\
    \ 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3,\
    \ 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4,\
    \ 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n\
    @time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time\
    \ is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5,\
    \ 1, 2, 3, 4, 5])\n@time is_\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31mu95hw.jl:25\nin expression starting at\
    \ /tmp/tmp31mu95hw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        for (i,j) in zip(sorted_list, lst)\n            if i == j\n         \
    \       return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5, 1, 2, 3, 4]) \u2261 true\n@assert is_sorted([5, 1, 2, 3, 4, 5])\
    \ \u2261 false\n@assert is_sorted([5, 1, 2, 3, 4, 5, 6]) \u2261 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5, 6, 7]) \u2261 true\n@assert is_sorted([5, 1, 2,\
    \ 2, 3, 3, 4]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, 4]) \u2261 false\n\
    @assert is_sorted([5, 1, 2, 2, 2, 3, 3]) \u2261 false\n@assert is_sorted([5, 1,\
    \ 2, 2, 2, 3, 2]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, 1]) \u2261\
    \ false\n@assert is_sorted([5, 1, 2, 2, 2, 3, 0]) \u2261 false\n@assert is_sorted([5,\
    \ 1, 2, 2, 2, 3, -1]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -2])\
    \ \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -3]) \u2261 false\n@assert\
    \ is_sorted([5, 1, 2, 2, 2, 3, -4]) \u2261 false\n@assert is_sorted([5, 1, 2,\
    \ 2, 2, 3, -5]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -6]) \u2261\
    \ false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -7]) \u2261 false\n@assert is_sorted([5,\
    \ 1, 2, 2, 2, 3, -8]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -9])\
    \ \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -10]) \u2261 false\n@assert\
    \ is_sorted([5, 1, 2, 2, 2, 3, -11]) \u2261 false\n@assert is_sorted([5, 1, 2,\
    \ 2, 2, 3, -12]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -13]) \u2261\
    \ false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -14]) \u2261 false\n@assert is_sorted([5,\
    \ 1, 2, 2, 2, 3, -15]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -16])\
    \ \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -17]) \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9x1q9s3e.jl:30\nin expression starting at\
    \ /tmp/tmp9x1q9s3e.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljcukupe.jl:25\nin expression starting at\
    \ /tmp/tmpljcukupe.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = sort(lst)\n    if length(sorted) == length(lst)\n     \
    \   return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3,\
    \ 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ numbers and returns a vector of numbers that are not in the original vector.\
    \ Assume no negative numbers and only integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkq862cnc.jl:25\nin expression starting at\
    \ /tmp/tmpkq862cnc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of unique elements in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkeotfibm.jl:25\nin expression starting at\
    \ /tmp/tmpkeotfibm.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    for x in lst\n       \
    \ if last < x\n            return false\n        last = x\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2,\
    \ 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector of numbers and returns\
    \ a vector of booleans indicating whether each number is greater than the previous\
    \ number. For example, if the input vector is [5, 3, 7, 2, 9, 1, 4] then the output\
    \ vector would be [false, true, false, false, true, false, true].\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgb2p42u.jl:25\nin expression starting at\
    \ /tmp/tmpmgb2p42u.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmsty5erd.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpmsty5erd.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmsty5erd.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmsty5erd.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpmsty5erd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpmsty5erd.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmsty5erd.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmsty5erd.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpmsty5erd.jl:32\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmsty5erd.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmproh_ty2k.jl:21\nin expression starting at\
    \ /tmp/tmproh_ty2k.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248\
    \ true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is even.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_wt3yve.jl:25\nin expression starting at\
    \ /tmp/tmpz_wt3yve.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    for x in lst\n        if x != lst[findfirst(x\
    \ == lst)]\n            sorted = false\n            break\n        end\n    end\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2,\
    \ 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E\
    \ true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns True if a number is evenly divisible by 3.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgzlyyslp.jl:27\nin expression starting at\
    \ /tmp/tmpgzlyyslp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if sorted == false\n        \
    \    if x == lst[1]\n                sorted = true\n            else\n       \
    \         sorted = false\n        else\n            if x < lst[1]\n          \
    \      sorted = false\n            else\n                sorted = true\n     \
    \   end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpsftewm1e.jl:20 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsftewm1e.jl:24\n\
    in expression starting at /tmp/tmpsftewm1e.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n     \
    \   if lst[i] != last\n            return false\n        last = lst[i]\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2,\
    \ 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n\
    <text>\nExercise\nWrite a function that returns the number of unique elements\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoho2kt6r.jl:26\nin expression starting at\
    \ /tmp/tmpoho2kt6r.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nis_sorted_decreasing\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_92zk9u.jl:25\nin expression starting at\
    \ /tmp/tmpo_92zk9u.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != lst[findfirst(x == lst)]\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of unique elements in an array. Assume no duplicate elements.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_kfmigf.jl:25\nin expression starting at\
    \ /tmp/tmp2_kfmigf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for x in lst[2:end]\n        if\
    \ x != last\n            return false\n        last = x\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpf241vvwr.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf241vvwr.jl:1\n\
    in expression starting at /tmp/tmpf241vvwr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qttisdu.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qttisdu.jl:1\n\
    in expression starting at /tmp/tmp_qttisdu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnb7rd0qn.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpnb7rd0qn.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnb7rd0qn.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnb7rd0qn.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpnb7rd0qn.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpnb7rd0qn.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnb7rd0qn.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnb7rd0qn.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpnb7rd0qn.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5]) == false\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpnb7rd0qn.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnb7rd0qn.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnb7rd0qn.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpn"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnb7rd0qn.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != lst[findfirst(x == lst)]\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpry2lni3a.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpry2lni3a.jl:1\n\
    in expression starting at /tmp/tmpry2lni3a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdlje1kgj.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdlje1kgj.jl:1\n\
    in expression starting at /tmp/tmpdlje1kgj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(lst) == true\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a value appears in a list. For example, how\
    \ many times does the value 5 appear in the list [1, 2, 3, 4, 5]?\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq50_bf_l.jl:27\nin expression starting at\
    \ /tmp/tmpq50_bf_l.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    for x in sorted\n    \
    \    if x != last\n            return false\n        end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppwa5kq1v.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppwa5kq1v.jl:1\n\
    in expression starting at /tmp/tmppwa5kq1v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2,\
    \ 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvtuyorxn.jl:23\nin expression starting at\
    \ /tmp/tmpvtuyorxn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last == last ?\
    \ last : last + 1\n    for x in lst\n        if x == last \n            return\
    \ false\n        last = x\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3,\
    \ 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3,\
    \ 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3,\
    \ 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2nsjydw_.jl:26\nin expression starting at\
    \ /tmp/tmp2nsjydw_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3_x70ft6.jl:25\nin expression starting at\
    \ /tmp/tmp3_x70ft6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   true\n    else\n        false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3uif5hbx.jl:32\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3uif5hbx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3uif5hbx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3uif5hbx.jl:35\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3uif5hbx.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3uif5hbx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3uif5hbx.jl:38\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3uif5hbx.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3uif5hbx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3uif5hbx.jl:39\n  Expression: candidate([1, 2, 2, 2, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3uif5hbx.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3uif5hbx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3uif5hbx.jl:40\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3uif5hbx.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nj24e06.jl:26\nin expression starting at\
    \ /tmp/tmp9nj24e06.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n  \
    \          sorted = false\n            break\n        end\n    end\n    return\
    \ sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzvkfsmse.jl:32\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpzvkfsmse.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzvkfsmse.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzvkfsmse.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpzvkfsmse.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpzvkfsmse.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzvkfsmse.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzvkfsmse.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpzvkfsmse.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5]) == false\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpzvkfsmse.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzvkfsmse.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzvkfsmse.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpz"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzvkfsmse.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq6wlfr77.jl:33\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6wlfr77.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6wlfr77.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq6wlfr77.jl:34\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq6wlfr77.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq6wlfr77.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq6wlfr77.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i, j) in zip(sorted, lst)\n            if i != j\n                return\
    \ false\n            end\n        end\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_wjzqrd.jl:30\nin expression starting at\
    \ /tmp/tmp4_wjzqrd.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpub5namlt.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpub5namlt.jl:1\n\
    in expression starting at /tmp/tmpub5namlt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n\"\"\"\n    Given a list of numbers, return whether or\
    \ not they are sorted\n    in descending order. If list has more than 1 duplicate\
    \ of the same\n    number, return False. Assume no negative numbers and only integers.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvho9lt7k.jl:23\nin expression starting at\
    \ /tmp/tmpvho9lt7k.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n     \
    \   if lst[i] != last\n            return false\n        last = lst[i]\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2,\
    \ 3, 1, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2,\
    \ 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2,\
    \ 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2])\n</cell>\n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzwslkeza.jl:26\nin expression starting at\
    \ /tmp/tmpzwslkeza.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdy4f0pvv.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpdy4f0pvv.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdy4f0pvv.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdy4f0pvv.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdy4f0pvv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpdy4f0pvv.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdy4f0pvv.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdy4f0pvv.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpdy4f0pvv.jl:32\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdy4f0pvv.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for x in lst[2:end]\n        if\
    \ last < x\n            return false\n        last = x\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp2z_suvmy.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2z_suvmy.jl:1\n\
    in expression starting at /tmp/tmp2z_suvmy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i,x) in enumerate(lst)\n            if x != sorted[i]\n             \
    \   return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n\
    @assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4,\
    \ 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n\
    <text>\nPart II: Arrays\nArrays are a useful data structure for storing collections\
    \ of numbers. Arrays are mutable and are indexed by integers. Arrays are also\
    \ multidimensional. Arrays are often used to represent matrices and tensors. Arrays\
    \ are also useful for storing collections of strings. Arrays are also useful for\
    \ storing collections of booleans.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6087kack.jl:30\nin expression starting at\
    \ /tmp/tmp6087kack.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    sorted = sorted && (lst == sort(lst))\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n\
    <text>\nExercise\nWrite a function is_sorted_by() which takes a function and a\
    \ list of numbers and returns whether or not the list of numbers is sorted using\
    \ the given function.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp25htdp7t.jl:21\nin expression starting at\
    \ /tmp/tmp25htdp7t.jl:21\n"
  exit_code: 1
  status: SyntaxError
