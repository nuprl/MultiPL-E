name: HumanEval_126_is_sorted
language: julia
results:
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz8i5emvw.jl:32\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpz8i5emvw.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz8i5emvw.jl:29\ntest set: Test Failed at /tmp/tmpz8i5emvw.jl:35\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, 7]) == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpz8i5emvw.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz8i5emvw.jl:29\ntest set: Test Failed at /tmp/tmpz8i5emvw.jl:38\n\
    \  Expression: candidate([3, 2, 1]) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz8i5emvw.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz8i5emvw.jl:29\ntest set: Test Failed at /tmp/tmpz8i5emvw.jl:39\n\
    \  Expression: candidate([1, 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz8i5emvw.jl:39\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz8i5emvw.jl:29\ntest set: Test Failed at /tmp/tmpz8i5emvw.jl:40\n\
    \  Expression: candidate([1, 2, 3, 3, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz8i5emvw.jl:40\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz8i5emvw.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     5     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz8i5emvw.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last-1 if last\
    \ > 0 else last\n    last = sorted[last]\n    last = last-1 if last > 0 else last\n\
    \    return last == 0\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 2, 7, 1, 3, 8, 4])\n</cell>\n<text>\nis_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    is_sorted([1, 3, 2, 4, 5]) \u279E False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\nis_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]) \u279E False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E True\nis_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nis_sorted([5, 6, 2, 7, 1, 3, 8, 4]) \u279E True\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqghcz9y8.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqghcz9y8.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3uw2rjnv.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3uw2rjnv.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    unique = unique(sorted)\n    return length(unique)\
    \ == length(sorted)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp49fh00ac.jl:26\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  UndefVarError: unique not defined\n \
    \ Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp49fh00ac.jl:18\n\
    \   [2] top-level scope at /tmp/tmp49fh00ac.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp49fh00ac.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  UndefVarError: unique not defined\n  Stacktrace:\n \
    \  [1] is_sorted(::Array{Int64,1}) at /tmp/tmp49fh00ac.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp49fh00ac.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp49fh00ac.jl:28\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp49fh00ac.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp49fh00ac.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp49fh00ac.jl:29\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp49fh00ac.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp49fh00ac.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp49fh00ac.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp49fh00ac.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp49fh00ac.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp49fh00ac.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp49fh00ac.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp49fh00ac.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp49fh00ac.jl:32\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n  UndefVarError: unique not defined\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmp49fh00ac.jl:18\n   [2] top-level scope at /tmp/tmp49fh00ac.jl:32\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp49fh00ac.jl:33\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  UndefVarError: unique not defined\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmp49fh00ac.jl:18\n   [2] top-level scope at /tmp/tmp49fh00ac.jl:33\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp49fh00ac.jl:34\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  UndefVarError: unique not defined\n  Stacktrace:\n   [1]\
    \ is_sorted(::Array{Int64,1}) at /tmp/tmp49fh00ac.jl:18\n   [2] top-level scope\
    \ at /tmp/tmp49fh00ac.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp49fh00ac.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp49fh00ac.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp49fh00ac.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp49fh00ac.jl:36\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp49fh00ac.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp49fh00ac.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp49fh00ac.jl:37\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp49fh00ac.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp49fh00ac.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp49fh00ac.jl:38\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  UndefVarError: unique not defined\n  Stacktrace:\n   [1]\
    \ is_sorted(::Array{Int64,1}) at /tmp/tmp49fh00ac.jl:18\n   [2] top-level scope\
    \ at /tmp/tmp49fh00ac.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp49fh00ac.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |    13     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 13 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp49fh00ac.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiuvveesi.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpiuvveesi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpiuvveesi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    lengths = lengths(sorted)\n\
    \    \n    trues = trues(lengths)\n    \n    trues = trues[uniques]\n    \n  \
    \  return all(trues)\nend\n</cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4sgx84be.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4sgx84be.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last-1 if last\
    \ > 1 else last\n    return last == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn4uo7plx.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn4uo7plx.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of unique elements in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpedlyf5xl.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpedlyf5xl.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<text>\n\
    Exercise: Write a function that checks if a list is sorted in\ndescending order.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphhz1fmqx.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphhz1fmqx.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp61vm4g9l.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp61vm4g9l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp61vm4g9l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2,\
    \ 2, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbq19ort5.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbq19ort5.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4b95_gi3.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4b95_gi3.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzz6fxwh1.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzz6fxwh1.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 else last\n    return last == lst[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ checks if a vector is sorted in descending order.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmproko0qdy.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmproko0qdy.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphswzhoqx.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphswzhoqx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphswzhoqx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5]) \u2248 true\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2,\
    \ 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of unique elements in a given list. Assume that all elements are\
    \ unique.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi9bge2tz.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi9bge2tz.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i,x) in enumerate(lst)\n            if x != sorted[i]\n             \
    \   return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ee2c7mi.jl:44\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9ee2c7mi.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ee2c7mi.jl:34\ntest set: Test Failed at /tmp/tmp9ee2c7mi.jl:45\n\
    \  Expression: candidate([1, 2, 3, 3, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9ee2c7mi.jl:45\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ee2c7mi.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |   11     2     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ee2c7mi.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    for x in lst\n        if x != sort(x)\n     \
    \       sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp18xm6z0j.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp18xm6z0j.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplx3sl3zi.jl:28\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplx3sl3zi.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplx3sl3zi.jl:25\ntest set: Test Failed at /tmp/tmplx3sl3zi.jl:31\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, 7]) == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmplx3sl3zi.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplx3sl3zi.jl:25\ntest set: Test Failed at /tmp/tmplx3sl3zi.jl:34\n\
    \  Expression: candidate([3, 2, 1]) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplx3sl3zi.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplx3sl3zi.jl:25\ntest set: Test Failed at /tmp/tmplx3sl3zi.jl:37\n\
    \  Expression: candidate([1, 2, 2, 3, 3, 4]) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplx3sl3zi.jl:37\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplx3sl3zi.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     4     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplx3sl3zi.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 3, 2, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 3, 2, 4, 2]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 3])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 4]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 5]) \u2248 true\n@assert is_sorted([5, 3, 2, 4, 6]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7]) \u2248 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 8]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 9]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 10]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 11]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 12]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 13]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 14]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 15]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 16])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 17]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 18]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 19]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 20]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 21]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 22]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 23]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 24])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 25]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 26]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 27]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 28]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 29]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplhsm_z6u.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplhsm_z6u.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    for x in lst\n        if x != sort(x)\n     \
    \       sorted = false\n            break\n    end\n    return sorted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpluq5guid.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpluq5guid.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpluq5guid.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpytd56v_0.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpytd56v_0.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_empty(lst)\n        return true\n    \n    sorted_list = sort(lst)\n\
    \    \n    if length(sorted_list) == length(lst)\n        return true\n    \n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, \nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptxmtitt4.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptxmtitt4.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_fc2aqkg.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_fc2aqkg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_fc2aqkg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    trues = trues(last)\n\
    \    for i in 1:length(lst)\n        if lst[i] != last\n            trues = falses(trues)\n\
    \        end\n    end\n    return trues\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5])\
    \ == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1,\
    \ 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2,\
    \ 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2,\
    \ 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2,\
    \ 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2,\
    \ 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 5]) == true\n@test is_sorted([5, 1, 2, 3, 4, 5]) ==\
    \ true\n@test is_sorted([5, 1, 2, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp09puei95.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp09puei95.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    \n    for x in lst\n        if sorted == false\n\
    \            if x == lst[1]\n                sorted = true\n            else\n\
    \                sorted = false\n        end\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5]) \u2248 true\n\
    @assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4,\
    \ 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4,\
    \ 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\n3.3 Find\
    \ all duplicates\nGiven a list of numbers, return a list of all duplicates. Assume\
    \ no negative numbers and only integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwfntb4qb.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwfntb4qb.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzesk72s5.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpzesk72s5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpzesk72s5.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzesk72s5.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpzesk72s5.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpzesk72s5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpzesk72s5.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzesk72s5.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpzesk72s5.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpzesk72s5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpzesk72s5.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzesk72s5.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpzesk72s5.jl:33\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  MethodError: no method matching sort(::Int64)\n \
    \ Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpzesk72s5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpzesk72s5.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzesk72s5.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpzesk72s5.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpzesk72s5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpzesk72s5.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzesk72s5.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpzesk72s5.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpzesk72s5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpzesk72s5.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzesk72s5.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpzesk72s5.jl:37\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  MethodError: no method matching sort(::Int64)\n  Closest candidates\
    \ are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpzesk72s5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpzesk72s5.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzesk72s5.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpzesk72s5.jl:38\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpzesk72s5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpzesk72s5.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzesk72s5.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpzesk72s5.jl:39\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpzesk72s5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpzesk72s5.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzesk72s5.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpzesk72s5.jl:40\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpzesk72s5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpzesk72s5.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzesk72s5.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpzesk72s5.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  MethodError: no method matching sort(::Int64)\n \
    \ Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpzesk72s5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpzesk72s5.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzesk72s5.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpzesk72s5.jl:42\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpzesk72s5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpzesk72s5.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzesk72s5.jl:29\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1     12     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzesk72s5.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    for x in lst\n        if x != sort(x)\n     \
    \       sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppno3w4jl.jl:31\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmppno3w4jl.jl:20\n\
    \   [2] top-level scope at /tmp/tmppno3w4jl.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppno3w4jl.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmppno3w4jl.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmppno3w4jl.jl:20\n\
    \   [2] top-level scope at /tmp/tmppno3w4jl.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppno3w4jl.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmppno3w4jl.jl:33\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmppno3w4jl.jl:20\n\
    \   [2] top-level scope at /tmp/tmppno3w4jl.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppno3w4jl.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmppno3w4jl.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  MethodError: no method matching sort(::Int64)\n \
    \ Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmppno3w4jl.jl:20\n\
    \   [2] top-level scope at /tmp/tmppno3w4jl.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppno3w4jl.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmppno3w4jl.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmppno3w4jl.jl:20\n\
    \   [2] top-level scope at /tmp/tmppno3w4jl.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppno3w4jl.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmppno3w4jl.jl:36\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmppno3w4jl.jl:20\n\
    \   [2] top-level scope at /tmp/tmppno3w4jl.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppno3w4jl.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmppno3w4jl.jl:38\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  MethodError: no method matching sort(::Int64)\n  Closest candidates\
    \ are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmppno3w4jl.jl:20\n\
    \   [2] top-level scope at /tmp/tmppno3w4jl.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppno3w4jl.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmppno3w4jl.jl:39\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmppno3w4jl.jl:20\n\
    \   [2] top-level scope at /tmp/tmppno3w4jl.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppno3w4jl.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmppno3w4jl.jl:40\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmppno3w4jl.jl:20\n\
    \   [2] top-level scope at /tmp/tmppno3w4jl.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppno3w4jl.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmppno3w4jl.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmppno3w4jl.jl:20\n\
    \   [2] top-level scope at /tmp/tmppno3w4jl.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppno3w4jl.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmppno3w4jl.jl:42\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  MethodError: no method matching sort(::Int64)\n \
    \ Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmppno3w4jl.jl:20\n\
    \   [2] top-level scope at /tmp/tmppno3w4jl.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppno3w4jl.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmppno3w4jl.jl:43\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmppno3w4jl.jl:20\n\
    \   [2] top-level scope at /tmp/tmppno3w4jl.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppno3w4jl.jl:30\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1     12     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppno3w4jl.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz2_a04ho.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz2_a04ho.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2es3dyor.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2es3dyor.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   return true\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ud6k7a6.jl:32\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1ud6k7a6.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1ud6k7a6.jl:29\ntest set: Test Failed at /tmp/tmp1ud6k7a6.jl:35\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, 7]) == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp1ud6k7a6.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1ud6k7a6.jl:29\ntest set: Test Failed at /tmp/tmp1ud6k7a6.jl:38\n\
    \  Expression: candidate([3, 2, 1]) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1ud6k7a6.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1ud6k7a6.jl:29\ntest set: Test Failed at /tmp/tmp1ud6k7a6.jl:39\n\
    \  Expression: candidate([1, 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1ud6k7a6.jl:39\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1ud6k7a6.jl:29\ntest set: Test Failed at /tmp/tmp1ud6k7a6.jl:40\n\
    \  Expression: candidate([1, 2, 3, 3, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1ud6k7a6.jl:40\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1ud6k7a6.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     5     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ud6k7a6.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    return last == last -\
    \ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnne2opsy.jl:26\n  Expression: candidate([5])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpnne2opsy.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnne2opsy.jl:25\ntest set: Test Failed at /tmp/tmpnne2opsy.jl:27\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnne2opsy.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnne2opsy.jl:25\ntest set: Test Failed at /tmp/tmpnne2opsy.jl:29\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 6]) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnne2opsy.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnne2opsy.jl:25\ntest set: Test Failed at /tmp/tmpnne2opsy.jl:30\n\
    \  Expression: candidate([1, 2, 3, 4, 5, 6, 7]) == true\n   Evaluated: false ==\
    \ true\nStacktrace:\n [1] top-level scope at /tmp/tmpnne2opsy.jl:30\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnne2opsy.jl:25\ntest set: Error During Test at\
    \ /tmp/tmpnne2opsy.jl:32\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n  BoundsError: attempt to access 0-element Array{Int64,1} at index\
    \ [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmpnne2opsy.jl:18\n   [3] top-level scope at /tmp/tmpnne2opsy.jl:32\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpnne2opsy.jl:25\n  \ntest set: Test Failed at\
    \ /tmp/tmpnne2opsy.jl:33\n  Expression: candidate([1]) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpnne2opsy.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnne2opsy.jl:25\ntest set: Test Failed at /tmp/tmpnne2opsy.jl:37\n\
    \  Expression: candidate([1, 2, 2, 3, 3, 4]) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnne2opsy.jl:37\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnne2opsy.jl:25\ntest set: Test Failed at /tmp/tmpnne2opsy.jl:38\n\
    \  Expression: candidate([1, 2, 3, 4]) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnne2opsy.jl:38\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnne2opsy.jl:25\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    5     7      1     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnne2opsy.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<text>\nis_sorted([5, 4, 3, 2, 1]) \u279E True\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzjgicjva.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzjgicjva.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 3, 2, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 3, 2, 4, 2]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 3])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 4]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 5]) \u2248 true\n@assert is_sorted([5, 3, 2, 4, 6]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 8]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 9]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 10]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 11, 12]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 11, 13, 14]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11,\
    \ 13, 14, 15]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16,\
    \ 17]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17, 18])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17, 19, 20])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17, 19, 20,\
    \ 21]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17, 19,\
    \ 20, 21, 22]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16,\
    \ 17, 19, 20, 21, 23, 24]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11,\
    \ 13, 14, 16, 17, 19, 20, 21, 23, 24, 25]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 26, 27]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17, 19, 20, 21, 23, 24, 26,\
    \ 28, 29]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 11, 13, 14, 16, 17,\
    \ 19, 20, 21, 23, 24, 26, 28, 30, 31]) \u2248 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 11, 13, 14, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70gh11tl.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp70gh11tl.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if sorted == false\n        \
    \    break\n        if x == sorted\n            sorted = false\n        else\n\
    \            sorted = true\n        end\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of unique elements in a given list. Assume no duplicates.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4zhfssni.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4zhfssni.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n        \
    \    sorted = false\n            break\n        end\n    end\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\n\
    is_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5,\
    \ 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a vector is sorted in descending order. Assume no negative numbers\
    \ and only integers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpedco2i5n.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpedco2i5n.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7q77q796.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7q77q796.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7q77q796.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7q77q796.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7q77q796.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7q77q796.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7q77q796.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7q77q796.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7q77q796.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7q77q796.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7q77q796.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7q77q796.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7q77q796.jl:33\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  MethodError: no method matching sort(::Int64)\n \
    \ Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7q77q796.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7q77q796.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7q77q796.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7q77q796.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7q77q796.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7q77q796.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7q77q796.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7q77q796.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7q77q796.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7q77q796.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7q77q796.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7q77q796.jl:37\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  MethodError: no method matching sort(::Int64)\n  Closest candidates\
    \ are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7q77q796.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7q77q796.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7q77q796.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7q77q796.jl:38\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7q77q796.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7q77q796.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7q77q796.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7q77q796.jl:39\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7q77q796.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7q77q796.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7q77q796.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7q77q796.jl:40\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7q77q796.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7q77q796.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7q77q796.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7q77q796.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  MethodError: no method matching sort(::Int64)\n \
    \ Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7q77q796.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7q77q796.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7q77q796.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7q77q796.jl:42\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7q77q796.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7q77q796.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7q77q796.jl:29\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1     12     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7q77q796.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3,\
    \ 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise\nWrite a function that takes a vector of numbers\
    \ and returns the number of unique numbers in the vector. Assume no negative numbers\
    \ and only integers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbdu8q4wh.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbdu8q4wh.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([1,2,3,4,5])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.3>\nis_sorted([1,2,3,4,5,6,7])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,2,3,4])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1,2,2,3,3,4])\n</cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7yr9k3zj.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7yr9k3zj.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiq6mjfqw.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiq6mjfqw.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns True if a number is\
    \ evenly divisible by 3, and False otherwise. Test it on all numbers from 0 to\
    \ 20.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_dxju3g7.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_dxju3g7.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7rglqizn.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7rglqizn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if sorted == false\n        \
    \    break\n        if x != lst[findfirst(x == lst)]\n            sorted = false\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\n\
    is_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the number\
    \ of unique elements in the vector. Assume no duplicates.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ly67_ch.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ly67_ch.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of numbers and returns the number of unique numbers in that vector.\
    \ Assume no negative numbers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp36x00nyn.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp36x00nyn.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted(\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe1_j2hem.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe1_j2hem.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    sorted = sorted[sorted.!=0]\n    return length(sorted)\
    \ == length(lst)\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2,\
    \ 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2,\
    \ 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2,\
    \ 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 1, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 1, 2,\
    \ 3, 1])\n</cell>\n<code language=julia-1.5>\nis_\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe1imvuy4.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe1imvuy4.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv59mfc2h.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv59mfc2h.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 true\n@assert is_sorted([5, 3, 2, 4, 2]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 3]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 4]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 5]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 6]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 8]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 9]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 10]) \u2261 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 11]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 12])\
    \ \u2261 false\n@assert is_sorted([5, 3, 2, 4, 13]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 14]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 15]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 16]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 17]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 18]) \u2261 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 19]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 20])\
    \ \u2261 false\n@assert is_sorted([5, 3, 2, 4, 21]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 22]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 23]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 24]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 25]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 26]) \u2261 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 27]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 28])\
    \ \u2261 false\n@assert is_sorted([5, 3, 2, 4, 29]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 30]) \uFFFD\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpntr66vak.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpntr66vak.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppzl3ifkt.jl:32\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppzl3ifkt.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzl3ifkt.jl:29\ntest set: Test Failed at /tmp/tmppzl3ifkt.jl:35\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, 7]) == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmppzl3ifkt.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzl3ifkt.jl:29\ntest set: Test Failed at /tmp/tmppzl3ifkt.jl:38\n\
    \  Expression: candidate([3, 2, 1]) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppzl3ifkt.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzl3ifkt.jl:29\ntest set: Test Failed at /tmp/tmppzl3ifkt.jl:39\n\
    \  Expression: candidate([1, 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppzl3ifkt.jl:39\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzl3ifkt.jl:29\ntest set: Test Failed at /tmp/tmppzl3ifkt.jl:40\n\
    \  Expression: candidate([1, 2, 3, 3, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppzl3ifkt.jl:40\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzl3ifkt.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     5     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppzl3ifkt.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    seen = Set()\n    for x in lst\n        if x in seen\n\
    \            sorted = false\n            break\n        seen.add(x)\n    end\n\
    \    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphqadvkoz.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphqadvkoz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphqadvkoz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n\
    \        for (i,val) in enumerate(lst)\n            if val != sorted[i]\n    \
    \            return false\n            end\n        end\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwj5d4_ex.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwj5d4_ex.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i, j) in zip(sorted, lst)\n            if i != j\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphs19c7ds.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphs19c7ds.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(lst) == length(sorted)\n     \
    \   for (i,x) in enumerate(lst)\n            if x != sorted[i]\n             \
    \   return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5, 3, 2, 4, 1]) \u2261 true\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261\
    \ false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 false\n@assert is_sorted(\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt6r1hkvf.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt6r1hkvf.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7s40pjtd.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7s40pjtd.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7s40pjtd.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7s40pjtd.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7s40pjtd.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7s40pjtd.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7s40pjtd.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7s40pjtd.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7s40pjtd.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7s40pjtd.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7s40pjtd.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7s40pjtd.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7s40pjtd.jl:33\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7s40pjtd.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7s40pjtd.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7s40pjtd.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7s40pjtd.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7s40pjtd.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7s40pjtd.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7s40pjtd.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7s40pjtd.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7s40pjtd.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7s40pjtd.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7s40pjtd.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7s40pjtd.jl:37\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7s40pjtd.jl:19\n   [2] top-level\
    \ scope at /tmp/tmp7s40pjtd.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7s40pjtd.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7s40pjtd.jl:38\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7s40pjtd.jl:19\n   [2] top-level\
    \ scope at /tmp/tmp7s40pjtd.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7s40pjtd.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7s40pjtd.jl:39\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7s40pjtd.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7s40pjtd.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7s40pjtd.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7s40pjtd.jl:40\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7s40pjtd.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7s40pjtd.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7s40pjtd.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7s40pjtd.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7s40pjtd.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7s40pjtd.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7s40pjtd.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7s40pjtd.jl:42\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  MethodError: objects of type Int64 are not callable\n \
    \ Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7s40pjtd.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7s40pjtd.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7s40pjtd.jl:29\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1     12     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7s40pjtd.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\n\
    is_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns True if a list contains all unique elements.\
    \ Assume no duplicate elements.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp07rsbirj.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp07rsbirj.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n     \
    \   if lst[i] > last\n            return false\n        last = lst[i]\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5zry3uib.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5zry3uib.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if sorted == false\n        \
    \    sorted = x < lst[end]\n        else\n            sorted = sorted && x < lst[end]\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, \nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdyq9vdt7.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdyq9vdt7.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7a20s7ok.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7a20s7ok.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7a20s7ok.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7a20s7ok.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7a20s7ok.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7a20s7ok.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7a20s7ok.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7a20s7ok.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7a20s7ok.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7a20s7ok.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7a20s7ok.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7a20s7ok.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7a20s7ok.jl:33\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7a20s7ok.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7a20s7ok.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7a20s7ok.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7a20s7ok.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7a20s7ok.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7a20s7ok.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7a20s7ok.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7a20s7ok.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7a20s7ok.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7a20s7ok.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7a20s7ok.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7a20s7ok.jl:37\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7a20s7ok.jl:19\n   [2] top-level\
    \ scope at /tmp/tmp7a20s7ok.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7a20s7ok.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7a20s7ok.jl:38\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7a20s7ok.jl:19\n   [2] top-level\
    \ scope at /tmp/tmp7a20s7ok.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7a20s7ok.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7a20s7ok.jl:39\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7a20s7ok.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7a20s7ok.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7a20s7ok.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7a20s7ok.jl:40\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7a20s7ok.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7a20s7ok.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7a20s7ok.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7a20s7ok.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7a20s7ok.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7a20s7ok.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7a20s7ok.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp7a20s7ok.jl:42\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  MethodError: objects of type Int64 are not callable\n \
    \ Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp7a20s7ok.jl:19\n\
    \   [2] top-level scope at /tmp/tmp7a20s7ok.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7a20s7ok.jl:29\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1     12     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7a20s7ok.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5]) \u2248 true\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2,\
    \ 2, 3, 4]) \u2248 false\n</cell>\n<text>\nis_sorted_decreasing\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp61bx3bl9.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp61bx3bl9.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    return length(sorted) == length(lst) and all(sorted\
    \ .== lst)\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"and\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqppmcd0o.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqppmcd0o.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for x in lst[2:end]\n        if\
    \ x != last\n            return false\n        last = x\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp65njk63c.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp65njk63c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp65njk63c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2,\
    \ 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code language=julia-\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwi9nekk6.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwi9nekk6.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb1ga2anm.jl:28\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n\
    \   [3] zeros at ./array.jl:504 [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n\
    \   [5] Dict{Int64,Nothing}() at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n\
    \   [7] unique(::Array{Int64,1}) at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490\
    \ [inlined]\n   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10]\
    \ unique at ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1ga2anm.jl:29\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at\
    \ ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n   [3] zeros\
    \ at ./array.jl:504 [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n   [5]\
    \ Dict{Int64,Nothing}() at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n\
    \   [7] unique(::Array{Int64,1}) at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490\
    \ [inlined]\n   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10]\
    \ unique at ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1ga2anm.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at\
    \ ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n   [3] zeros\
    \ at ./array.jl:504 [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n   [5]\
    \ Dict{Int64,Nothing}() at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n\
    \   [7] unique(::Array{Int64,1}) at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490\
    \ [inlined]\n   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10]\
    \ unique at ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1ga2anm.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  StackOverflowError:\n  Stacktrace:\n   [1] Array\
    \ at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n   [3]\
    \ zeros at ./array.jl:504 [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n\
    \   [5] Dict{Int64,Nothing}() at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n\
    \   [7] unique(::Array{Int64,1}) at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490\
    \ [inlined]\n   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10]\
    \ unique at ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1ga2anm.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  StackOverflowError:\n  Stacktrace:\n   [1] Array\
    \ at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n   [3]\
    \ zeros at ./array.jl:504 [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n\
    \   [5] Dict{Int64,Nothing}() at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n\
    \   [7] unique(::Array{Int64,1}) at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490\
    \ [inlined]\n   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10]\
    \ unique at ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1ga2anm.jl:33\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  StackOverflowError:\n  Stacktrace:\n   [1] Array\
    \ at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n   [3]\
    \ zeros at ./array.jl:504 [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n\
    \   [5] Dict{Int64,Nothing}() at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n\
    \   [7] unique(::Array{Int64,1}) at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490\
    \ [inlined]\n   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10]\
    \ unique at ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1ga2anm.jl:34\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at ./boot.jl:405\
    \ [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n   [3] zeros at ./array.jl:504\
    \ [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n   [5] Dict{Int64,Nothing}()\
    \ at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n   [7] unique(::Array{Int64,1})\
    \ at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490 [inlined]\n\
    \   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10] unique at\
    \ ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1}) at\
    \ /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \ntest set: Error During Test\
    \ at /tmp/tmpb1ga2anm.jl:35\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at ./boot.jl:405\
    \ [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n   [3] zeros at ./array.jl:504\
    \ [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n   [5] Dict{Int64,Nothing}()\
    \ at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n   [7] unique(::Array{Int64,1})\
    \ at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490 [inlined]\n\
    \   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10] unique at\
    \ ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1}) at\
    \ /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \ntest set: Error During Test\
    \ at /tmp/tmpb1ga2anm.jl:36\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at ./boot.jl:405\
    \ [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n   [3] zeros at ./array.jl:504\
    \ [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n   [5] Dict{Int64,Nothing}()\
    \ at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n   [7] unique(::Array{Int64,1})\
    \ at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490 [inlined]\n\
    \   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10] unique at\
    \ ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1}) at\
    \ /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \ntest set: Error During Test\
    \ at /tmp/tmpb1ga2anm.jl:37\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  StackOverflowError:\n  Stacktrace:\n   [1] Array\
    \ at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n   [3]\
    \ zeros at ./array.jl:504 [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n\
    \   [5] Dict{Int64,Nothing}() at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n\
    \   [7] unique(::Array{Int64,1}) at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490\
    \ [inlined]\n   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10]\
    \ unique at ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1ga2anm.jl:38\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  StackOverflowError:\n  Stacktrace:\n   [1] Array\
    \ at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n   [3]\
    \ zeros at ./array.jl:504 [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n\
    \   [5] Dict{Int64,Nothing}() at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n\
    \   [7] unique(::Array{Int64,1}) at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490\
    \ [inlined]\n   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10]\
    \ unique at ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1ga2anm.jl:39\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  StackOverflowError:\n  Stacktrace:\n   [1] Array\
    \ at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n   [3]\
    \ zeros at ./array.jl:504 [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n\
    \   [5] Dict{Int64,Nothing}() at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n\
    \   [7] unique(::Array{Int64,1}) at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490\
    \ [inlined]\n   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10]\
    \ unique at ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1ga2anm.jl:40\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  StackOverflowError:\n  Stacktrace:\n   [1] Array at ./boot.jl:405\
    \ [inlined]\n   [2] Array at ./boot.jl:414 [inlined]\n   [3] zeros at ./array.jl:504\
    \ [inlined]\n   [4] zeros at ./array.jl:500 [inlined]\n   [5] Dict{Int64,Nothing}()\
    \ at ./dict.jl:90\n   [6] Set at ./set.jl:6 [inlined]\n   [7] unique(::Array{Int64,1})\
    \ at ./set.jl:115\n   [8] _unique_dims at ./multidimensional.jl:1490 [inlined]\n\
    \   [9] #unique#432 at ./multidimensional.jl:1488 [inlined]\n   [10] unique at\
    \ ./multidimensional.jl:1488 [inlined]\n   [11] is_sorted(::Array{Int64,1}) at\
    \ /tmp/tmpb1ga2anm.jl:17 (repeats 79979 times)\n  \nTest Summary: | Error  Total\n\
    test set      |    13     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 13 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb1ga2anm.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    \n    for x in lst\n        if x != sort(x)[1]\n\
    \            sorted = false\n            break\n        end\n    end\n    \n \
    \   return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp74ljj9wi.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp74ljj9wi.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    for x in sorted\n    \
    \    if x == last\n            return false\n        end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgdg9kmgf.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgdg9kmgf.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa_mekciz.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa_mekciz.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7lflh1j2.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7lflh1j2.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmparfv6ogo.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmparfv6ogo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmparfv6ogo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last == last ?\
    \ last : last-1\n    for x in lst\n        if x == last\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz1oy8ykj.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz1oy8ykj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz1oy8ykj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if length(sorted) > 1 && !iszero(last)\
    \ \n    last = last.last if length(sorted) > 1 && !iszero(last) \n    last = last.last\
    \ if length(sorted) > 1 && !iszero(last) \n    last = last.last if length(sorted)\
    \ > 1 && !iszero(last) \n    last = last.last if \nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplfldu11i.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplfldu11i.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr1_nkkxt.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpr1_nkkxt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr1_nkkxt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\nis_sorted() is a higher-order function that takes a function\
    \ as its argument. is_sorted() returns a boolean indicating whether the function\
    \ is_sorted() was called on is sorted or not.\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyi0ouv60.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyi0ouv60.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise\nWrite a function that returns true if the\
    \ given list is a permutation of the given list. Assume no repeated numbers. Assume\
    \ no negative numbers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2sjt3sdu.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2sjt3sdu.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    seen = Set()\n    for x in lst\n        if x in seen\n\
    \            sorted = false\n        else\n            seen.add(x)\n    end\n\
    \    sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 3,\
    \ 2, 4, 1]) \u2248 true\n@assert is_sorted([5, 3, 2, 4, 2]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 3]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 4])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 5]) \u2248 true\n@assert is_sorted([5,\
    \ 3, 2, 4, 6]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 1]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 2]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 3]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 4]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 5]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 6]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 1]) \u2248 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 7, 2]) \u2248 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 7, 3]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 4]) \u2248\
    \ false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 5]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 6]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 1])\
    \ \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 2]) \u2248 false\n@assert\
    \ is_sorted([5, 3, 2, 4, 7, 7, 7, 3]) \u2248 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 7, 7, 4]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 5]) \u2248\
    \ false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 6]) \u2248 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 7, 7, 1]) \u2248 false\n@assert is_sorted([5, 3, 2, 4, 7, 7,\
    \ 7, 7, 2]) \u2248 false\n@assert is_sorted(\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8xlqbbvi.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8xlqbbvi.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc7gnwyiy.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc7gnwyiy.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i,j) in zip(sorted, lst)\n            if i != j\n                return\
    \ false\n            end\n        end\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3jfpqtvc.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3jfpqtvc.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5])\
    \ \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\n3.2.3 is_sorted(lst::Vector{Int64},\
    \ reverse::Bool)\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyudpun29.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyudpun29.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != lst[findfirst(x == lst)]\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ true\n@assert \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprjdkub99.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprjdkub99.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    \n    for x in lst\n        if x != lst[end]\n\
    \            if x < lst[end]\n                sorted = false\n               \
    \ break\n            elseif x == lst[end]\n                sorted = false\n  \
    \              break\n            else\n                sorted = true\n      \
    \          break\n        end\n    end\n    \n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5]) \u2248 true\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2,\
    \ 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ True if a number is even, and False if it is odd.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwegg2p4y.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwegg2p4y.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for x in lst[2:end]\n        if\
    \ last < x\n            return false\n        last = x\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of integers and\
    \ returns the number of unique elements in the vector. Assume no negative numbers\
    \ and only integers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp18ikvw3w.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp18ikvw3w.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    return lst == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of integers\
    \ in a list that are less than or equal to x. Assume that x is positive.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1rmwi8gi.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1rmwi8gi.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1, 6]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1,\
    \ 6, 7]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n\
    @assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2,\
    \ 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248\
    \ false\n@assert is_sorted([5, 2, 3, 4, 1, 6, 7]) \u2248 false\n@assert is_sorted([5,\
    \ 2, 3, 4, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptp536kkl.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptp536kkl.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqh34tad4.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqh34tad4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqh34tad4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        for (i,j) in zip(sorted_list,lst)\n            if i == j\n          \
    \      return false\n            end\n        end\n        return true\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjqkx3l2t.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjqkx3l2t.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last-1 if last\
    \ > 1 else last\n    last = sorted[last]\n    return last == 0\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 6, 4, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 6, 4, 3, 1])\n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq_v6mbuc.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpq_v6mbuc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_empty(lst)\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_6l72zeg.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_6l72zeg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the number of times a given number appears in a\
    \ given list. For example, how many times does 3 appear in [1, 2, 3, 4, 5]? How\
    \ about 3 in [1, 1, 2, 3, 4, 5]? How about 3 in [1, 1, 1, 2, 3, 4, 5]? How about\
    \ 3 in [1, 1, 1, 2, 3, 4, 5]?\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1thvo4jq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1thvo4jq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3u3mfm9y.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp3u3mfm9y.jl:19\n\
    \   [2] top-level scope at /tmp/tmp3u3mfm9y.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3u3mfm9y.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp3u3mfm9y.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp3u3mfm9y.jl:19\n\
    \   [2] top-level scope at /tmp/tmp3u3mfm9y.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3u3mfm9y.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp3u3mfm9y.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp3u3mfm9y.jl:19\n\
    \   [2] top-level scope at /tmp/tmp3u3mfm9y.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3u3mfm9y.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp3u3mfm9y.jl:33\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  MethodError: no method matching sort(::Int64)\n \
    \ Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp3u3mfm9y.jl:19\n\
    \   [2] top-level scope at /tmp/tmp3u3mfm9y.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3u3mfm9y.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp3u3mfm9y.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp3u3mfm9y.jl:19\n\
    \   [2] top-level scope at /tmp/tmp3u3mfm9y.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3u3mfm9y.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp3u3mfm9y.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp3u3mfm9y.jl:19\n\
    \   [2] top-level scope at /tmp/tmp3u3mfm9y.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3u3mfm9y.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp3u3mfm9y.jl:37\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  MethodError: no method matching sort(::Int64)\n  Closest candidates\
    \ are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp3u3mfm9y.jl:19\n\
    \   [2] top-level scope at /tmp/tmp3u3mfm9y.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3u3mfm9y.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp3u3mfm9y.jl:38\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp3u3mfm9y.jl:19\n\
    \   [2] top-level scope at /tmp/tmp3u3mfm9y.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3u3mfm9y.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp3u3mfm9y.jl:39\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp3u3mfm9y.jl:19\n\
    \   [2] top-level scope at /tmp/tmp3u3mfm9y.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3u3mfm9y.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp3u3mfm9y.jl:40\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp3u3mfm9y.jl:19\n\
    \   [2] top-level scope at /tmp/tmp3u3mfm9y.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3u3mfm9y.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp3u3mfm9y.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  MethodError: no method matching sort(::Int64)\n \
    \ Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp3u3mfm9y.jl:19\n\
    \   [2] top-level scope at /tmp/tmp3u3mfm9y.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3u3mfm9y.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp3u3mfm9y.jl:42\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp3u3mfm9y.jl:19\n\
    \   [2] top-level scope at /tmp/tmp3u3mfm9y.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3u3mfm9y.jl:29\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1     12     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3u3mfm9y.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248\
    \ true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1,\
    \ 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n\
    </cell>\n<text>\nis_sorted() is a higher-order function. It takes a function as\
    \ its argument and returns a new function which takes an argument and returns\
    \ a boolean.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4ldgm5u7.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ldgm5u7.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of unique elements in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2ss0a6gf.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2ss0a6gf.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzk9syk22.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzk9syk22.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpupkndfrv.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpupkndfrv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpupkndfrv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    seen = Set()\n    for x in lst\n        if x in seen\n\
    \            sorted = false\n            break\n        seen.add(x)\n    end\n\
    \    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgazac6en.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgazac6en.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgazac6en.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    i = length(sorted)\n \
    \   while i > 1\n        if sorted[i-1] == last\n            return false\n  \
    \      i -= 1\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \uFFFD\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp41ier6rq.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp41ier6rq.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjaf3du_x.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjaf3du_x.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjaf3du_x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if sorted == false\n        \
    \    sorted = x < lst[end]\n        else\n            sorted = sorted && x < lst[end]\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\nis_sorted([1, 3, 2, 4, 5]) \u279E False\nis_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E\
    \ True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nis_sorted([1, 1, 2, 3, 4,\
    \ 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1, 1, 2, 3, 4, 5]) \u279E False\nis_sorted([1,\
    \ 1, 2, 3, 4, 5]) \u279E\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsft75mv2.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsft75mv2.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    lengths = length(uniques)\n\
    \    return lengths == length(lst)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfr0k0dwr.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfr0k0dwr.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    if length(lst) == 1 \n        return true\n    \n    last = lst[1]\n\
    \    for i in lst[2:end]\n        if i > last\n            return false\n    \
    \    last = i\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpi48j7qfw.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpi48j7qfw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpi48j7qfw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4mtebmro.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4mtebmro.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4mtebmro.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppt40cku8.jl:33\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppt40cku8.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppt40cku8.jl:23\ntest set: Test Failed at /tmp/tmppt40cku8.jl:34\n\
    \  Expression: candidate([1, 2, 3, 3, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppt40cku8.jl:34\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppt40cku8.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |   11     2     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppt40cku8.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpafe5cx8r.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpafe5cx8r.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp71ztrw14.jl:33\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp71ztrw14.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp71ztrw14.jl:23\ntest set: Test Failed at /tmp/tmp71ztrw14.jl:34\n\
    \  Expression: candidate([1, 2, 3, 3, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp71ztrw14.jl:34\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp71ztrw14.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |   11     2     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp71ztrw14.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa1ev1oek.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa1ev1oek.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    for x in lst\n       \
    \ if last < x\n            return false\n        last = x\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpvhrh3mz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvhrh3mz3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvhrh3mz3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5]) \u2248 true\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3,\
    \ 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n\
    @assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2,\
    \ 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of unique elements in a given list. Assume no duplicates.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd93irksu.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd93irksu.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of numbers and returns the number of unique\
    \ numbers in the vector. Assume no negative numbers and only integers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxv2exvic.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxv2exvic.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    unique = unique(sorted)\n    return length(unique)\
    \ == length(sorted)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprell5273.jl:26\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  UndefVarError: unique not defined\n \
    \ Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmprell5273.jl:18\n\
    \   [2] top-level scope at /tmp/tmprell5273.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmprell5273.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  UndefVarError: unique not defined\n  Stacktrace:\n \
    \  [1] is_sorted(::Array{Int64,1}) at /tmp/tmprell5273.jl:18\n   [2] top-level\
    \ scope at /tmp/tmprell5273.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmprell5273.jl:28\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmprell5273.jl:18\n   [2] top-level\
    \ scope at /tmp/tmprell5273.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmprell5273.jl:29\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmprell5273.jl:18\n   [2] top-level\
    \ scope at /tmp/tmprell5273.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmprell5273.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmprell5273.jl:18\n   [2] top-level\
    \ scope at /tmp/tmprell5273.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmprell5273.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmprell5273.jl:18\n   [2] top-level\
    \ scope at /tmp/tmprell5273.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmprell5273.jl:32\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n  UndefVarError: unique not defined\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmprell5273.jl:18\n   [2] top-level scope at /tmp/tmprell5273.jl:32\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmprell5273.jl:33\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  UndefVarError: unique not defined\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmprell5273.jl:18\n   [2] top-level scope at /tmp/tmprell5273.jl:33\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmprell5273.jl:34\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  UndefVarError: unique not defined\n  Stacktrace:\n   [1]\
    \ is_sorted(::Array{Int64,1}) at /tmp/tmprell5273.jl:18\n   [2] top-level scope\
    \ at /tmp/tmprell5273.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmprell5273.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmprell5273.jl:18\n   [2] top-level\
    \ scope at /tmp/tmprell5273.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmprell5273.jl:36\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmprell5273.jl:18\n   [2] top-level\
    \ scope at /tmp/tmprell5273.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmprell5273.jl:37\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  UndefVarError: unique not defined\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmprell5273.jl:18\n   [2] top-level\
    \ scope at /tmp/tmprell5273.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmprell5273.jl:38\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  UndefVarError: unique not defined\n  Stacktrace:\n   [1]\
    \ is_sorted(::Array{Int64,1}) at /tmp/tmprell5273.jl:18\n   [2] top-level scope\
    \ at /tmp/tmprell5273.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprell5273.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |    13     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 13 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprell5273.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpprg6y5rx.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpprg6y5rx.jl:19\n\
    \   [2] top-level scope at /tmp/tmpprg6y5rx.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpprg6y5rx.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpprg6y5rx.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpprg6y5rx.jl:19\n\
    \   [2] top-level scope at /tmp/tmpprg6y5rx.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpprg6y5rx.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpprg6y5rx.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpprg6y5rx.jl:19\n\
    \   [2] top-level scope at /tmp/tmpprg6y5rx.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpprg6y5rx.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpprg6y5rx.jl:33\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpprg6y5rx.jl:19\n\
    \   [2] top-level scope at /tmp/tmpprg6y5rx.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpprg6y5rx.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpprg6y5rx.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpprg6y5rx.jl:19\n\
    \   [2] top-level scope at /tmp/tmpprg6y5rx.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpprg6y5rx.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpprg6y5rx.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpprg6y5rx.jl:19\n\
    \   [2] top-level scope at /tmp/tmpprg6y5rx.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpprg6y5rx.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpprg6y5rx.jl:37\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpprg6y5rx.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpprg6y5rx.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpprg6y5rx.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpprg6y5rx.jl:38\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpprg6y5rx.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpprg6y5rx.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpprg6y5rx.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpprg6y5rx.jl:39\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpprg6y5rx.jl:19\n\
    \   [2] top-level scope at /tmp/tmpprg6y5rx.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpprg6y5rx.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpprg6y5rx.jl:40\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpprg6y5rx.jl:19\n\
    \   [2] top-level scope at /tmp/tmpprg6y5rx.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpprg6y5rx.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpprg6y5rx.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpprg6y5rx.jl:19\n\
    \   [2] top-level scope at /tmp/tmpprg6y5rx.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpprg6y5rx.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpprg6y5rx.jl:42\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  MethodError: objects of type Int64 are not callable\n \
    \ Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpprg6y5rx.jl:19\n\
    \   [2] top-level scope at /tmp/tmpprg6y5rx.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpprg6y5rx.jl:29\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1     12     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpprg6y5rx.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfo480w0t.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfo480w0t.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last-1 if last\
    \ > 1 else last\n    for x in lst\n        if x == last \n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3,\
    \ 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvlapnnlp.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvlapnnlp.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2,\
    \ 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2,\
    \ 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, \nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmped6mkii6.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmped6mkii6.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of unique elements in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi7ava0zu.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi7ava0zu.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i,x) in enumerate(lst)\n            if x != sorted[i]\n             \
    \   return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5]) \u2260 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2260 true\n\
    @assert is_sorted([1, 3, 2, 4, 5]) \u2260 false\n@assert is_sorted([1, 2, 3, 4,\
    \ 5, 6]) \u2260 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2260 true\n@assert\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2260 false\n@assert is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u2260 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2260 false\n@assert\
    \ is_sorted([1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 3,\
    \ 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3]) \u2260 false\n@assert\
    \ is_sorted([1, 1, 1, 2, 2, 3]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2,\
    \ 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n\
    @assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1,\
    \ 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1,\
    \ 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1,\
    \ 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1,\
    \ 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1,\
    \ 1, 1, 2, 2, 3, 4]) \u2260 false\n@assert is_sorted([1, 1, 1, 2, 2, 3, 4]) \u2260\
    \ false\n@assert is_sorted(\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe3yv3gp0.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe3yv3gp0.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb6p89auw.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb6p89auw.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n     \
    \   if lst[i] != last\n            return false\n        last = lst[i]\n    end\n\
    \    return true\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1t3oujtq.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1t3oujtq.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5])\
    \ \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\nExercise\n\
    Write a function that returns whether a number is even.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp93bwru1v.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp93bwru1v.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzm01bryk.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzm01bryk.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(lst) == true\n        return true\n    else\n        last\
    \ = lst[1]\n        for elt in lst[2:end]\n            if elt > last\n       \
    \         return false\n            else\n                last = elt\n       \
    \ end\n        return true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\n\
    is_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the number of unique elements in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5jwusvqi.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5jwusvqi.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4,\
    \ 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) \u2248 true\n@assert is_sorted([5, 2, 3, 4, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 2, 3, 4, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxzv55g0b.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxzv55g0b.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of unique elements in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjn79el6k.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjn79el6k.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 else last\n    return last == lst[end]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvqdw19is.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvqdw19is.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if sorted == false\n        \
    \    if x == lst[1]\n                sorted = true\n            else\n       \
    \         sorted = false\n        end\n    end\n    return sorted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy7ow3am6.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpy7ow3am6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpy7ow3am6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3,\
    \ 2, 4, 1])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the number of unique numbers in that vector. Assume no\
    \ negative numbers and only integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph_a0z22p.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph_a0z22p.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(lst) == true\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(lst) == length(sorted)\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2nue90ob.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2nue90ob.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i,j) in zip(sorted, lst)\n            if i != j\n                return\
    \ false\n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nis_sorted([1, 2, 3, 4, 5]) \u279E True\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr8r_uhsc.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr8r_uhsc.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_lst = sort(lst)\n    length(sorted_lst) == length(lst) && all(sorted_lst[i]\
    \ == lst[i] | i \u2208 1:length(sorted_lst))\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbwouegfy.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbwouegfy.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    if length(lst) == 0 \n        return true\n    end\n    \n    last\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x == last\n            return\
    \ false\n        else\n            last = x\n        end\n    end\n    \n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_mblkvp_.jl:41\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp_mblkvp_.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_mblkvp_.jl:38\ntest set: Test Failed at /tmp/tmp_mblkvp_.jl:44\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, 7]) == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp_mblkvp_.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_mblkvp_.jl:38\ntest set: Test Failed at /tmp/tmp_mblkvp_.jl:47\n\
    \  Expression: candidate([3, 2, 1]) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_mblkvp_.jl:47\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_mblkvp_.jl:38\ntest set: Test Failed at /tmp/tmp_mblkvp_.jl:50\n\
    \  Expression: candidate([1, 2, 2, 3, 3, 4]) == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_mblkvp_.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_mblkvp_.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    9     4     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_mblkvp_.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp25jf9c8z.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp25jf9c8z.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    sorted.length == 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7hncif35.jl:25\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmp7hncif35.jl:18\n   [3] top-level scope at /tmp/tmp7hncif35.jl:25\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7hncif35.jl:26\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  type Array has no field length\n  Stacktrace:\n   [1]\
    \ getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmp7hncif35.jl:18\n   [3] top-level scope at /tmp/tmp7hncif35.jl:26\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7hncif35.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  type Array has no field length\n  Stacktrace:\n   [1]\
    \ getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmp7hncif35.jl:18\n   [3] top-level scope at /tmp/tmp7hncif35.jl:27\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7hncif35.jl:28\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  type Array has no field length\n  Stacktrace:\n \
    \  [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmp7hncif35.jl:18\n   [3] top-level scope at /tmp/tmp7hncif35.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7hncif35.jl:29\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmp7hncif35.jl:18\n   [3] top-level scope at /tmp/tmp7hncif35.jl:29\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7hncif35.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmp7hncif35.jl:18\n   [3] top-level scope at /tmp/tmp7hncif35.jl:30\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7hncif35.jl:31\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n  type Array has no field length\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1}) at /tmp/tmp7hncif35.jl:18\n\
    \   [3] top-level scope at /tmp/tmp7hncif35.jl:31\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7hncif35.jl:32\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  type Array has no field length\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1}) at /tmp/tmp7hncif35.jl:18\n\
    \   [3] top-level scope at /tmp/tmp7hncif35.jl:32\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7hncif35.jl:33\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  type Array has no field length\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1}) at /tmp/tmp7hncif35.jl:18\n\
    \   [3] top-level scope at /tmp/tmp7hncif35.jl:33\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7hncif35.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmp7hncif35.jl:18\n   [3] top-level scope at /tmp/tmp7hncif35.jl:34\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7hncif35.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmp7hncif35.jl:18\n   [3] top-level scope at /tmp/tmp7hncif35.jl:35\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7hncif35.jl:36\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  type Array has no field length\n  Stacktrace:\n \
    \  [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1})\
    \ at /tmp/tmp7hncif35.jl:18\n   [3] top-level scope at /tmp/tmp7hncif35.jl:36\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp7hncif35.jl:37\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  type Array has no field length\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] is_sorted(::Array{Int64,1}) at /tmp/tmp7hncif35.jl:18\n\
    \   [3] top-level scope at /tmp/tmp7hncif35.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7hncif35.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |    13     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 13 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7hncif35.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(lst) == true \n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst) \n        return true\n    \n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbkr1y75o.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbkr1y75o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    return sorted == lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9iimfkvu.jl:34\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9iimfkvu.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9iimfkvu.jl:24\ntest set: Test Failed at /tmp/tmp9iimfkvu.jl:35\n\
    \  Expression: candidate([1, 2, 3, 3, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9iimfkvu.jl:35\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9iimfkvu.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |   11     2     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9iimfkvu.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < sorted\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp__ig3q8q.jl:32\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp__ig3q8q.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__ig3q8q.jl:29\ntest set: Test Failed at /tmp/tmp__ig3q8q.jl:35\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, 7]) == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp__ig3q8q.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__ig3q8q.jl:29\ntest set: Test Failed at /tmp/tmp__ig3q8q.jl:38\n\
    \  Expression: candidate([3, 2, 1]) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp__ig3q8q.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__ig3q8q.jl:29\ntest set: Test Failed at /tmp/tmp__ig3q8q.jl:39\n\
    \  Expression: candidate([1, 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp__ig3q8q.jl:39\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__ig3q8q.jl:29\ntest set: Test Failed at /tmp/tmp__ig3q8q.jl:40\n\
    \  Expression: candidate([1, 2, 3, 3, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp__ig3q8q.jl:40\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__ig3q8q.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     5     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp__ig3q8q.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    if length(lst) == 1 \n        return true\n    \n    last = lst[1]\n\
    \    for x in lst[2:end]\n        if x == last\n            return false\n   \
    \     last = x\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2,\
    \ 2, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqv_iljts.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqv_iljts.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    return all(sorted == lst)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu9ig3194.jl:34\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpu9ig3194.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu9ig3194.jl:24\ntest set: Test Failed at /tmp/tmpu9ig3194.jl:35\n\
    \  Expression: candidate([1, 2, 3, 3, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu9ig3194.jl:35\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu9ig3194.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |   11     2     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu9ig3194.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    return all(sorted == lst)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, 2, 3, 4, 1, 6, 7])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n@test is_sorted([5, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkuiw9ta2.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkuiw9ta2.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(lst) == true\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, \nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk6m4vakq.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk6m4vakq.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 \n    last = last.last if length(sorted) > 1 \n    return last == sorted[1]\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 5])\n</\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2ybnykzo.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2ybnykzo.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    lengths = length(uniques)\n\
    \    \n    if lengths == length(lst)\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nExercise: Write a function that checks if a list is sorted\n\
    in descending order. If list has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpha03edbu.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpha03edbu.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    for x in lst\n       \
    \ if last < x\n            return false\n        last = x\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7awctu_p.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7awctu_p.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2bd5bzam.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2bd5bzam.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr55e8rxj.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpr55e8rxj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr55e8rxj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert is_sorted([5, 3, 2, 4, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 3, 2, 4, 2]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 3])\
    \ \u2261 false\n@assert is_sorted([5, 3, 2, 4, 4]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 5]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 6]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 1]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 2]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 3]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 4]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 5]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 6]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 7, 1]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 7, 2]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 3]) \u2261\
    \ false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 4]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 5]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 6]) \u2261\
    \ false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 1]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 7, 2]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7,\
    \ 3]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 4]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 7, 7, 5]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 7, 7, 7, 6]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7,\
    \ 7, 1]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 7, 7, 7, 2]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 7, 7, 7, 3]\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7_4muv3n.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7_4muv3n.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 2]) == false\n@test is_sorted([5, 3, 2, 4, 3]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 4]) == false\n@test is_sorted([5, 3, 2, 4, 5]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 6]) == false\n@test is_sorted([5, 3, 2, 4, 7]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 8]) == false\n@test is_sorted([5, 3, 2, 4, 9]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 10]) == false\n@test is_sorted([5, 3, 2, 4, 11]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 12]) == false\n@test is_sorted([5, 3, 2, 4, 13]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 14]) == false\n@test is_sorted([5, 3, 2, 4, 15]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 16]) == false\n@test is_sorted([5, 3, 2, 4, 17]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 18]) == false\n@test is_sorted([5, 3, 2, 4, 19]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 20]) == false\n@test is_sorted([5, 3, 2, 4, 21]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 22]) == false\n@test is_sorted([5, 3, 2, 4, 23]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 24]) == false\n@test is_sorted([5, 3, 2, 4, 25]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 26]) == false\n@test is_sorted([5, 3, 2, 4, 27]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 28]) == false\n@test is_sorted([5, 3, 2, 4, 29]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 30]) == false\n@test is_sorted([5, 3, 2, 4, 31]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 32]) == false\n@test is_sorted([5, 3, 2, 4, 33]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 34]) == false\n@test is_sorted([5, 3, 2, 4, 35]) == true\n@test is_sorted([5,\
    \ 3, 2, 4, 36]) == false\n@test is_sorted([5, 3, 2, 4, 37]) == true\n@test \n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ta1k3i3.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ta1k3i3.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n     \
    \   if lst[i] > last\n            return false\n        last = lst[i]\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the numbers. Assume no negative numbers\
    \ and only integers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6qh65743.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6qh65743.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    for x in lst\n        if x != sort(x)[1]\n  \
    \          sorted = false\n            break\n        end\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0xres5zy.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0xres5zy.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last.last if length(sorted)\
    \ > 1 else last\n    last = last.last if length(sorted) > 1 else last\n    return\
    \ last == lst[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvmfp_faq.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvmfp_faq.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    unique = unique(sorted)\n    return length(unique)\
    \ == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) \u2261 true\n@assert is_sorted([5, 3, 2, 4, 2]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 3]) \u2261 false\n@assert is_sorted([5, 3, 2, 4,\
    \ 4]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 5]) \u2261 false\n@assert is_sorted([5,\
    \ 3, 2, 4, 6]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 8]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 9]) \u2261 false\n@assert is_sorted([5, 3, 2,\
    \ 4, 7, 10]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 11]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 12]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 13]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 14]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 15]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 16]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 17]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 18]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 19]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 20]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 21]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 22]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 23]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 24]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 25]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 26]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, 4, 7, 27]) \u2261 false\n@assert is_sorted([5, 3,\
    \ 2, 4, 7, 28]) \u2261 false\n@assert is_sorted([5, 3, 2, 4, 7, 29]) \u2261 false\n\
    @assert is_sorted([5, 3, 2, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpad0bmh0r.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpad0bmh0r.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.1>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.1>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqhbhl_in.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqhbhl_in.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplrvpgxnw.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplrvpgxnw.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the number of unique elements in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpieujhcyh.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpieujhcyh.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        for (i,val) in enumerate(sorted_list)\n            if val != lst[i]\n\
    \                return false\n            end\n        end\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8kkbsbsq.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8kkbsbsq.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i,j) in zip(sorted, lst)\n            if i != j\n                return\
    \ false\n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a vector. Assume that vector has at least 1 element.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmple5b7ojq.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmple5b7ojq.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3,\
    \ 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise: Write a function that returns True if a list\
    \ is sorted in descending order. Assume no negative numbers and only integers.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdnecr1du.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdnecr1du.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9qnb7pv3.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9qnb7pv3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9qnb7pv3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_lst = sort(lst)\n    \n    if length(sorted_lst) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcgwinxpz.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcgwinxpz.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for x in lst[2:end]\n        if\
    \ x == last\n            return false\n        last = x\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmy4_7bjq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmy4_7bjq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqh75hihs.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqh75hihs.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpic9yvuut.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpic9yvuut.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpic9yvuut.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.4>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.4>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 1, 2, 3, 4, 5])\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxx8o9sj8.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxx8o9sj8.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq560kq6a.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq560kq6a.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph0oar5k6.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmph0oar5k6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmph0oar5k6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    unique = unique(sorted)\n    length(unique) ==\
    \ length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 false\n\
    @assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4,\
    \ 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks whether a list contains all unique\
    \ numbers. Assume no negative numbers and only integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoxnl5y75.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoxnl5y75.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    return all(sorted == lst)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2261 true\n@assert is_sorted([5, 4, \nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe8pu9yh1.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe8pu9yh1.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5])\
    \ \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6]) \u2248 true\n\
    @assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248 true\n\
    @assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\nis_sorted()\
    \ is a generic function in Julia. Julia will automatically choose the most efficient\
    \ implementation for the data type you provide.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi54q4oa0.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi54q4oa0.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5,\
    \ 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1,\
    \ 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2,\
    \ 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3,\
    \ 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4,\
    \ 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n\
    @time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time\
    \ is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5,\
    \ 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1,\
    \ 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2,\
    \ 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3,\
    \ 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4,\
    \ 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n\
    @time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time\
    \ is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5,\
    \ 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1,\
    \ 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2,\
    \ 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3,\
    \ 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4,\
    \ 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n\
    @time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time\
    \ is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5, 1, 2, 3, 4, 5])\n@time is_sorted([5,\
    \ 1, 2, 3, 4, 5])\n@time is_\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp9vtgp4f.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp9vtgp4f.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted_list = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n\
    \        for (i,j) in zip(sorted_list, lst)\n            if i == j\n         \
    \       return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5, 1, 2, 3, 4]) \u2261 true\n@assert is_sorted([5, 1, 2, 3, 4, 5])\
    \ \u2261 false\n@assert is_sorted([5, 1, 2, 3, 4, 5, 6]) \u2261 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5, 6, 7]) \u2261 true\n@assert is_sorted([5, 1, 2,\
    \ 2, 3, 3, 4]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, 4]) \u2261 false\n\
    @assert is_sorted([5, 1, 2, 2, 2, 3, 3]) \u2261 false\n@assert is_sorted([5, 1,\
    \ 2, 2, 2, 3, 2]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, 1]) \u2261\
    \ false\n@assert is_sorted([5, 1, 2, 2, 2, 3, 0]) \u2261 false\n@assert is_sorted([5,\
    \ 1, 2, 2, 2, 3, -1]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -2])\
    \ \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -3]) \u2261 false\n@assert\
    \ is_sorted([5, 1, 2, 2, 2, 3, -4]) \u2261 false\n@assert is_sorted([5, 1, 2,\
    \ 2, 2, 3, -5]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -6]) \u2261\
    \ false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -7]) \u2261 false\n@assert is_sorted([5,\
    \ 1, 2, 2, 2, 3, -8]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -9])\
    \ \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -10]) \u2261 false\n@assert\
    \ is_sorted([5, 1, 2, 2, 2, 3, -11]) \u2261 false\n@assert is_sorted([5, 1, 2,\
    \ 2, 2, 3, -12]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -13]) \u2261\
    \ false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -14]) \u2261 false\n@assert is_sorted([5,\
    \ 1, 2, 2, 2, 3, -15]) \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -16])\
    \ \u2261 false\n@assert is_sorted([5, 1, 2, 2, 2, 3, -17]) \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpogb5yguw.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpogb5yguw.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqupczwdb.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqupczwdb.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = sort(lst)\n    if length(sorted) == length(lst)\n     \
    \   return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1, 3,\
    \ 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ numbers and returns a vector of numbers that are not in the original vector.\
    \ Assume no negative numbers and only integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpordfyg6w.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpordfyg6w.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of unique elements in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjdvl5o8_.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjdvl5o8_.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    for x in lst\n       \
    \ if last < x\n            return false\n        last = x\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2,\
    \ 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector of numbers and returns\
    \ a vector of booleans indicating whether each number is greater than the previous\
    \ number. For example, if the input vector is [5, 3, 7, 2, 9, 1, 4] then the output\
    \ vector would be [false, true, false, false, true, false, true].\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphce_9hst.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphce_9hst.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg05aj4mg.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpg05aj4mg.jl:19\n\
    \   [2] top-level scope at /tmp/tmpg05aj4mg.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg05aj4mg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpg05aj4mg.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpg05aj4mg.jl:19\n\
    \   [2] top-level scope at /tmp/tmpg05aj4mg.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg05aj4mg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpg05aj4mg.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpg05aj4mg.jl:19\n\
    \   [2] top-level scope at /tmp/tmpg05aj4mg.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg05aj4mg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpg05aj4mg.jl:33\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  MethodError: no method matching sort(::Int64)\n \
    \ Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpg05aj4mg.jl:19\n\
    \   [2] top-level scope at /tmp/tmpg05aj4mg.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg05aj4mg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpg05aj4mg.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpg05aj4mg.jl:19\n\
    \   [2] top-level scope at /tmp/tmpg05aj4mg.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg05aj4mg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpg05aj4mg.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpg05aj4mg.jl:19\n\
    \   [2] top-level scope at /tmp/tmpg05aj4mg.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg05aj4mg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpg05aj4mg.jl:37\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  MethodError: no method matching sort(::Int64)\n  Closest candidates\
    \ are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpg05aj4mg.jl:19\n\
    \   [2] top-level scope at /tmp/tmpg05aj4mg.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg05aj4mg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpg05aj4mg.jl:38\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpg05aj4mg.jl:19\n\
    \   [2] top-level scope at /tmp/tmpg05aj4mg.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg05aj4mg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpg05aj4mg.jl:39\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpg05aj4mg.jl:19\n\
    \   [2] top-level scope at /tmp/tmpg05aj4mg.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg05aj4mg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpg05aj4mg.jl:40\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpg05aj4mg.jl:19\n\
    \   [2] top-level scope at /tmp/tmpg05aj4mg.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg05aj4mg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpg05aj4mg.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  MethodError: no method matching sort(::Int64)\n \
    \ Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpg05aj4mg.jl:19\n\
    \   [2] top-level scope at /tmp/tmpg05aj4mg.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg05aj4mg.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpg05aj4mg.jl:42\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpg05aj4mg.jl:19\n\
    \   [2] top-level scope at /tmp/tmpg05aj4mg.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpg05aj4mg.jl:29\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1     12     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg05aj4mg.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    uniques = unique(sorted)\n    return length(uniques)\
    \ == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 5]) \u2248 true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 5]) \u2248 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ea60flf.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9ea60flf.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n@assert\
    \ is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3, 3, 4]) \u2248\
    \ true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is even.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0mze6gay.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0mze6gay.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    for x in lst\n        if x != lst[findfirst(x\
    \ == lst)]\n            sorted = false\n            break\n        end\n    end\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2,\
    \ 3, 4, 5]) \u279E true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E\
    \ true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns True if a number is evenly divisible by 3.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4o7uls2k.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4o7uls2k.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if sorted == false\n        \
    \    if x == lst[1]\n                sorted = true\n            else\n       \
    \         sorted = false\n        else\n            if x < lst[1]\n          \
    \      sorted = false\n            else\n                sorted = true\n     \
    \   end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpc08_7q4j.jl:20 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope at /tmp/tmpc08_7q4j.jl:24\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc08_7q4j.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n     \
    \   if lst[i] != last\n            return false\n        last = lst[i]\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2,\
    \ 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n\
    <text>\nExercise\nWrite a function that returns the number of unique elements\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnym3fofh.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnym3fofh.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4,\
    \ 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<text>\nis_sorted_decreasing\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk7nd9idq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk7nd9idq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != lst[findfirst(x == lst)]\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E true\nis_sorted([1,\
    \ 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6]) \u279E true\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E false\n\
    is_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ false\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of unique elements in an array. Assume no duplicate elements.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr7l5zt60.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr7l5zt60.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for x in lst[2:end]\n        if\
    \ x != last\n            return false\n        last = x\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp92b_xby_.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp92b_xby_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp92b_xby_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplrowc003.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplrowc003.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplrowc003.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjmetm4g6.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpjmetm4g6.jl:19\n\
    \   [2] top-level scope at /tmp/tmpjmetm4g6.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjmetm4g6.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmetm4g6.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpjmetm4g6.jl:19\n\
    \   [2] top-level scope at /tmp/tmpjmetm4g6.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjmetm4g6.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmetm4g6.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpjmetm4g6.jl:19\n\
    \   [2] top-level scope at /tmp/tmpjmetm4g6.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjmetm4g6.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmetm4g6.jl:33\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpjmetm4g6.jl:19\n\
    \   [2] top-level scope at /tmp/tmpjmetm4g6.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjmetm4g6.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmetm4g6.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpjmetm4g6.jl:19\n\
    \   [2] top-level scope at /tmp/tmpjmetm4g6.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjmetm4g6.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmetm4g6.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpjmetm4g6.jl:19\n\
    \   [2] top-level scope at /tmp/tmpjmetm4g6.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjmetm4g6.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmetm4g6.jl:37\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpjmetm4g6.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpjmetm4g6.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjmetm4g6.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmetm4g6.jl:38\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpjmetm4g6.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpjmetm4g6.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjmetm4g6.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmetm4g6.jl:39\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpjmetm4g6.jl:19\n\
    \   [2] top-level scope at /tmp/tmpjmetm4g6.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjmetm4g6.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmetm4g6.jl:40\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpjmetm4g6.jl:19\n\
    \   [2] top-level scope at /tmp/tmpjmetm4g6.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjmetm4g6.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmetm4g6.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpjmetm4g6.jl:19\n\
    \   [2] top-level scope at /tmp/tmpjmetm4g6.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjmetm4g6.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmetm4g6.jl:42\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  MethodError: objects of type Int64 are not callable\n \
    \ Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpjmetm4g6.jl:19\n\
    \   [2] top-level scope at /tmp/tmpjmetm4g6.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjmetm4g6.jl:29\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1     12     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjmetm4g6.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != lst[findfirst(x == lst)]\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp97zux9x.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpp97zux9x.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpp97zux9x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprm9y50u6.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprm9y50u6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprm9y50u6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(lst) == true\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5]) \u279E\
    \ true\nis_sorted([1, 3, 2, 4, 5]) \u279E false\nis_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E true\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E true\nis_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E false\nis_sorted([1, 2, 2, 3, 3, 4]) \u279E true\nis_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E false\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a value appears in a list. For example, how\
    \ many times does the value 5 appear in the list [1, 2, 3, 4, 5]?\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3t7f2tpm.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3t7f2tpm.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    for x in sorted\n    \
    \    if x != last\n            return false\n        end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpti1lsf6j.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpti1lsf6j.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpti1lsf6j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2,\
    \ 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd9vhuhhg.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd9vhuhhg.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    last = sorted[end]\n    last = last == last ?\
    \ last : last + 1\n    for x in lst\n        if x == last \n            return\
    \ false\n        last = x\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3,\
    \ 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3,\
    \ 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3,\
    \ 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1,\
    \ 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1, 6, 7])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpubq9gylb.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpubq9gylb.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) \u2248 true\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248\
    \ false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2,\
    \ 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) \u2248 false\n@assert is_sorted([5, 4, 3, 2, 1]) \u2248 false\n\
    @assert is_sorted([5, 4, 3, 2, 1]\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq2amc7xq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq2amc7xq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   true\n    else\n        false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnyrgjaqa.jl:32\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnyrgjaqa.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnyrgjaqa.jl:29\ntest set: Test Failed at /tmp/tmpnyrgjaqa.jl:35\n\
    \  Expression: candidate([1, 3, 2, 4, 5, 6, 7]) == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpnyrgjaqa.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnyrgjaqa.jl:29\ntest set: Test Failed at /tmp/tmpnyrgjaqa.jl:38\n\
    \  Expression: candidate([3, 2, 1]) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnyrgjaqa.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnyrgjaqa.jl:29\ntest set: Test Failed at /tmp/tmpnyrgjaqa.jl:39\n\
    \  Expression: candidate([1, 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnyrgjaqa.jl:39\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnyrgjaqa.jl:29\ntest set: Test Failed at /tmp/tmpnyrgjaqa.jl:40\n\
    \  Expression: candidate([1, 2, 3, 3, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnyrgjaqa.jl:40\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnyrgjaqa.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     5     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnyrgjaqa.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_wgs0pri.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_wgs0pri.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    \n    sorted = true\n    for x in lst\n        if x < lst[end(x)]\n  \
    \          sorted = false\n            break\n        end\n    end\n    return\
    \ sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy5gd3jnz.jl:32\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: objects of type Int64 are\
    \ not callable\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpy5gd3jnz.jl:20\n\
    \   [2] top-level scope at /tmp/tmpy5gd3jnz.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5gd3jnz.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5gd3jnz.jl:33\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpy5gd3jnz.jl:20\n\
    \   [2] top-level scope at /tmp/tmpy5gd3jnz.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5gd3jnz.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5gd3jnz.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpy5gd3jnz.jl:20\n\
    \   [2] top-level scope at /tmp/tmpy5gd3jnz.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5gd3jnz.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5gd3jnz.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpy5gd3jnz.jl:20\n\
    \   [2] top-level scope at /tmp/tmpy5gd3jnz.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5gd3jnz.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5gd3jnz.jl:36\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpy5gd3jnz.jl:20\n\
    \   [2] top-level scope at /tmp/tmpy5gd3jnz.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5gd3jnz.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5gd3jnz.jl:37\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpy5gd3jnz.jl:20\n\
    \   [2] top-level scope at /tmp/tmpy5gd3jnz.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5gd3jnz.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5gd3jnz.jl:39\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpy5gd3jnz.jl:20\n   [2] top-level\
    \ scope at /tmp/tmpy5gd3jnz.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5gd3jnz.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5gd3jnz.jl:40\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  MethodError: objects of type Int64 are not callable\n  Stacktrace:\n\
    \   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpy5gd3jnz.jl:20\n   [2] top-level\
    \ scope at /tmp/tmpy5gd3jnz.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5gd3jnz.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5gd3jnz.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpy5gd3jnz.jl:20\n\
    \   [2] top-level scope at /tmp/tmpy5gd3jnz.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5gd3jnz.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5gd3jnz.jl:42\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpy5gd3jnz.jl:20\n\
    \   [2] top-level scope at /tmp/tmpy5gd3jnz.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5gd3jnz.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5gd3jnz.jl:43\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  MethodError: objects of type Int64 are not callable\n\
    \  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpy5gd3jnz.jl:20\n\
    \   [2] top-level scope at /tmp/tmpy5gd3jnz.jl:43\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5gd3jnz.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpy5gd3jnz.jl:44\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  MethodError: objects of type Int64 are not callable\n \
    \ Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmpy5gd3jnz.jl:20\n\
    \   [2] top-level scope at /tmp/tmpy5gd3jnz.jl:44\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy5gd3jnz.jl:31\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1     12     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy5gd3jnz.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sort(lst) == lst\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphr3usct5.jl:33\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphr3usct5.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphr3usct5.jl:23\ntest set: Test Failed at /tmp/tmphr3usct5.jl:34\n\
    \  Expression: candidate([1, 2, 3, 3, 3, 4]) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphr3usct5.jl:34\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphr3usct5.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |   11     2     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphr3usct5.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i, j) in zip(sorted, lst)\n            if i != j\n                return\
    \ false\n            end\n        end\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwagknmr7.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwagknmr7.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n            break\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp__73s9q0.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp__73s9q0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp__73s9q0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    if is_sorted(unique(lst))\n        return true\n    else\n        return\
    \ false\n    end\nend\n\"\"\"\n    Given a list of numbers, return whether or\
    \ not they are sorted\n    in descending order. If list has more than 1 duplicate\
    \ of the same\n    number, return False. Assume no negative numbers and only integers.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo6aleuv0.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo6aleuv0.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for i in 2:length(lst)\n     \
    \   if lst[i] != last\n            return false\n        last = lst[i]\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2,\
    \ 3, 1, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2,\
    \ 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 3, 2, 4, 1, 2, 2, 3, 1, 2, 2,\
    \ 3, 1, 2, 2, 3, 1, 2, 2, 3, 1, 2])\n</cell>\n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcqvjda4f.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcqvjda4f.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    for x in lst\n        if x != sort(x)\n           \
    \ sorted = false\n        end\n    end\n    return sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp87mkwngz.jl:30\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp87mkwngz.jl:19\n\
    \   [2] top-level scope at /tmp/tmp87mkwngz.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp87mkwngz.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp87mkwngz.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp87mkwngz.jl:19\n\
    \   [2] top-level scope at /tmp/tmp87mkwngz.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp87mkwngz.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp87mkwngz.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp87mkwngz.jl:19\n\
    \   [2] top-level scope at /tmp/tmp87mkwngz.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp87mkwngz.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp87mkwngz.jl:33\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6]) == true\n  MethodError: no method matching sort(::Int64)\n \
    \ Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp87mkwngz.jl:19\n\
    \   [2] top-level scope at /tmp/tmp87mkwngz.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp87mkwngz.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp87mkwngz.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp87mkwngz.jl:19\n\
    \   [2] top-level scope at /tmp/tmp87mkwngz.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp87mkwngz.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp87mkwngz.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp87mkwngz.jl:19\n\
    \   [2] top-level scope at /tmp/tmp87mkwngz.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp87mkwngz.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp87mkwngz.jl:37\n  Test threw exception\n  Expression: candidate([1])\
    \ == true\n  MethodError: no method matching sort(::Int64)\n  Closest candidates\
    \ are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp87mkwngz.jl:19\n\
    \   [2] top-level scope at /tmp/tmp87mkwngz.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp87mkwngz.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp87mkwngz.jl:38\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == false\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp87mkwngz.jl:19\n\
    \   [2] top-level scope at /tmp/tmp87mkwngz.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp87mkwngz.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp87mkwngz.jl:39\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp87mkwngz.jl:19\n\
    \   [2] top-level scope at /tmp/tmp87mkwngz.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp87mkwngz.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp87mkwngz.jl:40\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 3, 3, 4]) == false\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp87mkwngz.jl:19\n\
    \   [2] top-level scope at /tmp/tmp87mkwngz.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp87mkwngz.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp87mkwngz.jl:41\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 2, 3, 3, 4]) == true\n  MethodError: no method matching sort(::Int64)\n \
    \ Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n\
    \    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp87mkwngz.jl:19\n\
    \   [2] top-level scope at /tmp/tmp87mkwngz.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp87mkwngz.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmp87mkwngz.jl:42\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(::Array{Int64,1}) at /tmp/tmp87mkwngz.jl:19\n\
    \   [2] top-level scope at /tmp/tmp87mkwngz.jl:42\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp87mkwngz.jl:29\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1     12     13\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp87mkwngz.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    lst = sort(lst)\n    last = lst[1]\n    for x in lst[2:end]\n        if\
    \ last < x\n            return false\n        last = x\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpqko0yu3f.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqko0yu3f.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqko0yu3f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n     \
    \   for (i,x) in enumerate(lst)\n            if x != sorted[i]\n             \
    \   return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5]) \u2248 true\n\
    @assert is_sorted([1, 3, 2, 4, 5]) \u2248 false\n@assert is_sorted([1, 2, 3, 4,\
    \ 5, 6]) \u2248 true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) \u2248 true\n@assert\
    \ is_sorted([1, 3, 2, 4, 5, 6, 7]) \u2248 false\n@assert is_sorted([1, 2, 2, 3,\
    \ 3, 4]) \u2248 true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) \u2248 false\n</cell>\n\
    <text>\nPart II: Arrays\nArrays are a useful data structure for storing collections\
    \ of numbers. Arrays are mutable and are indexed by integers. Arrays are also\
    \ multidimensional. Arrays are often used to represent matrices and tensors. Arrays\
    \ are also useful for storing collections of strings. Arrays are also useful for\
    \ storing collections of booleans.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphshgoege.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphshgoege.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
    \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
    \    is_sorted([5]) \u279E True\n    is_sorted([1, 2, 3, 4, 5]) \u279E True\n\
    \    is_sorted([1, 3, 2, 4, 5]) \u279E False\n    is_sorted([1, 2, 3, 4, 5, 6])\
    \ \u279E True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7]) \u279E False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    \    is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
    \ \n    sorted = true\n    sorted = sorted && (lst == sort(lst))\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n\
    <text>\nExercise\nWrite a function is_sorted_by() which takes a function and a\
    \ list of numbers and returns whether or not the list of numbers is sorted using\
    \ the given function.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjor5yv_o.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjor5yv_o.jl:21\n"
  exit_code: 1
  status: Exception
