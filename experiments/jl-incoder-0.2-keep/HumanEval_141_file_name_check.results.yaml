name: HumanEval_141_file_name_check
language: julia
results:
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzyinyryy.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzyinyryy.jl:1\n\
    in expression starting at /tmp/tmpzyinyryy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[1] != \"\"\n        return \"No\"\n    \n    if file_name.split(\".\")[1]\
    \ == \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"No\"\n\
    \    \n    if file_name.split(\".\")[1] == \"txt\" || file_name.split(\".\")[1]\
    \ == \"doc\" || file_name.split(\".\")[1] == \"docx\" || file_name.split(\".\"\
    )[1] == \"pdf\" || file_name.split(\".\")[1] == \"ppt\" || file_name.split(\"\
    .\")[1] == \"pptx\" || file_name.split(\".\")[1] == \"rtf\" || file_name.split(\"\
    .\")[1] == \"xls\" || file_name.split(\".\")[1] == \"xlsx\" || file_name.split(\"\
    .\")[1] == \"odt\" || file_name.split(\".\")[1] == \"ods\" || file_name.split(\"\
    .\")[1] == \"odp\" || file_name.split(\".\")[1] == \"odg\" || file_name.split(\"\
    .\")[1] == \"odf\" || file_name.split(\".\")[1] == \"odc\" || file_name.split(\"\
    .\")[1] == \"odb\"\n        return \"Yes\"\n    \n    if file_name.split(\".\"\
    )[1] == \"zip\" || file_name.split(\".\")[1] == \"rar\" || file_name.split(\"\
    .\")[1] == \"7z\" || file_name.split(\".\")[1] == \"tar\" || file_name.split(\"\
    .\")[1] == \"gz\" || file_name.split(\".\")[1] == \"bz2\" || file_name.split(\"\
    .\")[1] == \"7z\" || file_name.split(\".\")[1] == \"rar\" || file_name.split(\"\
    .\")[1] == \"tar\" || file_name.split(\".\")[1] == \"gz\" || file_name.split(\"\
    .\")[1] == \"bz2\" || file_name.split(\".\")[1] == \"7z\" || file_name.split(\"\
    .\")[1] == \"rar\" || file_name.split(\".\")[1] == \"tar\" || file_name.split(\"\
    .\")[1] == \"gz\" || file_name.split(\".\")[1] == \"bz2\" || file_name.split(\"\
    .\")[1] == \"7z\" || file_name.split(\".\")[1] == \"rar\" || file_name.split(\"\
    .\")[1] == \"tar\" || file_name.split(\".\")[1] == \"gz\" || file_name.split(\"\
    .\")[1] == \"bz2\" || file_name.split(\".\")[1] == \"7z\" || file_name.split(\"\
    .\")[1] == \"rar\" || file_name.split(\".\")[1] == \"tar\" || file_name.split(\"\
    .\")[1] == \"gz\" || file_name.split(\".\")[1] == \"bz2\" || file_name.split(\"\
    .\")[1] == \"7z\" || file_name.split(\".\")[1] == \"rar\" || file_name.split(\"\
    .\")[1] == \"tar\" || file_name.split(\".\")[1] == \"gz\" || file_name.split(\"\
    .\")[1] == \"bz2\" || file_name.split(\".\")[1] == \"7z\" || file_name.split(\"\
    .\")[1] == \"rar\" || file_name.split(\".\")[1] == \"tar\" || file_name.split(\"\
    .\")[1] == \"gz\" || file_name.split(\".\")[1] == \"bz2\" || file_name.split(\"\
    .\")[1] == \"7z\" || file_name.split(\".\")[1] == \"rar\" || file_name.split(\"\
    .\")[1] == \"tar\" || file_name.split(\".\")[1] == \"gz\" || file_name.split(\"\
    .\")[1] == \"bz2\" || file_name.split(\".\")[1] == \"7z\" || file_name.split(\"\
    .\")[1] == \"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ch1pdjt.jl:34\nin expression starting at\
    \ /tmp/tmp_ch1pdjt.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9mcrf271.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9mcrf271.jl:1\n\
    in expression starting at /tmp/tmp9mcrf271.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n# Run this cell to check your\
    \ answer\nfile_name_check(\"example.txt\")\n</cell>\n<text>\nPart 2: Exploring\
    \ file names\nNow that you have learned how to check whether a file name is valid,\
    \ you will explore the file names that you might encounter.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3jeewkk.jl:19\nin expression starting at\
    \ /tmp/tmpd3jeewkk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphax8d9oz.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphax8d9oz.jl:1\n\
    in expression starting at /tmp/tmphax8d9oz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) != 2 or file_name_split[1]\
    \ != \"\" \n        or file_name_split[1][1] != lower('a') or file_name_split[1][1]\
    \ != lower('A')\n        or file_name_split[1][2] != lower('z') or file_name_split[1][2]\
    \ != lower('Z')\n        or file_name_split[1][3] != lower('0') or file_name_split[1][3]\
    \ != lower('9')\n    \n    else \n        return \"No\"\nend\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name_split\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbxyemdrt.jl:18\nin expression starting at\
    \ /tmp/tmpbxyemdrt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8t86sswf.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8t86sswf.jl:1\n\
    in expression starting at /tmp/tmp8t86sswf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxs0qnsh0.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxs0qnsh0.jl:1\n\
    in expression starting at /tmp/tmpxs0qnsh0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) != 2 or file_name_split[1]\
    \ != \"\" or file_name_split[1][1] != \"\" \n        or file_name_split[1][1]\
    \ != file_name_split[1][2] or file_name_split[1][1] != file_name_split[1][2] \n\
    \        or file_name_split[1][1] != file_name_split[1][2] or file_name_split[1][1]\
    \ != file_name_split[1][2] \n        or file_name_split[1][1] != file_name_split[1][2]\
    \ or file_name_split[1][1] != file_name_split[1][2] \n        or file_name_split[1][1]\
    \ != file_name_split[1][2] or file_name_split[1][1] != file_name_split[1][2] \n\
    \        or file_name_split[1][1] != file_name_split[1][2] or file_name_split[1][1]\
    \ != file_name_split[1][2] \n        or file_name_split[1][1] != file_name_split[1][2]\
    \ or file_name_split[1][1] != file_name_split[1][2] \n        or file_name_split[1][1]\
    \ != file_name_split[1][2] or file_name_split[1][1] != file_name_split[1][2] \n\
    \        or file_name_split[1][1] != file_name_split[1][2] or file_name_split[1][1]\
    \ != file_name_split[1][2] \n        or file_name_split[1][1] != file_name_split[1][2]\
    \ or file_name_split[1][1] != file_name_split[1][2] \n        or file_name_split[1][1]\
    \ != file_name_split[1][2] or file_name_split[1][1] != file_name_split[1][2] \n\
    \        or file_name_split[1][1] != file_name_split[1][2] or file_name_split[1][1]\
    \ != file_name_split[1][2] \n        or file_name_split[1][1] != file_name_split[1][2]\
    \ or file_name_split[1][1] != file_name_split[1][2] \n        or file_name_split[1][1]\
    \ != file_name_split[1][2] or file_name_split[1][1] != file_name_split[1][2] \n\
    \        or file_name_split[1][1] != file_name_split[1][2] or file_name_split[1][1]\
    \ != file_name_split[1][2] \n        or file_name_split[1][1] != file_name_split[1][2]\
    \ or file_name_split[1][1] != file_name_split[1][2] \n        or file_name_split[1][1]\
    \ != file_name_split[1][2] or file_name_split[1][1] != file_name_split[1][2] \n\
    \        or file_name_split[1][1] != file_name_split[1][2] or file_name_split[1][1]\
    \ != file_name_split[1][2] \n        or file_name_split[1][1] != file_name_split[1][2]\
    \ or file_name_split[1][1] != file_name_split[1][2] \n        or file_name_split[1][1]\
    \ != file_name_split[1][2] or file_name_split[1][1] != file_name_split[1][2] \n\
    \        or file_name\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name_split\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbmzskj_.jl:18\nin expression starting at\
    \ /tmp/tmplbmzskj_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4j05_hq5.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4j05_hq5.jl:1\n\
    in expression starting at /tmp/tmp4j05_hq5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # your code here\n\
    \    \nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ representing a file's name, and returns the file's extension.\nA file's extension\
    \ is considered to be valid if and only if all the following conditions are met:\n\
    - There should not be more than three digits ('0'-'9') in the file's extension.\n\
    - The file's extension contains exactly one dot '.'\n- The substring before the\
    \ dot should not be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'txt'\n\
    file_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"1example\") #\
    \ => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    1example.exe\") # => 'exe'\nfile_name_check(\"1example.txt\") # => 'No' (the name\
    \ should start with a latin alphapet letter)\nfile_name_check(\"1example.txt.exe\"\
    ) # => 'exe'\nfile_name_check(\"1example.txt.exe.txt\") # => 'exe'\nfile_name_check(\"\
    1example.txt.exe.txt.exe\") # => 'exe'\nfile_name_check(\"1example.txt.exe.txt.exe.exe\"\
    ) # => 'exe'\nfile_name_check(\"1example.txt.exe.txt.exe.exe.exe\") # => 'exe'\n\
    file_name_check(\"1example.txt.exe.txt.exe.exe.exe.exe\") # => 'exe'\nfile_name_check(\"\
    1example.txt.exe.txt.exe.exe.exe.exe.exe\") # => 'exe'\nfile_name_check(\"1example.txt.exe.txt.exe.exe.exe.exe.exe.exe\"\
    ) # => 'exe'\nfile_name_check(\"1example.txt.exe.txt.exe.exe.exe.exe.exe.exe.exe\"\
    ) # => 'exe'\nfile_name_check(\"1example.txt.exe.txt.exe.exe.exe.exe.exe.exe.exe.exe\"\
    ) # => 'exe'\nfile_name_check(\"1example.txt.exe.txt.exe.exe.exe.exe.exe.exe.exe.exe.exe.exe\"\
    ) # => 'exe'\nfile_name_check(\"1example.txt.exe.txt.exe.exe.exe.exe.exe.exe.exe.exe.exe.exe.exe.exe\"\
    ) # => 'exe'\nfile_name_check(\"1example.txt.exe.txt.exe.exe.exe.exe.exe.exe.exe.exe.exe.exe.exe.exe\"\
    ) # => 'exe'\nfile_name_check(\"1example.txt\nusing Test\n\n@testset begin\n\n\
    candidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\
    \t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6vnkfpfk.jl:19\nin expression starting at\
    \ /tmp/tmp6vnkfpfk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # your code here\n\
    \    \nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ representing a file's name, and returns\n    'Yes' if the the file's name is\
    \ valid, and returns 'No' otherwise.\n    A file's name is considered to be valid\
    \ if and only if all the following conditions \n    are met:\n    - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    - The file's\
    \ name contains exactly one dot '.'\n    - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n\
    \    file_name_check(\"1example.dll\") # => 'No' (the name should start with a\
    \ latin alphapet letter)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplymrs7qq.jl:19\nin expression starting at\
    \ /tmp/tmplymrs7qq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    elseif file_name.split(\"\
    .\")[1] != \"\" || file_name.split(\".\")[1] != \".\" || \n        file_name.split(\"\
    .\")[1][0] != 'a' || file_name.split(\".\")[1][0] != 'A' || \n        file_name.split(\"\
    .\")[1][1] != 'z' || file_name.split(\".\")[1][1] != 'Z'\n        return \"No\"\
    \n    else\n        return \"Yes\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function\nfile_name_check(\"example.txt\")\n</cell>\n<text>\nWrite\
    \ a function that takes a string representing a file's name, and returns the file's\
    \ extension.\nA file's extension is considered to be valid if and only if all\
    \ the following conditions are met:\n- There should not be more than three digits\
    \ ('0'-'9') in the file's extension.\n- The file's extension contains exactly\
    \ one dot '.'\n- The substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\nExamples:\nfile_name_ext(example.txt) # => 'txt'\nfile_name_ext(\"1example.dll\"\
    ) # => 'dll'\nfile_name_ext(\"example.exe\") # => 'exe'\nfile_name_ext(\"1example\"\
    ) # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"1\") # => 'No'\n\
    file_name_ext(\"1example.txt\") # => 'No'\nfile_name_ext(\"example.txt\") # =>\
    \ 'txt'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example.txt\")\
    \ # => 'txt'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\"\
    ) # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29qxpam5.jl:27\nin expression starting at\
    \ /tmp/tmp29qxpam5.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5aun8wz6.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5aun8wz6.jl:1\n\
    in expression starting at /tmp/tmp5aun8wz6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1y_r8gof.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1y_r8gof.jl:1\n\
    in expression starting at /tmp/tmp1y_r8gof.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_check_res\
    \ = file_name.match(\"^[0-9]{3}[a-zA-Z]{1}\\.[a-zA-Z]{2,3}$\")\n    if file_name_check_res\
    \ == nil\n        return \"No\"\n    else\n        return \"Yes\"\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\") # => 'Yes'\n\
    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string representing a file's name, and returns the file's extension.\nA file's\
    \ extension is considered to be valid if and only if all the following conditions\
    \ are met:\n- There should not be more than three digits ('0'-'9') in the file's\
    \ extension.\n- The file's extension contains exactly one dot '.'\n- The substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\"\
    ) # => 'txt'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    example\") # => 'No'\nfile_name_check(\"1example\") # => 'No'\nfile_name_check(\"\
    example.exe\") # => 'exe'\nfile_name_check(\"1example.exe\") # => 'exe'\nfile_name_check(\"\
    example.dll\") # => 'dll'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    example.txt\") # => 'No'\nfile_name_check(\"1example.txt\") # => 'No'\nfile_name_check(\"\
    example\") # => 'No'\nfile_name_check(\"1example\") # => 'No'\nfile_name_check(\"\
    example.exe\") # => 'exe'\nfile_name_check(\"1example.exe\") # => 'exe'\nfile_name_check(\"\
    example.dll\") # => 'dll'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    example.txt\") # => 'No'\nfile_name_check(\"1example.txt\") # => 'No'\nfile_name_check(\"\
    example\") # => 'No'\nfile_name_check(\"1example\") # => 'No'\nfile_name_check(\"\
    example.exe\") # => 'exe'\nfile_name_check(\"1example.exe\") # => 'exe'\nfile_name_check(\"\
    example.dll\") # => 'dll'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbhu3broy.jl:16\nin expression starting at\
    \ /tmp/tmpbhu3broy.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<text>\nSolution\nRun the cell below to test your solution.\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nzwof4a.jl:19\nin expression starting at\
    \ /tmp/tmp9nzwof4a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    elseif file_name.split(\"\
    .\")[1] != \"\" || file_name.split(\".\")[1] != \".\" || \n        file_name.split(\"\
    .\")[1][0] < \"a\" || file_name.split(\".\")[1][0] > \"z\" || \n        file_name.split(\"\
    .\")[1][1] < \"a\" || file_name.split(\".\")[1][1] > \"z\"\n        return \"\
    No\"\n    elseif file_name.split(\".\")[1] == \"txt\" || file_name.split(\".\"\
    )[1] == \"exe\" || \n        file_name.split(\".\")[1] == \"dll\"\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string representing a file's name, and\
    \ returns the file's extension.\nExamples:\nfile_name_ext(\"example.txt\") # =>\
    \ 'txt'\nfile_name_ext(\"1example.dll\") # => 'dll'\nfile_name_ext(\"1example\"\
    ) # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example.txt\"\
    ) # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0sea86hy.jl:29\nin expression starting at\
    \ /tmp/tmp0sea86hy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    elseif file_name.split(\"\
    .\")[1] == \"exe\" || file_name.split(\".\")[1] == \"dll\" || file_name.split(\"\
    .\")[1] == \"bat\"\n        return \"Yes\"\n    elseif file_name.split(\".\")[1]\
    \ == \"txt\" || file_name.split(\".\")[1] == \"doc\" || file_name.split(\".\"\
    )[1] == \"docx\" || file_name.split(\".\")[1] == \"rtf\" || file_name.split(\"\
    .\")[1] == \"xls\" || file_name.split(\".\")[1] == \"xlsx\" || file_name.split(\"\
    .\")[1] == \"ppt\" || file_name.split(\".\")[1] == \"pptx\" || file_name.split(\"\
    .\")[1] == \"odt\" || file_name.split(\".\")[1] == \"odp\" || file_name.split(\"\
    .\")[1] == \"ods\" || file_name.split(\".\")[1] == \"odp\" || file_name.split(\"\
    .\")[1] == \"ods\" || file_name.split(\".\")[1] == \"odc\" || file_name.split(\"\
    .\")[1] == \"odf\" || file_name.split(\".\")[1] == \"odg\" || file_name.split(\"\
    .\")[1] == \"odh\" || file_name.split(\".\")[1] == \"ods\" || file_name.split(\"\
    .\")[1] == \"odt\" || file_name.split(\".\")[1] == \"odm\" || file_name.split(\"\
    .\")[1] == \"odp\" || file_name.split(\".\")[1] == \"ods\" || file_name.split(\"\
    .\")[1] == \"odt\" || file_name.split(\".\")[1] == \"odm\" || file_name.split(\"\
    .\")[1] == \"odp\" || file_name.split(\".\")[1] == \"ods\" || file_name.split(\"\
    .\")[1] == \"odt\" || file_name.split(\".\")[1] == \"odm\" || file_name.split(\"\
    .\")[1] == \"odp\" || file_name.split(\".\")[1] == \"ods\" || file_name.split(\"\
    .\")[1] == \"odt\" || file_name.split(\".\")[1] == \"odm\" || file_name.split(\"\
    .\")[1] == \"odp\" || file_name.split(\".\")[1] == \"ods\" || file_name.split(\"\
    .\")[1] == \"odt\" || file_name.split(\".\")[1] == \"odm\" || file_name.split(\"\
    .\")[1] == \"odp\" || file_name.split(\".\")[1] == \"ods\" || file_name.split(\"\
    .\")[1] == \"odt\" || file_name.split(\".\")[1] == \"odm\" || file_name.split(\"\
    .\")[1] == \"odp\" || file_name.split(\".\")[1] == \"ods\" || file_name.split(\"\
    .\")[1] == \"odt\" || file_name.split(\".\")[1] == \"odm\" || file_name.split(\"\
    .\")[1] == \"odp\" || file_name.split(\".\")[1] == \"ods\" || file_name.split(\"\
    .\")[1] == \"odt\" || file_name.split(\".\")[1] == \"odm\" || file_name.split(\"\
    .\")[1] == \"odp\" || file_name.split(\".\")[1] == \"ods\" || file_name.split(\"\
    .\")[1] == \"odt\" || file_name.split(\".\")[1] == \"odm\" || file_name.split(\"\
    .\")[1] == \"odp\" || file_name.split(\".\")[1] == \"ods\" || file_name.split(\"\
    .\")[1] == \"odt\" || file_name.split(\".\")[1] == \"odm\" || file_name.split(\"\
    .\")[1] == \"odp\" || file_name.split(\".\")[1] == \"ods\" || file_name.split(\"\
    .\")\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1xoiltz.jl:1\nin expression starting at /tmp/tmpb1xoiltz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.count(\"\
    .\")>2 or file_name.count(\".\")<1 or file_name.count(\".\")==0 or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or file_name.substring(0,1)==\"\
    .\"\n        or file_name.substring(0,1)==\".\"\n        or \nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiva6azw4.jl:17\nin expression starting at /tmp/tmpiva6azw4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwyws02ti.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwyws02ti.jl:1\n\
    in expression starting at /tmp/tmpwyws02ti.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10 || file_name.contains(\".\") || file_name.substring(0,1)\
    \ != \"a\" || file_name.substring(0,1) != \"A\" || file_name.substring(0,1) !=\
    \ \"z\" || file_name.substring(0,1) != \"Z\" || file_name.substring(file_name.indexOf(\"\
    .\") + 1) != \"txt\" || file_name.substring(file_name.indexOf(\".\") + 1) != \"\
    exe\" || file_name.substring(file_name.indexOf(\".\") + 1) != \"dll\"\n    \n\
    \        return \"No\"\n    \n    else\n        return \"Yes\"\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"Create a function which takes a string\
    \ representing a file's name, and returns\n    'Yes' if the the file's name is\
    \ valid, and returns 'No' otherwise.\n    A file's name is considered to be valid\
    \ if and only if all the following conditions \n    are met:\n    - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    - The file's\
    \ name contains exactly one dot '.'\n    - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n\
    \    file_name_check(\"1example.dll\") # => 'No' (the name should start with a\
    \ latin alphapet letter)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp261a1rqv.jl:24\nin expression starting at\
    \ /tmp/tmp261a1rqv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) > 2 || length(file_name_split)\
    \ < 1 || file_name_split[1] != \"\" || \n        file_name_split[1][1] != letter('A'..'Z')\
    \ || file_name_split[1][2] != letter('a'..'z')\n    \n        return \"No\"\n\
    \    \n    return \"Yes\"\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a string representing a file's name, and returns the file's extension.\n\
    \    A file's extension is considered to be the substring after the last dot ('.')\
    \ in the file's name.\n    Examples:\n    file_name_ext(\"example.txt\") # =>\
    \ 'txt'\n    file_name_ext(\"1example.dll\") # => 'dll'\n    file_name_ext(\"\
    1example\") # => 'No' (the name should end with a latin alphapet letter)\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpggpx3d1w.jl:25\nin expression starting at\
    \ /tmp/tmpggpx3d1w.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1unhm89.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1unhm89.jl:1\n\
    in expression starting at /tmp/tmpe1unhm89.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl8eokbic.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl8eokbic.jl:1\n\
    in expression starting at /tmp/tmpl8eokbic.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    # Your code\
    \ here\n    \n    return \nend\n</cell>\n<code language=julia-1.5>\n# Run this\
    \ cell to test your function\ntest_case = @test file_name_check(\"example.txt\"\
    ) # => true\ntest_case = @test file_name_check(\"1example.dll\") # => false\n\
    </cell>\n<text>\nQuestion 3\nWrite a function that takes a string representing\
    \ a file's name, and returns\n    'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n    A file's name is considered to be valid if and only if\
    \ all the following conditions \n    are met:\n    - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    - The file's name contains\
    \ exactly one dot '.'\n    - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8yycsbul.jl:21\nin expression starting at\
    \ /tmp/tmp8yycsbul.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_check_res\
    \ = file_name.match(r\"^[0-9]{3}\\.[a-z]{2,3}$\")\n    if file_name_check_res\
    \ == nil\n        file_name_check_res = file_name.match(r\"^[a-z]{2,3}\\.[0-9]{3}$\"\
    )\n    end\n    if file_name_check_res == nil\n        file_name_check_res = file_name.match(r\"\
    ^[a-z]{2,3}$\")\n    end\n    if file_name_check_res == nil\n        file_name_check_res\
    \ = file_name.match(r\"^[0-9]{3}$\")\n    end\n    if file_name_check_res == nil\n\
    \        file_name_check_res = file_name.match(r\"^[a-z]{2,3}\\.[a-z]{2,3}\\.[0-9]{3}$\"\
    )\n    end\n    if file_name_check_res == nil\n        file_name_check_res = file_name.match(r\"\
    ^[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[0-9]{3}$\")\n    end\n    if file_name_check_res\
    \ == nil\n        file_name_check_res = file_name.match(r\"^[a-z]{2,3}\\.[a-z]{2,3}\\\
    .[a-z]{2,3}\\.[a-z]{2,3}\\.[0-9]{3}$\")\n    end\n    if file_name_check_res ==\
    \ nil\n        file_name_check_res = file_name.match(r\"^[a-z]{2,3}\\.[a-z]{2,3}\\\
    .[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[0-9]{3}$\")\n    end\n    if file_name_check_res\
    \ == nil\n        file_name_check_res = file_name.match(r\"^[a-z]{2,3}\\.[a-z]{2,3}\\\
    .[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[0-9]{3}$\")\n    end\n \
    \   if file_name_check_res == nil\n        file_name_check_res = file_name.match(r\"\
    ^[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\\
    .[a-z]{2,3}\\.[0-9]{3}$\")\n    end\n    if file_name_check_res == nil\n     \
    \   file_name_check_res = file_name.match(r\"^[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\\
    .[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[0-9]{3}$\"\
    )\n    end\n    if file_name_check_res == nil\n        file_name_check_res = file_name.match(r\"\
    ^[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0wec_jz1.jl:54\nin expression starting at\
    \ /tmp/tmp0wec_jz1.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[1] != ['txt', 'exe', 'dll']\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[0].match(Regex(\"^[a-zA-z]\"))\n        return \"No\"\n    \n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\"\
    ) # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string representing a file's name, and returns the file's extension.\n\
    A file's extension is considered to be valid if and only if all the following\
    \ conditions \nare met:\n- The file's name contains exactly one dot '.'\n- The\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\n\
    file_name_check(\"example.txt\") # => 'txt'\nfile_name_check(\"1example.dll\"\
    ) # => 'dll'\nfile_name_check(\"example.exe\") # => 'exe'\nfile_name_check(\"\
    example\") # => 'No'\nfile_name_check(\"1example\") # => 'No'\nfile_name_check(\"\
    1example.exe\") # => 'exe'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.exe\") # => 'exe'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.exe\") # => 'exe'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.exe\") # => 'exe'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.exe\") # => 'exe'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.exe\") # => 'exe'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.exe\") # => 'exe'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.exe\") # => 'exe'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.exe\") # => 'exe'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.exe\") # => 'exe'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpkcugv1ez.jl:19\nin expression\
    \ starting at /tmp/tmpkcugv1ez.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) != 2 or file_name_split[1]\
    \ != \"\" or file_name_split[1][1] != \"\" \n        or file_name_split[1][1]\
    \ != file_name_split[1][1][1] or \n        file_name_split[1][1][1] != file_name_split[1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1] != file_name_split[1][1][1][1][1] or\
    \ \n        file_name_split[1][1][1][1][1] != file_name_split[1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name_split\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9__89dmn.jl:18\nin expression starting at\
    \ /tmp/tmp9__89dmn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprtbzytd4.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprtbzytd4.jl:1\n\
    in expression starting at /tmp/tmprtbzytd4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5__w4l4h.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5__w4l4h.jl:1\n\
    in expression starting at /tmp/tmp5__w4l4h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf8qs0zfg.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf8qs0zfg.jl:1\n\
    in expression starting at /tmp/tmpf8qs0zfg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgbk1vfj_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgbk1vfj_.jl:1\n\
    in expression starting at /tmp/tmpgbk1vfj_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n# Run this cell to check your\
    \ output. If everything is correct, you should see 'Yes' as the \n# output. \n\
    file_name_check(\"example.txt\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string representing a file's name, and returns the file's extension.\n\
    \    A file's extension is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - The file's name contains exactly one dot '.'\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    file_name_check(\"example.txt\") # => 'txt'\n    file_name_check(\"\
    1example.dll\") # => 'dll'\n    file_name_check(\"1example.exe\") # => 'exe'\n\
    \    file_name_check(\"1example\") # => 'No' (the name should end with one of\
    \ these extensions)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xpii9th.jl:19\nin expression starting at\
    \ /tmp/tmp_xpii9th.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfkr0nc27.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfkr0nc27.jl:1\n\
    in expression starting at /tmp/tmpfkr0nc27.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgek0liqj.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgek0liqj.jl:1\n\
    in expression starting at /tmp/tmpgek0liqj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvb0lwd3i.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvb0lwd3i.jl:1\n\
    in expression starting at /tmp/tmpvb0lwd3i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4awa1fr8.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4awa1fr8.jl:1\n\
    in expression starting at /tmp/tmp4awa1fr8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl10tc_3_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl10tc_3_.jl:1\n\
    in expression starting at /tmp/tmpl10tc_3_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.count(\"\
    .\")>2 or file_name.count(\".\")==0 and file_name.count(\"..\")==0 \n    or file_name.count(\"\
    ..\")>1 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>2 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>3 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>4 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>5 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>6 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>7 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>8 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>9 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>10 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>11 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>12 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>13 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>14 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>15 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>16 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>17 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>18 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>19 or file_name.count(\"..\")==0 and file_name.count(\".\")==0\n    or file_name.count(\"\
    ..\")>20 or file_name.\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2rpz212f.jl:17\nin expression starting at /tmp/tmp2rpz212f.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.lenght\
    \ > 3 || file_name.lenght < 1 || file_name.contains(\".\") || file_name.substring(0,1)\
    \ != \"a\" || file_name.substring(0,1) != \"A\" || file_name.substring(0,1) !=\
    \ \"b\" || file_name.substring(0,1) != \"B\" || file_name.substring(0,1) != \"\
    c\" || file_name.substring(0,1) != \"C\" || file_name.substring(0,1) != \"d\"\
    \ || file_name.substring(0,1) != \"D\" || file_name.substring(0,1) != \"e\" ||\
    \ file_name.substring(0,1) != \"E\" || file_name.substring(0,1) != \"f\" || file_name.substring(0,1)\
    \ != \"F\" || file_name.substring(0,1) != \"g\" || file_name.substring(0,1) !=\
    \ \"G\" || file_name.substring(0,1) != \"h\" || file_name.substring(0,1) != \"\
    H\" || file_name.substring(0,1) != \"i\" || file_name.substring(0,1) != \"I\"\
    \ || file_name.substring(0,1) != \"j\" || file_name.substring(0,1) != \"J\" ||\
    \ file_name.substring(0,1) != \"k\" || file_name.substring(0,1) != \"K\" || file_name.substring(0,1)\
    \ != \"l\" || file_name.substring(0,1) != \"L\" || file_name.substring(0,1) !=\
    \ \"m\" || file_name.substring(0,1) != \"M\" || file_name.substring(0,1) != \"\
    n\" || file_name.substring(0,1) != \"N\" || file_name.substring(0,1) != \"o\"\
    \ || file_name.substring(0,1) != \"O\" || file_name.substring(0,1) != \"p\" ||\
    \ file_name.substring(0,1) != \"P\" || file_name.substring(0,1) != \"q\" || file_name.substring(0,1)\
    \ != \"Q\" || file_name.substring(0,1) != \"r\" || file_name.substring(0,1) !=\
    \ \"R\" || file_name.substring(0,1) != \"s\" || file_name.substring(0,1) != \"\
    S\" || file_name.substring(0,1) != \"t\" || file_name.substring(0,1) != \"T\"\
    \ || file_name.substring(0,1) != \"u\" || file_name.substring(0,1) != \"U\" ||\
    \ file_name.substring(0,1) != \"v\" || file_name.substring(0,1) != \"V\" || file_name.substring(0,1)\
    \ != \"w\" || file_name.substring(0,1) != \"W\" || file_name.substring(0,1) !=\
    \ \"x\" || file_name.substring(0,1) != \"X\" || file_name.substring(0,1) != \"\
    y\" || file_name.substring(0,1) != \"Y\" || file_name.substring(0,1) != \"z\"\
    \ || file_name.substring(0,1) != \"Z\"\n    \n    return \"No\"\nend\n</cell>\n\
    <code language=julia-1.5>\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string \nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeofe5pfz.jl:21\nin expression starting at\
    \ /tmp/tmpeofe5pfz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10 || file_name.contains(\".\") || file_name.substring(0,1)\
    \ != \"a\" || file_name.substring(0,1) != \"A\" || file_name.substring(0,1) !=\
    \ \"b\" || file_name.substring(0,1) != \"B\" || file_name.substring(0,1) != \"\
    c\" || file_name.substring(0,1) != \"C\" || file_name.substring(0,1) != \"d\"\
    \ || file_name.substring(0,1) != \"D\" || file_name.substring(0,1) != \"e\" ||\
    \ file_name.substring(0,1) != \"E\" || file_name.substring(0,1) != \"f\" || file_name.substring(0,1)\
    \ != \"F\" || file_name.substring(0,1) != \"g\" || file_name.substring(0,1) !=\
    \ \"G\" || file_name.substring(0,1) != \"h\" || file_name.substring(0,1) != \"\
    H\" || file_name.substring(0,1) != \"i\" || file_name.substring(0,1) != \"I\"\
    \ || file_name.substring(0,1) != \"j\" || file_name.substring(0,1) != \"J\" ||\
    \ file_name.substring(0,1) != \"k\" || file_name.substring(0,1) != \"K\" || file_name.substring(0,1)\
    \ != \"l\" || file_name.substring(0,1) != \"L\" || file_name.substring(0,1) !=\
    \ \"m\" || file_name.substring(0,1) != \"M\" || file_name.substring(0,1) != \"\
    n\" || file_name.substring(0,1) != \"N\" || file_name.substring(0,1) != \"o\"\
    \ || file_name.substring(0,1) != \"O\" || file_name.substring(0,1) != \"p\" ||\
    \ file_name.substring(0,1) != \"P\" || file_name.substring(0,1) != \"q\" || file_name.substring(0,1)\
    \ != \"Q\" || file_name.substring(0,1) != \"r\" || file_name.substring(0,1) !=\
    \ \"R\" || file_name.substring(0,1) != \"s\" || file_name.substring(0,1) != \"\
    S\" || file_name.substring(0,1) != \"t\" || file_name.substring(0,1) != \"T\"\
    \ || file_name.substring(0,1) != \"u\" || file_name.substring(0,1) != \"U\" ||\
    \ file_name.substring(0,1) != \"v\" || file_name.substring(0,1) != \"V\" || file_name.substring(0,1)\
    \ != \"w\" || file_name.substring(0,1) != \"W\" || file_name.substring(0,1) !=\
    \ \"x\" || file_name.substring(0,1) != \"X\" || file_name.substring(0,1) != \"\
    y\" || file_name.substring(0,1) != \"Y\" || file_name.substring(0,1) != \"z\"\
    \ || file_name.substring(0,1) != \"Z\"\n    \n    \n    else\n        return \"\
    No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test your function\n\
    file_name_check(\"example.txt\") # => \"Yes\"\nfile_name_check(\"1example.dll\"\
    ) # => \"No\"\n</cell>\n<text>\nQuestion 3\nWrite a function that takes a string\
    \ representing a file's \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpip370m5_.jl:24\nin expression starting at\
    \ /tmp/tmpip370m5_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw553r9rb.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw553r9rb.jl:1\n\
    in expression starting at /tmp/tmpw553r9rb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) == 2 or length(file_name_split)\
    \ == 3 or length(file_name_split) == 4\n        \n        if file_name_split[1]\
    \ != \"\"\n            \n            if file_name_split[1][1] == 'a' || file_name_split[1][1]\
    \ == 'A'\n                \n                if file_name_split[1][2] != '0' ||\
    \ file_name_split[1][2] != '1' || file_name_split[1][2] != '2' || file_name_split[1][2]\
    \ != '3' || file_name_split[1][2] != '4' || file_name_split[1][2] != '5' || file_name_split[1][2]\
    \ != '6' || file_name_split[1][2] != '7' || file_name_split[1][2] != '8' || file_name_split[1][2]\
    \ != '9'\n                    \n                    if file_name_split[1][2] !=\
    \ 'a' || file_name_split[1][2] != 'A' || file_name_split[1][2] != 'b' || file_name_split[1][2]\
    \ != 'B' || file_name_split[1][2] != 'c' || file_name_split[1][2] != 'C' || file_name_split[1][2]\
    \ != 'd' || file_name_split[1][2] != 'D' || file_name_split[1][2] != 'e' || file_name_split[1][2]\
    \ != 'E' || file_name_split[1][2] != 'f' || file_name_split[1][2] != 'F' || file_name_split[1][2]\
    \ != 'g' || file_name_split[1][2] != 'G' || file_name_split[1][2] != 'h' || file_name_split[1][2]\
    \ != 'H' || file_name_split[1][2] != 'i' || file_name_split[1][2] != 'I' || file_name_split[1][2]\
    \ != 'j' || file_name_split[1][2] != 'J' || file_name_split[1][2] != 'k' || file_name_split[1][2]\
    \ != 'K' || file_name_split[1][2] != 'l' || file_name_split[1][2] != 'L' || file_name_split[1][2]\
    \ != 'm' || file_name_split[1][2] != 'M' || file_name_split[1][2] != 'n' || file_name_split[1][2]\
    \ != 'N' || file_name_split[1][2] != 'o' || file_name_split[1][2] != 'O' || file_name_split[1][2]\
    \ != 'p' || file_name_split[1][2] != 'P' || file_name_split[1][2] != 'q' || file_name_split[1][2]\
    \ != 'Q' || file_name_split[1][2] != 'r' || file_name_split[1][2] != 'R' || file_name_split[1][2]\
    \ != 's' || file_name_split[1][2] != 'S' || file_name_split[1][2] != 't' || file_name_split[1][2]\
    \ != 'T' || file_name_split[1][2] != 'u' || file_name_split[1][2] != 'U' || file_name_split[1][2]\
    \ != 'v' || file_name_split[1][2] != 'V' || file_name_split[1][2] != 'w' || file_name\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3q_1gl8l.jl:18\nin expression starting at /tmp/tmp3q_1gl8l.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # your code here\n\
    \    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\n# run this cell\
    \ to test your function\nfile_name_check(\"example.txt\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string representing a file's name, and returns\n\
    \    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A\
    \ file's name is considered to be valid if and only if all the following conditions\
    \ \n    are met:\n    - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n    - The file's name contains exactly one dot '.'\n    -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"\
    example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzp1n10t1.jl:20\nin expression starting at\
    \ /tmp/tmpzp1n10t1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpywtqu2pu.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpywtqu2pu.jl:1\n\
    in expression starting at /tmp/tmpywtqu2pu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    # Your code\
    \ here\n    \n    return \nend\n</cell>\n<code language=julia-1.5>\n# Run this\
    \ cell to test your function\nfile_name_check(\"example.txt\")\n</cell>\n<text>\n\
    Part 2: Problem 2\nWrite a function that checks if a file's name is a valid Julia\
    \ package name.\nA package name is a valid Julia package name if it contains only\
    \ letters, numbers, and underscore, and it starts with a letter and has at least\
    \ one dot.\nFor example, the package name \"MyPackage\" is a valid Julia package\
    \ name.\nA valid Julia package name consists of letters, numbers, and underscore,\
    \ and it starts with a letter and has at least one dot.\nFor example, the package\
    \ name \"MyPackage1\" is also a valid Julia package name.\nA valid Julia package\
    \ name consists of letters, numbers, and underscore, and it starts with a letter\
    \ and has at least one dot.\nFor example, the package name \"MyPackage2\" is also\
    \ a valid Julia package name.\nA valid Julia package name consists of letters,\
    \ numbers, and underscore, and it starts with a letter and has at least one dot.\n\
    For example, the package name \"MyPackage3\" is also a valid Julia package name.\n\
    A valid Julia package name consists of letters, numbers, and underscore, and it\
    \ starts with a letter and has at least one dot.\nFor example, the package name\
    \ \"MyPackage4\" is also a valid Julia package name.\nA valid Julia package name\
    \ consists of letters, numbers, and underscore, and it starts with a letter and\
    \ has at least one dot.\nFor example, the package name \"MyPackage5\" is also\
    \ a valid Julia package name.\nA valid Julia package name consists of letters,\
    \ numbers, and underscore, and it starts with a letter and has at least one dot.\n\
    For example, the package name \"MyPackage6\" is also a valid Julia package name.\n\
    A valid Julia package name consists of letters, numbers, and underscore, and it\
    \ starts with a letter and has at least one dot.\nFor example, the package name\
    \ \"MyPackage7\" is also a valid Julia package name.\nA valid Julia package name\
    \ consists of letters, numbers, and underscore, and it starts with a letter and\
    \ has at least one dot.\nFor example, the package name \"MyPackage8\" is also\
    \ a valid Julia package name.\nA valid Julia package name consists of letters,\
    \ numbers, and underscore, and it starts with a letter and has at least one dot.\n\
    For example, the package name \"MyPackage9\" is also a valid Julia package name.\n\
    A valid Julia package name consists of letters, numbers, and underscore, and it\
    \ starts with a letter and has at least one dot.\nFor example, the package name\
    \ \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1n9lpea.jl:21\nin expression starting at\
    \ /tmp/tmpk1n9lpea.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[1] != ['txt', 'exe', 'dll']\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[0].isalpha()\n        return \"No\"\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nfile_name_check(\"example.txt\")\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"1example.dll\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string representing a file's name, and returns\n    'Yes' if the\
    \ the file's name is valid, and returns 'No' otherwise.\n    A file's name is\
    \ considered to be valid if and only if all the following conditions \n    are\
    \ met:\n    - There should not be more than three digits ('0'-'9') in the file's\
    \ name.\n    - The file's name contains exactly one dot '.'\n    - The substring\
    \ before the dot should not be empty, and it starts with a letter from \n    the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"\
    example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpl_dnkvdq.jl:19\nin expression\
    \ starting at /tmp/tmpl_dnkvdq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.count(\"\
    .\")>3 || file_name.count(\".\")==1 && file_name.split(\".\")[1]!=\"txt\" && file_name.split(\"\
    .\")[1]!=\"exe\" && file_name.split(\".\")[1]!=\"dll\"\n    then return \"No\"\
    \n    else return \"Yes\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"example.txt\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    1example.dll\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ representing a file's name, and returns the file's extension.\nExamples:\nfile_name_ext(\"\
    example.txt\") # => 'txt'\nfile_name_ext(\"1example.dll\") # => 'dll'\nfile_name_ext(\"\
    example\") # => 'txt'\nfile_name_ext(\"1example\") # => 'dll'\nfile_name_ext(\"\
    example.txt\") # => 'txt'\nfile_name_ext(\"1example.dll\") # => 'dll'\nfile_name_ext(\"\
    example\") # => 'txt'\nfile_name_ext(\"1example\") # => 'dll'\nfile_name_ext(\"\
    example.txt\") # => 'txt'\nfile_name_ext(\"1example.dll\") # => 'dll'\nfile_name_ext(\"\
    example\") # => 'txt'\nfile_name_ext(\"1example\") # => 'dll'\nfile_name_ext(\"\
    example.txt\") # => 'txt'\nfile_name_ext(\"1example.dll\") # => 'dll'\nfile_name_ext(\"\
    example\") # => 'txt'\nfile_name_ext(\"1example\") # => 'dll'\nfile_name_ext(\"\
    example.txt\") # => 'txt'\nfile_name_ext(\"1example.dll\") # => 'dll'\nfile_name_ext(\"\
    example\") # => 'txt'\nfile_name_ext(\"1example\") # => 'dll'\nfile_name_ext(\"\
    example.txt\") # => 'txt'\nfile_name_ext(\"1example.dll\") # => 'dll'\nfile_name_ext(\"\
    example\") # => 'txt'\nfile_name_ext(\"1example\") # => 'dll'\nfile_name_ext(\"\
    example.txt\") # => 'txt'\nfile_name_ext(\"1example.dll\") # => 'dll'\nfile_name_ext(\"\
    example\") # => 'txt'\nfile_name_ext(\"1example\") # => 'dll'\nfile_name_ext(\"\
    example.txt\") # => 'txt'\nfile_name_ext(\"1example.dll\") # => 'dll'\nfile_name_ext(\"\
    example\") # => 'txt'\nfile_name_ext(\"1example\") # => 'dll'\nfile_name_ext(\"\
    example.txt\") # => 'txt'\nfile_name_ext(\"1example.\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb01j2u94.jl:17\nin expression starting at /tmp/tmpb01j2u94.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    end\n    \n    if file_name.split(\"\
    .\")[1] != ['txt', 'exe', 'dll']\n        return \"No\"\n    end\n    \n    if\
    \ file_name.split(\".\")[1][1] != ['A'-'Z', 'a'-'z']\n        return \"No\"\n\
    \    end\n    \n    if file_name.split(\".\")[1][2] != ['0'-'9']\n        return\
    \ \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2] \n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][2]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][2]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][2]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][2]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][2]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][2]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpfvgb4ptk.jl:21\nin expression\
    \ starting at /tmp/tmpfvgb4ptk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.count(\"\
    .\")>3 || file_name.count(\".\")==1 && file_name.split(\".\")[1]==\"exe\" || file_name.split(\"\
    .\")[1]==\"dll\" || file_name.split(\".\")[1]==\"txt\" \n    \n    \n    else\n\
    \    \n    \n        return \"No\"\n    \n    end\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"example.txt\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    1example.dll\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ representing a file's name, and returns the file's extension.\nA file's extension\
    \ is considered to be valid if and only if all the following conditions are met:\n\
    - There should not be more than three digits ('0'-'9') in the file's extension.\n\
    - The file's extension contains exactly one dot '.'\n- The substring before the\
    \ dot should not be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\nExamples:\nfile_name_extension(\"example.txt\") # =>\
    \ 'txt'\nfile_name_extension(\"1example.dll\") # => 'dll'\nfile_name_extension(\"\
    example.exe\") # => 'exe'\nfile_name_extension(\"1example.txt\") # => 'No' (the\
    \ extension should start with a latin alphapet letter)\nfile_name_extension(\"\
    example\") # => 'No' (the extension should start with a latin alphapet letter)\n\
    file_name_extension(\"1\") # => 'No' (the extension should start with a latin\
    \ alphapet letter)\nfile_name_extension(\"1example\") # => 'No' (the extension\
    \ should start with a latin alphapet letter)\nfile_name_extension(\"example1\"\
    ) # => 'No' (the extension should start with a latin alphapet letter)\nfile_name_extension(\"\
    example1.txt\") # => 'No' (the extension should start with a latin alphapet letter)\n\
    file_name_extension(\"example1.exe\") # => 'No' (the extension should start with\
    \ a latin alphapet letter)\nfile_name_extension(\"example1.dll\") # => 'No' (the\
    \ extension should start with a latin alphapet letter)\nfile_name_extension(\"\
    example1.exe.txt\") # => 'No' (the extension should start with a latin alphapet\
    \ letter)\nfile_name_extension(\"example1.exe.txt.exe\") # => 'No' (the extension\
    \ should start with a latin alphapet letter)\nfile_name_extension(\"example1.\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqrjxbq0.jl:28\nin expression starting at\
    \ /tmp/tmpcqrjxbq0.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\"\
    )\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.dll\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string representing a file's\
    \ name, and returns\n    'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    A file's name is considered to be valid if and only if all the\
    \ following conditions \n    are met:\n    - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n    - The file's name contains exactly\
    \ one dot '.'\n    - The substring before the dot should not be empty, and it\
    \ starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmf1negyy.jl:19\nin expression starting at\
    \ /tmp/tmpmf1negyy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) > 3 || file_name_split[1]\
    \ != \"\" \n        || file_name_split[1][1] != 'a' || file_name_split[1][1] !=\
    \ 'A'\n        || file_name_split[1][2] != 'b' || file_name_split[1][2] != 'B'\n\
    \        || file_name_split[1][3] != 'c' || file_name_split[1][3] != 'C'\n   \
    \     || file_name_split[1][4] != 'd' || file_name_split[1][4] != 'D'\n      \
    \  || file_name_split[1][5] != 'e' || file_name_split[1][5] != 'E'\n        ||\
    \ file_name_split[1][6] != 'f' || file_name_split[1][6] != 'F'\n        || file_name_split[1][7]\
    \ != 'g' || file_name_split[1][7] != 'G'\n        || file_name_split[1][8] !=\
    \ 'h' || file_name_split[1][8] != 'H'\n        || file_name_split[1][9] != 'i'\
    \ || file_name_split[1][9] != 'I'\n        || file_name_split[1][10] != 'j' ||\
    \ file_name_split[1][10] != 'J'\n        || file_name_split[1][11] != 'k' || file_name_split[1][11]\
    \ != 'K'\n        || file_name_split[1][12] != 'l' || file_name_split[1][12] !=\
    \ 'L'\n        || file_name_split[1][13] != 'm' || file_name_split[1][13] != 'M'\n\
    \        || file_name_split[1][14] != 'n' || file_name_split[1][14] != 'N'\n \
    \       || file_name_split[1][15] != 'o' || file_name_split[1][15] != 'O'\n  \
    \      || file_name_split[1][16] != 'p' || file_name_split[1][16] != 'P'\n   \
    \     || file_name_split[1][17] != 'q' || file_name_split[1][17] != 'Q'\n    \
    \    || file_name_split[1][18] != 'r' || file_name_split[1][18] != 'R'\n     \
    \   || file_name_split[1][19] != 's' || file_name_split[1][19] != 'S'\n      \
    \  || file_name_split[1][20] != 't' || file_name_split[1][20] != 'T'\n       \
    \ || file_name_split[1][21] != 'u' || file_name_split[1][21] != 'U'\n        ||\
    \ file_name_split[1][22] != 'v' || file_name_split[1][22] != 'V'\n        || file_name_split[1][23]\
    \ \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxh19balj.jl:19\nin expression starting at\
    \ /tmp/tmpxh19balj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_check_regex\
    \ = r\"^[0-9]{3}\\.[a-zA-Z]+$\"\n    \n    if re.match(file_name_check_regex,\
    \ file_name) == None:\n        return \"No\"\n    else:\n        return \"Yes\"\
    \nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\")\n\
    </cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.dll\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string representing a file's\
    \ name, and returns\n    'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    A file's name is considered to be valid if and only if all the\
    \ following conditions \n    are met:\n    - There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n    - The file's name contains exactly\
    \ one dot '.'\n    - The substring before the dot should not be empty, and it\
    \ starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfohbpb9e.jl:19\nin expression starting at\
    \ /tmp/tmpfohbpb9e.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) > 3 || file_name_split[1]\
    \ != \"\" || file_name_split[2] != \"\" || file_name_split[2] != \"exe\" || file_name_split[2]\
    \ != \"dll\" || file_name_split[2] != \"txt\" || file_name_split[2] != \"zip\"\
    \ || file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split[2]\
    \ != \"gz\" || file_name_split[2] != \"bz2\" || file_name_split[2] != \"bz\" ||\
    \ file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split[2]\
    \ != \"gz\" || file_name_split[2] != \"bz2\" || file_name_split[2] != \"bz\" ||\
    \ file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split[2]\
    \ != \"gz\" || file_name_split[2] != \"bz2\" || file_name_split[2] != \"bz\" ||\
    \ file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split[2]\
    \ != \"gz\" || file_name_split[2] != \"bz2\" || file_name_split[2] != \"bz\" ||\
    \ file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split[2]\
    \ != \"gz\" || file_name_split[2] != \"bz2\" || file_name_split[2] != \"bz\" ||\
    \ file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split[2]\
    \ != \"gz\" || file_name_split[2] != \"bz2\" || file_name_split[2] != \"bz\" ||\
    \ file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split[2]\
    \ != \"gz\" || file_name_split[2] != \"bz2\" || file_name_split[2] != \"bz\" ||\
    \ file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split[2]\
    \ != \"gz\" || file_name_split[2] != \"bz2\" || file_name_split[2] != \"bz\" ||\
    \ file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split[2]\
    \ != \"gz\" || file_name_split[2] != \"bz2\" || file_name_split[2] != \"bz\" ||\
    \ file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split[2]\
    \ != \"gz\" || file_name_split[2] != \"bz2\" || file_name_split[2] != \"bz\" ||\
    \ file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split[2]\
    \ != \"gz\" || file_name_split[2] != \"bz2\" || file_name_split[2] != \"bz\" ||\
    \ file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split[2]\
    \ != \"gz\" || file_name_split[2] != \"bz2\" || file_name_split[2] != \"bz\" ||\
    \ file_name_split[2] != \"gz\" || file_name_split[2] != \"tar\" || file_name_split\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplseg442r.jl:1\nin expression starting at /tmp/tmplseg442r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmzh0_b7o.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmzh0_b7o.jl:1\n\
    in expression starting at /tmp/tmpmzh0_b7o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<text>\nExercise 3: Write a function that takes a string\
    \ representing a file's name, and returns\n    'Yes' if the the file's name is\
    \ valid, and returns 'No' otherwise.\n    A file's name is considered to be valid\
    \ if and only if all the following conditions \n    are met:\n    - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    - The file's\
    \ name contains exactly one dot '.'\n    - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n\
    \    file_name_check(\"1example.dll\") # => 'No' (the name should start with a\
    \ latin alphapet letter)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpunbn6hcs.jl:19\nin expression starting at\
    \ /tmp/tmpunbn6hcs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<text>\nSolution\nRun the cell below to test your solution.\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuv50d846.jl:19\nin expression starting at\
    \ /tmp/tmpuv50d846.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6d011mz5.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6d011mz5.jl:1\n\
    in expression starting at /tmp/tmp6d011mz5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    end\n    \n    if file_name.split(\"\
    .\")[1] != ['txt', 'exe', 'dll']\n        return \"No\"\n    end\n    \n    if\
    \ file_name.split(\".\")[1][1] != ['A'-'Z', 'a'-'z']\n        return \"No\"\n\
    \    end\n    \n    if file_name.split(\".\")[1][2] != ['0'-'9']\n        return\
    \ \"No\"\n    end\n    \n    if file_name.split(\".\")[1][3] != ['0'-'9']\n  \
    \      return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][4] != ['0'-'9']\n\
    \        return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][5] !=\
    \ ['0'-'9']\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][6] != ['0'-'9']\n        return \"No\"\n    end\n    \n    if file_name.split(\"\
    .\")[1][7] != ['0'-'9']\n        return \"No\"\n    end\n    \n    if file_name.split(\"\
    .\")[1][8] != ['0'-'9']\n        return \"No\"\n    end\n    \n    if file_name.split(\"\
    .\")[1][9] != ['0'-'9']\n        return \"No\"\n    end\n    \n    return \"Yes\"\
    \nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\")\n\
    </cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.dll\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string representing a file's\
    \ name, and returns the file's extension.\nA file's extension is considered to\
    \ be valid if and only if all the following conditions are met:\n- The file's\
    \ name contains exactly one dot '.'\n- The substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\"\
    ) # => 'txt'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    example.exe\") # => 'exe'\nfile_name_check(\"example.dll\") # => 'dll'\nfile_name_check(\"\
    example\") # => 'No'\nfile_name_check(\"1example\") # => 'No'\nfile_name_check(\"\
    example1\") # => 'No'\nfile_name_check(\"example1.txt\") # => 'No'\nfile_name_check(\"\
    example1.exe\") # => 'No'\nfile_name_check(\"example1.dll\") # => 'No'\nfile_name_check(\"\
    example1.exe.txt\") # => 'No'\nfile_name_check(\"example1.exe.txt.exe\") # =>\
    \ 'exe'\nfile_name_check(\"example1.exe.txt\nusing Test\n\n@testset begin\n\n\
    candidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\
    \t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpf8dxjuy3.jl:20\nin expression\
    \ starting at /tmp/tmpf8dxjuy3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.count(\"\
    .\")>3 || file_name.count(\".\")==1 && file_name.substring(0,1) != \"a\" && file_name.substring(0,1)\
    \ != \"A\" || file_name.substring(file_name.indexOf(\".\"),file_name.indexOf(\"\
    .\"))!=\"txt\" || file_name.substring(file_name.indexOf(\".\"),file_name.indexOf(\"\
    .\"))!=\"exe\" || file_name.substring(file_name.indexOf(\".\"),file_name.indexOf(\"\
    .\"))!=\"dll\"\n        return \"No\"\n    else\n        return \"Yes\"\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n# Run this cell to check your output.\
    \ If everything is correct, you should see 'Yes' as the output when you run the\
    \ cell.\nfile_name_check(\"example.txt\")\n</cell>\n<text>\nBooleans\nJulia has\
    \ two types of variables: booleans and bit-vectors.\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpov69yho4.jl:22\nin expression starting at\
    \ /tmp/tmpov69yho4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_x487l34.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_x487l34.jl:1\n\
    in expression starting at /tmp/tmp_x487l34.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    # Your code\
    \ here\n    \n    return \nend\n</cell>\n<text>\nSolution\nRun the cell below\
    \ to test your function and see the test results (passing or failing). You will\
    \ know if your function is working correctly when the test results are as expected.\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp33qys9i.jl:21\nin expression starting at\
    \ /tmp/tmpp33qys9i.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string\
    \ representing a file's name, and returns\n    'Yes' if the the file's name is\
    \ valid, and returns 'No' otherwise.\n    A file's name is considered to be valid\
    \ if and only if all the following conditions \n    are met:\n    - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    - The file's\
    \ name contains exactly one dot '.'\n    - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n\
    \    file_name_check(\"1example.dll\") # => 'No' (the name should start with a\
    \ latin alphapet letter)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp861rbio2.jl:19\nin expression starting at\
    \ /tmp/tmp861rbio2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp12ddmmql.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp12ddmmql.jl:1\n\
    in expression starting at /tmp/tmp12ddmmql.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10 || file_name.contains(\".\") || file_name.substring(0,1)\
    \ != \"a\" || file_name.substring(0,1) != \"A\" || file_name.substring(0,1) !=\
    \ \"b\" || file_name.substring(0,1) != \"B\" || file_name.substring(0,1) != \"\
    c\" || file_name.substring(0,1) != \"C\" || file_name.substring(0,1) != \"d\"\
    \ || file_name.substring(0,1) != \"D\" || file_name.substring(0,1) != \"e\" ||\
    \ file_name.substring(0,1) != \"E\" || file_name.substring(0,1) != \"f\" || file_name.substring(0,1)\
    \ != \"F\" || file_name.substring(0,1) != \"g\" || file_name.substring(0,1) !=\
    \ \"G\" || file_name.substring(0,1) != \"h\" || file_name.substring(0,1) != \"\
    H\" || file_name.substring(0,1) != \"i\" || file_name.substring(0,1) != \"I\"\
    \ || file_name.substring(0,1) != \"j\" || file_name.substring(0,1) != \"J\" ||\
    \ file_name.substring(0,1) != \"k\" || file_name.substring(0,1) != \"K\" || file_name.substring(0,1)\
    \ != \"l\" || file_name.substring(0,1) != \"L\" || file_name.substring(0,1) !=\
    \ \"m\" || file_name.substring(0,1) != \"M\" || file_name.substring(0,1) != \"\
    n\" || file_name.substring(0,1) != \"N\" || file_name.substring(0,1) != \"o\"\
    \ || file_name.substring(0,1) != \"O\" || file_name.substring(0,1) != \"p\" ||\
    \ file_name.substring(0,1) != \"P\" || file_name.substring(0,1) != \"q\" || file_name.substring(0,1)\
    \ != \"Q\" || file_name.substring(0,1) != \"r\" || file_name.substring(0,1) !=\
    \ \"R\" || file_name.substring(0,1) != \"s\" || file_name.substring(0,1) != \"\
    S\" || file_name.substring(0,1) != \"t\" || file_name.substring(0,1) != \"T\"\
    \ || file_name.substring(0,1) != \"u\" || file_name.substring(0,1) != \"U\" ||\
    \ file_name.substring(0,1) != \"v\" || file_name.substring(0,1) != \"V\" || file_name.substring(0,1)\
    \ != \"w\" || file_name.substring(0,1) != \"W\" || file_name.substring(0,1) !=\
    \ \"x\" || file_name.substring(0,1) != \"X\" || file_name.substring(0,1) != \"\
    y\" || file_name.substring(0,1) != \"Y\" || file_name.substring(0,1) != \"z\"\
    \ || file_name.substring(0,1) != \"Z\" || file_name.substring(0,1) != \"\"\n \
    \   \n    else \"No\"\n    \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"example.txt\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    1example.dll\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdwy7y0r.jl:22\nin expression starting at\
    \ /tmp/tmphdwy7y0r.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6wy_eoq7.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6wy_eoq7.jl:1\n\
    in expression starting at /tmp/tmp6wy_eoq7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsrplx5ry.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsrplx5ry.jl:1\n\
    in expression starting at /tmp/tmpsrplx5ry.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    # Your code\
    \ here\n    \nend\n</cell>\n<text>\nSolution\nRun the cell below to test your\
    \ function\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihw6mcb9.jl:20\nin expression starting at\
    \ /tmp/tmpihw6mcb9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg3gncn0r.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg3gncn0r.jl:1\n\
    in expression starting at /tmp/tmpg3gncn0r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) != 2 or file_name_split[1]\
    \ != \"\" or file_name_split[1][1] != \"\"\n        file_name_split[1] = file_name_split[1][1]\n\
    \    end\n    \n    if !all(islower(file_name_split[1][1:end-1]))\n        return\
    \ \"No\"\n    end\n    \n    if !all(isupper(file_name_split[1][1:end-1]))\n \
    \       return \"No\"\n    end\n    \n    if !all(isdigit(file_name_split[1][1:end-1]))\n\
    \        return \"No\"\n    end\n    \n    if !all(isalpha(file_name_split[1][1:end-1]))\n\
    \        return \"No\"\n    end\n    \n    if file_name_split[1][1] != \".\"\n\
    \        return \"No\"\n    end\n    \n    if !all(file_name_split[1][1:end-1]\
    \ \u2208 [\"txt\", \"exe\", \"dll\"])\n        return \"No\"\n    end\n    \n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    example.txt\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.dll\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string representing\
    \ a file's name, and returns the file's extension.\nA file's extension is considered\
    \ to be the substring after the last dot ('.') in the file's name.\nExamples:\n\
    file_name_extension(\"example.txt\") # => 'txt'\nfile_name_extension(\"1example.dll\"\
    ) # => 'dll'\nfile_name_extension(\"example.exe\") # => 'exe'\nfile_name_extension(\"\
    example\") # => ''\nfile_name_extension(\"1example\") # => ''\nfile_name_extension(\"\
    example.txt\") # => ''\nfile_name_extension(\"1example.dll\") # => ''\nfile_name_extension(\"\
    example.exe\") # => ''\nfile_name_extension(\"example\") # => ''\nfile_name_extension(\"\
    1example\") # => ''\nfile_name_extension(\"example.txt\") # => ''\nfile_name_extension(\"\
    1example.dll\") # => ''\nfile_name_extension(\"example.exe\") # => ''\nfile_name_extension(\"\
    example\") # => ''\nfile_name_extension(\"1example\") # => ''\nfile_name_extension(\"\
    example.txt\") # => ''\nfile_name_extension(\"1example.dll\") # => ''\nfile_name_extension(\"\
    example.exe\") # => ''\nfile_name_extension(\"example\") # => ''\nfile_name_extension(\"\
    1example\") # => ''\nfile_name_extension(\"example.txt\") # => \nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name_split\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzx289r1q.jl:18\nin expression starting at\
    \ /tmp/tmpzx289r1q.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.count(\"\
    .\")>3 || file_name.count(\".\")==1 && file_name.substring(0,1)!=\"a\" && file_name.substring(0,1)!=\"\
    A\" || file_name.substring(0,2)!=\"a\" && file_name.substring(0,2)!=\"A\" || file_name.substring(0,3)!=\"\
    a\" && file_name.substring(0,3)!=\"A\"\n        return \"No\"\n    else\n    \
    \    return \"Yes\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    example.txt\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.dll\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string representing\
    \ a file's name, and returns the file's extension.\nA file's extension is considered\
    \ to be valid if and only if all the following conditions are met:\n- The file's\
    \ name contains exactly one dot '.'\n- The substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_ext(\"example.txt\") #\
    \ => 'txt'\nfile_name_ext(\"1example.dll\") # => 'dll'\nfile_name_ext(\"example.exe\"\
    ) # => 'exe'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"1example\"\
    ) # => 'No'\nfile_name_ext(\"example1.txt\") # => 'No'\nfile_name_ext(\"example1.exe\"\
    ) # => 'No'\nfile_name_ext(\"example1.dll\") # => 'No'\nfile_name_ext(\"example1.dll\"\
    ) # => 'No'\nfile_name_ext(\"example1.exe\") # => 'No'\nfile_name_ext(\"example1.exe\"\
    ) # => 'No'\nfile_name_ext(\"example1.exe\") # => 'No'\nfile_name_ext(\"example1.exe\"\
    ) # => 'No'\nfile_name_ext(\"example1.exe\") # => 'No'\nfile_name_ext(\"example1.exe\"\
    ) # => 'No'\nfile_name_ext(\"example1.exe\") # => 'No'\nfile_name_ext(\"example1.exe\"\
    ) # => 'No'\nfile_name_ext(\"example1.exe\") # => 'No'\nfile_name_ext(\"example1.exe\"\
    ) # => 'No'\nfile_name_ext(\"example1.exe\") # => 'No'\nfile_name_ext(\"example1.exe\"\
    ) # => 'No'\nfile_name_ext(\"example1.exe\") # => 'No'\nfile_name_ext(\"example1.exe\"\
    ) # => 'No'\nfile_name_ext(\"example1.exe\") # => 'No'\nfile_name_ext(\"example1.exe\"\
    ) # => '\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6l414ot0.jl:22\nin expression starting at\
    \ /tmp/tmp6l414ot0.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_check_res\
    \ = file_name.match(\"^[0-9]{3}\\.[a-zA-Z]{0,3}$\")\n    if file_name_check_res\
    \ == nil\n        return \"No\"\n    else\n        return \"Yes\"\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nfile_name_check(\"example.txt\") # => 'Yes'\n\
    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string representing a file's name, and returns the file's extension.\n    A\
    \ file's extension is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - The file's name contains exactly one dot '.'\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    file_name_check(\"example.txt\") # => 'txt'\n    file_name_check(\"\
    1example.dll\") # => 'dll'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1pc2apvq.jl:16\nin expression starting at\
    \ /tmp/tmp1pc2apvq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps5pjg2w6.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps5pjg2w6.jl:1\n\
    in expression starting at /tmp/tmps5pjg2w6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnbmh6tfo.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnbmh6tfo.jl:1\n\
    in expression starting at /tmp/tmpnbmh6tfo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsiek0mnh.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsiek0mnh.jl:1\n\
    in expression starting at /tmp/tmpsiek0mnh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.lenght\
    \ > 3 || file_name.lenght < 1\n        return \"No\"\n    end\n    if file_name.lenght\
    \ == 1 && file_name.substring == \"\"\n        return \"No\"\n    end\n    if\
    \ file_name.substring == \".\" || file_name.substring == \"\"\n        return\
    \ \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[1])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[2])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[3])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[4])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[5])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[6])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[7])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[8])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[9])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[10])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[11])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[12])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[13])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[14])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[15])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[16])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[17])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[18])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[19])\n\
    \        return \"No\"\n    end\n    if !is_latin_alphabetic_letter(file_name.substring[20])\n\
    \        return \"No\"\n    end\n    if \nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmp4tt8p4td.jl:86\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp4tt8p4td.jl:87\nin expression\
    \ starting at /tmp/tmp4tt8p4td.jl:87\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1z1x4dt5.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1z1x4dt5.jl:1\n\
    in expression starting at /tmp/tmp1z1x4dt5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpma7n1hhu.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma7n1hhu.jl:1\n\
    in expression starting at /tmp/tmpma7n1hhu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n# Run this cell to check your\
    \ answer\nfile_name_check(\"example.txt\")\n</cell>\n<text>\nPart 2: Exploring\
    \ your data\nIn this part of the exercise, you will explore a dataset containing\
    \ data about a disaster, and use Julia's DataFrame type to work with it.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_wz99vx.jl:19\nin expression starting at\
    \ /tmp/tmps_wz99vx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) > 2 || \n  \
    \      file_name_split[1] != \"\" ||\n        file_name_split[1][1] != \"\" ||\n\
    \        file_name_split[2] != \"\" ||\n        file_name_split[2] != \"txt\"\
    \ ||\n        file_name_split[2] != \"exe\" ||\n        file_name_split[2] !=\
    \ \"dll\"\n    \n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"example.txt\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    1example.dll\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ representing a file's name, and returns\n    'Yes' if the the file's name is\
    \ valid, and returns 'No' otherwise.\n    A file's name is considered to be valid\
    \ if and only if all the following conditions \n    are met:\n    - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    - The file's\
    \ name contains exactly one dot '.'\n    - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n\
    \    file_name_check(\"1example.dll\") # => 'No' (the name should start with a\
    \ latin alphapet letter)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatkm8534.jl:28\nin expression starting at\
    \ /tmp/tmpatkm8534.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg4z2bv6h.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg4z2bv6h.jl:1\n\
    in expression starting at /tmp/tmpg4z2bv6h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != ['txt', 'exe', 'dll']\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1][1] != ['A'-'Z', 'a'-'z']\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1][2] != ['0', '9']\n        return \"No\"\n    end\n    return \"Yes\"\n\
    end\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\") # =>\
    \ 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with\
    \ a latin alphapet letter)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string representing a file's name, and returns the file's extension.\n\
    A file's extension is considered to be valid if and only if all the following\
    \ conditions are met:\n- There should not be more than three digits ('0'-'9')\
    \ in the file's extension.\n- The file's extension contains exactly one dot '.'\n\
    - The substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot\
    \ should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"\
    example.txt\") # => 'txt'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    example.exe\") # => 'exe'\nfile_name_check(\"1example\") # => 'No' (the extension\
    \ should start with a latin alphapet letter)\nfile_name_check(\"example\") # =>\
    \ 'No' (the extension should start with a latin alphapet letter)\nfile_name_check(\"\
    example1\") # => 'No' (the extension should start with a latin alphapet letter)\n\
    file_name_check(\"example1.txt\") # => 'No' (the extension should start with a\
    \ latin alphapet letter)\nfile_name_check(\"example1.exe\") # => 'No' (the extension\
    \ should start with a latin alphapet letter)\nfile_name_check(\"example1.dll\"\
    ) # => 'No' (the extension should start with a latin alphapet letter)\nfile_name_check(\"\
    example1.exe.txt\") # => 'No' (the extension should start with a latin alphapet\
    \ letter)\nfile_name_check(\"example1.exe.txt.exe\") # => 'No' (the extension\
    \ should start with a latin alphapet letter)\nfile_name_check(\"example1.exe.txt.exe1\"\
    ) # => 'No' (the extension should start with a \nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpe5ilky0i.jl:19\nin expression\
    \ starting at /tmp/tmpe5ilky0i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[1] == \"txt\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\"\
    .\")[1] == \"dll\"\n        return \"Yes\"\n    \n    if file_name.split(\".\"\
    )[1] == \"exe\"\n        return \"No\"\n    \n    if file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"No\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"dll\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"No\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"No\"\n   \
    \ \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1] ==\
    \ \"dll\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"No\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"exe\" || file_name.split(\".\")[1] == \"dll\" || file_name.split(\".\")[1]\
    \ == \"exe\" || file_name.split(\".\")[1] == \"dll\" || file_name.split(\".\"\
    )[1] == \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"No\"\
    \n    \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\"\
    )[1] == \"dll\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\"\
    .\")[1] == \"dll\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\"\
    .\")[1] == \"dll\"\n        return \"No\"\n    \n    if file_name.split(\".\"\
    )[1] == \"exe\" || file_name.split(\".\")[1] == \"dll\" || file_name.split(\"\
    .\")[1] == \"exe\" || file_name.split(\".\")[1] == \"dll\" || file_name.split(\"\
    .\")[1] == \"exe\" || file_name.split(\".\")[1] == \"dll\" || file_name.split(\"\
    .\")[1] == \"exe\" || file_name.split(\".\")[1] == \"dll\" || file_name.split(\"\
    .\")[1] == \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"\
    No\"\n    \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\"\
    .\")[1] == \"dll\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\"\
    .\")[1] == \"dll\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\"\
    .\")[1] == \"dll\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\"\
    .\")[1] == \"dll\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\"\
    .\")[1] == \"dll\" || file_name.split(\".\")[1] == \"exe\" || file_name.split(\"\
    .\")[1] == \"dll\"\n        return \"No\"\n    \n    if file_name.split(\".\"\
    )[1] == \"exe\" || file_name.split(\".\")[1] == \"dll\" || file_name.split(\"\
    .\")[1] == \"exe\" || file_name.split(\".\")[1] == \"dll\" || file_name.split(\"\
    .\")[1] == \"exe\" || file_name.split(\".\")[1] == \"dll\" || file_name.split(\"\
    .\")[1] == \"exe\" || file_name.split(\".\")[1] == \"dll\" || file_name.split(\"\
    .\")[1] == \"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjfd7zyrj.jl:55\nin expression starting at\
    \ /tmp/tmpjfd7zyrj.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ == 3 && file_name.starts_with(\"0\") && file_name.ends_with(\"9\") && file_name.contains(\"\
    .\") && file_name.substring_before_indexof(\".\") == 0\n        && [\"txt\", \"\
    exe\", \"dll\"].contains(file_name.substring_after_indexof(\".\"))\n    \n   \
    \     return \"Yes\"\n    \n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string representing\
    \ a file's name, and returns\n    'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n    A file's name is considered to be valid if and only if\
    \ all the following conditions \n    are met:\n    - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    - The file's name contains\
    \ exactly one dot '.'\n    - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"&&\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdgkcuyuj.jl:17\nin expression starting at\
    \ /tmp/tmpdgkcuyuj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[1] != \"\"\n        return \"No\"\n    \n    if file_name.split(\".\")[1]\
    \ == \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"No\"\n\
    \    \n    if file_name.split(\".\")[1] == \"txt\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"Yes\"\n  \
    \  \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"Yes\"\n  \
    \  \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"Yes\"\n  \
    \  \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"Yes\"\n  \
    \  \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"Yes\"\n  \
    \  \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"Yes\"\n  \
    \  \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"Yes\"\n  \
    \  \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"Yes\"\n  \
    \  \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"Yes\"\n  \
    \  \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"Yes\"\n  \
    \  \n    if file_name.split(\".\")[1] == \"exe\" || file_name.split(\".\")[1]\
    \ == \"dll\"\n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprxfaqihj.jl:1\nin expression starting at /tmp/tmprxfaqihj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) != 2 or file_name_split[1]\
    \ != \"\" or file_name_split[1][1] != \"\"\n    \n        return \"No\"\n    \n\
    \    \n    if file_name_split[1][1] == \"0\" || file_name_split[1][1] == \"1\"\
    \ || file_name_split[1][1] == \"2\" || file_name_split[1][1] == \"3\" || file_name_split[1][1]\
    \ == \"4\" || file_name_split[1][1] == \"5\" || file_name_split[1][1] == \"6\"\
    \ || file_name_split[1][1] == \"7\" || file_name_split[1][1] == \"8\" || file_name_split[1][1]\
    \ == \"9\"\n    \n        return \"No\"\n    \n    \n    if file_name_split[1][1]\
    \ == \"a\" || file_name_split[1][1] == \"b\" || file_name_split[1][1] == \"c\"\
    \ || file_name_split[1][1] == \"d\" || file_name_split[1][1] == \"e\" || file_name_split[1][1]\
    \ == \"f\" || file_name_split[1][1] == \"g\" || file_name_split[1][1] == \"h\"\
    \ || file_name_split[1][1] == \"i\" || file_name_split[1][1] == \"j\" || file_name_split[1][1]\
    \ == \"k\" || file_name_split[1][1] == \"l\" || file_name_split[1][1] == \"m\"\
    \ || file_name_split[1][1] == \"n\" || file_name_split[1][1] == \"o\" || file_name_split[1][1]\
    \ == \"p\" || file_name_split[1][1] == \"q\" || file_name_split[1][1] == \"r\"\
    \ || file_name_split[1][1] == \"s\" || file_name_split[1][1] == \"t\" || file_name_split[1][1]\
    \ == \"u\" || file_name_split[1][1] == \"v\" || file_name_split[1][1] == \"w\"\
    \ || file_name_split[1][1] == \"x\" || file_name_split[1][1] == \"y\" || file_name_split[1][1]\
    \ == \"z\"\n    \n        return \"No\"\n    \n    \n    if file_name_split[1][1]\
    \ == \"A\" || file_name_split[1][1] == \"B\" || file_name_split[1][1] == \"C\"\
    \ || file_name_split[1][1] == \"D\" || file_name_split[1][1] == \"E\" || file_name_split[1][1]\
    \ == \"F\" || file_name_split[1][1] == \"G\" || file_name_split[1][1] == \"H\"\
    \ || file_name_split[1][1] == \"I\" || file_name_split[1][1] == \"J\" || file_name_split[1][1]\
    \ == \"K\" || file_name_split[1][1] == \"L\" || file_name_split[1][1] == \"M\"\
    \ || file_name_split[1][1] == \"N\" || file_name_split[1][1] == \"O\" || file_name_split[1][1]\
    \ == \"P\" || file_name_split[1][1] == \"Q\" || file_name_split[1][1] == \"R\"\
    \ || file_name_split[1][1] == \"S\" || file_name_\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name_split\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptkdl0lrh.jl:18\nin expression starting at\
    \ /tmp/tmptkdl0lrh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpchycjm37.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpchycjm37.jl:1\n\
    in expression starting at /tmp/tmpchycjm37.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj0lhn6mn.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj0lhn6mn.jl:1\n\
    in expression starting at /tmp/tmpj0lhn6mn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.match('^[0-9]{3}$')\n\
    \        \n        if file_name.match('.') != nil\n            \n            if\
    \ file_name.match('^[^.]+$') != nil\n                \n                if file_name.match('^[a-zA-Z]+$')\
    \ != nil\n                    \n                    if file_name.match('^[^.]+\\\
    .txt$')\n                        \n                        if file_name.match('^[^.]+\\\
    .exe$')\n                            \n                            if file_name.match('^[^.]+\\\
    .dll$')\n                                \n                                return\
    \ 'Yes'\n                            end\n                        end\n      \
    \              end\n                end\n            end\n        end\n    end\n\
    \    \n    return 'No'\nend\n</cell>\n<code language=julia-1.5>\n# Run this cell\
    \ to check your output. If everything is correct, you should see 'Yes' as the\
    \ \n# output. \nfile_name_check(\"example.txt\")\n</cell>\n<text>\nB. Create a\
    \ function which takes a string representing a file's name, and returns\n    'Yes'\
    \ if the the file's name is valid, and returns 'No' otherwise.\n    A file's name\
    \ is considered to be valid if and only if all the following conditions \n   \
    \ are met:\n    - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n    - The file's name contains exactly one dot '.'\n    - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"\
    example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp9chd74ep.jl:17\nin expression\
    \ starting at /tmp/tmp9chd74ep.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    # Your code\
    \ here\n    \nend\n</cell>\n<code language=julia-1.5>\n# Run this cell to test\
    \ your function\nfile_name_check(\"example.txt\")\n</cell>\n<text>\nPart 2: Function\
    \ to check whether a file's extension is valid\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6slhd8pn.jl:20\nin expression starting at\
    \ /tmp/tmp6slhd8pn.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppgebbhjf.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppgebbhjf.jl:1\n\
    in expression starting at /tmp/tmppgebbhjf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<text>\nSolution\nRun the cell below to test your solution.\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7z_tcfr2.jl:19\nin expression starting at\
    \ /tmp/tmp7z_tcfr2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplrt89w9n.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplrt89w9n.jl:1\n\
    in expression starting at /tmp/tmplrt89w9n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) != 2 or file_name_split[1]\
    \ != \"\" or file_name_split[1][1] != \"\" \n        or file_name_split[1][1]\
    \ != file_name_split[1][2] || file_name_split[1][1] != file_name_split[1][2] \n\
    \        || file_name_split[1][1] != file_name_split[1][2] || file_name_split[1][1]\
    \ != file_name_split[1][2] \n        || file_name_split[1][1] != file_name_split[1][2]\
    \ || file_name_split[1][1] != file_name_split[1][2] \n        || file_name_split[1][1]\
    \ != file_name_split[1][2] || file_name_split[1][1] != file_name_split[1][2] \n\
    \        || file_name_split[1][1] != file_name_split[1][2] || file_name_split[1][1]\
    \ != file_name_split[1][2] \n        || file_name_split[1][1] != file_name_split[1][2]\
    \ || file_name_split[1][1] != file_name_split[1][2] \n        || file_name_split[1][1]\
    \ != file_name_split[1][2] || file_name_split[1][1] != file_name_split[1][2] \n\
    \        || file_name_split[1][1] != file_name_split[1][2] || file_name_split[1][1]\
    \ != file_name_split[1][2] \n        || file_name_split[1][1] != file_name_split[1][2]\
    \ || file_name_split[1][1] != file_name_split[1][2] \n        || file_name_split[1][1]\
    \ != file_name_split[1][2] || file_name_split[1][1] != file_name_split[1][2] \n\
    \        || file_name_split[1][1] != file_name_split[1][2] || file_name_split[1][1]\
    \ != file_name_split[1][2] \n        || file_name_split[1][1] != file_name_split[1][2]\
    \ || file_name_split[1][1] != file_name_split[1][2] \n        || file_name_split[1][1]\
    \ != file_name_split[1][2] || file_name_split[1][1] != file_name_split[1][2] \n\
    \        || file_name_split[1][1] != file_name_split[1][2] || file_name_split[1][1]\
    \ != file_name_split[1][2] \n        || file_name_split[1][1] != file_name_split[1][2]\
    \ || file_name_split[1][1] != file_name_split[1][2] \n        || file_name_split[1][1]\
    \ != file_name_split[1][2] || file_name_split[1][1] != file_name_split[1][2] \n\
    \        || file_name_split[1][1] != file_name_split[1][2] || file_name_split[1][1]\
    \ != file_name_split[1][2] \n        || file_name_split[1][1] != file_name_split[1][2]\
    \ || file_name_split[1][1] != file_name_split[1][2] \n        || file_name_split[1][1]\
    \ != file_name_\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name_split\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc4f2ddhx.jl:18\nin expression starting at\
    \ /tmp/tmpc4f2ddhx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwa4gsq5c.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwa4gsq5c.jl:1\n\
    in expression starting at /tmp/tmpwa4gsq5c.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuupedtii.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuupedtii.jl:1\n\
    in expression starting at /tmp/tmpuupedtii.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) != 2 or file_name_split[1]\
    \ != \"\" or file_name_split[1][1] != \"\" \n        or file_name_split[1][1]\
    \ != file_name_split[1][1][1] or file_name_split[1][1][1] != file_name_split[1][1][1][1]\n\
    \        or file_name_split[1][1][1] != file_name_split[1][1][1][1] or file_name_split[1][1][1][1]\
    \ != file_name_split[1][1][1][1][1]\n        or file_name_split[1][1][1][1] !=\
    \ file_name_split[1][1][1][1][1] or file_name_split[1][1][1][1][1] != file_name_split[1][1][1][1][1][1]\n\
    \        or file_name_split[1][1][1][1][1] != file_name_split[1][1][1][1][1][1]\
    \ or file_name_split[1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1]\n\
    \        or file_name_split[1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1]\
    \ or file_name_split[1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1]\n\
    \        or file_name_split[1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1]\
    \ or file_name_split[1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1]\n\
    \        or file_name_split[1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1]\
    \ or file_name_split[1][1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1][1]\n\
    \        or file_name_split[1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1][1]\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name_split\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljxovlce.jl:18\nin expression starting at\
    \ /tmp/tmpljxovlce.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_check_res\
    \ = file_name.match(r\"^[0-9]{3}\\.[a-z]{2,3}$\")\n    if file_name_check_res\
    \ == nil\n        file_name_check_res = file_name.match(r\"^[a-z]{2,3}\\.[0-9]{3}$\"\
    )\n    end\n    if file_name_check_res == nil\n        file_name_check_res = file_name.match(r\"\
    ^[a-z]{2,3}$\")\n    end\n    if file_name_check_res == nil\n        file_name_check_res\
    \ = file_name.match(r\"^[0-9]{3}$\")\n    end\n    if file_name_check_res == nil\n\
    \        file_name_check_res = file_name.match(r\"^[a-z]{2,3}\\.[a-z]{2,3}$\"\
    )\n    end\n    if file_name_check_res == nil\n        file_name_check_res = file_name.match(r\"\
    ^[a-z]{2,3}\\.[0-9]{3}\\.[a-z]{2,3}$\")\n    end\n    if file_name_check_res ==\
    \ nil\n        file_name_check_res = file_name.match(r\"^[a-z]{2,3}\\.[a-z]{2,3}\\\
    .[0-9]{3}$\")\n    end\n    if file_name_check_res == nil\n        file_name_check_res\
    \ = file_name.match(r\"^[a-z]{2,3}\\.[0-9]{3}\\.[a-z]{2,3}\\.[a-z]{2,3}$\")\n\
    \    end\n    if file_name_check_res == nil\n        file_name_check_res = file_name.match(r\"\
    ^[a-z]{2,3}\\.[a-z]{2,3}\\.[0-9]{3}\\.[a-z]{2,3}\\.[a-z]{2,3}$\")\n    end\n \
    \   if file_name_check_res == nil\n        file_name_check_res = file_name.match(r\"\
    ^[a-z]{2,3}\\.[0-9]{3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}$\"\
    )\n    end\n    if file_name_check_res == nil\n        file_name_check_res = file_name.match(r\"\
    ^[a-z]{2,3}\\.[a-z]{2,3}\\.[0-9]{3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}$\"\
    )\n    end\n    if file_name_check_res == nil\n        file_name_check_res = file_name.match(r\"\
    ^[a-z]{2,3}\\.[0-9]{3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\\
    .[a-z]{2,3}$\")\n    end\n    if file_name_check_res == nil\n        file_name_check_res\
    \ = file_name.match(r\"^[a-z]{2,3}\\.[a-z]{2,3}\\.[0-9]{3}\\.[a-z]{2,3}\\.[a-z]{2,3}\\\
    .[a-z]{2,\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95vjjy1x.jl:57\nin expression starting at\
    \ /tmp/tmp95vjjy1x.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[1] != [\"txt\", \"exe\", \"dll\"]\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[0].match(Regex(\"^[a-zA-Z]\"))\n        return \"No\"\n    \n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\"\
    )\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.dll\")\n</cell>\n\
    <code language=julia-1.5>\nfile_name_check(\"1example.txt\")\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"1example\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    1example.txt.exe\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.txt.exe\"\
    )\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.txt.exe\")\n\
    </cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.txt.exe\")\n</cell>\n\
    <code language=julia-1.5>\nfile_name_check(\"1example.txt.exe\")\n</cell>\n<code\
    \ language=julia-1.5>\nfile_name_check(\"1example.txt.exe\")\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"1example.txt.exe\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    1example.txt.exe\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.txt.exe\"\
    )\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.txt.exe\")\n\
    </cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.txt.exe\")\n</cell>\n\
    <code language=julia-1.5>\nfile_name_check(\"1example.txt.exe\")\n</cell>\n<code\
    \ language=julia-1.5>\nfile_name_check(\"1example.txt.exe\")\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"1example.txt.exe\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    1example.txt.exe\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.txt.exe\"\
    )\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.txt.exe\")\n\
    </cell>\n<code language=julia-1.5>\nfile_name_check(\"1example\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph84x4nb7.jl:27\nin expression starting at\
    \ /tmp/tmph84x4nb7.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    end\n    if file_name.contains(\"\
    .\")\n        return \"No\"\n    end\n    if file_name.substring(0,1) != \"a\"\
    \n        return \"No\"\n    end\n    if file_name.substring(0,1) != \"z\"\n \
    \       return \"No\"\n    end\n    if file_name.substring(0,1) != \"A\"\n   \
    \     return \"No\"\n    end\n    if file_name.substring(0,1) != \"Z\"\n     \
    \   return \"No\"\n    end\n    if file_name.substring(0,2) != \"00\"\n      \
    \  return \"No\"\n    end\n    if file_name.substring(0,3) != \"example\"\n  \
    \      return \"No\"\n    end\n    if file_name.substring(0,4) != \"example\"\n\
    \        return \"No\"\n    end\n    if file_name.substring(0,5) != \"example\"\
    \n        return \"No\"\n    end\n    if file_name.substring(0,6) != \"example\"\
    \n        return \"No\"\n    end\n    if file_name.substring(0,7) != \"example\"\
    \n        return \"No\"\n    end\n    if file_name.substring(0,8) != \"example\"\
    \n        return \"No\"\n    end\n    if file_name.substring(0,9) != \"example\"\
    \n        return \"No\"\n    end\n    if file_name.substring(0,10) != \"example\"\
    \n        return \"No\"\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygu3gxt1.jl:64\nin expression starting at\
    \ /tmp/tmpygu3gxt1.jl:64\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjdy_159.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjdy_159.jl:1\n\
    in expression starting at /tmp/tmpyjdy_159.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    # your code\
    \ here\n    \n    return \nend\n</cell>\n<code language=julia-1.5>\n# run this\
    \ cell to test your function\nfile_name_check(\"example.txt\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string representing a file's name and\
    \ returns 'Yes' if the file's name \nstarts with 'A'-'Z', and returns 'No' otherwise.\n\
    Examples:\nfile_name_check(\"Aexample.txt\") # => 'Yes'\nfile_name_check(\"example.txt\"\
    ) # => 'No'\nfile_name_check(\"1example.txt\") # => 'No'\nfile_name_check(\"1example\"\
    ) # => 'No'\nfile_name_check(\"example\") # => 'No'\nfile_name_check(\"example.txt\"\
    ) # => 'No'\nfile_name_check(\"example1\") # => 'No'\nfile_name_check(\"example1.txt\"\
    ) # => 'No'\nfile_name_check(\"example1.exe\") # => 'No'\nfile_name_check(\"example1.exe.txt\"\
    ) # => 'No'\nfile_name_check(\"example1.exe.txt.exe\") # => 'No'\nfile_name_check(\"\
    example1.exe.txt.exe.txt\") # => 'No'\nfile_name_check(\"example1.exe.txt.exe.txt.exe\"\
    ) # => 'No'\nfile_name_check(\"example1.exe.txt.exe.txt.exe.exe\") # => 'No'\n\
    file_name_check(\"example1.exe.txt.exe.txt.exe.exe.txt\") # => 'No'\nfile_name_check(\"\
    example1.exe.txt.exe.txt.exe.exe.txt.exe\") # => 'No'\nfile_name_check(\"example1.exe.txt.exe.txt.exe.exe.txt.exe.exe\"\
    ) # => 'No'\nfile_name_check(\"example1.exe.txt.exe.txt.exe.exe.txt.exe.exe.exe\"\
    ) # => 'No'\nfile_name_check(\"example1.exe.txt.exe.txt.exe.exe.txt.exe.exe.exe.exe\"\
    ) # => 'No'\nfile_name_check(\"example1.exe.txt.exe.txt.exe.exe.txt.exe.exe.exe.exe.exe\"\
    ) # => 'No'\nfile_name_check(\"example1.exe.txt.exe.txt.exe.exe.txt.exe.exe.exe.exe.exe.exe\"\
    ) # => 'No'\nfile_name_check(\"example1.exe.txt.exe.txt.exe.exe.txt.exe.exe.exe.exe.exe.exe.exe\"\
    ) # => 'No'\nfile_name_check(\"example1.exe.txt.exe.txt.exe.exe.txt.exe.exe.exe.exe.exe.exe.exe.exe\"\
    ) \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2too28t.jl:21\nin expression starting at\
    \ /tmp/tmpe2too28t.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) != 2 or file_name_split[1]\
    \ != \"\" or file_name_split[1][1] != \"\" \n        or file_name_split[1][1]\
    \ != file_name_split[1][1][1] or file_name_split[1][1][1] != \"a\" \n        or\
    \ file_name_split[1][1][1] != \"b\" or file_name_split[1][1][1] != \"c\" or file_name_split[1][1][1]\
    \ != \"d\" \n        or file_name_split[1][1][1] != \"e\" or file_name_split[1][1][1]\
    \ != \"f\" or file_name_split[1][1][1] != \"g\" \n        or file_name_split[1][1][1]\
    \ != \"h\" or file_name_split[1][1][1] != \"i\" or file_name_split[1][1][1] !=\
    \ \"j\" \n        or file_name_split[1][1][1] != \"k\" or file_name_split[1][1][1]\
    \ != \"l\" or file_name_split[1][1][1] != \"m\" \n        or file_name_split[1][1][1]\
    \ != \"n\" or file_name_split[1][1][1] != \"o\" or file_name_split[1][1][1] !=\
    \ \"p\" \n        or file_name_split[1][1][1] != \"q\" or file_name_split[1][1][1]\
    \ != \"r\" or file_name_split[1][1][1] != \"s\" \n        or file_name_split[1][1][1]\
    \ != \"t\" or file_name_split[1][1][1] != \"u\" or file_name_split[1][1][1] !=\
    \ \"v\" \n        or file_name_split[1][1][1] != \"w\" or file_name_split[1][1][1]\
    \ != \"x\" or file_name_split[1][1][1] != \"y\" \n        or file_name_split[1][1][1]\
    \ != \"z\" or file_name_split[1][1][1] != \"A\" or file_name_split[1][1][1] !=\
    \ \"B\" \n        or file_name_split[1][1][1] != \"C\" or file_name_split[1][1][1]\
    \ != \"D\" or file_name_split[1][1][1] != \"E\" \n        or file_name_split[1][1][1]\
    \ != \"F\" or file_name_split[1][1][1] != \"G\" or file_name_split[1][1][1] !=\
    \ \"H\" \n        or file_name_split[1][1][1] != \"I\" or file_name_split[1][1][1]\
    \ != \"J\" or file_name_split[1][1][1] != \"K\" \n        or file_name_split[1][1][1]\
    \ != \"L\" or file_name_split[1][1][1] != \"M\" or file_name_split[1][1][1] !=\
    \ \"N\" \n        or file_name_split[1][1][1] != \"O\" or file_name_split[1][1][1]\
    \ != \"P\" or file_name_split[1][1][1] != \"Q\" \n        or file_name_split[1][1][1]\
    \ != \"R\" or file_name_split[1][1][1] != \"S\" or file_name_split[1][1][1] !=\
    \ \"T\" \n        or file_name_split[1][1][1] != \"U\" or file_name_split[1][1][1]\
    \ != \"V\" or \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name_split\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjxlce7pj.jl:18\nin expression starting at\
    \ /tmp/tmpjxlce7pj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5yhwcqf0.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5yhwcqf0.jl:1\n\
    in expression starting at /tmp/tmp5yhwcqf0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0o0k2_5j.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0o0k2_5j.jl:1\n\
    in expression starting at /tmp/tmp0o0k2_5j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc6ff8wz7.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc6ff8wz7.jl:1\n\
    in expression starting at /tmp/tmpc6ff8wz7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp62olmz94.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp62olmz94.jl:1\n\
    in expression starting at /tmp/tmp62olmz94.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn1eyoq8k.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn1eyoq8k.jl:1\n\
    in expression starting at /tmp/tmpn1eyoq8k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.count(\"\
    .\")>1 or file_name.count(\".\")==1 and file_name.split(\".\")[1]!=\"txt\" or\
    \ file_name.split(\".\")[1]!=\"exe\" or file_name.split(\".\")[1]!=\"dll\"\n \
    \       return \"No\"\n    else\n        return \"Yes\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfile_name_check(\"example.txt\")\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"1example.dll\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkckmj1kp.jl:17\nin expression starting at /tmp/tmpkckmj1kp.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv8qkquih.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv8qkquih.jl:1\n\
    in expression starting at /tmp/tmpv8qkquih.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm8nw7_sj.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm8nw7_sj.jl:1\n\
    in expression starting at /tmp/tmpm8nw7_sj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.count(\"\
    .\")>2 || file_name.count(\".\")==1 && file_name.split(\".\")[1]!=\"txt\" && file_name.split(\"\
    .\")[1]!=\"exe\" && file_name.split(\".\")[1]!=\"dll\"\n        return \"No\"\n\
    \    else\n        return \"Yes\"\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    # Test your function with the example file name\nfile_name_check(\"example.txt\"\
    )\n</cell>\n<text>\nQuestion 3\nWrite a function that takes a string representing\
    \ a file's name, and returns the file's extension.\n    A file's extension is\
    \ considered to be the part of the string that comes after the last '.' character.\n\
    \    Examples:\n    file_name_ext( \"example.txt\" ) # => \"txt\"\n    file_name_ext(\
    \ \"example.exe\" ) # => \"exe\"\n    file_name_ext( \"example.tar.gz\" ) # =>\
    \ \"tar.gz\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext( \"\
    example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name_ext( \"example\" ) # => \"\"\n    file_name_ext(\
    \ \"example\" ) # => \"\"\n    file_name\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_1l17im.jl:23\nin expression starting at\
    \ /tmp/tmpj_1l17im.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.count(\"\
    .\")>3 || file_name.count(\".\")==0 \n        || file_name.split(\".\")[1]==\"\
    \" || file_name.split(\".\")[1]!=\"txt\" || \n        file_name.split(\".\")[1]!=\"\
    exe\" || file_name.split(\".\")[1]!=\"dll\"\n        \n        return \"No\"\n\
    \    else\n        return \"Yes\"\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string representing a file's name, and returns the\
    \ file's extension.\n    A file's extension is considered to be valid if and only\
    \ if all the following conditions \n    are met:\n    - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    - The file's name contains\
    \ exactly one dot '.'\n    - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") #\
    \ => 'txt'\n    file_name_check(\"1example.dll\") # => 'dll'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74gz277o.jl:17\nin expression starting at\
    \ /tmp/tmp74gz277o.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) != 2 or file_name_split[1]\
    \ != \"\" or file_name_split[1][1] != \"\" \n        or file_name_split[1][1]\
    \ != file_name_split[1][1][1] or \n        file_name_split[1][1][1] != file_name_split[1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1] != file_name_split[1][1][1][1][1] or\
    \ \n        file_name_split[1][1][1][1][1] != file_name_split[1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \n        file_name_split[1][1][1][1][1][1][1][1][1][1][1][1] != file_name_split[1][1][1][1][1][1][1][1][1][1][1][1][1][1][1]\
    \ or \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name_split\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz7enn_o0.jl:18\nin expression starting at\
    \ /tmp/tmpz7enn_o0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[1] != ['txt', 'exe', 'dll']\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[0].length < 1 || file_name.split(\".\")[0].length > 3\n        return \"\
    No\"\n    \n    if file_name.split(\".\")[0][0] !~ /^[a-Z]/\n        return \"\
    No\"\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name\
    \ should start with a latin alphapet letter)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string representing a file's name, and returns the file's\
    \ extension.\nExamples:\nfile_name_ext(\"example.txt\") # => 'txt'\nfile_name_ext(\"\
    1example.dll\") # => 'dll'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"\
    1example\") # => 'No'\nfile_name_ext(\"example.txt\") # => 'No'\nfile_name_ext(\"\
    example\") # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\"\
    ) # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"example\")\
    \ # => 'No'\nfile_name_ext(\"example\") # => 'No'\nfile_name_ext(\"\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmph4fp_z_w.jl:19\nin expression\
    \ starting at /tmp/tmph4fp_z_w.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0eb0fxkd.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0eb0fxkd.jl:1\n\
    in expression starting at /tmp/tmp0eb0fxkd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.count(\"\
    .\")>2 or file_name.count(\".\")<1 or file_name.count(\".\")==0 or file_name.starts_with(\"\
    0\") or file_name.starts_with(\"9\") or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"\
    _\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"\
    -\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\"\
    .\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"\
    -\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\"\
    .\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"\
    -\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\"\
    .\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"\
    -\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\"\
    .\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"\
    -\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\"\
    .\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"\
    -\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\"\
    .\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"\
    -\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\"\
    .\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"\
    -\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\"\
    .\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"\
    -\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\"\
    .\" or file_name.substring(0,1)==\"-\" or file_name.substring(0,1)==\".\" or file_name.substring(0,1)==\"\
    \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk0d2sfci.jl:17\nin expression starting at /tmp/tmpk0d2sfci.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.count(\"\
    .\")>2 || file_name.count(\".\")<1 || file_name.substring(0,1)!=\"a\" || file_name.substring(0,1)!=\"\
    A\" || file_name.substring(0,1)!=\"z\" || file_name.substring(0,1)!=\"Z\" || file_name.substring(file_name.indexOf(\"\
    .\"),file_name.length)!=\"txt\" || file_name.substring(file_name.indexOf(\".\"\
    ),file_name.length)!=\"exe\" || file_name.substring(file_name.indexOf(\".\"),file_name.length)!=\"\
    dll\"\n        return \"No\"\n    else\n        return \"Yes\"\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\") # => 'Yes'\n\
    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n</cell>\n<text>\nExercise 2\nWrite a function which takes\
    \ a string representing a file's name, and returns\n    'Yes' if the the file's\
    \ name is valid, and returns 'No' otherwise.\n    A file's name is considered\
    \ to be valid if and only if all the following conditions \n    are met:\n   \
    \ - There should not be more than three digits ('0'-'9') in the file's name.\n\
    \    - The file's name contains exactly one dot '.'\n    - The substring before\
    \ the dot should not be empty, and it starts with a letter from \n    the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\"\
    ) # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should\
    \ start with a latin alphapet letter)\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph25g1ux0.jl:23\nin expression starting at\
    \ /tmp/tmph25g1ux0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.count(\"\
    .\")>3 || file_name.count(\".\")==0 \n        || file_name.split(\".\")[1]==\"\
    \" || file_name.split(\".\")[1]!=\"txt\" || \n        file_name.split(\".\")[1]!=\"\
    exe\" || file_name.split(\".\")[1]!=\"dll\"\n        \n        return \"No\"\n\
    \    else\n        return \"Yes\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"example.txt\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string representing a file's name, and returns the file's extension.\n\
    A file's extension is considered to be valid if and only if all the following\
    \ conditions are met:\n- The file's name contains exactly one dot '.'\n- The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"\
    example.txt\") # => 'txt'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.txt\") # => 'txt'\nfile_name_check(\"1example.exe\") # => 'exe'\nfile_name_check(\"\
    1example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example.txt\") # => 'txt'\nfile_name_check(\"example\") # => 'No' (the name should\
    \ start with a latin alphapet letter)\nfile_name_check(\"example\") # => 'No'\
    \ (the name should start with a latin alphapet letter)\nfile_name_check(\"example\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should start \nusing Test\n\n@testset begin\n\n\
    candidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\
    \t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfe0x50p.jl:17\nin expression starting at\
    \ /tmp/tmpcfe0x50p.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_check\
    \ = if file_name.size < 3 || file_name.size > 10\n                        then\
    \ \"No\"\n                        else if file_name.split(\".\")[1] != \"\"\n\
    \                                && file_name.split(\".\")[1] != \"exe\"\n   \
    \                             && file_name.split(\".\")[1] != \"dll\"\n      \
    \                          && file_name.split(\".\")[1] != \"txt\"\n         \
    \                       && file_name.split(\".\")[1] != \"py\"\n             \
    \                   && file_name.split(\".\")[1] != \"pyc\"\n                \
    \                && file_name.split(\".\")[1] != \"html\"\n                  \
    \              && file_name.split(\".\")[1] != \"css\"\n                     \
    \           && file_name.split(\".\")[1] != \"jpg\"\n                        \
    \        && file_name.split(\".\")[1] != \"jpeg\"\n                          \
    \      && file_name.split(\".\")[1] != \"png\"\n                             \
    \   && file_name.split(\".\")[1] != \"gif\"\n                                &&\
    \ file_name.split(\".\")[1] != \"mp3\"\n                                && file_name.split(\"\
    .\")[1] != \"mp4\"\n                                && file_name.split(\".\")[1]\
    \ != \"avi\"\n                                && file_name.split(\".\")[1] !=\
    \ \"mpg\"\n                                && file_name.split(\".\")[1] != \"\
    mpeg\"\n                                && file_name.split(\".\")[1] != \"ogg\"\
    \n                                && file_name.split(\".\")[1] != \"wav\"\n  \
    \                              && file_name.split(\".\")[1] != \"mp2\"\n     \
    \                           && file_name.split(\".\")[1] != \"mp1\"\n        \
    \                        && file_name.split(\".\")[1] != \"swf\"\n           \
    \                     && file_name.split(\".\")[1] != \"flv\"\n              \
    \                  && file_name.split(\".\")[1] != \"avi\"\n                 \
    \               && file_name.split(\".\")[1] != \"mov\"\n                    \
    \            && file_name.split(\".\")[1] != \"wmv\"\n                       \
    \         && file_name.split(\".\")[1] != \"mp4\"\n                          \
    \      && file_name.split(\".\")[1] != \"mp3\"\n                             \
    \   && file_name.split(\".\")[1] != \"ogg\"\n                                &&\
    \ file_name.split(\".\")[1] != \"wav\"\n                                && file_name.split(\"\
    .\")[1] != \"mp2\"\n                                && file_name.split(\".\")[1]\
    \ != \"mp1\"\n                                && file_name.split(\".\")[1] !=\
    \ \"swf\"\n                                && file_name.split(\".\")[1] != \"\
    flv\"\n                                && file_name.split(\".\")[1] != \"avi\"\
    \n                                && file_name.split(\".\")[1] != \"mov\"\n  \
    \                              && file_name.split(\".\")[1] != \"wmv\"\n     \
    \                           && file_name.split(\".\")[1] != \"mp4\"\n        \
    \                        && file_name.split(\".\")[1] != \"mp3\"\n           \
    \                     && file_name.split(\".\")[1] != \"ogg\"\n              \
    \                  && file_name.split(\".\")[1] != \"wav\"\n                 \
    \               && file_name.split(\".\")[1] != \"mp2\"\n                    \
    \            && file_name.split(\".\")[1] != \"mp1\"\n                       \
    \         && file_name.split(\".\")[1] != \"swf\"\n                          \
    \      && file_name.split(\".\")[1] != \"flv\"\n                             \
    \   && file_name.split(\".\")[1] != \"avi\"\n                                &&\
    \ file_name.split(\".\")[1] != \"mov\"\n                                && file_name.split(\"\
    .\")[1] != \"wmv\"\n                                \nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp6d3tz6n.jl:17\nin expression starting at /tmp/tmpp6d3tz6n.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp09rj8xhk.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp09rj8xhk.jl:1\n\
    in expression starting at /tmp/tmp09rj8xhk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ <= 3 || file_name.contains(\".\") || file_name.substring(0,1) != \"a\" || file_name.substring(0,1)\
    \ != \"A\" || file_name.substring(0,1) != \"b\" || file_name.substring(0,1) !=\
    \ \"B\" || file_name.substring(0,1) != \"c\" || file_name.substring(0,1) != \"\
    C\" || file_name.substring(0,1) != \"d\" || file_name.substring(0,1) != \"D\"\
    \ || file_name.substring(0,1) != \"e\" || file_name.substring(0,1) != \"E\" ||\
    \ file_name.substring(0,1) != \"f\" || file_name.substring(0,1) != \"F\" || file_name.substring(0,1)\
    \ != \"g\" || file_name.substring(0,1) != \"G\" || file_name.substring(0,1) !=\
    \ \"h\" || file_name.substring(0,1) != \"H\" || file_name.substring(0,1) != \"\
    i\" || file_name.substring(0,1) != \"I\" || file_name.substring(0,1) != \"j\"\
    \ || file_name.substring(0,1) != \"J\" || file_name.substring(0,1) != \"k\" ||\
    \ file_name.substring(0,1) != \"K\" || file_name.substring(0,1) != \"l\" || file_name.substring(0,1)\
    \ != \"L\" || file_name.substring(0,1) != \"m\" || file_name.substring(0,1) !=\
    \ \"M\" || file_name.substring(0,1) != \"n\" || file_name.substring(0,1) != \"\
    N\" || file_name.substring(0,1) != \"o\" || file_name.substring(0,1) != \"O\"\
    \ || file_name.substring(0,1) != \"p\" || file_name.substring(0,1) != \"P\" ||\
    \ file_name.substring(0,1) != \"q\" || file_name.substring(0,1) != \"Q\" || file_name.substring(0,1)\
    \ != \"r\" || file_name.substring(0,1) != \"R\" || file_name.substring(0,1) !=\
    \ \"s\" || file_name.substring(0,1) != \"S\" || file_name.substring(0,1) != \"\
    t\" || file_name.substring(0,1) != \"T\" || file_name.substring(0,1) != \"u\"\
    \ || file_name.substring(0,1) != \"U\" || file_name.substring(0,1) != \"v\" ||\
    \ file_name.substring(0,1) != \"V\" || file_name.substring(0,1) != \"w\" || file_name.substring(0,1)\
    \ != \"W\" || file_name.substring(0,1) != \"x\" || file_name.substring(0,1) !=\
    \ \"X\" || file_name.substring(0,1) != \"y\" || file_name.substring(0,1) != \"\
    Y\" || file_name.substring(0,1) != \"z\" || file_name.substring(0,1) != \"Z\"\n\
    \    \n        return \"No\"\n    else\n        return \"Yes\"\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\")\n</cell>\n\
    <code language=julia-1.5>\nfile_name_check(\"1example.dll\")\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"example\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp12fk6sn2.jl:23\nin expression starting at\
    \ /tmp/tmp12fk6sn2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) > 3 || length(file_name_split)\
    \ < 1 || file_name_split[1] != \"\" \n        || file_name_split[1][1] != lower('a')\
    \ || file_name_split[1][1] != lower('A')\n        || file_name_split[1][2] !=\
    \ lower('z') || file_name_split[1][2] != lower('Z')\n        || file_name_split[2]\
    \ != lower('txt') || file_name_split[2] != lower('exe') || file_name_split[2]\
    \ != lower('dll')\n    \n        return \"No\"\n    else\n        return \"Yes\"\
    \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ representing a file's name and returns 'Yes' if the file's name is valid, and\
    \ returns 'No' otherwise.\nA file's name is considered to be valid if and only\
    \ if all the following conditions \nare met:\n- There should not be more than\
    \ three digits ('0'-'9') in the file's name.\n- The file's name contains exactly\
    \ one dot '.'\n- The substring before the dot should not be empty, and it starts\
    \ with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"\
    example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name\
    \ should start with a latin alphapet letter)\nfile_name_check(\"1example\") #\
    \ => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    1example.txt\") # => 'No' (the name should start with a latin alphapet letter)\n\
    file_name_check(\"1example.txt.exe\") # => 'No' (the name should start with a\
    \ latin alphapet letter)\nfile_name_check(\"1example.txt.exe.txt\") # => 'No'\
    \ (the name should start with a latin alphapet letter)\nfile_name_check(\"1example.txt.exe.exe\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    1example.txt.exe.exe.txt\") # => 'No' (the name should start with a latin alphapet\
    \ letter)\nfile_name_check(\"1example.txt.exe.exe.exe\") # => 'No' (the name should\
    \ start with a latin alphapet letter)\nfile_name_check(\"1example.txt.exe.exe.exe.txt\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\nfile_name\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqoapsq9.jl:19\nin expression starting at\
    \ /tmp/tmpoqoapsq9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppxz0w0it.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppxz0w0it.jl:1\n\
    in expression starting at /tmp/tmppxz0w0it.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_check_regex\
    \ = r\"^[0-9]{0,3}\\.[a-zA-Z]{0,3}$\"\n    if re.match(file_name_check_regex,\
    \ file_name) == None:\n        return \"No\"\n    else:\n        return \"Yes\"\
    \nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\")\n\
    </cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.dll\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string representing a file's\
    \ name, and returns the file's extension.\n    A file's extension is considered\
    \ to be valid if and only if all the following conditions \n    are met:\n   \
    \ - There should not be more than three digits ('0'-'9') in the file's extension.\n\
    \    - The file's extension contains exactly one dot '.'\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'txt'\n    file_name_check(\"1example.dll\"\
    ) # => 'dll'\n    file_name_check(\"1example.exe\") # => 'exe'\n    file_name_check(\"\
    1example\") # => 'No' (the extension should contain only latin alphapet letters)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9w1vf9t.jl:18\nin expression starting at\
    \ /tmp/tmpt9w1vf9t.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp22jrobl5.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp22jrobl5.jl:1\n\
    in expression starting at /tmp/tmp22jrobl5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) > 3 || \n  \
    \      file_name_split[1] != \"\" ||\n        file_name_split[1][1] != \"\" ||\n\
    \        file_name_split[2] != \"\" ||\n        file_name_split[2] != \"txt\"\
    \ ||\n        file_name_split[2] != \"exe\" ||\n        file_name_split[2] !=\
    \ \"dll\"\n    \n    then return \"No\"\n    else return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string representing\
    \ a file's name, and returns\n    'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n    A file's name is considered to be valid if and only if\
    \ all the following conditions \n    are met:\n    - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    - The file's name contains\
    \ exactly one dot '.'\n    - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2l0bx4wh.jl:26\nin expression starting at /tmp/tmp2l0bx4wh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3kwz0df1.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3kwz0df1.jl:1\n\
    in expression starting at /tmp/tmp3kwz0df1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # your code here\n\
    \    \nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes a string\
    \ representing a file's name, and returns\n    'Yes' if the the file's name is\
    \ valid, and returns 'No' otherwise.\n    A file's name is considered to be valid\
    \ if and only if all the following conditions \n    are met:\n    - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    - The file's\
    \ name contains exactly one dot '.'\n    - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n\
    \    file_name_check(\"1example.dll\") # => 'No' (the name should start with a\
    \ latin alphapet letter)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwp9d2rne.jl:19\nin expression starting at\
    \ /tmp/tmpwp9d2rne.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.count(\"\
    .\")>3 || file_name.count(\".\")==0 \n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,1)==\"\
    .\"\n        || file_name\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeu6jy1ou.jl:17\nin expression starting at\
    \ /tmp/tmpeu6jy1ou.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp248tci7.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp248tci7.jl:1\n\
    in expression starting at /tmp/tmpp248tci7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvyvbrf2b.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvyvbrf2b.jl:1\n\
    in expression starting at /tmp/tmpvyvbrf2b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n# Run this cell to check your\
    \ solution\nfile_name_check(\"example.txt\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string representing a file's name, and returns\n   \
    \ 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's\
    \ name is considered to be valid if and only if all the following conditions \n\
    \    are met:\n    - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n    - The file's name contains exactly one dot '.'\n    - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"\
    example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiulijqxh.jl:19\nin expression starting at\
    \ /tmp/tmpiulijqxh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.count(\"\
    .\")>3 || file_name.count(\".\")==0 \n        || file_name.substring(0,1)==\"\
    _\" || file_name.substring(0,1)==\".\"\n        || file_name.substring(0,2)==\"\
    __\" || file_name.substring(0,2)==\"_\"\n        || file_name.substring(0,3)==\"\
    ____\" || file_name.substring(0,3)==\"__\"\n        || file_name.substring(0,4)==\"\
    _____\" || file_name.substring(0,4)==\"__\"\n        || file_name.substring(0,5)==\"\
    ________\" || file_name.substring(0,5)==\"__\"\n        || file_name.substring(0,6)==\"\
    _________\" || file_name.substring(0,6)==\"__\"\n        || file_name.substring(0,7)==\"\
    __________\" || file_name.substring(0,7)==\"__\"\n        || file_name.substring(0,8)==\"\
    ____________\" || file_name.substring(0,8)==\"__\"\n        || file_name.substring(0,9)==\"\
    _____________\" || file_name.substring(0,9)==\"__\"\n        || file_name.substring(0,10)==\"\
    _______________\" || file_name.substring(0,10)==\"__\"\n        || file_name.substring(0,11)==\"\
    ______________\" || file_name.substring(0,11)==\"__\"\n        || file_name.substring(0,12)==\"\
    _____________\" || file_name.substring(0,12)==\"__\"\n        || file_name.substring(0,13)==\"\
    ______________\" || file_name.substring(0,13)==\"__\"\n        || file_name.substring(0,14)==\"\
    _____________\" || file_name.substring(0,14)==\"__\"\n        || file_name.substring(0,15)==\"\
    ______________\" || file_name.substring(0,15)==\"__\"\n        || file_name.substring(0,16)==\"\
    _____________\" || file_name.substring(0,16)==\"__\"\n        || file_name.substring(0,17)==\"\
    ______________\" || file_name.substring(0,17)==\"__\"\n        || file_name.substring(0,18)==\"\
    _____________\" || file_name.substring(0,18)==\"__\"\n        || file_name.substring(0,19)==\"\
    ______________\" || file_name.substring(0,19)==\"__\"\n        || file_name.substring(0,20)==\"\
    _____________\" || file_name.substring(0,20)==\"__\"\n        || file_name.substring(0,21)==\"\
    ______________\" || file_name.substring(0,21)==\"__\"\n        || file_name.substring(0,22)==\"\
    _____________\" || file_name.substring(0,22)==\"__\"\n        || file_name.substring(0,23)==\"\
    ______________\" || file_name.substring(0,23)==\"__\"\n        || file_name.substring(0,24)==\"\
    _____________\" || file_name.substring(0,24)==\"\nusing Test\n\n@testset begin\n\
    \ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\"\
    )\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\"\
    ) == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"\
    _Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\") == \"No\")\n\t@test(candidate(\"\
    /this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"this_is_valid.wow\") ==\
    \ \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"Yes\")\n\t@test(candidate(\"\
    this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"#this2_i4s_5valid.ten\"\
    ) == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\") == \"No\")\n\t@test(candidate(\"\
    this_is_12valid.6exe4.txt\") == \"No\")\n\t@test(candidate(\"all.exe.txt\") ==\
    \ \"No\")\n\t@test(candidate(\"I563_No.exe\") == \"Yes\")\n\t@test(candidate(\"\
    Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"no_one#knows.dll\") == \"\
    Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\")\n\t@test(candidate(\"\
    I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\") == \"No\")\n\t\
    @test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"_f4indsartal132.\"\
    ) == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"s.\"\
    ) == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1czde8nt.jl:18\nin expression starting at\
    \ /tmp/tmp1czde8nt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.match('^[0-9]{3}\\\
    .') && file_name.match('\\.[a-zA-Z]+$') && file_name.match('^[a-zA-Z]+') && file_name.match('\\\
    .[a-zA-Z]+$') && file_name.match('\\.[a-zA-Z]+$') && file_name.match('\\.[a-zA-Z]+$')\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string representing\
    \ a file's name, and returns the file's extension.\nA file's extension is considered\
    \ to be valid if and only if all the following conditions are met:\n- There should\
    \ not be more than three digits ('0'-'9') in the file's extension.\n- The file's\
    \ extension contains exactly one dot '.'\n- The substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\nExamples:\nfile_name_extension(\"example.txt\") # => 'txt'\nfile_name_extension(\"\
    1example.dll\") # => 'exe'\nfile_name_extension(\"example.exe\") # => 'exe'\n\
    file_name_extension(\"1example.dll\") # => 'exe'\nfile_name_extension(\"example.txt\"\
    ) # => 'txt'\nfile_name_extension(\"example\") # => 'No'\nfile_name_extension(\"\
    1example\") # => 'No'\nfile_name_extension(\"example\") # => 'No'\nfile_name_extension(\"\
    1example\") # => 'No'\nfile_name_extension(\"example\") # => 'No'\nfile_name_extension(\"\
    1example\") # => 'No'\nfile_name_extension(\"example\") # => 'No'\nfile_name_extension(\"\
    1example\") # => 'No'\nfile_name_extension(\"example\") # => 'No'\nfile_name_extension(\"\
    1example\") # => 'No'\nfile_name_extension(\"example\") # => 'No'\nfile_name_extension(\"\
    1example\") # => 'No'\nfile_name_extension(\"example\") # => 'No'\nfile_name_extension(\"\
    1example\") # => 'No'\nfile_name_extension(\"example\") # => 'No'\nfile_name_extension(\"\
    1example\") # => 'No'\nfile_name_extension(\"example\") # => 'No'\nfile_name_extension(\"\
    1example\") # => 'No'\nfile_name_extension\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprxu92pvy.jl:16\nin expression starting at /tmp/tmprxu92pvy.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) > 2 || \n  \
    \      file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split[1] != \"\" ||\n        file_name_split[1] != \"\" ||\n\
    \        file_name_split\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9y4v4snt.jl:1\nin expression starting at /tmp/tmp9y4v4snt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt5f0gfrk.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt5f0gfrk.jl:1\n\
    in expression starting at /tmp/tmpt5f0gfrk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[1] != \"\"\n        return \"No\"\n    \n    if file_name.split(\".\")[1]\
    \ == \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"No\"\n\
    \    \n    if file_name.split(\".\")[1] == \"txt\"\n        return \"Yes\"\n \
    \   \n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    example.txt\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.dll\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string representing\
    \ a file's name, and returns\n    'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n    A file's name is considered to be valid if and only if\
    \ all the following conditions \n    are met:\n    - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    - The file's name contains\
    \ exactly one dot '.'\n    - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t\
    @test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6anc7jy0.jl:30\nin expression starting at\
    \ /tmp/tmp6anc7jy0.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf9g_g1pk.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf9g_g1pk.jl:1\n\
    in expression starting at /tmp/tmpf9g_g1pk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ representing a file's name, and returns\n    'Yes' if the the file's name is\
    \ valid, and returns 'No' otherwise.\n    A file's name is considered to be valid\
    \ if and only if all the following conditions \n    are met:\n    - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    - The file's\
    \ name contains exactly one dot '.'\n    - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n\
    \    file_name_check(\"1example.dll\") # => 'No' (the name should start with a\
    \ latin alphapet letter)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjuyek5en.jl:19\nin expression starting at\
    \ /tmp/tmpjuyek5en.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<text>\nSolution\nRun the cell below to test your solution.\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49g0jyzz.jl:19\nin expression starting at\
    \ /tmp/tmp49g0jyzz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1i1j__g9.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1i1j__g9.jl:1\n\
    in expression starting at /tmp/tmp1i1j__g9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqx9uelf3.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqx9uelf3.jl:1\n\
    in expression starting at /tmp/tmpqx9uelf3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ <= 3 || file_name.contains(\".\") || file_name.substring(0,1) != \"a\" || file_name.substring(0,1)\
    \ != \"A\" || file_name.substring(0,1) != \"b\" || file_name.substring(0,1) !=\
    \ \"B\" || file_name.substring(0,1) != \"c\" || file_name.substring(0,1) != \"\
    C\" || file_name.substring(0,1) != \"d\" || file_name.substring(0,1) != \"D\"\
    \ || file_name.substring(0,1) != \"e\" || file_name.substring(0,1) != \"E\" ||\
    \ file_name.substring(0,1) != \"f\" || file_name.substring(0,1) != \"F\" || file_name.substring(0,1)\
    \ != \"g\" || file_name.substring(0,1) != \"G\" || file_name.substring(0,1) !=\
    \ \"h\" || file_name.substring(0,1) != \"H\" || file_name.substring(0,1) != \"\
    i\" || file_name.substring(0,1) != \"I\" || file_name.substring(0,1) != \"j\"\
    \ || file_name.substring(0,1) != \"J\" || file_name.substring(0,1) != \"k\" ||\
    \ file_name.substring(0,1) != \"K\" || file_name.substring(0,1) != \"l\" || file_name.substring(0,1)\
    \ != \"L\" || file_name.substring(0,1) != \"m\" || file_name.substring(0,1) !=\
    \ \"M\" || file_name.substring(0,1) != \"n\" || file_name.substring(0,1) != \"\
    N\" || file_name.substring(0,1) != \"o\" || file_name.substring(0,1) != \"O\"\
    \ || file_name.substring(0,1) != \"p\" || file_name.substring(0,1) != \"P\" ||\
    \ file_name.substring(0,1) != \"q\" || file_name.substring(0,1) != \"Q\" || file_name.substring(0,1)\
    \ != \"r\" || file_name.substring(0,1) != \"R\" || file_name.substring(0,1) !=\
    \ \"s\" || file_name.substring(0,1) != \"S\" || file_name.substring(0,1) != \"\
    t\" || file_name.substring(0,1) != \"T\" || file_name.substring(0,1) != \"u\"\
    \ || file_name.substring(0,1) != \"U\" || file_name.substring(0,1) != \"v\" ||\
    \ file_name.substring(0,1) != \"V\" || file_name.substring(0,1) != \"w\" || file_name.substring(0,1)\
    \ != \"W\" || file_name.substring(0,1) != \"x\" || file_name.substring(0,1) !=\
    \ \"X\" || file_name.substring(0,1) != \"y\" || file_name.substring(0,1) != \"\
    Y\" || file_name.substring(0,1) != \"z\" || file_name.substring(0,1) != \"Z\"\
    \ \n    then return \"No\"\n    else return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function which takes a string representing \nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdkzyztb8.jl:17\nin expression starting at /tmp/tmpdkzyztb8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp22mljteq.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp22mljteq.jl:1\n\
    in expression starting at /tmp/tmp22mljteq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) == 3 && file_name_split[1]\
    \ != \"\" && file_name_split[1][1] in \"0123456789\" && file_name_split[2] !=\
    \ \"\" && file_name_split[2][1] in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    \n    else \n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"example.txt\")\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    1example.dll\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ representing a file's name and returns 'Yes' if the file's name is valid, and\
    \ returns 'No' otherwise.\nA file's name is considered to be valid if and only\
    \ if all the following conditions \nare met:\n- There should not be more than\
    \ three digits ('0'-'9') in the file's name.\n- The file's name contains exactly\
    \ one dot '.'\n- The substring before the dot should not be empty, and it starts\
    \ with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"\
    example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name\
    \ should start with a latin alphapet letter)\nfile_name_check(\"1example.txt\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the name should contain exactly one dot)\nfile_name_check(\"\
    example1\") # => 'No' (the name should contain exactly one dot)\nfile_name_check(\"\
    example1.txt\") # => 'Yes'\nfile_name_check(\"example1.exe\") # => 'Yes'\nfile_name_check(\"\
    example1.exe.txt\") # => 'Yes'\nfile_name_check(\"example1.exe.txt.dll\") # =>\
    \ 'Yes'\nfile_name_check(\"example1.exe.txt.dll1\") # => 'No' (the name should\
    \ contain exactly one dot)\nfile_name_check(\"example1.exe.txt.dll1.exe\") # =>\
    \ 'No' (the name should contain exactly one dot)\nfile_name_check(\"example1.exe.txt.dll1.exe.txt\"\
    ) # => 'Yes'\nfile_name_check(\"example1.exe.txt.dll1.exe.txt.exe\") # => 'Yes'\n\
    file_name_check(\"example1.exe\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpire5lnw7.jl:24\nin expression starting at\
    \ /tmp/tmpire5lnw7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.count(\"\
    .\")>1 or file_name.count(\".\")==1 and file_name.split(\".\")[1]!=\"txt\" or\
    \ file_name.split(\".\")[1]!=\"exe\" or file_name.split(\".\")[1]!=\"dll\"\n \
    \       return \"No\"\n    else\n        return \"Yes\"\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"\
    1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string representing\
    \ a file's name, and returns the file's extension.\nA file's extension is considered\
    \ to be valid if and only if all the following conditions are met:\n- The file's\
    \ name contains exactly one dot '.'\n- The substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_extension(\"example.txt\"\
    ) # => 'txt'\nfile_name_extension(\"1example.dll\") # => 'dll'\nfile_name_extension(\"\
    example.exe\") # => 'exe'\nfile_name_extension(\"example\") # => 'No' (the name\
    \ should start with a latin alphapet letter)\nfile_name_extension(\"example.txt\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\nfile_name_extension(\"\
    example.exe\") # => 'No' (the name should start with a latin alphapet letter)\n\
    file_name_extension(\"example\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\nfile_name_extension(\"example\") # => 'No' (the name should\
    \ start with a latin alphapet letter)\nfile_name_extension(\"example\") # => 'No'\
    \ (the name should start with a latin alphapet letter)\nfile_name_extension(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_extension(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_extension(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_extension(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_extension(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_extension(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter)\nfile_name_extension(\"\
    example\") # => 'No' (the name should start with a latin alphapet letter\nusing\
    \ Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_6_s33q7.jl:17\nin expression starting at /tmp/tmp_6_s33q7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ representing a file's name, and returns\n    'Yes' if the the file's name is\
    \ valid, and returns 'No' otherwise.\n    A file's name is considered to be valid\
    \ if and only if all the following conditions \n    are met:\n    - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    - The file's\
    \ name contains exactly one dot '.'\n    - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n\
    \    file_name_check(\"1example.dll\") # => 'No' (the name should start with a\
    \ latin alphapet letter)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrooq_70.jl:19\nin expression starting at\
    \ /tmp/tmpdrooq_70.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.lenght\
    \ > 3 || file_name.lenght < 1\n        return \"No\"\n    \n    if file_name.lenght\
    \ == 1 && file_name.head == \"\"\n        return \"No\"\n    \n    if file_name.head\
    \ == \".\" || file_name.head == \"\"\n        return \"No\"\n    \n    if file_name.head\
    \ in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n        return \"No\"\n    \n    if file_name.head\
    \ in [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"\
    K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"\
    V\", \"W\", \"X\", \"Y\", \"Z\"]\n        return \"No\"\n    \n    if file_name.head\
    \ == \"0\"\n        return \"No\"\n    \n    if file_name.head == \"1\"\n    \
    \    return \"Yes\"\n    \n    if file_name.head == \"2\"\n        return \"Yes\"\
    \n    \n    if file_name.head == \"3\"\n        return \"Yes\"\n    \n    if file_name.head\
    \ == \"4\"\n        return \"Yes\"\n    \n    if file_name.head == \"5\"\n   \
    \     return \"Yes\"\n    \n    if file_name.head == \"6\"\n        return \"\
    Yes\"\n    \n    if file_name.head == \"7\"\n        return \"Yes\"\n    \n  \
    \  if file_name.head == \"8\"\n        return \"Yes\"\n    \n    if file_name.head\
    \ == \"9\"\n        return \"Yes\"\n    \n    if file_name.head == \"a\"\n   \
    \     return \"Yes\"\n    \n    if file_name.head == \"b\"\n        return \"\
    Yes\"\n    \n    if file_name.head == \"c\"\n        return \"Yes\"\n    \n  \
    \  if file_name.head == \"d\"\n        return \"Yes\"\n    \n    if file_name.head\
    \ == \"e\"\n        return \"Yes\"\n    \n    if file_name.head == \"f\"\n   \
    \     return \"Yes\"\n    \n    if file_name.head == \"g\"\n        return \"\
    Yes\"\n    \n    if file_name.head == \"h\"\n        return \"Yes\"\n    \n  \
    \  if file_name.head == \"i\"\n        return \"Yes\"\n    \n    if file_name.head\
    \ == \"j\"\n        return \"Yes\"\n    \n    if file_name.head == \"k\"\n   \
    \     return \"Yes\"\n    \n    if file_name.head == \"l\"\n        return \"\
    Yes\"\n    \n    if file_name.head == \"m\"\n        return \"Yes\"\n    \n  \
    \  if file_name.head == \"n\"\n        return \"Yes\"\n    \n    if file_name.head\
    \ == \"o\"\n        return \"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3uit7qm.jl:111\nin expression starting at\
    \ /tmp/tmpl3uit7qm.jl:111\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<text>\nSolution\nRun the cell below to test your solution.\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnl9peb8.jl:19\nin expression starting at\
    \ /tmp/tmpjnl9peb8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsszpixn4.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsszpixn4.jl:1\n\
    in expression starting at /tmp/tmpsszpixn4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.lenght\
    \ > 3 || file_name.lenght < 1\n        return \"No\"\n    \n    if file_name.contains(\"\
    .\")\n        return \"No\"\n    \n    if file_name.substring(0,1) != \"a\"\n\
    \        return \"No\"\n    \n    if file_name.substring(0,1) != \"z\"\n     \
    \   return \"No\"\n    \n    if file_name.substring(0,1) != \"A\"\n        return\
    \ \"No\"\n    \n    if file_name.substring(0,1) != \"Z\"\n        return \"No\"\
    \n    \n    if file_name.substring(0,3) != \"example\"\n        return \"No\"\n\
    \    \n    if file_name.substring(0,3) != \"1\"\n        return \"No\"\n    \n\
    \    if file_name.substring(0,3) != \"2\"\n        return \"No\"\n    \n    if\
    \ file_name.substring(0,3) != \"3\"\n        return \"No\"\n    \n    if file_name.substring(0,3)\
    \ != \"4\"\n        return \"No\"\n    \n    if file_name.substring(0,3) != \"\
    5\"\n        return \"No\"\n    \n    if file_name.substring(0,3) != \"6\"\n \
    \       return \"No\"\n    \n    if file_name.substring(0,3) != \"7\"\n      \
    \  return \"No\"\n    \n    if file_name.substring(0,3) != \"8\"\n        return\
    \ \"No\"\n    \n    if file_name.substring(0,3) != \"9\"\n        return \"No\"\
    \n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"\
    example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name\
    \ should start with a latin alphapet letter)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string representing a file's name, and returns\n   \
    \ 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's\
    \ name is considered to be valid if and only if all the following conditions \n\
    \    are met:\n    - There should not be more than three digits ('0'-'9') in the\
    \ file's name.\n    - The file's name contains exactly one dot '.'\n    - The\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"\
    example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the\
    \ name should start with a latin alphapet letter)\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwuyjpr7m.jl:66\nin expression starting at\
    \ /tmp/tmpwuyjpr7m.jl:66\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw4l02r8u.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw4l02r8u.jl:1\n\
    in expression starting at /tmp/tmpw4l02r8u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.lenght\
    \ > 3 || file_name.lenght < 1\n        return \"No\"\n    \n    if file_name.lenght\
    \ == 1 && file_name.chars[0,1] == '.'\n        return \"No\"\n    \n    if file_name.chars[0,1]\
    \ == '.' && (file_name.chars[1,2] != 'x' || file_name.chars[2,3] != 'x' || file_name.chars[3,4]\
    \ != 'x')\n        return \"No\"\n    \n    if file_name.chars[0,1] == '.' &&\
    \ (file_name.chars[1,2] != 'x' || file_name.chars[2,3] != 'x' || file_name.chars[3,4]\
    \ != 'x') && file_name.chars[0,1] != 'a' && file_name.chars[0,1] != 'A' && file_name.chars[0,1]\
    \ != 'b' && file_name.chars[0,1] != 'B' && file_name.chars[0,1] != 'c' && file_name.chars[0,1]\
    \ != 'C' && file_name.chars[0,1] != 'd' && file_name.chars[0,1] != 'D' && file_name.chars[0,1]\
    \ != 'e' && file_name.chars[0,1] != 'E' && file_name.chars[0,1] != 'f' && file_name.chars[0,1]\
    \ != 'F' && file_name.chars[0,1] != 'g' && file_name.chars[0,1] != 'G' && file_name.chars[0,1]\
    \ != 'h' && file_name.chars[0,1] != 'H' && file_name.chars[0,1] != 'i' && file_name.chars[0,1]\
    \ != 'I' && file_name.chars[0,1] != 'j' && file_name.chars[0,1] != 'J' && file_name.chars[0,1]\
    \ != 'k' && file_name.chars[0,1] != 'K' && file_name.chars[0,1] != 'l' && file_name.chars[0,1]\
    \ != 'L' && file_name.chars[0,1] != 'm' && file_name.chars[0,1] != 'M' && file_name.chars[0,1]\
    \ != 'n' && file_name.chars[0,1] != 'N' && file_name.chars[0,1] != 'o' && file_name.chars[0,1]\
    \ != 'O' && file_name.chars[0,1] != 'p' && file_name.chars[0,1] != 'P' && file_name.chars[0,1]\
    \ != 'q' && file_name.chars[0,1] != 'Q' && file_name.chars[0,1] != 'r' && file_name.chars[0,1]\
    \ != 'R' && file_name.chars[0,1] != 's' && file_name.chars[0,1] != 'S' && file_name.chars[0,1]\
    \ != 't' && file_name.chars[0,1] != 'T' && file_name.chars[0,1] != 'u' && file_name.chars[0,1]\
    \ != 'U' && file_name.chars[\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpap4bn89j.jl:1\nin expression starting at /tmp/tmpap4bn89j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph3yyo4qq.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph3yyo4qq.jl:1\n\
    in expression starting at /tmp/tmph3yyo4qq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) > 3 || file_name_split[1]\
    \ != \"\" \n        || file_name_split[1][1] != 'a' || file_name_split[1][1] !=\
    \ 'A' || \n        file_name_split[1][1] != 'z' || file_name_split[1][1] != 'Z'\
    \ \n        || file_name_split[2] != \"\" || file_name_split[2] != \"exe\" ||\
    \ file_name_split[2] != \"dll\"\n    \n        return \"No\"\n    \n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n# Test your function\nfile_name_check(\"\
    example.txt\")\n</cell>\n<text>\nPart 2: Function to check if a number is prime\n\
    The function is_prime should take one number as input, and return 'Yes' if that\
    \ number is prime and 'No' otherwise.\nA number is considered to be prime if and\
    \ only if it is a whole number.\nThe number should be greater than 1.\nThe number\
    \ should be smaller than or equal to 10.\nThe number should be divisible by 1\
    \ or by itself and only by itself and 1.\nExamples:\nis_prime(11) # => 'Yes'\n\
    is_prime(12) # => 'No'\nis_prime(13) # => 'No'\nis_prime(14) # => 'Yes'\nis_prime(15)\
    \ # => 'No'\nis_prime(16) # => 'No'\nis_prime(17) # => 'No'\nis_prime(18) # =>\
    \ 'Yes'\nis_prime(19) # => 'No'\nis_prime(20) # => 'No'\nis_prime(21) # => 'Yes'\n\
    is_prime(22) # => 'No'\nis_prime(23) # => 'No'\nis_prime(24) # => 'Yes'\nis_prime(25)\
    \ # => 'No'\nis_prime(26) # => 'No'\nis_prime(27) # => 'No'\nis_prime(28) # =>\
    \ 'Yes'\nis_prime(29) # => 'No'\nis_prime(30) # => 'No'\nis_prime(31) # => 'Yes'\n\
    is_prime(32) # => 'No'\nis_prime(33) # => 'No'\nis_prime(34) # => 'Yes'\nis_prime(35)\
    \ # => 'No'\nis_prime(36) # => 'No'\nis_prime(37) # => 'No'\nis_prime(38) # =>\
    \ 'Yes'\nis_prime(39) # => 'No'\nis_prime(40) # => 'No'\nis_prime(41) # => 'Yes'\n\
    is_prime(42) # => 'No'\nis_prime(43) # => 'No'\nis_prime(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwpd26i5.jl:19\nin expression starting at\
    \ /tmp/tmpiwpd26i5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.count(\"\
    .\")>3 || file_name.count(\".\")==1 && file_name.split(\".\")[1]!=\"txt\" && file_name.split(\"\
    .\")[1]!=\"exe\" && file_name.split(\".\")[1]!=\"dll\"\n        return \"No\"\n\
    \    else\n        return \"Yes\"\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string representing a file's name, and returns the\
    \ file's extension.\n    A file's extension is considered to be the substring\
    \ after the last dot ('.') in the file's name.\n    Examples:\n    file_name_ext(\"\
    example.txt\") # => 'txt'\n    file_name_ext(\"1example.dll\") # => 'dll'\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp882dlsaz.jl:22\nin expression starting at\
    \ /tmp/tmp882dlsaz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    end\n    \n    if file_name.split(\"\
    .\")[1] != ['txt', 'exe', 'dll']\n        return \"No\"\n    end\n    \n    if\
    \ file_name.split(\".\")[1][1] != ['A'-'Z', 'a'-'z']\n        return \"No\"\n\
    \    end\n    \n    if file_name.split(\".\")[1][2] != ['0'-'9']\n        return\
    \ \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][2]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][2]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][2]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][2]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][2]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][2]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\".\"\
    )[1][1] != file_name.split(\".\")[1][2]\n        return \"No\"\n    end\n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp5f1naeoi.jl:21\nin expression\
    \ starting at /tmp/tmp5f1naeoi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \n    return \nend\n</cell>\n<code language=julia-1.5>\n# Run this cell to\
    \ test your function\nfile_name_check(\"example.txt\")\n</cell>\n<text>\nPart\
    \ 2: Problem 1\nWrite a function that takes a string representing a file's name,\
    \ and returns the file's extension.\n    A file's extension is considered to be\
    \ the part of the string after the last '.', \n    or '.' if there is no dot in\
    \ the string.\n    Examples:\n    file_name_extension(\"example.txt\") # => \"\
    txt\"\n    file_name_extension(\"1example.dll\") # => \".dll\"\n    file_name_extension(\"\
    example.exe\") # => \".exe\"\n    file_name_extension(\"example\") # => \"\"\n\
    \    file_name_extension(\"example.txt\") # => \"\"\n    file_name_extension(\"\
    1example\") # => \"\"\n    file_name_extension(\"1example.txt\") # => \"\"\n \
    \   file_name_extension(\"example1\") # => \"\"\n    file_name_extension(\"example1.txt\"\
    ) # => \"\"\n    file_name_extension(\"example1.exe\") # => \"\"\n    file_name_extension(\"\
    example1.exe.txt\") # => \"\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplup14xsz.jl:20\nin expression starting at\
    \ /tmp/tmplup14xsz.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.count(\"\
    .\")>2 or file_name.count(\".\")==0 or file_name.starts_with(\"0\")\n    \n  \
    \      return \"No\"\n    \n    else\n    \n        if file_name.split(\".\")[1]!=\"\
    txt\" or file_name.split(\".\")[1]!=\"exe\" or file_name.split(\".\")[1]!=\"dll\"\
    \n    \n            return \"No\"\n        end\n    \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc1cgaho5.jl:17\nin expression starting at /tmp/tmpc1cgaho5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_check_res\
    \ = ''\n    \n    if file_name.count('.') != 1:\n        file_name_check_res =\
    \ 'No'\n        return file_name_check_res\n    \n    dot_pos = file_name.index('.')\
    \ + 1\n    \n    if dot_pos == 0 or dot_pos > file_name.length\n        file_name_check_res\
    \ = 'No'\n        return file_name_check_res\n    \n    dot_pos_2 = file_name.index('.',\
    \ dot_pos)\n    \n    if dot_pos_2 == 0\n        file_name_check_res = 'No'\n\
    \        return file_name_check_res\n    \n    dot_pos_3 = file_name.index('.',\
    \ dot_pos_2)\n    \n    if dot_pos_3 == 0\n        file_name_check_res = 'No'\n\
    \        return file_name_check_res\n    \n    dot_pos_4 = file_name.index('.',\
    \ dot_pos_3)\n    \n    if dot_pos_4 == 0\n        file_name_check_res = 'No'\n\
    \        return file_name_check_res\n    \n    dot_pos_5 = file_name.index('.',\
    \ dot_pos_4)\n    \n    if dot_pos_5 == 0\n        file_name_check_res = 'No'\n\
    \        return file_name_check_res\n    \n    dot_pos_6 = file_name.index('.',\
    \ dot_pos_5)\n    \n    if dot_pos_6 == 0\n        file_name_check_res = 'No'\n\
    \        return file_name_check_res\n    \n    dot_pos_7 = file_name.index('.',\
    \ dot_pos_6)\n    \n    if dot_pos_7 == 0\n        file_name_check_res = 'No'\n\
    \        return file_name_check_res\n    \n    dot_pos_8 = file_name.index('.',\
    \ dot_pos_7)\n    \n    if dot_pos_8 == 0\n        file_name_check_res = 'No'\n\
    \        return file_name_check_res\n    \n    dot_pos_9 = file_name.index('.',\
    \ dot_pos_8)\n    \n    if dot_pos_9 == 0\n        file_name_check_res = 'No'\n\
    \        return file_name_check_res\n    \n    dot_pos_10 = file_name.index('.',\
    \ dot_pos_9)\n    \n    if dot_pos_10 == 0\n        file_name_check_res = 'No'\n\
    \        return file_name_check_res\n    \n    dot_pos_11 = file_name.index('.',\
    \ dot_pos_10)\n    \n    if dot_pos_11 == 0\n        file_name_check_res = 'No'\n\
    \        return file_name_check_res\n    \n    dot_pos_12 = file_name.index('.',\
    \ dot_pos_11)\n    \n    if dot_pos_12 == 0\n        file_name_check_res = 'No'\n\
    \        return file_name_check_res\n    \n    dot_pos_13 = file_name.index('.',\
    \ dot_pos_12)\n    \n    if \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp059ymqqv.jl:16\nin expression starting at\
    \ /tmp/tmp059ymqqv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) != 2 or file_name_split[1]\
    \ != \"\" or file_name_split[1][1] != \"\" \n        or file_name_split[1][1]\
    \ != file_name_split[1][1][1] or file_name_split[1][1][1] != \"a\" \n        or\
    \ file_name_split[1][1][1] != \"b\" or file_name_split[1][1][1] != \"c\" or file_name_split[1][1][1]\
    \ != \"d\" \n        or file_name_split[1][1][1] != \"e\" or file_name_split[1][1][1]\
    \ != \"f\" or file_name_split[1][1][1] != \"g\" \n        or file_name_split[1][1][1]\
    \ != \"h\" or file_name_split[1][1][1] != \"i\" or file_name_split[1][1][1] !=\
    \ \"j\" \n        or file_name_split[1][1][1] != \"k\" or file_name_split[1][1][1]\
    \ != \"l\" or file_name_split[1][1][1] != \"m\" \n        or file_name_split[1][1][1]\
    \ != \"n\" or file_name_split[1][1][1] != \"o\" or file_name_split[1][1][1] !=\
    \ \"p\" \n        or file_name_split[1][1][1] != \"q\" or file_name_split[1][1][1]\
    \ != \"r\" or file_name_split[1][1][1] != \"s\" \n        or file_name_split[1][1][1]\
    \ != \"t\" or file_name_split[1][1][1] != \"u\" or file_name_split[1][1][1] !=\
    \ \"v\" \n        or file_name_split[1][1][1] != \"w\" or file_name_split[1][1][1]\
    \ != \"x\" or file_name_split[1][1][1] != \"y\" \n        or file_name_split[1][1][1]\
    \ != \"z\" or file_name_split[1][1][1] != \"A\" or file_name_split[1][1][1] !=\
    \ \"B\" \n        or file_name_split[1][1][1] != \"C\" or file_name_split[1][1][1]\
    \ != \"D\" or file_name_split[1][1][1] != \"E\" \n        or file_name_split[1][1][1]\
    \ != \"F\" or file_name_split[1][1][1] != \"G\" or file_name_split[1][1][1] !=\
    \ \"H\" \n        or file_name_split[1][1][1] != \"I\" or file_name_split[1][1][1]\
    \ != \"J\" or file_name_split[1][1][1] != \"K\" \n        or file_name_split[1][1][1]\
    \ != \"L\" or file_name_split[1][1][1] != \"M\" or file_name_split[1][1][1] !=\
    \ \"N\" \n        or file_name_split[1][1][1] != \"O\" or file_name_split[1][1][1]\
    \ != \"P\" or file_name_split[1][1][1] != \"Q\" \n        or file_name_split[1][1][1]\
    \ != \"R\" or file_name_split[1][1][1] != \"S\" or file_name_split[1][1][1] !=\
    \ \"T\" \n        or file_name_split[1][1][1] != \"U\" or file_name_split[1][1][1]\
    \ != \"V\" or \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name_split\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp33ebgqac.jl:18\nin expression starting at\
    \ /tmp/tmp33ebgqac.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyx5k69ea.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyx5k69ea.jl:1\n\
    in expression starting at /tmp/tmpyx5k69ea.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    elseif file_name.split(\"\
    .\")[1] != \"\" || file_name.split(\".\")[1] != \"txt\" || \n        file_name.split(\"\
    .\")[1] != \"exe\" || file_name.split(\".\")[1] != \"dll\"\n        return \"\
    No\"\n    elseif file_name.split(\".\")[1] == \"txt\" && file_name.split(\".\"\
    )[0] != \"a\"\n        return \"No\"\n    elseif file_name.split(\".\")[1] ==\
    \ \"exe\" && file_name.split(\".\")[0] != \"a\"\n        return \"No\"\n    elseif\
    \ file_name.split(\".\")[1] == \"dll\" && file_name.split(\".\")[0] != \"a\"\n\
    \        return \"No\"\n    elseif file_name.split(\".\")[1] == \"txt\" && file_name.split(\"\
    .\")[0] == \"a\"\n        return \"No\"\n    elseif file_name.split(\".\")[1]\
    \ == \"exe\" && file_name.split(\".\")[0] == \"a\"\n        return \"No\"\n  \
    \  elseif file_name.split(\".\")[1] == \"dll\" && file_name.split(\".\")[0] ==\
    \ \"a\"\n        return \"No\"\n    elseif file_name.split(\".\")[1] == \"txt\"\
    \ && file_name.split(\".\")[0] == \"z\"\n        return \"No\"\n    elseif file_name.split(\"\
    .\")[1] == \"exe\" && file_name.split(\".\")[0] == \"z\"\n        return \"No\"\
    \n    elseif file_name.split(\".\")[1] == \"dll\" && file_name.split(\".\")[0]\
    \ == \"z\"\n        return \"No\"\n    elseif file_name.split(\".\")[1] == \"\
    txt\" && file_name.split(\".\")[0] == \"A\"\n        return \"No\"\n    elseif\
    \ file_name.split(\".\")[1] == \"exe\" && file_name.split(\".\")[0] == \"A\"\n\
    \        return \"No\"\n    elseif file_name.split(\".\")[1] == \"dll\" && file_name.split(\"\
    .\")[0] == \"A\"\n        return \"No\"\n    elseif file_name.split(\".\")[1]\
    \ == \"txt\" && file_name.split(\".\")[0] == \"0\"\n        return \"No\"\n  \
    \  elseif file_name.split(\".\")[1] == \"exe\" && file_name.split(\".\")[0] ==\
    \ \"0\"\n        return \"No\"\n    elseif file_name.split(\".\")[1] == \"dll\"\
    \ && file_name.split(\".\")[0] == \"0\"\n        return \"No\"\n    elseif file_name.split(\"\
    .\")[1] == \"txt\" && file_name.split(\".\")[0] == \"9\"\n        return \"No\"\
    \n    elseif file_name.split(\".\")[1] == \"exe\" && file_name.split(\".\")[0]\
    \ == \"9\"\n        return \"No\"\n    elseif file_name.split(\".\")[1] == \"\
    dll\" && file_name.split(\".\")[0] == \"9\"\n        return \"No\"\n    elseif\
    \ file_name.split(\".\")[1] == \"txt\" && file_name.split(\".\")[0] == \"a\"\n\
    \        return \"No\"\n    elseif file_name.split(\".\")[1] == \"exe\" && file_name.split(\"\
    .\")[0] == \"a\"\n        return \"No\"\n    elseif file_name.split(\".\")[1]\
    \ == \"dll\" && file_name.split(\".\")[0] == \"a\"\n        return \"No\"\n  \
    \  elseif file_name.split(\".\")[1] == \"txt\" && file_name.split(\".\")[0] ==\
    \ \"z\"\n        return \"No\"\n    elseif file_name.split(\".\")[1] == \"exe\"\
    \ && file_name.split(\".\")[0] == \"z\"\n        return \"No\"\n    elseif file_name.split(\"\
    .\")[1]\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxlket767.jl:1\nin expression starting at /tmp/tmpxlket767.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwauv4982.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwauv4982.jl:1\n\
    in expression starting at /tmp/tmpwauv4982.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyxxfuq42.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyxxfuq42.jl:1\n\
    in expression starting at /tmp/tmpyxxfuq42.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppgkafbd0.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppgkafbd0.jl:1\n\
    in expression starting at /tmp/tmppgkafbd0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.count(\"\
    .\")>1 or file_name.count(\".\")==0 and file_name.count(\".\")==1 and file_name.starts_with(\"\
    0\")\n    \n    else if file_name.count(\".\")>1 or file_name.count(\".\")==0\
    \ and file_name.count(\".\")==1 and file_name.starts_with(\"0\")\n    \n    else\
    \ if file_name.count(\".\")>1 or file_name.count(\".\")==0 and file_name.count(\"\
    .\")==1 and file_name.starts_with(\"0\")\n    \n    else if file_name.count(\"\
    .\")>1 or file_name.count(\".\")==0 and file_name.count(\".\")==1 and file_name.starts_with(\"\
    0\")\n    \n    else if file_name.count(\".\")>1 or file_name.count(\".\")==0\
    \ and file_name.count(\".\")==1 and file_name.starts_with(\"0\")\n    \n    else\
    \ if file_name.count(\".\")>1 or file_name.count(\".\")==0 and file_name.count(\"\
    .\")==1 and file_name.starts_with(\"0\")\n    \n    else if file_name.count(\"\
    .\")>1 or file_name.count(\".\")==0 and file_name.count(\".\")==1 and file_name.starts_with(\"\
    0\")\n    \n    else if file_name.count(\".\")>1 or file_name.count(\".\")==0\
    \ and file_name.count(\".\")==1 and file_name.starts_with(\"0\")\n    \n    else\
    \ if file_name.count(\".\")>1 or file_name.count(\".\")==0 and file_name.count(\"\
    .\")==1 and file_name.starts_with(\"0\")\n    \n    else if file_name.count(\"\
    .\")>1 or file_name.count(\".\")==0 and file_name.count(\".\")==1 and file_name.starts_with(\"\
    0\")\n    \n    else if file_name.count(\".\")>1 or file_name.count(\".\")==0\
    \ and file_name.count(\".\")==1 and file_name.starts_with(\"0\")\n    \n    else\
    \ if file_name.count(\".\")>1 or file_name.count(\".\")==0 and file_name.count(\"\
    .\")==1 and file_name.starts_with(\"0\")\n    \n    else if file_name.count(\"\
    .\")>1 or file_name.count(\".\")==0 and file_name.count(\".\")==1 and file_name.starts_with(\"\
    0\")\n    \n    else if file_name.count(\".\")>1 or file_name.count(\".\")==0\
    \ and file_name.count(\".\")==1 and file_name.starts_with(\"0\")\n    \n    else\
    \ if file_name.count(\".\")>1 or file_name.count(\".\")==0 and file_name.count(\"\
    .\")==1 and file_name.starts_with(\"0\")\n    \n    else \nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpax589711.jl:16\nin expression starting at /tmp/tmpax589711.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != \"\"\n        return \"No\"\n    end\n    if file_name.split(\".\"\
    )[1] != [\"txt\", \"exe\", \"dll\"]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\n    end\n    if file_name.split(\"\
    .\")[1] != file_name.split(\".\")[1]\n        return \"No\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88oop26_.jl:1\nin expression starting at /tmp/tmp88oop26_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    \n    if file_name.split(\"\
    .\")[1] != \"\"\n        return \"No\"\n    \n    if file_name.split(\".\")[1]\
    \ == \"exe\"\n        return \"No\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"dll\"\n        return \"No\"\n    \n    if file_name.split(\".\")[1] == \"\
    txt\"\n        return \"Yes\"\n    \n    return \"No\"\nend\n</cell>\n<code language=julia-1.4>\n\
    file_name_check(\"example.txt\")\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"\
    1example.dll\")\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"example\"\
    )\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"1example\")\n</cell>\n\
    <code language=julia-1.4>\nfile_name_check(\"example.txt\")\n</cell>\n<code language=julia-1.4>\n\
    file_name_check(\"1example.dll\")\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"\
    example\")\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"1example\")\n\
    </cell>\n<code language=julia-1.4>\nfile_name_check(\"example.txt\")\n</cell>\n\
    <code language=julia-1.4>\nfile_name_check(\"1example.dll\")\n</cell>\n<code language=julia-1.4>\n\
    file_name_check(\"example\")\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"\
    1example\")\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"example.txt\"\
    )\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"1example.dll\")\n</cell>\n\
    <code language=julia-1.4>\nfile_name_check(\"example\")\n</cell>\n<code language=julia-1.4>\n\
    file_name_check(\"1example\")\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"\
    example.txt\")\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"1example.dll\"\
    )\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"example\")\n</cell>\n\
    <code language=julia-1.4>\nfile_name_check(\"1example\")\n</cell>\n<code language=julia-1.4>\n\
    file_name_check(\"example.txt\")\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"\
    1example.dll\")\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"example\"\
    )\n</cell>\n<code language=julia-1.4>\nfile_name_check(\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprpt7crur.jl:33\nin expression starting at\
    \ /tmp/tmprpt7crur.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppr3fs3ad.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppr3fs3ad.jl:1\n\
    in expression starting at /tmp/tmppr3fs3ad.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_check_res\
    \ = file_name.match('^[0-9]{0,3}\\.[a-z]{0,1}$')\n    \n    if file_name_check_res\
    \ == nil\n        return 'No'\n    end\n    \n    dot_index = file_name.index(\"\
    .\")\n    \n    if dot_index == -1\n        return 'No'\n    end\n    \n    dot_index\
    \ = dot_index + 1\n    \n    if dot_index > length(file_name) - 3\n        return\
    \ 'No'\n    end\n    \n    dot_index = dot_index + 1\n    \n    if dot_index >\
    \ length(file_name) - 3\n        return 'No'\n    end\n    \n    dot_index = dot_index\
    \ + 1\n    \n    if dot_index > length(file_name) - 3\n        return 'No'\n \
    \   end\n    \n    dot_index = dot_index + 1\n    \n    if dot_index > length(file_name)\
    \ - 3\n        return 'No'\n    end\n    \n    dot_index = dot_index + 1\n   \
    \ \n    if dot_index > length(file_name) - 3\n        return 'No'\n    end\n \
    \   \n    dot_index = dot_index + 1\n    \n    if dot_index > length(file_name)\
    \ - 3\n        return 'No'\n    end\n    \n    dot_index = dot_index + 1\n   \
    \ \n    if dot_index > length(file_name) - 3\n        return 'No'\n    end\n \
    \   \n    dot_index = dot_index + 1\n    \n    if dot_index > length(file_name)\
    \ - 3\n        return 'No'\n    end\n    \n    dot_index = dot_index + 1\n   \
    \ \n    if dot_index > length(file_name) - 3\n        return 'No'\n    end\n \
    \   \n    dot_index = dot_index + 1\n    \n    if dot_index > length(file_name)\
    \ - 3\n        return 'No'\n    end\n    \n    dot_index = dot_index + 1\n   \
    \ \n    if dot_index > length(file_name) - 3\n        return 'No'\n    end\n \
    \   \n    dot_index = dot_index + 1\n    \n    if dot_index > length(file_name)\
    \ - 3\n        return 'No'\n    end\n    \n    dot_index = dot_index + 1\n   \
    \ \n    if dot_index > length(file_name) - 3\n        return 'No'\n    end\n \
    \   \n    dot_index = dot_index + 1\n    \n    if dot_index > length(file_name)\
    \ - 3\n        return 'No'\n    end\n    \n    dot_index = dot_index + 1\n   \
    \ \n    if dot_index > length(file_name) - 3\n        return 'No'\n    end\n \
    \   \n    dot_index = dot_index + 1\n    \n    if dot_index > length(file_name)\
    \ - 3\n        return 'No'\n    end\n    \n    dot_index = dot_index + 1\n   \
    \ \n    if dot_index > length(file_name) - 3\n        return 'No'\n    end\n \
    \   \n    dot_index = dot_\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptkhpu6yu.jl:16\nin expression starting at /tmp/tmptkhpu6yu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) != 2 or file_name_split[1]\
    \ != \"\" or file_name_split[1][1] != \"\" or file_name_split[1][1] != \".\" or\
    \ file_name_split[1][1] != \".txt\" or file_name_split[1][1] != \".exe\" or file_name_split[1][1]\
    \ != \".dll\"\n    \n        return \"No\"\n    else\n        return \"Yes\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\"\
    )\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.dll\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string representing a file's\
    \ name, and returns the file's extension.\nExamples:\nfile_name_ext(\"example.txt\"\
    ) # => 'txt'\nfile_name_ext(\"1example.dll\") # => 'dll'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"1example\") # => 'none'\nfile_name_ext(\"example.txt\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext(\"example\"\
    ) # => 'none'\nfile_name_ext(\"example\") # => 'none'\nfile_name_ext\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name_split\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp02ql3qz.jl:18\nin expression starting at\
    \ /tmp/tmpp02ql3qz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_check_res\
    \ = \"\"\n    \n    if file_name_check_res == \"Yes\"\n        \n        if file_name.count(\"\
    0\") > 3 || file_name.count(\"9\") > 3 || file_name.count(\".\") > 1 || file_name.count(\"\
    ..\") > 1\n            file_name_check_res = \"No\"\n        elseif file_name.count(\"\
    .\") > 1 || file_name.count(\"..\") > 1\n            file_name_check_res = \"\
    No\"\n        elseif file_name.count(\"0\") > 3 || file_name.count(\"9\") > 3\
    \ || file_name.count(\"..\") > 1 || file_name.count(\".\") > 1\n            file_name_check_res\
    \ = \"No\"\n        elseif file_name.count(\"0\") > 3 || file_name.count(\"9\"\
    ) > 3 || file_name.count(\"..\") > 1 || file_name.count(\".\") > 1\n         \
    \   file_name_check_res = \"No\"\n        elseif file_name.count(\"0\") > 3 ||\
    \ file_name.count(\"9\") > 3 || file_name.count(\"..\") > 1 || file_name.count(\"\
    .\") > 1\n            file_name_check_res = \"No\"\n        elseif file_name.count(\"\
    0\") > 3 || file_name.count(\"9\") > 3 || file_name.count(\"..\") > 1 || file_name.count(\"\
    .\") > 1\n            file_name_check_res = \"No\"\n        elseif file_name.count(\"\
    0\") > 3 || file_name.count(\"9\") > 3 || file_name.count(\"..\") > 1 || file_name.count(\"\
    .\") > 1\n            file_name_check_res = \"No\"\n        elseif file_name.count(\"\
    0\") > 3 || file_name.count(\"9\") > 3 || file_name.count(\"..\") > 1 || file_name.count(\"\
    .\") > 1\n            file_name_check_res = \"No\"\n        elseif file_name.count(\"\
    0\") > 3 || file_name.count(\"9\") > 3 || file_name.count(\"..\") > 1 || file_name.count(\"\
    .\") > 1\n            file_name_check_res = \"No\"\n        elseif file_name.count(\"\
    0\") > 3 || file_name.count(\"9\") > 3 || file_name.count(\"..\") > 1 || file_name.count(\"\
    .\") > 1\n            file_name_check_res = \"No\"\n        elseif file_name.count(\"\
    0\") > 3 || file_name.count(\"9\") > 3 || file_name.count(\"..\") > 1 || file_name.count(\"\
    .\") > 1\n            file_name_check_res = \"No\"\n        elseif file_name.count(\"\
    0\") > 3 || file_name.count(\"9\") > 3 || file_name.count\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9e9j05hx.jl:1\nin expression starting at /tmp/tmp9e9j05hx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10 || file_name.contains(\".\") || file_name.substring(0,1)\
    \ != \"a\" || file_name.substring(0,1) != \"b\" || file_name.substring(0,1) !=\
    \ \"c\" || file_name.substring(0,1) != \"d\" || file_name.substring(0,1) != \"\
    e\" || file_name.substring(0,1) != \"f\" || file_name.substring(0,1) != \"g\"\
    \ || file_name.substring(0,1) != \"h\" || file_name.substring(0,1) != \"i\" ||\
    \ file_name.substring(0,1) != \"j\" || file_name.substring(0,1) != \"k\" || file_name.substring(0,1)\
    \ != \"l\" || file_name.substring(0,1) != \"m\" || file_name.substring(0,1) !=\
    \ \"n\" || file_name.substring(0,1) != \"o\" || file_name.substring(0,1) != \"\
    p\" || file_name.substring(0,1) != \"q\" || file_name.substring(0,1) != \"r\"\
    \ || file_name.substring(0,1) != \"s\" || file_name.substring(0,1) != \"t\" ||\
    \ file_name.substring(0,1) != \"u\" || file_name.substring(0,1) != \"v\" || file_name.substring(0,1)\
    \ != \"w\" || file_name.substring(0,1) != \"x\" || file_name.substring(0,1) !=\
    \ \"y\" || file_name.substring(0,1) != \"z\" || file_name.substring(0,1) != \"\
    A\" || file_name.substring(0,1) != \"B\" || file_name.substring(0,1) != \"C\"\
    \ || file_name.substring(0,1) != \"D\" || file_name.substring(0,1) != \"E\" ||\
    \ file_name.substring(0,1) != \"F\" || file_name.substring(0,1) != \"G\" || file_name.substring(0,1)\
    \ != \"H\" || file_name.substring(0,1) != \"I\" || file_name.substring(0,1) !=\
    \ \"J\" || file_name.substring(0,1) != \"K\" || file_name.substring(0,1) != \"\
    L\" || file_name.substring(0,1) != \"M\" || file_name.substring(0,1) != \"N\"\
    \ || file_name.substring(0,1) != \"O\" || file_name.substring(0,1) != \"P\" ||\
    \ file_name.substring(0,1) != \"Q\" || file_name.substring(0,1) != \"R\" || file_name.substring(0,1)\
    \ != \"S\" || file_name.substring(0,1) != \"T\" || file_name.substring(0,1) !=\
    \ \"U\" || file_name.substring(0,1) != \"V\" || file_name.substring(0,1) != \"\
    W\" || file_name.substring(0,1) != \"X\" || file_name.substring(0,1) != \"Y\"\
    \ || file_name.substring(0,1) != \"Z\" || file_name.substring(0,1) != \"0\" ||\
    \ file_name.substring(0,1) != \"1\" || file_name.substring(0,1) != \"2\" || file_name.substring(0,1)\
    \ != \"3\" || file_name.substring(0,1) != \"4\" || file_name.substring(0,1) !=\
    \ \"5\" || file_name.substring(0,1) != \"6\" || file_name.substring(0,1) != \"\
    7\" || file_name.substring(0,1) != \"8\" || file_name.substring(\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3ormbi7.jl:19\nin expression starting at\
    \ /tmp/tmpv3ormbi7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoz44t0j7.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoz44t0j7.jl:1\n\
    in expression starting at /tmp/tmpoz44t0j7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpynot5ren.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpynot5ren.jl:1\n\
    in expression starting at /tmp/tmpynot5ren.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.size\
    \ < 3 || file_name.size > 10\n        return \"No\"\n    end\n    \n    if file_name.split(\"\
    .\")[1] != ['txt', 'exe', 'dll']\n        return \"No\"\n    end\n    \n    if\
    \ file_name.split(\".\")[1][1] != ['A'-'Z', 'a'-'z']\n        return \"No\"\n\
    \    end\n    \n    if file_name.split(\".\")[1][2] != ['0'-'9']\n        return\
    \ \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][2] || file_name.split(\".\")[1][1] != file_name.split(\".\")[1][1][1]\n\
    \        return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] !=\
    \ file_name.split(\".\")[1][1][1] || file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][1][2]\n        return \"No\"\n    end\n    \n    if file_name.split(\"\
    .\")[1][1] != file_name.split(\".\")[1][1][2] || file_name.split(\".\")[1][1]\
    \ != file_name.split(\".\")[1][1][1]\n        return \"No\"\n    end\n    \n \
    \   if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][1][1] || file_name.split(\"\
    .\")[1][1] != file_name.split(\".\")[1][1][2]\n        return \"No\"\n    end\n\
    \    \n    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][1][2]\
    \ || file_name.split(\".\")[1][1] != file_name.split(\".\")[1][1][1]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][1][1] || file_name.split(\".\")[1][1] != file_name.split(\".\")[1][1][2]\n\
    \        return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] !=\
    \ file_name.split(\".\")[1][1][2] || file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][1][1]\n        return \"No\"\n    end\n    \n    if file_name.split(\"\
    .\")[1][1] != file_name.split(\".\")[1][1][2] || file_name.split(\".\")[1][1]\
    \ != file_name.split(\".\")[1][1][1]\n        return \"No\"\n    end\n    \n \
    \   if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][1][2] || file_name.split(\"\
    .\")[1][1] != file_name.split(\".\")[1][1][1]\n        return \"No\"\n    end\n\
    \    \n    if file_name.split(\".\")[1][1] != file_name.split(\".\")[1][1][2]\
    \ || file_name.split(\".\")[1][1] != file_name.split(\".\")[1][1][1]\n       \
    \ return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][1][2] || file_name.split(\".\")[1][1] != file_name.split(\".\")[1][1][1]\n\
    \        return \"No\"\n    end\n    \n    if file_name.split(\".\")[1][1] !=\
    \ file_name.split(\".\")[1][1][2] || file_name.split(\".\")[1][1] != file_name.split(\"\
    .\")[1][1][1]\n        return \"No\"\n    end\n    \n    if \nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpbv79crds.jl:21\nin expression\
    \ starting at /tmp/tmpbv79crds.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.count(\"\
    .\")>3 || file_name.count(\".\")==0 \n        || file_name.split(\".\")[1]==\"\
    \" || file_name.split(\".\")[1]!=\"txt\" || file_name.split(\".\")[1]!=\"exe\"\
    \ || file_name.split(\".\")[1]!=\"dll\"\n        || file_name.split(\".\")[0]!=\"\
    a\"||file_name.split(\".\")[0]!=\"A\"||file_name.split(\".\")[0]!=\"b\"||file_name.split(\"\
    .\")[0]!=\"B\"\n        || file_name.split(\".\")[0]!=\"c\"||file_name.split(\"\
    .\")[0]!=\"C\"||file_name.split(\".\")[0]!=\"d\"||file_name.split(\".\")[0]!=\"\
    D\"\n        || file_name.split(\".\")[0]!=\"e\"||file_name.split(\".\")[0]!=\"\
    E\"||file_name.split(\".\")[0]!=\"f\"||file_name.split(\".\")[0]!=\"F\"\n    \
    \    || file_name.split(\".\")[0]!=\"g\"||file_name.split(\".\")[0]!=\"G\"||file_name.split(\"\
    .\")[0]!=\"h\"||file_name.split(\".\")[0]!=\"H\"\n        || file_name.split(\"\
    .\")[0]!=\"i\"||file_name.split(\".\")[0]!=\"I\"||file_name.split(\".\")[0]!=\"\
    j\"||file_name.split(\".\")[0]!=\"J\"\n        || file_name.split(\".\")[0]!=\"\
    k\"||file_name.split(\".\")[0]!=\"K\"||file_name.split(\".\")[0]!=\"l\"||file_name.split(\"\
    .\")[0]!=\"L\"\n        || file_name.split(\".\")[0]!=\"m\"||file_name.split(\"\
    .\")[0]!=\"M\"||file_name.split(\".\")[0]!=\"n\"||file_name.split(\".\")[0]!=\"\
    N\"\n        || file_name.split(\".\")[0]!=\"o\"||file_name.split(\".\")[0]!=\"\
    O\"||file_name.split(\".\")[0]!=\"p\"||file_name.split(\".\")[0]!=\"P\"\n    \
    \    || file_name.split(\".\")[0]!=\"q\"||file_name.split(\".\")[0]!=\"Q\"||file_name.split(\"\
    .\")[0]!=\"r\"||file_name.split(\".\")[0]!=\"R\"\n        || file_name.split(\"\
    .\")[0]!=\"s\"||file_name.split(\".\")[0]!=\"S\"||file_name.split(\".\")[0]!=\"\
    t\"||file_name.split(\".\")[0]!=\"T\"\n        || file_name.split(\".\")[0]!=\"\
    u\"||file_name.split(\".\")[0]!=\"U\"||file_name.split(\".\")[0]!=\"v\"||file_name.split(\"\
    .\")[0]!=\"V\"\n        || file_name.split(\".\")[0]!=\"w\"||file_name.split(\"\
    .\")[0]!=\"W\"||file_name.split(\".\")[0]!=\"x\"||file_name.split(\".\")[0]!=\"\
    X\"\n        || file_name.split(\".\")[0]!=\"y\"||file_name\nusing Test\n\n@testset\
    \ begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\") ==\
    \ \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfcbrtz4.jl:18\nin expression starting at\
    \ /tmp/tmpdfcbrtz4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<text>\nSolution\nRun the cell below to test your solution.\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6a4c5bm.jl:19\nin expression starting at\
    \ /tmp/tmpt6a4c5bm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeiqrftwv.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeiqrftwv.jl:1\n\
    in expression starting at /tmp/tmpeiqrftwv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    if file_name.count(\"\
    .\")>2 || file_name.count(\".\")==0 \n        || file_name.substring(0,1) !~ /^[a-z]$/\
    \ || file_name.substring(0,1) !~ /^[A-Z]$/ \n        || file_name.substring(0,file_name.index(\"\
    .\")) !~ /^[a-z]$/ || file_name.substring(0,file_name.index(\".\")) !~ /^[A-Z]$/\
    \ \n        || file_name.substring(file_name.index(\".\")+1) !~ /^[a-z]$/ || file_name.substring(file_name.index(\"\
    .\")+1) !~ /^[A-Z]$/\n    \n    \n    else\n        return \"No\"\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nfile_name_check(\"example.txt\") # => 'Yes'\n\
    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string representing a file's name, and returns the file's extension.\nA file's\
    \ extension is considered to be valid if and only if all the following conditions\
    \ are met:\n- There should not be more than three digits ('0'-'9') in the file's\
    \ extension.\n- The file's extension contains exactly one dot '.'\n- The substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\"\
    ) # => 'txt'\nfile_name_check(\"1example.dll\") # => 'dll'\nfile_name_check(\"\
    1example.exe\") # => 'exe'\nfile_name_check(\"1example\") # => 'No' (the extension\
    \ should start with a latin alphapet letter)\nfile_name_check(\"example\") # =>\
    \ 'No' (the extension should start with a latin alphapet letter)\nfile_name_check(\"\
    example.txt\") # => 'No' (the extension should start with a latin alphapet letter)\n\
    file_name_check(\"example\") # => 'No' (the extension should start with a latin\
    \ alphapet letter)\nfile_name_check(\"example\") # => 'No' (the extension should\
    \ start with a latin alphapet letter)\nfile_name_check(\"example\") # => 'No'\
    \ (the extension should start with a latin alphapet letter)\nfile_name_check(\"\
    example\") # => 'No' (the extension should start with a latin alphapet letter)\n\
    file_name_check(\"example\") # => '\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv19fqikk.jl:18\nin expression starting at\
    \ /tmp/tmpv19fqikk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp13kh9usv.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp13kh9usv.jl:1\n\
    in expression starting at /tmp/tmp13kh9usv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf9yxgixa.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf9yxgixa.jl:1\n\
    in expression starting at /tmp/tmpf9yxgixa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm5hpolce.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm5hpolce.jl:1\n\
    in expression starting at /tmp/tmpm5hpolce.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    # Your code\
    \ here\n    \n    return \nend\n</cell>\n<code language=julia-1.5>\n# Run this\
    \ cell to check your output. If everything is correct, you should see 'Yes' as\
    \ the \n# output. \nfile_name_check(\"example.txt\")\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function that takes a string representing a file's name, and returns\
    \ the file's extension.\n    A file's extension is considered to be the part of\
    \ the string after the last '.' character.\n    Examples:\n    file_name_ext(\"\
    example.txt\") # => 'txt'\n    file_name_ext(\"1example.dll\") # => 'dll'\n  \
    \  file_name_ext(\"example.exe\") # => 'exe'\n    file_name_ext(\"1example\")\
    \ # => ''\n    file_name_ext(\"example\") # => ''\n    file_name_ext(\"example.txt.exe\"\
    ) # => 'exe'\n    file_name_ext(\"example.txt.exe.dll\") # => 'dll'\n    file_name_ext(\"\
    example.txt.exe.dll.txt\") # => ''\n    file_name_ext(\"example.txt.exe.dll.txt.exe\"\
    ) # => 'exe'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68wl7c_0.jl:21\nin expression starting at\
    \ /tmp/tmp68wl7c_0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.size\
    \ <= 3 || file_name.contains(\".\") || file_name.substring(0,1) != \"a\" || file_name.substring(0,1)\
    \ != \"A\" || file_name.substring(0,1) != \"b\" || file_name.substring(0,1) !=\
    \ \"B\" || file_name.substring(0,1) != \"c\" || file_name.substring(0,1) != \"\
    C\" || file_name.substring(0,1) != \"d\" || file_name.substring(0,1) != \"D\"\
    \ || file_name.substring(0,1) != \"e\" || file_name.substring(0,1) != \"E\" ||\
    \ file_name.substring(0,1) != \"f\" || file_name.substring(0,1) != \"F\" || file_name.substring(0,1)\
    \ != \"g\" || file_name.substring(0,1) != \"G\" || file_name.substring(0,1) !=\
    \ \"h\" || file_name.substring(0,1) != \"H\" || file_name.substring(0,1) != \"\
    i\" || file_name.substring(0,1) != \"I\" || file_name.substring(0,1) != \"j\"\
    \ || file_name.substring(0,1) != \"J\" || file_name.substring(0,1) != \"k\" ||\
    \ file_name.substring(0,1) != \"K\" || file_name.substring(0,1) != \"l\" || file_name.substring(0,1)\
    \ != \"L\" || file_name.substring(0,1) != \"m\" || file_name.substring(0,1) !=\
    \ \"M\" || file_name.substring(0,1) != \"n\" || file_name.substring(0,1) != \"\
    N\" || file_name.substring(0,1) != \"o\" || file_name.substring(0,1) != \"O\"\
    \ || file_name.substring(0,1) != \"p\" || file_name.substring(0,1) != \"P\" ||\
    \ file_name.substring(0,1) != \"q\" || file_name.substring(0,1) != \"Q\" || file_name.substring(0,1)\
    \ != \"r\" || file_name.substring(0,1) != \"R\" || file_name.substring(0,1) !=\
    \ \"s\" || file_name.substring(0,1) != \"S\" || file_name.substring(0,1) != \"\
    t\" || file_name.substring(0,1) != \"T\" || file_name.substring(0,1) != \"u\"\
    \ || file_name.substring(0,1) != \"U\" || file_name.substring(0,1) != \"v\" ||\
    \ file_name.substring(0,1) != \"V\" || file_name.substring(0,1) != \"w\" || file_name.substring(0,1)\
    \ != \"W\" || file_name.substring(0,1) != \"x\" || file_name.substring(0,1) !=\
    \ \"X\" || file_name.substring(0,1) != \"y\" || file_name.substring(0,1) != \"\
    Y\" || file_name.substring(0,1) != \"z\" || file_name.substring(0,1) != \"Z\"\n\
    \    \n        return \"No\"\n    else\n        return \"Yes\"\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\") # => 'Yes'\n\
    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin\
    \ alphapet letter)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string representing \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk40_mjv8.jl:23\nin expression starting at\
    \ /tmp/tmpk40_mjv8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz1kt0cac.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz1kt0cac.jl:1\n\
    in expression starting at /tmp/tmpz1kt0cac.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    if file_name.count(\"\
    .\")>2 or file_name.count(\".\")==0 and file_name.starts_with(\"0\")\n       \
    \ then \"No\"\n        else if file_name.count(\".\")==1 and file_name.split(\"\
    .\")[1]==\"exe\"\n            then \"Yes\"\n            else if file_name.count(\"\
    .\")==1 and file_name.split(\".\")[1]==\"dll\"\n                then \"Yes\"\n\
    \                else if file_name.count(\".\")==1 and file_name.split(\".\")[1]==\"\
    txt\"\n                    then \"Yes\"\n                    else if file_name.count(\"\
    .\")==1 and file_name.split(\".\")[1]==\"py\"\n                        then \"\
    Yes\"\n                        else if file_name.count(\".\")==1 and file_name.split(\"\
    .\")[1]==\"java\"\n                            then \"Yes\"\n                \
    \            else if file_name.count(\".\")==1 and file_name.split(\".\")[1]==\"\
    pyc\"\n                                then \"Yes\"\n                        \
    \        else if file_name.count(\".\")==1 and file_name.split(\".\")[1]==\"pyo\"\
    \n                                    then \"Yes\"\n                         \
    \           else if file_name.count(\".\")==1 and file_name.split(\".\")[1]==\"\
    pyd\"\n                                        then \"Yes\"\n                \
    \                        else if file_name.count(\".\")==1 and file_name.split(\"\
    .\")[1]==\"pyw\"\n                                            then \"Yes\"\n \
    \                                           else if file_name.count(\".\")==1\
    \ and file_name.split(\".\")[1]==\"pyo\"\n                                   \
    \             then \"Yes\"\n                                                else\
    \ if file_name.count(\".\")==1 and file_name.split(\".\")[1]==\"pyd\"\n      \
    \                                              then \"Yes\"\n                \
    \                                    else if file_name.count(\".\")==1 and file_name.split(\"\
    .\")[1]==\"pyc\"\n                                                        then\
    \ \"Yes\"\n                                                        else if file_name.count(\"\
    .\")==1 and file_name.split(\".\")[1]==\"py\"\n                              \
    \                              then \"Yes\"\n                                \
    \                            else if file_name.count(\".\")==1 and file_name.split(\"\
    .\")[1]==\"java\"\n                                                          \
    \      then \"Yes\"\n                                                        \
    \        else if file_name.count(\".\")==1 and file_name.split(\".\")[1]==\"pyc\"\
    \n                                                                    then \"\
    Yes\"\n                                                                    else\
    \ if file_name.count(\".\")==1 and file_name.split(\".\")[1]==\"pyo\"\n      \
    \                                                                  then \"Yes\"\
    \n                                                                        else\
    \ if file_name.count(\".\")==1 and file_name.split(\".\")[1]==\"pyd\"\n      \
    \                                                                      then \"\
    Yes\"\n                                                                      \
    \      else if file_name.count(\".\")==1 and file_name.split(\".\")[1]==\"pyw\"\
    \n                                                                           \
    \     then \"Yes\"\n                                                         \
    \                       else if file_name.count(\".\")==1 and file_name.split(\"\
    .\")[1]==\"pyo\"\n                                                           \
    \                         then \"Yes\"\n                                     \
    \                                               else if file_name.count(\".\"\
    )==1 and file_name.\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxqyp855m.jl:16\nin expression starting at /tmp/tmpxqyp855m.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllbzaz04.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllbzaz04.jl:1\n\
    in expression starting at /tmp/tmpllbzaz04.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n# Run this cell to check your\
    \ output. If everything is correct, you should see 'Yes' as the \n# output. \n\
    file_name_check(\"example.txt\")\n</cell>\n<text>\nPart 2: Checking if an input\
    \ is a valid file path\nNow that you have checked the validity of file names,\
    \ you can check if an input is a valid file path. \nThe function is_file_path\
    \ should take in a string and return a string 'Yes' if the input is a valid file\
    \ path, \nand 'No' otherwise.\nA valid file path consists of exactly one dot '.',\
    \ and it starts with a letter from the latin \nalphapet ('a'-'z' and 'A'-'Z').\n\
    Examples:\nis_file_path(\"example.txt\") # => 'Yes'\nis_file_path(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\nis_file_path(\"\
    example\") # => 'No'\nis_file_path(\"1example\") # => 'No'\nis_file_path(\"example.txt\"\
    ) # => 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"example\") #\
    \ => 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"example\") # =>\
    \ 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"example\") # => 'No'\n\
    is_file_path(\"example\") # => 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"\
    example\") # => 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"example\"\
    ) # => 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"example\") #\
    \ => 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"example\") # =>\
    \ 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"example\") # => 'No'\n\
    is_file_path(\"example\") # => 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"\
    example\") # => 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"example\"\
    ) # => 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"example\") #\
    \ => 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"example\") # =>\
    \ 'No'\nis_file_path(\"example\") # => 'No'\nis_file_path(\"example\") # => 'No'\n\
    is_file_path(\"example\") # => 'No'\nis_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyp15aqzl.jl:19\nin expression starting at\
    \ /tmp/tmpyp15aqzl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyxw2sxul.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyxw2sxul.jl:1\n\
    in expression starting at /tmp/tmpyxw2sxul.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvkxkdide.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvkxkdide.jl:1\n\
    in expression starting at /tmp/tmpvkxkdide.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk7k08sdw.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk7k08sdw.jl:1\n\
    in expression starting at /tmp/tmpk7k08sdw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    file_name_split\
    \ = split(file_name, \".\")\n    \n    if length(file_name_split) != 2 or file_name_split[1]\
    \ != \"\" or file_name_split[1][1] != \"\" \n        or file_name_split[1][1]\
    \ != file_name_split[1][1][1] or file_name_split[1][1][1] != file_name_split[1][1][2]\
    \ \n        or file_name_split[1][1][1] != file_name_split[1][1][2] or file_name_split[1][1][2]\
    \ != \"\"\n        or file_name_split[1][1][2] != \".\" or file_name_split[1][1][2]\
    \ != \"exe\" or file_name_split[1][1][2] != \"dll\"\n        or file_name_split[1][1][2]\
    \ != \"txt\" or file_name_split[1][1][2] != \"py\" or file_name_split[1][1][2]\
    \ != \"sh\"\n        or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"bat\" or file_name_split[1][1][2] != \"cmd\"\n        or file_name_split[1][1][2]\
    \ != \"bat\" or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"cmd\"\n        or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"bat\" or file_name_split[1][1][2] != \"cmd\"\n        or file_name_split[1][1][2]\
    \ != \"bat\" or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"cmd\"\n        or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"bat\" or file_name_split[1][1][2] != \"cmd\"\n        or file_name_split[1][1][2]\
    \ != \"bat\" or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"cmd\"\n        or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"bat\" or file_name_split[1][1][2] != \"cmd\"\n        or file_name_split[1][1][2]\
    \ != \"bat\" or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"cmd\"\n        or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"bat\" or file_name_split[1][1][2] != \"cmd\"\n        or file_name_split[1][1][2]\
    \ != \"bat\" or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"cmd\"\n        or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"bat\" or file_name_split[1][1][2] != \"cmd\"\n        or file_name_split[1][1][2]\
    \ != \"bat\" or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"cmd\"\n        or file_name_split[1][1][2] != \"bat\" or file_name_split[1][1][2]\
    \ != \"bat\" or \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"file_name_split\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdw4ud9t4.jl:18\nin expression starting at\
    \ /tmp/tmpdw4ud9t4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<text>\nSolution\nRun the cell below to test your function\
    \ and create the function solution. Once you have tested the function, run the\
    \ cell below to turn in the cash.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9uhdg4g.jl:19\nin expression starting at\
    \ /tmp/tmpy9uhdg4g.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp575q95zi.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp575q95zi.jl:1\n\
    in expression starting at /tmp/tmp575q95zi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqy7vxj8j.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqy7vxj8j.jl:1\n\
    in expression starting at /tmp/tmpqy7vxj8j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\"\
    ) # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\
    function file_name_check(file_name::String)::String \n    \n    # Your code here\n\
    \    \nend\n</cell>\n<code language=julia-1.4>\n# Run this cell to check your\
    \ work\nfile_name_check(\"example.txt\")\n</cell>\n<text>\nPart 2: Write a Julia\
    \ function that takes a string representing a file's name, and returns the file's\
    \ extension.\nA file's extension is considered to be the part of the string after\
    \ the last '.'.\nExamples:\nfile_name_extension(\"example.txt\") # => 'txt'\n\
    file_name_extension(\"1example.dll\") # => 'dll'\nfile_name_extension(\"example.exe\"\
    ) # => 'exe'\nfile_name_extension(\"example\") # => '' (empty string)\nfile_name_extension(\"\
    1example\") # => '' (empty string)\nfile_name_extension(\"example1\") # => ''\
    \ (empty string)\nfile_name_extension(\"example1.txt\") # => 'txt'\nfile_name_extension(\"\
    example1.exe\") # => 'exe'\nfile_name_extension(\"example1.dll\") # => 'dll'\n\
    file_name_extension(\"example1.exe.txt\") # => 'exe'\nfile_name_extension(\"example1.exe.txt.dll\"\
    ) # => 'exe'\nfile_name_extension(\"example1.exe.txt.dll.txt\") # => 'exe'\nfile_name_extension(\"\
    example1.exe.txt.dll.txt.exe\") # => 'exe'\nfile_name_extension(\"example1.exe.txt.dll.txt.exe.dll\"\
    ) # => 'exe'\nfile_name_extension(\"example1.exe.txt.dll.txt.exe.dll.txt\") #\
    \ => 'exe'\nfile_name_extension(\"example1.exe.txt.dll.txt.exe.dll.txt.exe\")\
    \ # => 'exe'\nfile_name_extension(\"example1.exe.txt.dll.txt.exe.dll.txt.exe.exe\"\
    ) # => 'exe'\nfile_name_extension(\"example1.exe.txt.dll.txt.exe.dll.txt.exe.exe.exe\"\
    ) # => 'exe'\nfile_name_extension(\"example1.exe.txt.dll.txt.exe.dll.txt.exe.exe.exe.exe\"\
    ) # => 'exe'\nfile_name_extension(\"example1.exe.txt.dll.txt.exe.dll.txt.exe.exe.exe.exe.exe\"\
    ) # => 'exe'\nfile_name_extension(\"example1.exe.txt.dll.txt.exe.dll.txt.exe.exe.exe.exe.exe.exe\"\
    ) # => 'exe'\nfile_name_extension(\"example1.exe.txt.dll.txt.exe.dll.txt.exe.exe.exe.exe.exe.exe.exe\"\
    ) # => 'exe'\nfile_name_extension(\"example1.exe.txt.dll.txt.exe.dll.txt.exe.exe.exe.exe.exe.exe.exe\"\
    ) # \nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9cxdawmc.jl:19\nin expression starting at\
    \ /tmp/tmp9cxdawmc.jl:19\n"
  exit_code: 1
  status: SyntaxError
