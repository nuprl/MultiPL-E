name: HumanEval_54_same_chars
language: julia
prompt: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n  \
  \  True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
  \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
  \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\nfunction\
  \ same_chars(s0::String, s1::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
  eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
  ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
  eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
  ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
  \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
completions: ["    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0[i])\
    \ == char(s1[i]) for i in 1:length(s0))\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    \    \n    if s0 == s1:\n        return True\n    \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    \n    if len0 != len1:\n        return False\n    \n\
    \    i = 0\n    while i < len0:\n        if s0[i] != s1[i]:\n            return\
    \ False\n        i += 1\n    \n    return True\n    \n    \n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    same_chars = true\n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\nI wrote a function that checks if two strings are anagrams of\
    \ each other:\n<code>", "    \n    same_chars = true\n    \n    for c in s0:\n\
    \        if c not in s1:\n            same_chars = false\n            break\n\
    \    \n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    \n    if s0 == s1 \n        then return true\n    else \n        same_chars(s0,\
    \ s1) || same_chars(s1, s0)\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(c) == char(c0) for\
    \ (c, c0) in zip(s0, s1))\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string.\nTest\
    \ your function with different inputs.\nUse assert to test your function.", " \
    \   len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n        return\
    \ false\n    else\n        len0 = length(s0)\n        for i::Int in 0..len0\n\
    \            if s0[i] != s1[i]\n                return false\n            else\n\
    \        end\n        return true\n    end\nend\n\"\"\"\n    Check if two words\
    \ have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    len0 = length(s0)\n    len1\
    \ = length(s1)\n    if len0 != len1\n        false\n    else\n        chars0::Char\
    \ = s0 \n        chars1::Char = s1\n        len0::Int = length(chars0)\n     \
    \   len1::Int = length(chars1)\n        for i in 0..len0\n            if chars0[i]\
    \ != chars1[i]\n                false\n            else\n                true\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    same_chars(s0, s1) || same_chars(s1,\
    \ s0)\nend\n</cell>\n<code language=julia-1.5>", "    \n    same_chars = true\n\
    \    \n    for c in s0:\n        if c not in s1:\n            same_chars = false\n\
    \            break\n    \n    return same_chars\nend\n</cell>\n<code language=julia-1.4>",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0[i]) == char(s1[i])\
    \ for i in 1:length(s0))\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars = false\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n        same_chars = true\n        break\n\
    \    return same_chars\nend\n</cell>\n<code language=julia-1.5>", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| c |>\nThis is not the most efficient solution. `setdiff` will iterate\
    \ over the entire string for each character in `s1`, whereas `same_chars` will\
    \ stop iterating as soon as it finds a mismatch.\n<|/ c |>\n<| c |>\nI agree,\
    \ `setdiff` will iterate over the entire string for each character in `s1`, whereas\
    \ `same_chars` will stop iterating as soon as it finds a mismatch. However, the\
    \ `same_chars` solution will also stop iterating as soon as it finds a mismatch,\
    \ whereas the `setdiff` solution will iterate over the entire string for each\
    \ character in `s1`. So the efficiency is similar.\n<|/ c |>\n<| c |>\nI agree\
    \ that `setdiff` will stop iterating as soon as it finds a mismatch, but `same_chars`\
    \ will also stop iterating as soon as it finds a mismatch. `setdiff` will iterate\
    \ over the entire string for each character in `s1`, whereas `same_chars` will\
    \ stop iterating as soon as it finds a mismatch. However, the `same_chars` solution\
    \ will also stop iterating as soon as it finds a mismatch, whereas the `setdiff`\
    \ solution will iterate over the entire string for each character in `s1`. So\
    \ the efficiency is similar.\n<|/ c |>\n<| c |>\nI agree that `setdiff` will stop\
    \ iterating as soon as it finds a mismatch, but `same_chars` will also stop iterating\
    \ as soon as it finds a mismatch. `setdiff` will iterate over the entire string\
    \ for each character in `s1`, whereas `same_chars` will stop iterating as soon\
    \ as it finds a mismatch. However, the `same_chars` solution will also stop iterating\
    \ as soon as it finds a mismatch, whereas the `setdiff` solution will iterate\
    \ over the entire string for each character in `s1`. So the efficiency is similar.\n\
    <|/ c |>\n<| c |>\nI agree that `setdiff` will stop iterating as soon as it finds\
    \ a mismatch, but `same_chars` will also stop iterating as soon as it finds a\
    \ mismatch. `setdiff` will iterate over the entire string for each character in\
    \ `s1`, whereas `same_chars` will stop iterating as soon as it finds a mismatch.\
    \ However, the `same_chars` solution will also stop iterating as soon as it finds\
    \ a mismatch, whereas the `set", "    same_chars = true\n    for c in s0:\n  \
    \      if c not in s1:\n            same_chars = false\n            break\n  \
    \  return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    if s0 == s1 then return true\
    \ else return false end\n    \n    if length(s0) != length(s1) then return false\
    \ end\n    \n    for c in s0:\n        if c != s1[1] then return false end\n \
    \   end\n    \n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word, phrase or sentence\
    \ that reads the same backward as forward.\nFor example \"racecar\" is a palindrome\
    \ and \"racecars\" is not a palindrome.\nWrite a function that checks if a word\
    \ is a palindrome.\nA palindrome is a word, phrase or sentence that reads the\
    \ same backward as forward.\nFor example \"racecar\" is a palindrome and \"racecars\"\
    \ is not a palindrome.\nWrite a function that checks if a word is a palindrome.\n\
    A palindrome is a word, phrase or sentence that reads the same backward as forward.\n\
    For example \"racecar\" is a palindrome and \"racecars\" is not a palindrome.\n\
    Write a function that checks if a word is a palindrome.\nA palindrome is a word,\
    \ phrase or sentence that reads the same backward as forward.\nFor example \"\
    racecar\" is a palindrome and \"racecars\" is not a palindrome.\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word, phrase or sentence\
    \ that reads the same backward as forward.\nFor example \"racecar\" is a palindrome\
    \ and \"racecars\" is not a palindrome.\nWrite a function that checks if a word\
    \ is a palindrome.\nA palindrome is a word, phrase or sentence that reads the\
    \ same backward as forward.\nFor example \"racecar\" is a palindrome and \"racecars\"\
    \ is not a palindrome.\nWrite a function that checks if a word is a palindrome.\n\
    A palindrome is a word, phrase or sentence that reads the same backward as forward.\n\
    For example \"racecar\" is a palindrome and \"racecars\" is not a palindrome.\n\
    Write a function that checks if a word is a palindrome.\nA palindrome is a word,\
    \ phrase or sentence that reads the same backward as forward.\nFor example \"\
    racecar\" is a palindrome and \"racecars\" is not a palindrome.\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word, phrase or sentence\
    \ that reads the same backward as forward.\nFor ", "    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    if s0 == s1 \n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return true\n    else if s1 == \"\"\n        then return\
    \ true\n    else if s0 == \"\"\n        then return true\n    else if s1 == \"\
    \"\n        then return true\n    else if s0 == \"\"\n        then return true\n\
    \    else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n  \
    \      then return true\n    else if s1 == \"\"\n        then return true\n  \
    \  else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n    \
    \    then return true\n    else if s0 == \"\"\n        then return true\n    else\
    \ if s1 == \"\"\n        then ", "    same_chars = true\n    for c in s0:\n  \
    \      if c not in s1:\n            same_chars = false\n            break\n  \
    \  return same_chars\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    same_chars = true\n    \n    for c in s0:\n\
    \        if c not in s1:\n            same_chars = false\n            break\n\
    \    \n    return same_chars", "    same_chars = true\n    i = 0\n    j = i\n\
    \    while i < length(s0) and j < length(s1)\n        if s0[i] == s1[j]\n    \
    \        same_chars = false\n            i += 1\n            j += 1\n        else\n\
    \            i += 1\n            j += 1\n    end\n    return same_chars\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in it.\nThe function should ignore non-alphabetic characters\
    \ and count the alphabetic characters.\nThe function should ignore spaces.\nThe\
    \ function should ignore punctuation and numbers.\nThe function should ignore\
    \ capitalization.\nThe function should ignore non-alphabetic characters and count\
    \ the alphabetic characters.\nThe function should ignore spaces.\nThe function\
    \ should ignore punctuation and numbers.\nThe function should ignore capitalization.\n\
    The function should ignore non-alphabetic characters and count the alphabetic\
    \ characters.\nThe function should ignore spaces.\nThe function should ignore\
    \ punctuation and numbers.\nThe function should ignore capitalization.\nThe function\
    \ should ignore non-alphabetic characters and count the alphabetic characters.\n\
    The function should ignore spaces.\nThe function should ignore punctuation and\
    \ numbers.\nThe function should ignore capitalization.\nThe function should ignore\
    \ non-alphabetic characters and count the alphabetic characters.\nThe function\
    \ should ignore spaces.\nThe function should ignore punctuation and numbers.\n\
    The function should ignore capitalization.\nThe function should ignore non-alphabetic\
    \ characters and count the alphabetic characters.\nThe function should ignore\
    \ spaces.\nThe function should ignore punctuation and numbers.\nThe function should\
    \ ignore capitalization.\nThe function should ignore non-alphabetic characters\
    \ and count the alphabetic characters.\nThe function should ignore spaces.\nThe\
    \ function should ignore punctuation and numbers.\nThe function should ignore\
    \ capitalization.\nThe function should ignore non-alphabetic characters and count\
    \ the alphabetic characters.\nThe function should ignore spaces.\nThe function\
    \ should ignore punctuation and numbers.\nThe function should ignore capitalization.\n\
    The function should ignore non-alphabetic characters and count the alphabetic\
    \ characters.\nThe function should ignore spaces.\nThe function should ignore\
    \ punctuation and numbers.\nThe function should ignore capitalization.\nThe function\
    \ should ignore non-alphabetic characters and count the alphabetic characters.\n\
    The function should ignore spaces.\nThe function should ignore punctuation and\
    \ numbers.\nThe function should ignore capitalization.\nThe function should ignore\
    \ non-alphabetic characters and count the alphabetic characters.\nThe function\
    \ should ignore spaces.\nThe function should ignore punctu", "    same_chars(s0,\
    \ s1) || same_chars(s1, s0)\nend", "    \n    if length(s0) != length(s1)\n  \
    \      return false\n    \n    i = 0\n    \n    while i < length(s0)\n       \
    \ if s0[i] != s1[i]\n            return false\n        i += 1\n    \n    return\
    \ true\nend\n</cell>\n<text>\nExercise 7: Write a function that checks if a word\
    \ is palindrome or not.\nThe word is a palindrome if its first and last characters\
    \ are the same.\nThe word is not a palindrome if its first and last characters\
    \ are not the same.\nThe word is not a palindrome if its first and last characters\
    \ are different.\nThe word is not a palindrome if its first and last characters\
    \ are different and they are both lowercase.\nThe word is not a palindrome if\
    \ its first and last characters are different and they are both uppercase.\nThe\
    \ word is not a palindrome if its first and last characters are different and\
    \ they are both digits.\nThe word is not a palindrome if its first and last characters\
    \ are different and they are both punctuation.\nThe word is not a palindrome if\
    \ its first and last characters are different and they are both symbols.\nThe\
    \ word is not a palindrome if its first and last characters are different and\
    \ they are both whitespace.\nThe word is not a palindrome if its first and last\
    \ characters are different and they are both non-alphanumeric.\nThe word is not\
    \ a palindrome if its first and last characters are different and they are both\
    \ non-alphabetical.\nThe word is not a palindrome if its first and last characters\
    \ are different and they are both non-alphabetical.\nThe word is not a palindrome\
    \ if its first and last characters are different and they are both non-alphabetical.\n\
    The word is not a palindrome if its first and last characters are different and\
    \ they are both non-alphabetical.\nThe word is not a palindrome if its first and\
    \ last characters are different and they are both non-alphabetical.\nThe word\
    \ is not a palindrome if its first and last characters are different and they\
    \ are both non-alphabetical.\nThe word is not a palindrome if its first and last\
    \ characters are different and they are both non-alphabetical.\nThe word is not\
    \ a palindrome if its first and last characters are different and they are both\
    \ non-alphabetical.\nThe word is not a palindrome if its first and last characters\
    \ are different and they are both non-alphabetical.\nThe word is not a palindrome\
    \ if its first and last characters are different and they are both non-alphabetical.\n\
    The word ", "    same_chars = true\n    \n    for c in s0:\n        if c not in\
    \ s1:\n            same_chars = false\n            break\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.3>", "    \n    \"\"\"\n    Check if two\
    \ words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    if s0 == s1:\n      \
    \  return True\n    \n    len_s0 = len(s0)\n    len_s1 = len(s1)\n    \n    if\
    \ len_s0 > len_s1:\n        return False\n    \n    i = 0\n    j = 0\n    \n \
    \   while i < len_s0 and j < len_s1:\n        if s0[i] == s1[j]:\n           \
    \ i += 1\n            j += 1\n        elif s0[i] > s1[j]:\n            return\
    \ False\n        else:\n            j += 1\n    \n    return i == len_s0 and j\
    \ == len_s1\n    \n    \n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"", "    len0 = length(s0)\n    len1 = length(s1)\n    if\
    \ len0 != len1\n        return false\n    \n    i = 0\n    while i < len0\n  \
    \      if s0[i] != s1[i]\n            return false\n        i += 1\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>", "    \n    if length(s0) !=\
    \ length(s1)\n        return false\n    \n    i = 0\n    while i < length(s0)\n\
    \        if s0[i] != s1[i]\n            return false\n        i += 1\n    return\
    \ true\nend", "    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if\
    \ len0 != len1\n        return false\n    \n    i = 0\n    \n    while i < len0\n\
    \        if s0[i] != s1[i]\n            return false\n        i += 1\n    \n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if\
    \ two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    same_chars = true\n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0 != len1\n\
    \        return false\n    \n    i = 0\n    \n    while i < len0\n        if s0[i]\
    \ != s1[i]\n            return false\n        i += 1\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.3>", "    len1 = length(s1)\n    len2 = length(s2)\n\
    \    if len1 == len2\n        true\n    else\n        if len1 > len2\n       \
    \     true\n        else\n            if len1 < len2\n                false\n\
    \            else\n                if s1 == s2\n                    true\n   \
    \             else\n                    if s0 == s1\n                        true\n\
    \                    else\n                        if s0 == s2\n             \
    \               true\n                        else\n                         \
    \   if s1 == s2\n                                true\n                      \
    \      else\n                                if s1 == s2\n                   \
    \                 true\n                                else\n               \
    \                     if s0 == s1\n                                        true\n\
    \                                    else\n                                  \
    \      if s0 == s2\n                                            true\n       \
    \                                 else\n                                     \
    \       if s1 == s2\n                                                true\n  \
    \                                          else\n                            \
    \                    if s0 == s1\n                                           \
    \         true\n                                                else:\n      \
    \                                              if s0 == s2\n                 \
    \                                       true\n                               \
    \                     else\n                                                 \
    \       if s1 == s2\n                                                        \
    \    true\n                                                        else\n    \
    \                                                        false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    same_chars = true\n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"", "    \n    same_chars = true\n    for c in s0:\n    \
    \    if c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.4>", "    len1 = length(s1)\n\
    \    len2 = length(s2)\n    if len1 != len2\n        return false\n    elseif\
    \ len1 == 0\n        return true\n    else\n        char1 = s1[1]\n        char2\
    \ = s2[1]\n        if char1 == char2\n            return same_chars(s1[2:], s2[2:])\n\
    \        else\n            return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    if s0 == s1 \n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s1\
    \ == s2\n        then return true\n    else if s0 == s2\n        then return true\n\
    \    else if s1 == s2\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then ", "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"", "    \n    if s0 == s1 \n        then return true\n \
    \   else \n        match s0, s1 \n            | [], \"\" -> true\n           \
    \ | \"\", [] -> true\n            | [], y::y -> false\n            | x::xs, y::ys\
    \ -> same_chars(xs, ys) \n        end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend", "    \n    \"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    same_chars(s0, s1) = length(s0) == length(s1)\
    \ && all(char(c) == char(c0) for c, c0 in zip (s0, s1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0) == char(s1) for\
    \ char in s0)\nend", "    \n    if s0 == s1 \n    then return true\n    else if\
    \ s0 == ''\n    then return true\n    else if s1 == ''\n    then return true\n\
    \    else if s0 == s1\n    then return true\n    else if s0 == ''\n    then return\
    \ true\n    else if s1 == ''\n    then return true\n    else if s0 == s1\n   \
    \ then return true\n    else if s0 == ''\n    then return true\n    else if s1\
    \ == ''\n    then return true\n    else if s0 == s1\n    then return true\n  \
    \  else if s0 == ''\n    then return true\n    else if s1 == ''\n    then return\
    \ true\n    else if s0 == s1\n    then return true\n    else if s0 == ''\n   \
    \ then return true\n    else if s1 == ''\n    then return true\n    else if s0\
    \ == s1\n    then return true\n    else if s0 == ''\n    then return true\n  \
    \  else if s1 == ''\n    then return true\n    else if s0 == s1\n    then return\
    \ true\n    else if s0 == ''\n    then return true\n    else if s1 == ''\n   \
    \ then return true\n    else if s0 == s1\n    then return true\n    else if s0\
    \ == ''\n    then return true\n    else if s1 == ''\n    then return true\n  \
    \  else if s0 == s1\n    then return true\n    else if s0 == ''\n    then return\
    \ true\n    else if s1 == ''\n    then return true\n    else if s0 == s1\n   \
    \ then return true\n    else if s0 == ''\n    then return true\n    else if s1\
    \ == ''\n    then return true\n    else if s0 == s1\n    then return true\n  \
    \  else if s0 == ''\n    then return true\n    else if s1 == ''\n    then return\
    \ true\n    else if s0 == s1\n    then return true\n    else if s0 == ''\n   \
    \ then return true\n    else if s1 == ''\n    then return true\n    else if s0\
    \ == s1\n    then return true\n    else if s0 == ''\n    then return true\n  \
    \  else if s1 == ''\n    then return true\n    else if s0 == s1\n    then return\
    \ true\n    else if s0 == ''\n    then return true\n    else if s1 == ''\n   \
    \ then return true\n    else if s0 == s1\n", "    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(c) == char(s0[c]) for c in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"", "    \n    if length(s0) != length(s1)\n        return\
    \ false\n    \n    i = 0\n    j = length(s0)\n    \n    while i < j\n        if\
    \ s0[i] != s1[j]\n            return false\n        i += 1\n        j += 1\n \
    \   \n    return true\nend", "    \n    same_chars = true\n    for c in s0:\n\
    \        if c not in s1:\n            same_chars = false\n            break\n\
    \    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    if s0 == s1 \n        then\
    \ return true\n        else return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    \n    same_chars = true\n    \n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    \n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.4>", "    same_chars(s0, s1) || same_chars(s1,\
    \ s0)\nend", "    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s0)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s1)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s2)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s3)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s4)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s5)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s6)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s7)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s8)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s9)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s10)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s11)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s12)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s13)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s14)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s15)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s16)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s17)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s18)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s19)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s20)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s21)\n    same_chars_chars_idx::Array{Int,1} = findfirst(same_chars_chars_idx,\
    \ s22)\n    same_chars_chars_", "    \n    len0 = length(s0)\n    len1 = length(s1)\n\
    \    \n    if len0 != len1\n        return false\n    \n    i = 0\n    while i\
    \ < len0\n        if s0[i] != s1[i]\n            return false\n        i += 1\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>", "    \n    same_chars\
    \ = true\n    \n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n        \n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    same_chars = true\n    \n    for c in s0:\n\
    \        if c not in s1:\n            same_chars = false\n            break\n\
    \    \n    return same_chars\nend", "    same_chars = true\n    for c in s0:\n\
    \        if c not in s1:\n            same_chars = false\n            break\n\
    \    return same_chars\nend\n</cell>\n<code language=julia-1.5>", "    same_chars(s0,\
    \ s1) || (same_chars(s0, s1) && same_chars(s1, s0))\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.0>",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>",
  "    len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n        return\
    \ false\n    else\n        for (i0, i1) in zip(xrange(len0), xrange(len1))\n \
    \           if s0[i0] != s1[i1]\n                return false\n        return\
    \ true\n    end\nend\n</cell>\n<code language=julia-1.0>", "    same_chars = true\n\
    \    len = length(s0)\n    for i::Int in 0..length(s1)\n        if s0[i] != s1[i]\n\
    \            same_chars = false\n            break\n    end\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.4>", "    len0 = length(s0)\n    len1 = length(s1)\n\
    \    if len0 != len1\n        return false\n    else\n        chars = chars(s0)\n\
    \        chars = chars[0..len1-len0]\n        chars = chars[1..len0]\n       \
    \ chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len1-len0]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len1-len0]\n        chars = chars[1..len0]\n       \
    \ chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len1-len0]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len1-len0]\n        chars = chars[1..len0]\n       \
    \ chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len1-len0]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[0..len1-len0]\n        chars = chars[1..len0]\n       \
    \ chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n        chars =\
    \ chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>",
  "    len = length(s0)\n    len1 = length(s1)\n    if len == len1\n        for (i,\
    \ c) in zip(s0, s1)\n            if i != c\n                return false\n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two\
    \ words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    same_chars = true\n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n        return\
    \ false\n    \n    i = 0\n    while i < len0\n        if s0[i] != s1[i]\n    \
    \        return false\n        i += 1\n    return true\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of characters in a string.\n\
    The function should take a string as input and return the number of characters\
    \ in the string.\nThe function should raise an error if the string is not of length\
    \ 1 or is empty.\nThe function should raise an error if the string contains any\
    \ non-alphabetic characters.\nThe function should raise an error if the string\
    \ contains any non-alphabetic characters or is empty.\nThe function should raise\
    \ an error if the string contains any non-alphabetic characters or is empty.\n\
    The function should raise an error if the string contains any non-alphabetic characters\
    \ or is empty.\nThe function should raise an error if the string contains any\
    \ non-alphabetic characters or is empty.\nThe function should raise an error if\
    \ the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should raise an error\
    \ if the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should raise an error\
    \ if the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should raise an error\
    \ if the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should raise an error if the string contains any non-alphabetic\
    \ characters or is empty.\nThe function should raise an error if the string contains\
    \ any non-alphabetic characters or is empty.\nThe function should raise an error\
    \ if the string contains any non-alphabetic characters or is empty.\nThe function\
    \ should raise an error if the string contains any non-alphabetic characters or\
    \ is empty.\nThe function should ", "    same_chars = true\n    for c in s0:\n\
    \        if c not in s1:\n            same_chars = false\n            break\n\
    \    return same_chars\nend\n</cell>\n<code language=julia-1.5>", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>",
  "    len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n        return\
    \ false\n    \n    i = 0\n    while i < len0\n        if s0[i] != s1[i]\n    \
    \        return false\n        i += 1\n    return true\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if two words are anagrams of each other.\n\
    The function should take two strings as arguments and return true if the two words\
    \ are anagrams of each other, and false otherwise.\nThe function should ignore\
    \ case when comparing characters.\nThe function should ignore punctuation and\
    \ numbers.\nThe function should ignore spaces.\nThe function should ignore extra\
    \ whitespace.\nThe function should ignore leading whitespace.\nThe function should\
    \ ignore trailing whitespace.\nThe function should ignore leading or trailing\
    \ punctuation.\nThe function should ignore extra punctuation.\nThe function should\
    \ ignore extra numbers.\nThe function should ignore extra spaces.\nThe function\
    \ should ignore extra leading or trailing whitespace.\nThe function should ignore\
    \ extra leading or trailing punctuation.\nThe function should ignore extra leading\
    \ or trailing numbers.\nThe function should ignore extra leading or trailing spaces.\n\
    The function should ignore extra leading or trailing whitespace.\nThe function\
    \ should ignore extra leading or trailing punctuation.\nThe function should ignore\
    \ extra leading or trailing numbers.\nThe function should ignore extra leading\
    \ or trailing spaces.\nThe function should ignore extra leading or trailing whitespace.\n\
    The function should ignore extra leading or trailing punctuation.\nThe function\
    \ should ignore extra leading or trailing numbers.\nThe function should ignore\
    \ extra leading or trailing spaces.\nThe function should ignore extra leading\
    \ or trailing whitespace.\nThe function should ignore extra leading or trailing\
    \ punctuation.\nThe function should ignore extra leading or trailing numbers.\n\
    The function should ignore extra leading or trailing spaces.\nThe function should\
    \ ignore extra leading or trailing whitespace.\nThe function should ignore extra\
    \ leading or trailing punctuation.\nThe function should ignore extra leading or\
    \ trailing numbers.\nThe function should ignore extra leading or trailing spaces.\n\
    The function should ignore extra leading or trailing whitespace.\nThe function\
    \ should ignore extra leading or trailing punctuation.\nThe function should ignore\
    \ extra leading or trailing numbers.\nThe function should ignore extra leading\
    \ or trailing spaces.\nThe function should ignore extra leading or trailing whitespace.\n\
    The function should ignore extra leading or trailing punctuation.\nThe function\
    \ should ignore extra leading or trailing numbers.\nThe function should ignore\
    \ extra leading or trailing spaces.\nThe function should ignore extra leading\
    \ or trailing whitespace.\nThe function should ignore extra leading or trailing\
    \ punctuation.\nThe function should ignore extra leading or trailing numbers.",
  "    \n    same_chars = true\n    \n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    \n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.5>", "    same_chars(s0, s1) = s1==s0 \n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  \
    \  True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    same_chars = true\n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    return same_chars\nend \n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    \n    same_chars = true\n    \n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    \n    return same_chars\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis does not answer the question. He is\
    \ asking about a general algorithm to compare two strings. Your answer only works\
    \ for two strings.\n<|/ c |>\n<| c |>\nThis answer does not answer the question.\
    \ He is asking about a general algorithm to compare two strings. Your answer only\
    \ works for two strings.\n<|/ c |>\n<| c |>\nI believe this answer is correct.\
    \ He is asking about a general algorithm to compare two strings. Your answer only\
    \ works for two strings.\n<|/ c |>\n<| c |>\nThis answer does not answer the question.\
    \ He is asking about a general algorithm to compare two strings. Your answer only\
    \ works for two strings.\n<|/ c |>\n<| c |>\nThis answer does not answer the question.\
    \ He is asking about a general algorithm to compare two strings. Your answer only\
    \ works for two strings.\n<|/ c |>\n<| a |>\n<code>\ndef same_chars(s0, s1):\n\
    \    return len(s0) == len(s1) and set(s0) == set(s1)\n</code>\n<|/ a tags=string,algorithm,python\
    \ dscore=2 |>\n<| c |>\nThis does not answer the question. He is asking about\
    \ a general algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| c |>\nThis answer does not answer the question. He is asking about\
    \ a general algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\ndef same_chars(s0, s1):\n    return len(s0)\
    \ == len(s1) and set(s0) == set(s1)\n</code>\n<|/ a tags=string,algorithm,python\
    \ |>\n<| c |>\nThis does not answer the question. He is asking about a general\
    \ algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| c |>\nThis answer does not answer the question. He is asking about\
    \ a general algorithm to compare two strings. Your answer only works for two strings.\n\
    <|/ c |>\n<| a tags=string,algorithm,python |>\n<code>\ndef same_chars(s0, s1):\n\
    \    return len(s0) == len(s1) and set(s0) == set(s1)\n</code>\n<|/ a d", "  \
    \  \n    same_chars = false\n    \n    if length(s0) == length(s1)\n        same_chars\
    \ = true\n        for (i, c) in zip(s0, s1)\n            if c != s0[i]\n     \
    \           same_chars = false\n                break\n    end\n    \n    return\
    \ same_chars\nend", "    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n\
    \    if len0 != len1\n        return false\n    \n    i = 0\n    while i < len0\n\
    \        if s0[i] != s1[i]\n            return false\n        i += 1\n    \n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if\
    \ two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    len0 = length(s0)\n    len1\
    \ = length(s1)\n    if len0 != len1\n        return false\n    else\n        chars\
    \ = chars(s0)\n        chars = chars[0..len1-1]\n        for c in chars\n    \
    \        if c != chars[end(chars)]\n                return false\n        end\n\
    \        return true\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word that reads the\
    \ same backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome.\n\
    Write a function that checks if a word is a palindrome.\nA palindrome is a word\
    \ that reads the same backward as forward.\nFor example, \u201Cracecar\u201D is\
    \ a palindrome.\nWrite a function that checks if a word is a palindrome.\nA palindrome\
    \ is a word that reads the same backward as forward.\nFor example, \u201Cracecar\u201D\
    \ is a palindrome.\nWrite a function that checks if a word is a palindrome.\n\
    A palindrome is a word that reads the same backward as forward.\nFor example,\
    \ \u201Cracecar\u201D is a palindrome.\nWrite a function that checks if a word\
    \ is a palindrome.\nA palindrome is a word that reads the same backward as forward.\n\
    For example, \u201Cracecar\u201D is a palindrome.\nWrite a function that checks\
    \ if a word is a palindrome.\nA palindrome is a word that reads the same backward\
    \ as forward.\nFor example, \u201Cracecar\u201D is a palindrome.\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word that reads the\
    \ same backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome.\n\
    Write a function that checks if a word is a palindrome.\nA palindrome is a word\
    \ that reads the same backward as forward.\nFor example, \u201Cracecar\u201D is\
    \ a palindrome.\nWrite a function that checks if a word is a palindrome.\nA palindrome\
    \ is a word that reads the same backward as forward.\nFor example, \u201Cracecar\u201D\
    \ is a palindrome.\nWrite a function that checks if a word is a palindrome.\n\
    A palindrome is a word that reads the same backward as forward.\nFor example,\
    \ \u201Cracecar\u201D is a palindrome.\nWrite a function that checks if a word\
    \ is a palindrome.\nA palindrome is a word that reads the same backward as forward.\n\
    For example, \u201Cracecar\u201D is a palindrome.\nWrite a ", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if s0 == s1 \n        then return true\n    else \n        same_chars(s0,\
    \ s1) || same_chars(s1, s0)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    same_chars = true\n    \n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    \n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.5>", "    same_chars = true\n    for c in\
    \ s0:\n        if c not in s1:\n            same_chars = false\n            break\n\
    \    return same_chars\nend\n</cell>\n<code language=julia-1.3>", "    \n    same_chars\
    \ = false\n    \n    if length(s0) == length(s1)\n        same_chars = true\n\
    \        for (i0, i1) in zip(xrange(length(s0)), xrange(length(s1)))\n       \
    \     if s0[i0] != s1[i1]\n                same_chars = false\n              \
    \  break\n    end\n    \n    return same_chars\nend\n</cell>\n<code language=julia-0.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend", "    same_chars = true\n  \
    \  for c in s0:\n        if c not in s1:\n            same_chars = false\n   \
    \         break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>",
  "    len = length(s0)\n    len1 = length(s1)\n    if len == len1\n        for (i1,\
    \ i2) in zip(xrange(len), xrange(len))\n            if s0[i1] != s1[i2]\n    \
    \            then return False\n            end\n        return true\n    end\n\
    \    return false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string. \nWrite\
    \ a function that takes a string as input and returns the number of words in the\
    \ string. \nWrite a function that takes a string as input and returns the number\
    \ of sentences in the string. \nWrite a function that takes a string as input\
    \ and returns the number of characters and words in the string. \nWrite a function\
    \ that takes a string as input and returns the number of characters and words\
    \ in the string.", "    len0 = length(s0)\n    len1 = length(s1)\n    if len0\
    \ == len1\n        true\n    elseif len0 == 0\n        false\n    elseif len1\
    \ == 0\n        false\n    else\n        same_chars(s0, s1[1:len1-1])\n    end\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that checks if a word is palindrome.\
    \ Palindrome is a word that reads the same backward as forward.", "    same_chars(s0,\
    \ s1) = length(s0) == length(s1) && all(char(c) == char(c0) for (c, c0) in zip(s0,\
    \ s1))\nend", "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0[i])\
    \ == char(s1[i]) for i in 1:length(s0))\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    same_chars = true\n    \n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    \n    return same_chars\n\
    </cell>\n<text>\nExercise 4\nWrite a function that checks if two words are anagrams\
    \ of each other.\nThe function should take two strings as arguments and return\
    \ true if they are anagrams of each other, and false if not.\nThe function should\
    \ ignore case when comparing characters.\nThe function should ignore non-alphabetic\
    \ characters (punctuation, spaces, etc).\nThe function should ignore duplicate\
    \ characters (such as 'a' and 'a').\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore duplicate characters (such as 'a'\
    \ and 'a').\nThe function should ignore case when comparing characters.\nThe function\
    \ should ignore non-alphabetic characters (punctuation, spaces, etc).\nThe function\
    \ should ignore duplicate characters (such as 'a' and 'a').\nThe function should\
    \ ignore case when comparing characters.\nThe function should ignore non-alphabetic\
    \ characters (punctuation, spaces, etc).\nThe function should ignore duplicate\
    \ characters (such as 'a' and 'a').\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore duplicate characters (such as 'a'\
    \ and 'a').\nThe function should ignore case when comparing characters.\nThe function\
    \ should ignore non-alphabetic characters (punctuation, spaces, etc).\nThe function\
    \ should ignore duplicate characters (such as 'a' and 'a').\nThe function should\
    \ ignore case when comparing characters.\nThe function should ignore non-alphabetic\
    \ characters (punctuation, spaces, etc).\nThe function should ignore duplicate\
    \ characters (such as 'a' and 'a').\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore duplicate characters (such as 'a'\
    \ and 'a').\nThe function should ignore case when comparing characters.\nThe function\
    \ should ignore non-alphabetic characters (punctuation, spaces, etc).\nThe function\
    \ should ignore duplicate characters (such as 'a' and 'a').\nThe function should\
    \ ignore case when comparing characters.\nThe function should ignore non-alphabetic\
    \ characters (punctuation, spaces, etc).\nThe function should ignore duplicate\
    \ characters (such as 'a' and 'a').\nThe function should ignore case when comparing\
    \ characters.\nThe function should ignore non-alphabetic characters (punctuation, ",
  "    \n    same_chars = false\n    \n    if length(s0) == length(s1)\n        for\
    \ (i, c) in zip(s0, s1)\n            if c != s0[i]\n                same_chars\
    \ = true\n                break\n    end\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.1>", "    \n    if s0 == s1 \n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n        then return true\n\
    \    else if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n  \
    \      then return true\n    else if s0 == \"\"\n        then return true\n  \
    \  else if s1 == \"\"\n        then return true\n    else if s0 == \"\"\n    \
    \    then return true\n    else if s1 == \"\"\n        then return true\n    else\
    \ if s0 == \"\"\n        then return true\n    else if s1 == \"\"\n        then\
    \ return true\n    else if s0 == \"\"\n        then return true\n    else if s1\
    \ == \"\"\n        then return true\n    else if s0 == \"\"\n        then return\
    \ true\n    else if s1 == \"\"\n        then return true\n    else if s0 == \"\
    \"\n        then return true\n    else if s1 == \"\"\n", "    len0 = length(s0)\n\
    \    len1 = length(s1)\n    if len0 != len1\n        return false\n    else\n\
    \        for (i0, i1) in zip(xrange(len0), xrange(len1))\n            if s0[i0]\
    \ != s1[i1]\n                return false\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"", "    same_chars_chars_idx::Array{Int,1} = zeros(Int,\
    \ length(s0))\n    for (i,c) in enumerate(s0)\n        same_chars_chars_idx[i]\
    \ = same_chars_chars_idx[i] + 1 if c == s1[i] else 0\n    return same_chars_chars_idx\
    \ == length(s0)\nend\n</cell>\n<code language=julia-1.5>", "    same_chars(s0,\
    \ s1) = length(s0) == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  \
    \  True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    same_chars_chars_ = same_chars_chars_(s0,\
    \ s1)\n    if same_chars_chars_ == true\n        same_chars_chars_ = same_chars_chars_(s1,\
    \ s0)\n    end\n    return same_chars_chars_\nend", "    same_chars = true\n \
    \   for c in s0:\n        if c not in s1:\n            same_chars = false\n  \
    \          break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n        return\
    \ false\n    else\n        chars = chars(s0)\n        chars = chars[0..len1-len0]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[0..len1-len0]\n        return chars == chars\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(s0) != length(s1) \n    then return\
    \ false \n    else if length(s0) == 0 \n    then return true \n    else if length(s0)\
    \ == 1 \n    then return s0 == s1 \n    else \n        local i::Int = 0\n    \
    \    local j::Int = 0\n        local k::Int = 0\n        local l::Int = 0\n  \
    \      local m::Int = 0\n        local n::Int = 0\n        local o::Int = 0\n\
    \        local p::Int = 0\n        local q::Int = 0\n        local r::Int = 0\n\
    \        local s::Int = 0\n        local t::Int = 0\n        local u::Int = 0\n\
    \        local v::Int = 0\n        local w::Int = 0\n        local x::Int = 0\n\
    \        local y::Int = 0\n        local z::Int = 0\n        local a::Int = 0\n\
    \        local b::Int = 0\n        local c::Int = 0\n        local d::Int = 0\n\
    \        local e::Int = 0\n        local f::Int = 0\n        local g::Int = 0\n\
    \        local h::Int = 0\n        local i::Int = 0\n        local j::Int = 0\n\
    \        local k::Int = 0\n        local l::Int = 0\n        local m::Int = 0\n\
    \        local n::Int = 0\n        local o::Int = 0\n        local p::Int = 0\n\
    \        local q::Int = 0\n        local r::Int = 0\n        local s::Int = 0\n\
    \        local t::Int = 0\n        local u::Int = 0\n        local v::Int = 0\n\
    \        local w::Int = 0\n        local x::Int = 0\n        local y::Int = 0\n\
    \        local z::Int = 0\n        local a::Int = 0\n        local b::Int = 0\n\
    \        local c::Int = 0\n        local d::Int = 0\n        local e::Int = 0\n\
    \        local f::Int = 0\n        local g::Int = 0\n        local h::Int = 0\n\
    \        local i::Int = 0\n        local j::Int = 0\n        local k::Int = 0\n\
    \        local l::Int = 0\n        local m::Int = 0\n        local n::Int = 0\n\
    \        local o::Int = 0\n        local p::Int = 0\n        local q::Int = 0\n\
    \        local r::Int = 0\n        local s::Int = 0\n        local t::Int = 0\n\
    \        local u::Int = 0\n        local v::Int = 0\n        local w::Int = 0\n",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(c) == char(s0[c])\
    \ for c in s0)\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Check if\
    \ two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    \n    if s0 == s1 then return\
    \ true\n    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0\
    \ > len1 then return false\n    \n    i = 0\n    j = 0\n    \n    while i < len0\
    \ and j < len1 do\n        if s0[i] == s1[j] then return true\n        i = i +\
    \ 1\n        j = j + 1\n    end\n    \n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a substring appears\
    \ in a string.\nFor example, if the string is 'abcabcbb', the function should\
    \ return 3 since 'abc' appears 3 times.\nIf the string is 'aaaaaa', the function\
    \ should return 0 since 'aaaa' does not appear in the string.\nIf the string is\
    \ '', the function should return 0 since an empty string does not appear in the\
    \ string.\nIf the string is 'bbbbb', the function should return 1 since 'b' appears\
    \ 1 time.", "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0[i])\
    \ == char(s1[i]) for i in 1:length(s0))\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend", "    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend", "    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    len0 = length(s0)\n    len1 = length(s1)\n    if\
    \ len0 != len1\n        false\n    else\n        forall i::Int in\n          \
    \  if s0[i] != s1[i]\n                false\n            else\n              \
    \  same_chars(s0, s1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a word is a palindrome.\nA palindrome is a word that is the same\
    \ forwards and backwards.\nFor example, \u201Cradar\u201D is a palindrome, but\
    \ \u201Cracecar\u201D is not a palindrome.\nWrite a function that takes a string\
    \ and checks if it is a palindrome.\nIf the string is a palindrome, return true.\n\
    If the string is not a palindrome, return false.\nHint: You may want to use recursion.",
  "    \n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    same_chars = true\n    for c in s0:\n   \
    \     if c not in s1:\n            same_chars = false\n            break\n   \
    \ return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    same_chars = true\n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>\n\"\
    \"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0) == char(s1) for\
    \ char in s0)\nend\n</cell>\n<code language=julia-1.3>", "    if s0 == s1 then\
    \ return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return\
    \ false\n    if s0 == s1[1..] then return true\n    if s1 == s1[1..] then return\
    \ true\n    if s0 == s1[1..] then return false\n    if s1 == s1[1..] then return\
    \ false\n    return false\nend\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"", "    same_chars = true\n    for c in s0:\n        if\
    \ c not in s1:\n            same_chars = false\n            break\n    return\
    \ same_chars\nend\n</cell>\n<code language=julia-1.4>", "    same_chars(s0, s1)\
    \ || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    if s0 == s1 \n    then true \n    else false \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    len0 = length(s0)\n    len1 = length(s1)\n    if\
    \ len0 != len1\n        return false\n    elseif len0 == 0\n        return true\n\
    \    else\n        chars = chars(s0)\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[2:]\n        chars = chars[2:]\n        chars = chars[2:]\n        chars\
    \ = chars[", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.4>", "    same_chars = true\n    for c in s0:\n\
    \        if c not in s1:\n            same_chars = false\n            break\n\
    \    return same_chars\nend\n</cell>\n<code language=julia-1.5>", "    same_chars\
    \ = false\n    for c in s0:\n        if c in s1:\n            same_chars = true\n\
    \            break\n    return same_chars\nend", "    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        return false\n    \n\
    \    i = 0\n    while i < len0\n        if s0[i] != s1[i]\n            return\
    \ false\n        i += 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    \n    if length(s0) == length(s1)\n        same_chars(s0, s1)\n    else\n \
    \       same_chars(s0, s1)\n    end\nend\n</cell>\n<text>\nExercise 9\nWrite a\
    \ function that checks if two words are anagrams of each other.\nHint: Use same_chars.",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0[i]) == char(s1[i])\
    \ for i in 1:length(s0))\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.4>",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that checks if a word is palindrome or not.\nThe word is a palindrome\
    \ if it reads the same backward as forward.\nFor example, \u201Cracecar\u201D\
    \ is a palindrome, but \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D\
    .\nWrite a function that checks if a word is a palindrome or not.\nThe word is\
    \ a palindrome if it reads the same backward as forward.\nFor example, \u201C\
    racecar\u201D is a palindrome, but \u201Cracecar\u201D is not a palindrome of\
    \ \u201Cracecar\u201D.\nWrite a function that checks if a word is a palindrome\
    \ or not.\nThe word is a palindrome if it reads the same backward as forward.\n\
    For example, \u201Cracecar\u201D is a palindrome, but \u201Cracecar\u201D is not\
    \ a palindrome of \u201Cracecar\u201D.\nWrite a function that checks if a word\
    \ is a palindrome or not.\nThe word is a palindrome if it reads the same backward\
    \ as forward.\nFor example, \u201Cracecar\u201D is a palindrome, but \u201Cracecar\u201D\
    \ is not a palindrome of \u201Cracecar\u201D.\nWrite a function that checks if\
    \ a word is a palindrome or not.\nThe word is a palindrome if it reads the same\
    \ backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome, but\
    \ \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D.\nWrite a function\
    \ that checks if a word is a palindrome or not.\nThe word is a palindrome if it\
    \ reads the same backward as forward.\nFor example, \u201Cracecar\u201D is a palindrome,\
    \ but \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D.\nWrite a\
    \ function that checks if a word is a palindrome or not.\nThe word is a palindrome\
    \ if it reads the same backward as forward.\nFor example, \u201Cracecar\u201D\
    \ is a palindrome, but \u201Cracecar\u201D is not a palindrome of \u201Cracecar\u201D\
    .\nWrite a function that checks if a word is a palindrome or not.\nThe word is\
    \ a palindrome if it reads the same backward as forward.\nFor example, \u201C\
    racecar\u201D is a palindrome, but \u201Cracecar\u201D is not a palindrome of\
    \ \u201Cracecar\u201D.\nWrite a function that checks if a word is a palindrome\
    \ or not.\nThe word is a palindrome if it reads the same backward as forward.",
  "    \n    same_chars = true\n    \n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    \n    return same_chars\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    same_chars(s0, s1)\n\
    end", '    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0[i]) ==
    char(s1[i]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0[i..],
    s1[i..]) | same_chars(s0[i..], s1[i..]) | same_chars(s0', "    same_chars(s0,\
    \ s1) || (same_chars(s1[end-1:], s0) && same_chars(s0, s1[end-1:]))\nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"", "    len = length(s0)\n    if len == length(s1)\n   \
    \     for (i, c) in enumerate(s0)\n            if c != s1[i]\n               \
    \ return false\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  \
    \  True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    len0 = length(s0)\n    len1\
    \ = length(s1)\n    if len0 != len1\n        return false\n    else\n        for\
    \ (i,c) in zip(s0,s1)\n            if c != i\n                return false\n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>", '    same_chars(s0,
    s1) = s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0
    || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s0 || s1==s', "    if s0 == s1\
    \ then return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then\
    \ return false\n    \n    i = 0\n    j = 0\n    while i < length(s0) and j < length(s1)\
    \ do\n        if s0[i] == s1[j] then return true\n        i += 1\n        j +=\
    \ 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\
    \n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    len = length(s0)\n    if len == length(s1)\n        for (i, c) in zip(s0, s1)\n\
    \            if i != c\n                return false\n        return true\n  \
    \  else\n        return false\nend\n</cell>\n<code language=julia-1.3>", "   \
    \ same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend", "    \n    \"\"\"\n\
    \    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    \    \n    if s0 == s1:\n        return True\n    \n    len0 = length(s0)\n  \
    \  len1 = length(s1)\n    \n    if len0 > len1:\n        s0, s1 = s1, s0\n   \
    \ \n    i = 0\n    j = 0\n    \n    while i < len0 and j < len1:\n        if s0[i]\
    \ != s1[j]:\n            return False\n        i += 1\n        j += 1\n    \n\
    \    if i == len0:\n        return True\n    \n    if j == len1:\n        return\
    \ True\n    \n    return False\n</cell>\n<cell>\n\"\"\"\nCheck if two words have\
    \ the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n\
    >>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\n\
    True\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\n\
    False\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse\n\"\"\"", "   \
    \ \n    same_chars = true\n    \n    for c in s0:\n        if c not in s1:\n \
    \           same_chars = false\n            break\n    \n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.5>", "    len0 = length(s0)\n    len1 = length(s1)\n\
    \    if len0 != len1\n        return false\n    else\n        chars = chars(s0)\n\
    \        for c in chars\n            if c != chars(s1)\n                return\
    \ false\n        end\n        return true\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that checks if two words are anagrams of each other. An\
    \ anagram is a word that has the same letters in alphabetical order.", "    \n\
    \    if s0 == s1 \n        then return true\n    else if s0 == \"\"\n        then\
    \ return true\n    else if s1 == \"\"\n        then return true\n    else if s0\
    \ == \"\"\n        then return false\n    else if s1 == \"\"\n        then return\
    \ false\n    else if s0 == s1\n        then return true\n    else if s0 == \"\"\
    \n        then return false\n    else if s1 == \"\"\n        then return false\n\
    \    else if s0 == s1\n        then return true\n    else if s0 == \"\"\n    \
    \    then return false\n    else if s1 == \"\"\n        then return false\n  \
    \  else if s0 == s1\n        then return true\n    else if s0 == \"\"\n      \
    \  then return false\n    else if s1 == \"\"\n        then return false\n    else\
    \ if s0 == s1\n        then return true\n    else if s0 == \"\"\n        then\
    \ return false\n    else if s1 == \"\"\n        then return false\n    else if\
    \ s0 == s1\n        then return true\n    else if s0 == \"\"\n        then return\
    \ false\n    else if s1 == \"\"\n        then return false\n    else if s0 ==\
    \ s1\n        then return true\n    else if s0 == \"\"\n        then return false\n\
    \    else if s1 == \"\"\n        then return false\n    else if s0 == s1\n   \
    \     then return true\n    else if s0 == \"\"\n        then return false\n  \
    \  else if s1 == \"\"\n        then return false\n    else if s0 == s1\n     \
    \   then return true\n    else if s0 == \"\"\n        then return false\n    else\
    \ if s1 == \"\"\n        then return false\n    else if s0 == s1\n        then\
    \ return true\n    else if s0 == \"\"\n        then return false\n    else if\
    \ s1 == \"\"\n        then return false\n    else if s0 == s1\n        then return\
    \ true\n    else if s0 == \"\"\n        then return false\n    else if s1 == \"\
    \"\n        then return false\n    else if s0 == s1\n        then return true\n\
    \    else if s0 == \"\"\n        then return false\n    else if s1 == \"\"\n \
    \       then return false\n    else if s0 == s1\n        then return true\n  \
    \  else if s0 == \"\"\n        then return false\n    else if s1 == \"\"\n   \
    \     then return false\n    else if s0 == s1\n        then return true\n    else\
    \ if s0 == \"\"\n", "    \n    same_chars = true\n    \n    len0 = length(s0)\n\
    \    len1 = length(s1)\n    \n    if len0 != len1\n        same_chars = false\n\
    \    end\n    \n    for i::Int in 0:len0-1\n        if s0[i] != s1[i]\n      \
    \      same_chars = false\n            break\n        end\n    end\n    \n   \
    \ return same_chars\nend\n</cell>\n<text>\nExercise 3\nWrite a function that checks\
    \ if a word is palindrome.\nThe word is a string with only lowercase letters.\n\
    The function should return true if the word is a palindrome and false otherwise.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe function should ignore the case of the letters.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe function should ignore the case of the letters.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe function should ignore the case of the letters.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe function should ignore the case of the letters.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe function should ignore the case of the letters.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe function should ignore the case of the letters.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe function should ignore the case of the letters.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe function should ignore the case of the letters.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe function should ignore the case of the letters.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe function should ignore the case of the letters.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe function should ignore the case of the letters.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe function should ignore the case of the letters.\n\
    The function should ignore the case of the letters.\nThe function should ignore\
    \ the case of the letters.\nThe ", "    \n    \"\"\"\n    Check if two words have\
    \ the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if s0 == s1 then return true\n    else if s0 == \"\" then return true\n   \
    \ else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then return true\n\
    \    else if s1 == \"\" then return true\n    else if s0 == s1 then return true\n\
    \    else if s0 == \"\" then return true\n    else if s1 == \"\" then return true\n\
    \    else if s0 == s1 then return true\n    else if s0 == \"\" then ", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(c) == char(s0[c])\
    \ for c in s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if\
    \ two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    \n    len1 = length(s1)\n\
    \    len2 = length(s2)\n    \n    if len1 == 0 or len2 == 0\n        return false\n\
    \    \n    \n    if len1 == len2\n        \n        if len1 == 0\n           \
    \ return true\n        \n        if s0 == s1\n            return true\n      \
    \  \n        return false\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    same_chars(s0, s1) =\
    \ length(s0) == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n\
    </cell>\n<code language=julia-1.5>", "    len = length(s0)\n    len1 = length(s1)\n\
    \    if len != len1\n        return false\n    else\n        for i in 0..len\n\
    \            if s0[i] != s1[i]\n                return false\n    return true\n\
    end\n</cell>\n<code language=julia-1.0>", "    same_chars = true\n    for c in\
    \ s0:\n        if c not in s1:\n            same_chars = false\n            break\n\
    \    return same_chars\nend\n</cell>\n<code language=julia-1.4>", "    \n    len0\
    \ = length(s0)\n    len1 = length(s1)\n    \n    if len0 == len1\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   same_chars = true\n    for c in s0:\n        if c not in s1:\n           \
    \ same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"", "    same_chars(s0, s1) = length(s0) == length(s1) &&\
    \ all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns True if the string\
    \ is a palindrome. Recall that palindromes are words that read the same backward\
    \ as forward.", "    len0 = length(s0)\n    len1 = length(s1)\n    if len0 ==\
    \ len1\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    same_chars = true\n    \n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    \n    return same_chars\n\
    end", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n    \
    \        same_chars = false\n            break\n    return same_chars\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"", "    \n    same_chars = true\n    \n    if length(s0)\
    \ == length(s1)\n        \n        for (i0, i1) in zip(xrange(length(s0)), xrange(length(s1)))\n\
    \            if s0[i0] != s1[i1]\n                same_chars = false\n       \
    \         break\n    end\n    \n    return same_chars\nend\n</cell>\n<code language=julia-0.4>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    \n    if s0 == s1 then return true\n    \n    len0 = length(s0)\n    len1 =\
    \ length(s1)\n    \n    if len0 > len1 then return false\n    \n    i = 0\n  \
    \  j = 0\n    \n    while i < len0 and j < len1 do\n        if s0[i] != s1[j]\
    \ then return false\n        i += 1\n        j += 1\n    end\n    \n    return\
    \ true\nend\n</cell>\n<text>\nExercise 10\nWrite a function that checks if a word\
    \ is palindrome or not.\nThe word is a palindrome if it reads the same backward\
    \ as forward.\nThe word is not palindrome if it reads the same forward as backward.\n\
    The word is not palindrome if it reads the same forward and backward.\nThe word\
    \ is not palindrome if it reads the same backward and forward.\nThe word is not\
    \ palindrome if it reads the same backward and backward.\nThe word is not palindrome\
    \ if it reads the same forward and forward.\nThe word is not palindrome if it\
    \ reads the same forward and backward.\nThe word is not palindrome if it reads\
    \ the same backward and forward.\nThe word is not palindrome if it reads the same\
    \ backward and backward.\nThe word is not palindrome if it reads the same forward\
    \ and forward.\nThe word is not palindrome if it reads the same forward and backward.\n\
    The word is not palindrome if it reads the same backward and forward.\nThe word\
    \ is not palindrome if it reads the same backward and backward.\nThe word is not\
    \ palindrome if it reads the same forward and forward.\nThe word is not palindrome\
    \ if it reads the same forward and backward.\nThe word is not palindrome if it\
    \ reads the same backward and forward.\nThe word is not palindrome if it reads\
    \ the same backward and backward.\nThe word is not palindrome if it reads the\
    \ same forward and forward.\nThe word is not palindrome if it reads the same forward\
    \ and backward.\nThe word is not palindrome if it reads the same backward and\
    \ forward.\nThe word is not palindrome if it reads the same backward and backward.\n\
    The word is not palindrome if it reads the same forward and forward.\nThe word\
    \ is not palindrome if it reads the same forward and backward.\nThe word is not\
    \ palindrome if it reads the same backward and forward.\nThe word is not palindrome\
    \ if it reads the same backward and backward.\nThe word is not palindrome if it\
    \ reads the same forward and forward.\nThe word is not palindrome if it reads\
    \ the same forward and backwar", "    same_chars = true\n    for c in s0:\n  \
    \      if c not in s1:\n            same_chars = false\n            break\n  \
    \  return same_chars\nend\n</cell>\n<code language=julia-1.0>", "    same_chars\
    \ = false\n    for c in s0:\n        if c in s1:\n            same_chars = true\n\
    \            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(c) == char(c0) for\
    \ (c, c0) in zip(s0, s1))\nend\n</cell>\n<code language=julia-1.3>", "    \n \
    \   \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    \    if s0 == s1:\n        return True\n    \n    len0 = length(s0)\n    len1\
    \ = length(s1)\n    \n    if len0 != len1:\n        return False\n    \n    i\
    \ = 0\n    while i < len0:\n        if s0[i] != s1[i]:\n            return False\n\
    \        i += 1\n    \n    return True\nend\n</cell>\n<code language=julia-1.4>",
  "    len = length(s0)\n    len1 = length(s1)\n    if len == len1\n        for (c0,\
    \ c1) in zip(s0, s1)\n            if c0 != c1\n                then return false\n\
    \    else return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    if s0 == s1 \n    then return\
    \ true\n    else if s0 == \"\"\n    then return true\n    else if s1 == \"\"\n\
    \    then return true\n    else if s0 == \"\"\n    then return false\n    else\
    \ if s1 == \"\"\n    then return false\n    else if s0 == s1\n    then return\
    \ true\n    else if s0 == \"\"\n    then return false\n    else if s1 == \"\"\n\
    \    then return false\n    else if s0 == s1\n    then return true\n    else if\
    \ s0 == \"\"\n    then return false\n    else if s1 == \"\"\n    then return false\n\
    \    else if s0 == s1\n    then return true\n    else if s0 == \"\"\n    then\
    \ return false\n    else if s1 == \"\"\n    then return false\n    else if s0\
    \ == s1\n    then return true\n    else if s0 == \"\"\n    then return false\n\
    \    else if s1 == \"\"\n    then return false\n    else if s0 == s1\n    then\
    \ return true\n    else if s0 == \"\"\n    then return false\n    else if s1 ==\
    \ \"\"\n    then return false\n    else if s0 == s1\n    then return true\n  \
    \  else if s0 == \"\"\n    then return false\n    else if s1 == \"\"\n    then\
    \ return false\n    else if s0 == s1\n    then return true\n    else if s0 ==\
    \ \"\"\n    then return false\n    else if s1 == \"\"\n    then return false\n\
    \    else if s0 == s1\n    then return true\n    else if s0 == \"\"\n    then\
    \ return false\n    else if s1 == \"\"\n    then return false\n    else if s0\
    \ == s1\n    then return true\n    else if s0 == \"\"\n    then return false\n\
    \    else if s1 == \"\"\n    then return false\n    else if s0 == s1\n    then\
    \ return true\n    else if s0 == \"\"\n    then return false\n    else if s1 ==\
    \ \"\"\n    then return false\n    else if s0 == s1\n    then return true\n  \
    \  else if s0 == \"\"\n    then return false\n    else if s1 == \"\"\n    then\
    \ return false\n    else if s0 == s1\n    then return true\n    else if s0 ==\
    \ \"\"\n    then return false\n    else if s1 == \"\"\n    then return false\n\
    \    else if s0 == s1\n    then return true\n    else if s0 == \"\"\n    then ",
  "    same_chars(s0, s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.4>",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend", "    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    same_chars = true\n    for c in s0:\n        if c not in s1:\n            same_chars\
    \ = false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if s1\
    \ == \"\" then return false\n    if s0 == s1 then return true\n    if s0 == \"\
    \" then return false\n    if s1 == \"\" then return false\n    if s0 == s1 then\
    \ return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return\
    \ false\n    if s0 == s1 then return true\n    if s0 == \"\" then return false\n\
    \    if s1 == \"\" then return false\n    if s0 == s1 then return true\n    if\
    \ s0 == \"\" then return false\n    if s1 == \"\" then return false\n    if s0\
    \ == s1 then return true\n    if s0 == \"\" then return false\n    if s1 == \"\
    \" then return false\n    if s0 == s1 then return true\n    if s0 == \"\" then\
    \ return false\n    if s1 == \"\" then return false\n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if\
    \ s1 == \"\" then return false\n    if s0 == s1 then return true\n    if s0 ==\
    \ \"\" then return false\n    if s1 == \"\" then return false\n    if s0 == s1\
    \ then return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then\
    \ return false\n    if s0 == s1 then return true\n    if s0 == \"\" then return\
    \ false\n    if s1 == \"\" then return false\n    if s0 == s1 then return true\n\
    \    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n  \
    \  if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if s1\
    \ == \"\" then return false\n    if s0 == s1 then return true\n    if s0 == \"\
    \" then return false\n    if s1 == \"\" then return false\n    if s0 == s1 then\
    \ return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return\
    \ false\n    if s0 == s1 then return true\n    if s0 == \"\" then return false\n\
    \    if s1 == \"\" then return false\n    if s0 == s1 then return true\n    if\
    \ s0 == \"\" then return false\n    if s1 == \"\" then return false\n    if s0\
    \ == s1 then return true\n    if s0 == \"\" then return false\n    if s1 == \"\
    \" then return false\n    if s0 == s1 then return true\n    if s0 == \"\" then\
    \ return false\n    if s1 == \"\" then return false\n    if s0 == s1 then return\
    \ true\n    if s0 == ", "    len0 = length(s0)\n    len1 = length(s1)\n    if\
    \ len0 != len1\n        return false\n    else\n        for i in 0..len0\n   \
    \         if s0[i] != s1[i]\n                return false\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    same_chars = true\n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    return same_chars\nend", "    same_chars = true\n    for c in\
    \ s0:\n        if c not in s1:\n            same_chars = false\n            break\n\
    \    return same_chars\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Check\
    \ if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    \n    \"\"\"\n    Check if\
    \ two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if s0 == s1 \n    then true \n    else false \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Check if two words have the same characters.\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd',\
    \ 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n\
    \    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd',\
    \ 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    False\n    \"\"\"", "    len0 = length(s0)\n    len1 = length(s1)\n    if\
    \ len0 != len1\n        return false\n    else\n        len0 = length(s0)\n  \
    \      for i::Int in 0..len0\n            if s0[i] != s1[i]\n                return\
    \ false\n            else\n                continue\n        end\n        return\
    \ true\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of characters in the string. \nWrite a function\
    \ that takes a string and returns a string with the first letter capitalized.\n\
    Write a function that takes a string and returns a string with the first letter\
    \ capitalized and all others lowercased.\nWrite a function that takes a string\
    \ and returns a string with the first letter capitalized and all others lowercased\
    \ and all others capitalized.\nWrite a function that takes a string and returns\
    \ a string with the first letter capitalized and all others lowercased and all\
    \ others capitalized and all others lowercased.\nWrite a function that takes a\
    \ string and returns a string with the first letter capitalized and all others\
    \ lowercased and all others capitalized and all others lowercased and all others\
    \ capitalized.\nWrite a function that takes a string and returns a string with\
    \ the first letter capitalized and all others lowercased and all others capitalized\
    \ and all others lowercased and all others capitalized and all others lowercased.\n\
    Write a function that takes a string and returns a string with the first letter\
    \ capitalized and all others lowercased and all others capitalized and all others\
    \ lowercased and all others capitalized and all others lowercased and all others\
    \ capitalized.\nWrite a function that takes a string and returns a string with\
    \ the first letter capitalized and all others lowercased and all others capitalized\
    \ and all others lowercased and all others capitalized and all others lowercased\
    \ and all others capitalized and all others lowercased.\nWrite a function that\
    \ takes a string and returns a string with the first letter capitalized and all\
    \ others lowercased and all others capitalized and all others lowercased and all\
    \ others capitalized and all others lowercased and all others capitalized and\
    \ all others lowercased.\nWrite a function that takes a string and returns a string\
    \ with the first letter capitalized and all others lowercased and all others capitalized\
    \ and all others lowercased and all others capitalized and all others lowercased\
    \ and all others capitalized and all others lowercased.\nWrite a function that\
    \ takes a string and returns a string with the first letter capitalized and all\
    \ others lowercased and all others capitalized and all others lowercased and all\
    \ others capitalized and all others lowercased and all others capitalized and\
    \ all others lowercased and all others capitalized.\nWrite a function that takes\
    \ a string and returns a string with the first letter capitalized and all others\
    \ lowercased and ", "    same_chars(s0, s1) = length(s0) == length(s1) && all(char(s0)\
    \ == char(s1) for char in s0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0 != len1\n\
    \        return false\n    \n    i = 0\n    while i < len0\n        if s0[i] !=\
    \ s1[i]\n            return false\n        i += 1\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  \
    \  True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    same_chars = true\n    for\
    \ c in s0:\n        if c not in s1:\n            same_chars = false\n        \
    \    break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>", " \
    \   len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n        return\
    \ false\n    else\n        chars = chars(s0)\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len1]\n        chars\
    \ = chars[1..len0]\n        chars = chars[1..len1]\n        chars = chars[1..len0]\n\
    \        chars = chars[1..len1]\n        chars = chars[1..len0]\n        chars\
    \ = chars[1..len1]\n        chars = chars[1..len0]\n        chars = chars[1..len1]\n\
    \        chars = chars[1..len0]\n        chars = chars[1..len", "    same_chars\
    \ = false\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n        same_chars = true\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  \
    \  True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    \n    \"\"\"\n    Check if\
    \ two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if s0 == s1:\n        return\
    \ True\n    if s0 == \"\" or s1 == \"\":\n        return False\n    \n    i =\
    \ 0\n    j = 0\n    \n    while i < len(s0) and j < len(s1):\n        if s0[i]\
    \ == s1[j]:\n            i += 1\n            j += 1\n        elif s0[i] > s1[j]:\n\
    \            i += 1\n        else:\n            j += 1\n            \n    if i\
    \ == len(s0):\n        return True\n    if j == len(s1):\n        return True\n\
    \    return False\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in the string.", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=string,julia |>\n<code>", "    same_chars = true\n    for c in s0:\n\
    \        if c not in s1:\n            same_chars = false\n            break\n\
    \    return same_chars\nend\n</cell>\n<code language=julia-1.5>", "    same_chars(s0,\
    \ s1) || same_chars(s1, s0)\nend\n</cell>\n<code language=julia-1.5>", "    same_chars(s0,\
    \ s1)\nend", "    same_chars = true\n    for c in s0:\n        if c not in s1:\n\
    \            same_chars = false\n            break\n    return same_chars\nend\n\
    </cell>\n<code language=julia-1.3>", "    len = length(s0)\n    len1 = length(s1)\n\
    \    if len == len1\n        for (i, c) in zip(1:len, s0)\n            if c !=\
    \ s1[i]\n                return false\n        return true\n    else\n       \
    \ return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if\
    \ two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
    \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0) == char(s1) for char in s0)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    same_chars = true\n    for c in s0:\n        if c\
    \ not in s1:\n            same_chars = false\n            break\n    return same_chars\n\
    end\n</cell>\n<code language=julia-1.4>", "    same_chars(s0, s1) = length(s0)\
    \ == length(s1) && all(char(s0[i]) == char(s1[i]) for i in 1:length(s0))\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Check if two words have the same\
    \ characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n\
    \    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "    if s0 == s1 then return true\n\
    \    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n  \
    \  if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if s1\
    \ == \"\" then return false\n    if s0 == s1 then return true\n    if s0 == \"\
    \" then return false\n    if s1 == \"\" then return false\n    if s0 == s1 then\
    \ return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return\
    \ false\n    if s0 == s1 then return true\n    if s0 == \"\" then return false\n\
    \    if s1 == \"\" then return false\n    if s0 == s1 then return true\n    if\
    \ s0 == \"\" then return false\n    if s1 == \"\" then return false\n    if s0\
    \ == s1 then return true\n    if s0 == \"\" then return false\n    if s1 == \"\
    \" then return false\n    if s0 == s1 then return true\n    if s0 == \"\" then\
    \ return false\n    if s1 == \"\" then return false\n    if s0 == s1 then return\
    \ true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n\
    \    if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if\
    \ s1 == \"\" then return false\n    if s0 == s1 then return true\n    if s0 ==\
    \ \"\" then return false\n    if s1 == \"\" then return false\n    if s0 == s1\
    \ then return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then\
    \ return false\n    if s0 == s1 then return true\n    if s0 == \"\" then return\
    \ false\n    if s1 == \"\" then return false\n    if s0 == s1 then return true\n\
    \    if s0 == \"\" then return false\n    if s1 == \"\" then return false\n  \
    \  if s0 == s1 then return true\n    if s0 == \"\" then return false\n    if s1\
    \ == \"\" then return false\n    if s0 == s1 then return true\n    if s0 == \"\
    \" then return false\n    if s1 == \"\" then return false\n    if s0 == s1 then\
    \ return true\n    if s0 == \"\" then return false\n    if s1 == \"\" then return\
    \ false\n    if s0 == s1 then return true\n    if s0 == \"\" then return false\n\
    \    if s1 == \"\" then return false\n    if s0 == s1 then return true\n    if\
    \ s0 == \"\" then return false\n    if s1 == \"\" then return false\n    if s0\
    \ == s1 then return true\n    if s0 == \"\" then return false\n    if s1 == \"\
    \" then return false\n    if s0 == s1 then return true\n    if s0 == ", "    len_s0\
    \ = length(s0)\n    len_s1 = length(s1)\n    if len_s0 != len_s1\n        return\
    \ false\n    \n    i = 0\n    while i < len_s0\n        if s0[i] != s1[i]\n  \
    \          return false\n        i += 1\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    same_chars = true\n    \n    for c in s0:\n\
    \        if c not in s1:\n            same_chars = false\n            break\n\
    \    \n    return same_chars\nend\n</cell>\n<code language=julia-1.5>", "    same_chars\
    \ = true\n    for c in s0:\n        if c not in s1:\n            same_chars =\
    \ false\n            break\n    return same_chars\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    len0 = length(s0)\n    len1 = length(s1)\n    \n    if len0 != len1\n\
    \        return false\n    \n    i = 0\n    j = 0\n    \n    while i < len0 and\
    \ j < len1\n        if s0[i] != s1[j]\n            return false\n        i +=\
    \ 1\n        j += 1\n    \n    return true\nend", "    \n    same_chars = true\n\
    \    for c in s0:\n        if c not in s1:\n            same_chars = false\n \
    \           break\n    return same_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"",
  "    len0 = length(s0)\n    len1 = length(s1)\n    if len0 != len1\n        return\
    \ false\n    else\n        for (i0, i1) in zip(xrange(len0), xrange(len1))\n \
    \           if s0[i0] != s1[i1]\n                return false\n    return true\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Check if two words have the\
    \ same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  \
    \  True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
    \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n  \
    \  >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
