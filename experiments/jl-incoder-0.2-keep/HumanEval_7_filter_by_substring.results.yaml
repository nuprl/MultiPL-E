name: HumanEval_7_filter_by_substring
language: julia
results:
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'cde']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1dglmky.jl:19\nin expression starting at\
    \ /tmp/tmph1dglmky.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8tdbhxwb.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmp8tdbhxwb.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp8tdbhxwb.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8tdbhxwb.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8tdbhxwb.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp8tdbhxwb.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmp8tdbhxwb.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp8tdbhxwb.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8tdbhxwb.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8tdbhxwb.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp8tdbhxwb.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmp8tdbhxwb.jl:7\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8tdbhxwb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(x -> contains(x, substring), strings)]\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of strings that\
    \ contains all strings from the input vector that contain \"a\" somewhere in their\
    \ string representation. Test it on some examples:\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmc281_bo.jl:11\nin expression starting at\
    \ /tmp/tmpmc281_bo.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a vector of strings as inputs and returns a vector\
    \ of strings as output. The function should return all strings in the input vector\
    \ that do not contain the strings in the input vector. For example, if the input\
    \ vector is [\"abc\", \"bacd\", \"cde\", \"array\"] and the input vector is [\"\
    a\", \"b\", \"c\", \"d\"], then the function should return [\"abc\", \"bacd\"\
    , \"array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp06eq55q8.jl:11\nin expression starting at\
    \ /tmp/tmp06eq55q8.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    substring = lowercase(substring)\n    \n    strings = strings[:]\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdja9g4lk.jl:17\nin expression starting at\
    \ /tmp/tmpdja9g4lk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\n>>> filter_by_substring([], 'a')\n[]\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc',\
    \ 'bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n\
    ['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'd')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'e')\n\
    ['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'f')\n['array']\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'g')\n['array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'h')\n['array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'j')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'k')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'l')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'm')\n\
    ['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'n')\n['array']\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'o')\n['array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'p')\n['array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'r')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 's')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 't')\n['array']\n>>> filter_by_substring(\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbkhl_5om.jl:19\nin expression starting at\
    \ /tmp/tmpbkhl_5om.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string occurs in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that \nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiaq3ba8s.jl:11\nin expression starting at\
    \ /tmp/tmpiaq3ba8s.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Set{String}()\n    for string in strings\n  \
    \      if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return collect(filtered_strings)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings containing only the strings that begin with the substring\
    \ 'a'.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn8jz2stb.jl:18\nin expression starting at\
    \ /tmp/tmpn8jz2stb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter(x->contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters an\
    \ input list of strings only for ones that do not contain given substring\n>>>\
    \ filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'a')\n['abc', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'ab')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ba')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cd')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'de')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'array')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'abd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bac')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bcd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cde')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cda')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdb')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdc')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdea')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdeb')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdec')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cded')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbrr945xb.jl:12\nin expression starting at\
    \ /tmp/tmpbrr945xb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ strings and a substring and returns all strings that contain that substring.\
    \ \nFor example, given [\"abc\", \"bacd\", \"cde\", \"array\", \"ab\", \"ac\"\
    , \"bcd\", \"bde\", \"cd\", \"de\", \"ef\", \"f\"], \nthe function should return\
    \ [\"abc\", \"bacd\", \"array\", \"ab\", \"ac\", \"bcd\", \"bde\", \"cd\", \"\
    de\", \"ef\", \"f\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5whyjxv0.jl:19\nin expression starting at\
    \ /tmp/tmp5whyjxv0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3],\
    \ \"a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3_laxcw.jl:13\nin expression starting at\
    \ /tmp/tmpi3_laxcw.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n\
    \    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input list of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'cde']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30j35r3r.jl:12\nin expression starting at\
    \ /tmp/tmp30j35r3r.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter a DataFrame\
    \ for rows that contain a given substring\nWrite a function that filters a DataFrame\
    \ for rows that contain a given substring. \nThe function should take two arguments:\
    \ the first is the DataFrame to filter, the second is the substring to look for.\
    \ \nThe function should return a new DataFrame that only contains rows that contain\
    \ the given substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcy5hltu4.jl:12\nin expression starting at\
    \ /tmp/tmpcy5hltu4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgafp0p66.jl:11\nin expression starting at\
    \ /tmp/tmpgafp0p66.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8f6nmpp.jl:11\nin expression starting at\
    \ /tmp/tmpb8f6nmpp.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if string.contains(substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a new string\
    \ where all occurrences of \"a\" have been replaced with \"A\"\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkra4_mcy.jl:17\nin expression starting at\
    \ /tmp/tmpkra4_mcy.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for those that contain all given substrings\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\")\n[\"abc\", \"bacd\"\
    , \"array\"]\n>>> filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\", \"b\", \"c\", \"d\")\n[]\n>>> filter_by_substrings([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\")\n[\"abc\", \"bacd\"\
    , \"array\"]\n>>> filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n[]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    )\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"abc\", \"bacd\"\
    , \"c\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpib32j8__.jl:18\nin expression starting at\
    \ /tmp/tmpib32j8__.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpice9fgrh.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpice9fgrh.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpice9fgrh.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpice9fgrh.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpice9fgrh.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpice9fgrh.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpice9fgrh.jl:19 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpice9fgrh.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings containing\
    \ only the strings that contain the substring.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfox_z8f5.jl:11\nin expression starting at\
    \ /tmp/tmpfox_z8f5.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .==. true)]\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \".\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0h8sszz.jl:9\nin expression starting at /tmp/tmph0h8sszz.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplmm1cz39.jl:11\nin expression starting at\
    \ /tmp/tmplmm1cz39.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptg9ru2pw.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmptg9ru2pw.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptg9ru2pw.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptg9ru2pw.jl:16\ntest set:\
    \ Error During Test at /tmp/tmptg9ru2pw.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmptg9ru2pw.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptg9ru2pw.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptg9ru2pw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6nj60bqg.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmp6nj60bqg.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp6nj60bqg.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6nj60bqg.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6nj60bqg.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp6nj60bqg.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmp6nj60bqg.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp6nj60bqg.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6nj60bqg.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6nj60bqg.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp6nj60bqg.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmp6nj60bqg.jl:7\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6nj60bqg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and a substring\
    \ and returns all strings that contain that substring. \nFor example, given [\"\
    abc\", \"bacd\", \"cde\", \"array\", \"ab\", \"abba\", \"abb\"], return [\"abc\"\
    , \"bacd\", \"array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6k95cdv.jl:19\nin expression starting at\
    \ /tmp/tmpl6k95cdv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring!\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1g6vjct.jl:15\nin expression starting at\
    \ /tmp/tmpm1g6vjct.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for those that contain given substring\nand are longer\
    \ than a given length\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\", 2)\n[\"abc\", \"bacd\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\", 3)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 4)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 5)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", 6)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 7)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 8)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", 9)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 10)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 11)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", 12)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 13)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 14)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", 15)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 16)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr6ttj2ct.jl:19\nin expression starting at\
    \ /tmp/tmpr6ttj2ct.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9g4uvkb.jl:13\nin expression starting at\
    \ /tmp/tmpw9g4uvkb.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt5v5m4yw.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpt5v5m4yw.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpt5v5m4yw.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt5v5m4yw.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt5v5m4yw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpt5v5m4yw.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpt5v5m4yw.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpt5v5m4yw.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt5v5m4yw.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt5v5m4yw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpt5v5m4yw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmpt5v5m4yw.jl:7\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt5v5m4yw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and a substring and\
    \ returns a vector of strings containing only the strings that contain the substring.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpolmu6zqe.jl:19\nin expression starting at\
    \ /tmp/tmpolmu6zqe.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters a given\
    \ list of strings only for those that contain at least two of the given substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sawivgi.jl:18\nin expression starting at\
    \ /tmp/tmp3sawivgi.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_osntaqn.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp_osntaqn.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_osntaqn.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_osntaqn.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp_osntaqn.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp_osntaqn.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_osntaqn.jl:17 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_osntaqn.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\", true)\n</cell>\n<text>\nfilter_by_substring!\nfilter_by_substring!()\
    \ modifies the input list in-place to only contain strings that contain the given\
    \ substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqmc11ilh.jl:10\nin expression starting at\
    \ /tmp/tmpqmc11ilh.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings with all but the first character removed. For example, given\
    \ [\"abc\", \"bacd\", \"cde\", \"array\"], return [\"bc\", \"cd\", \"de\", \"\
    array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzb3wxve2.jl:15\nin expression starting at\
    \ /tmp/tmpzb3wxve2.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a list of all characters that are not in the given string. \nFor example, given\
    \ \"abcabc\", your function should return [\"a\", \"b\", \"c\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbeevr8mg.jl:12\nin expression starting at\
    \ /tmp/tmpbeevr8mg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of strings as inputs\
    \ and returns a vector of strings as output. The function should return all strings\
    \ in the input vector that do not contain any of the strings in the input vector.\
    \ For example, if the input vector is [\"abc\", \"bacd\", \"cde\", \"array\"]\
    \ and the input vector is [\"a\", \"b\", \"c\"], then the output vector should\
    \ be [\"abc\", \"bacd\", \"array\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9oo0uva.jl:13\nin expression starting at\
    \ /tmp/tmpz9oo0uva.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 4\nWrite a function that filters strings by a regular expression.\
    \ \nThe function should take two arguments: a list of strings, and a regular expression.\
    \ \nThe function should return a list of strings that match the regular expression.\
    \ \nThe function should ignore case when matching.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpolplhcfd.jl:19\nin expression starting at\
    \ /tmp/tmpolplhcfd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n['abc',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ba')\n['bacd',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n['bacd',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdc')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacdca')\n\
    ['bacd', 'cde']\n>>> filter_by_substring(['abc', '\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxsoy_7_v.jl:12\nin expression starting at\
    \ /tmp/tmpxsoy_7_v.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [s for s in strings if substring in s]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsw2cfxnz.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsw2cfxnz.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpsw2cfxnz.jl:17 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpsw2cfxnz.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpsw2cfxnz.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsw2cfxnz.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpsw2cfxnz.jl:18 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsw2cfxnz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0rchb7tb.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp0rchb7tb.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0rchb7tb.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0rchb7tb.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0rchb7tb.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp0rchb7tb.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0rchb7tb.jl:19 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0rchb7tb.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a vector of substrings and returns a vector of\
    \ strings that only contain the substrings.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjptfqtzs.jl:12\nin expression starting at\
    \ /tmp/tmpjptfqtzs.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .== true)]\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9yan3b_l.jl:13\nin expression starting at\
    \ /tmp/tmp9yan3b_l.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ strings and a substring and returns a vector of strings that only contain the\
    \ substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8mouewvi.jl:18\nin expression starting at\
    \ /tmp/tmp8mouewvi.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(substring,x), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc',\
    \ 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'c')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['abc\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnck3nkov.jl:11\nin expression starting at\
    \ /tmp/tmpnck3nkov.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3jdwikm.jl:11\nin expression starting at\
    \ /tmp/tmpr3jdwikm.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of strings and returns a vector of strings containing only the\
    \ strings that begin with the substring \"ab\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7_p6lxz3.jl:11\nin expression starting at\
    \ /tmp/tmp7_p6lxz3.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .== true)]\n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters input\
    \ list for strings that contain a given substring\nand that do not contain a given\
    \ substring\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a', false)\n\
    ['abc', 'bacd']\n</text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qt7p4vw.jl:12\nin expression starting at\
    \ /tmp/tmp1qt7p4vw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc5spbhte.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpc5spbhte.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpc5spbhte.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc5spbhte.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc5spbhte.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpc5spbhte.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpc5spbhte.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpc5spbhte.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc5spbhte.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc5spbhte.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpc5spbhte.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmpc5spbhte.jl:7\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc5spbhte.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input list of strings only for ones that do not contain\
    \ given substring\ne.g. filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n\
    should return ['abc', 'cde']\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64t0dwx4.jl:19\nin expression starting at\
    \ /tmp/tmp64t0dwx4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 2: filter_by_substring\nWrite a function that filters\
    \ an input list of strings only for ones that contain given substring\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ba')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd', true)\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd', false)\n['abc', 'bacd', 'cde', 'array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd', true)\n['bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd',\
    \ false)\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'bacd', true)\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd', false)\n['abc', 'bacd', 'cde', 'array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd', true)\n['bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd',\
    \ false)\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'bacd', true)\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd', false)\n['abc', 'bacd', 'cde', 'array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd', true)\n['bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd',\
    \ false)\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'bacd', true)\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptz2a6u4k.jl:11\nin expression starting at\
    \ /tmp/tmptz2a6u4k.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .== \"_\")]\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_o3ih75j.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::Bool)\n  Closest\
    \ candidates are:\n    findall(!Matched::Base.Fix2{typeof(in)}, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2318\n\
    \    findall(!Matched::Function, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2317\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp_o3ih75j.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_o3ih75j.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_o3ih75j.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp_o3ih75j.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::Bool)\n  Closest candidates are:\n    findall(!Matched::Base.Fix2{typeof(in)},\
    \ ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2318\n  \
    \  findall(!Matched::Function, ::Number) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2317\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp_o3ih75j.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_o3ih75j.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_o3ih75j.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcljnl21z.jl:19\nin expression starting at\
    \ /tmp/tmpcljnl21z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcplsuwnd.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpcplsuwnd.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcplsuwnd.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcplsuwnd.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpcplsuwnd.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpcplsuwnd.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcplsuwnd.jl:19 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcplsuwnd.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns a string with all the characters in lowercase and all the characters\
    \ in uppercase. \nFor example, \n\"abc\" -> \"ABC\"\n\"AbC\" -> \"ABC\"\n\"aBc\"\
    \ -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"\
    aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\
    \n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"\
    ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\"\
    \ -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"\
    aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\
    \n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"\
    ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\"\
    \ -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"\
    aBcD\" -> \"ABC\"\n\"aBcD\" -> \"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9igljj0.jl:19\nin expression starting at\
    \ /tmp/tmp_9igljj0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [s for s in strings if substring in s]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a vector of strings as arguments and returns a\
    \ vector of the same length with strings containing all the substrings given in\
    \ the second argument that appear in the first argument.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf03a0y_u.jl:11\nin expression starting at\
    \ /tmp/tmpf03a0y_u.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3: Filtering by substring\nWrite a function that\
    \ filters an input list of strings only for ones that contain given substring\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd',\
    \ 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n['abc',\
    \ 'bacd']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ba')\n['bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'cd')\n\
    ['cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'array')\n\
    ['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n[]\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdab')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabd')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['ba\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9e6di1i.jl:11\nin expression starting at\
    \ /tmp/tmpb9e6di1i.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxxuv7sd.jl:15\nin expression starting at\
    \ /tmp/tmpsxxuv7sd.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n['abc',\
    \ 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n\
    ['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'e')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'f')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'g')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'r')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 's')\n['abc', 'bacd', 'array']\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqiyo0off.jl:12\nin expression starting at\
    \ /tmp/tmpqiyo0off.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx4vf9t76.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpx4vf9t76.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx4vf9t76.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx4vf9t76.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpx4vf9t76.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpx4vf9t76.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx4vf9t76.jl:19 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx4vf9t76.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a regular expression.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnd7c1h5.jl:12\nin expression starting at\
    \ /tmp/tmplnd7c1h5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [string for string in strings if string.contains(substring)]\n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph8qdwen9.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ contains\n  Stacktrace:\n    [1] getproperty\n      @ ./Base.jl:42 [inlined]\n\
    \    [2] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [3]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [4] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [5] grow_to!\n      @ ./array.jl:797 [inlined]\n    [6] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [7] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmph8qdwen9.jl:8\n    [8] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmph8qdwen9.jl:17 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmph8qdwen9.jl:15\ntest set:\
    \ Error During Test at /tmp/tmph8qdwen9.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  type String has no\
    \ field contains\n  Stacktrace:\n    [1] getproperty\n      @ ./Base.jl:42 [inlined]\n\
    \    [2] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [3]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [4] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [5] grow_to!\n      @ ./array.jl:797 [inlined]\n    [6] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [7] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmph8qdwen9.jl:8\n    [8] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmph8qdwen9.jl:18 [inlined]\n\
    \   [10] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmph8qdwen9.jl:1"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph8qdwen9.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes a vector of strings and a substring and returns all strings\
    \ that contain the substring. Test it on some examples:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvww9_b2.jl:19\nin expression starting at\
    \ /tmp/tmpmvww9_b2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1v83tdz7.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp1v83tdz7.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1v83tdz7.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1v83tdz7.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp1v83tdz7.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp1v83tdz7.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1v83tdz7.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1v83tdz7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for those that contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj50ujoju.jl:11\nin expression starting at\
    \ /tmp/tmpj50ujoju.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    filter_by_substring() is a higher-order function that takes a function and a list\
    \ of strings and returns a list of strings that satisfy the conditions of the\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplo5npgj6.jl:13\nin expression starting at\
    \ /tmp/tmplo5npgj6.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    i = 0\n    while i < length(strings)\n\
    \        if contains(strings[i], substring)\n            i += 1\n        else\n\
    \            deleteat!(strings, i)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    Hint: Use filter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lazj5nk.jl:22\nin expression starting at\
    \ /tmp/tmp4lazj5nk.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3], 2)\n\
    filter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3],\
    \ \"3\")\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3], \"\
    2\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"a\"\
    )\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"z\")\n\
    filter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3],\
    \ \"a\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"\
    z\")\nfilter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"3\"\
    )\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3], \"3\")\n\
    filter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3],\
    \ \"3\")\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3], \"\
    3\")\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3], \"2\"\
    )\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"a\")\n\
    filter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3],\
    \ \"2\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"\
    a\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"z\"\
    )\nfilter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"3\")\n\
    filter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3],\
    \ \"z\")\nfilter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"\
    3\")\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3], \"3\"\
    )\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3], \"2\")\n\
    filter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3],\
    \ \"3\")\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfh8zhqxs.jl:11\nin expression starting at\
    \ /tmp/tmpfh8zhqxs.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings containing\
    \ only the strings that contain the substring.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_tvl4ml.jl:11\nin expression starting at\
    \ /tmp/tmpi_tvl4ml.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu93sots8.jl:12\nin expression starting at\
    \ /tmp/tmpu93sots8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    i = 0\n    while i < length(strings)\n\
    \        if contains(strings[i], substring)\n            delete!(strings, i)\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings by a substring\
    \ that appears more than once in the string. For example, given the input ['abc',\
    \ 'bacd', 'cde', 'array', 'abc', 'bacd', 'cde', 'array'], the function should\
    \ return ['abc', 'bacd', 'array'].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdaz7f8c9.jl:22\nin expression starting at\
    \ /tmp/tmpdaz7f8c9.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input list of strings only for those that contain given\
    \ substring\nThe function should return a list of strings that only contain given\
    \ substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4tm7p_9a.jl:19\nin expression starting at\
    \ /tmp/tmp4tm7p_9a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    substrings = Vector{String}()\n    for string in strings\n     \
    \   if contains(string, substring)\n            push!(substrings, string)\n  \
    \      end\n    end\n    \n    return substrings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9v_yppd0.jl:18\nin expression starting at\
    \ /tmp/tmp9v_yppd0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string in the original\
    \ vector has been replaced by the string 'x'\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnj39o6bo.jl:13\nin expression starting at\
    \ /tmp/tmpnj39o6bo.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFiltering by substring\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3iwtvv03.jl:12\nin expression starting at\
    \ /tmp/tmp3iwtvv03.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x,substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp57roa2xn.jl:11\nin expression starting at\
    \ /tmp/tmp57roa2xn.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters a string list by whether it contains any of a list of substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmt4sqlyc.jl:11\nin expression starting at\
    \ /tmp/tmpmt4sqlyc.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that only contain the substring.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqsaagth.jl:15\nin expression starting at\
    \ /tmp/tmplqsaagth.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphkm7wrlr.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmphkm7wrlr.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphkm7wrlr.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphkm7wrlr.jl:17\ntest set:\
    \ Error During Test at /tmp/tmphkm7wrlr.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmphkm7wrlr.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphkm7wrlr.jl:19 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphkm7wrlr.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ strings and a substring and returns a vector of strings that only contain the\
    \ given substring. Test it on some example strings.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwd47xbsz.jl:19\nin expression starting at\
    \ /tmp/tmpwd47xbsz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvwdl1m0g.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpvwdl1m0g.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvwdl1m0g.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvwdl1m0g.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpvwdl1m0g.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpvwdl1m0g.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvwdl1m0g.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvwdl1m0g.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [s for s in strings if substring in s]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp76yvv6j0.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp76yvv6j0.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp76yvv6j0.jl:17 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp76yvv6j0.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp76yvv6j0.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp76yvv6j0.jl:8\n    [9] macro expansion\n\
    \      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp76yvv6j0.jl:18 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp76yvv6j0.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3: Filter an input list of strings only for\
    \ ones that do not contain given substring\nWrite a function that filters an input\
    \ list of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n[]\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc', 'cde',\
    \ 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n['abc',\
    \ 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n\
    ['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'e')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'c\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphg_ispfw.jl:18\nin expression starting at\
    \ /tmp/tmphg_ispfw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2t9mfuoc.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp2t9mfuoc.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2t9mfuoc.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2t9mfuoc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp2t9mfuoc.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp2t9mfuoc.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2t9mfuoc.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2t9mfuoc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"b\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"e\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"k\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"n\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"q\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9c0ftr9.jl:18\nin expression starting at\
    \ /tmp/tmpi9c0ftr9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input list of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'cde']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmv99s_gm.jl:12\nin expression starting at\
    \ /tmp/tmpmv99s_gm.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"b\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given substring\nHint: Use endswith()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7if46ft8.jl:18\nin expression starting at\
    \ /tmp/tmp7if46ft8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    substrings = Vector{String}()\n    \n    for s in strings\n    \
    \    if contains(s, substring)\n            push!(substrings, s)\n        end\n\
    \    end\n    \n    return substrings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"g\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"j\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"m\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"p\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurkpyu98.jl:19\nin expression starting at\
    \ /tmp/tmpurkpyu98.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings, substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters input strings based on whether they contain given substrings\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9m8_0nyd.jl:11\nin expression starting at\
    \ /tmp/tmp9m8_0nyd.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp979o_mgv.jl:15\nin expression starting at\
    \ /tmp/tmp979o_mgv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x,substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in the string. \nWrite a\
    \ function that takes a string and returns the number of words in the string.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ characters in the string that are not letters. \nWrite a function that takes\
    \ a string and returns the number of words in the string that are not letters.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are not letters. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not letters that do\
    \ not end with a period. \nWrite a function that takes a string and returns the\
    \ number of words in the string that are not letters that do not end with a period.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are not letters that do not end with a period. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not letters that do not end with a period and that do not start with a period.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that are not letters that do not end with a period and that do not start\
    \ with a period. \nWrite a function that takes a string and returns the number\
    \ of sentences in the string that are not letters that do not end with a period\
    \ and that do not start with a period. \nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not letters that\
    \ do not end with a period and that do not start with a period and that do not\
    \ contain an exclamation point. \nWrite a function that takes a string and returns\
    \ the number of words in the string that are not letters that do not end with\
    \ a period and that do not start with a period and that do not contain an exclamation\
    \ point. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string that are not letters that do not end with a period and that do\
    \ not start with a period and that do not contain an exclamation point. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters that do not end with a period and that do not start with\
    \ a period and that do not contain an exclamation point and that do not contain\
    \ an exclamation point. \nWrite a function that takes a string and returns the\
    \ number of words in the string that are not letters that do not end with a period\
    \ and that do not start with a period and that do not contain an exclamation point\
    \ and that do not contain an exclamation point and that do not contain an exclamation\
    \ point. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18ez6c56.jl:11\nin expression starting at\
    \ /tmp/tmp18ez6c56.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> substring in x, strings)]\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'cde']\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit7bukad.jl:12\nin expression starting at\
    \ /tmp/tmpit7bukad.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for those\
    \ that contain given substrings\ne.g. filter_by_substrings(['abc', 'bacd', 'cde',\
    \ 'array'], 'a', 'b', 'c')\nshould return ['abc', 'bacd', 'cde']\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbk0x3p18.jl:18\nin expression starting at\
    \ /tmp/tmpbk0x3p18.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a vector of substrings and returns a vector of\
    \ strings that only contain substrings.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpileu56v3.jl:11\nin expression starting at\
    \ /tmp/tmpileu56v3.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that only contain the given substring. \nFor\
    \ example, given [\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", the function\
    \ should return [\"abc\", \"bacd\", \"array\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfscq9yha.jl:19\nin expression starting at\
    \ /tmp/tmpfscq9yha.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> substring in x, strings)]\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaparra6.jl:12\nin expression starting at\
    \ /tmp/tmpxaparra6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters a list of strings based on whether they contain a given substring. \n\
    For example, given a list of strings \"abc\", \"bacd\", \"cde\", \"array\", and\
    \ a substring \"a\", your function should return [\"abc\", \"bacd\", \"array\"\
    ].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptvotn5mt.jl:12\nin expression starting at\
    \ /tmp/tmptvotn5mt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings containing only those strings that\
    \ start with a given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmperoh2hmx.jl:13\nin expression starting at\
    \ /tmp/tmperoh2hmx.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"b\")\n</cell>\n<text>\nExercise: Write a function that filters input\
    \ strings based on whether they contain a given substring.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyg1mehyn.jl:17\nin expression starting at\
    \ /tmp/tmpyg1mehyn.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqxyvr_d1.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpqxyvr_d1.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqxyvr_d1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqxyvr_d1.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpqxyvr_d1.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpqxyvr_d1.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqxyvr_d1.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqxyvr_d1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter( x -> contains(x, substring), strings)\n    \n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ribi8p4.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp1ribi8p4.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ribi8p4.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ribi8p4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp1ribi8p4.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp1ribi8p4.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ribi8p4.jl:19 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ribi8p4.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFiltering by substrings\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpslg_ofmd.jl:12\nin expression starting at\
    \ /tmp/tmpslg_ofmd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgopyn2ic.jl:15\nin expression starting at\
    \ /tmp/tmpgopyn2ic.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [s for s in strings if substring in s]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1q0t6or.jl:11\nin expression starting at\
    \ /tmp/tmpg1q0t6or.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(x -> contains(x, substring), strings)]\n   \
    \ return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring!\nThe filter_by_substring!\
    \ function modifies the input list in-place. It filters out the strings that do\
    \ not contain the given substring.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsd7dhb_6.jl:11\nin expression starting at\
    \ /tmp/tmpsd7dhb_6.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n\
    \    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 7: Write a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'cde']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4acu_zp.jl:12\nin expression starting at\
    \ /tmp/tmpt4acu_zp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for those that contain given substrings\n\
    e.g. filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\"\
    , \"c\")\nshould return [\"abc\", \"bacd\", \"array\"]\nHint: use filter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj059e18y.jl:12\nin expression starting at\
    \ /tmp/tmpj059e18y.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx6ic_m_i.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpx6ic_m_i.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx6ic_m_i.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6ic_m_i.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpx6ic_m_i.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpx6ic_m_i.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx6ic_m_i.jl:19 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6ic_m_i.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input list of strings\
    \ only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'cde']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ho3apqh.jl:11\nin expression starting at\
    \ /tmp/tmp3ho3apqh.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for ones that do not contain\
    \ given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'c')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'cde', '\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp97q2bwef.jl:19\nin expression starting at\
    \ /tmp/tmp97q2bwef.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp93jyzm01.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmp93jyzm01.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp93jyzm01.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp93jyzm01.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp93jyzm01.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp93jyzm01.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmp93jyzm01.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp93jyzm01.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp93jyzm01.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp93jyzm01.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp93jyzm01.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmp93jyzm01.jl:7\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp93jyzm01.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    This function filters an input list of strings only for ones that contain given\
    \ substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwpwtaehw.jl:13\nin expression starting at\
    \ /tmp/tmpwpwtaehw.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a string with all the letters replaced by '_'. \nFor example 'hello'\
    \ -> 'h__e__l__l__o'\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95u03zb5.jl:13\nin expression starting at\
    \ /tmp/tmp95u03zb5.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_pz2ixmv.jl:11\nin expression starting at\
    \ /tmp/tmp_pz2ixmv.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt7n4qro7.jl:12\nin expression starting at\
    \ /tmp/tmpt7n4qro7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsmp91nt7.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpsmp91nt7.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsmp91nt7.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsmp91nt7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsmp91nt7.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpsmp91nt7.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsmp91nt7.jl:19 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsmp91nt7.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter(x->contains(x, substring), strings)\n    \n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters input strings based on whether they contain any of a\
    \ list of substrings\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcvpzyyhy.jl:13\nin expression starting at\
    \ /tmp/tmpcvpzyyhy.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjo_xxj6m.jl:15\nin expression starting at\
    \ /tmp/tmpjo_xxj6m.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp44066e8t.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp44066e8t.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44066e8t.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44066e8t.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp44066e8t.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp44066e8t.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44066e8t.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp44066e8t.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpasu61kej.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpasu61kej.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpasu61kej.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpasu61kej.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpasu61kej.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpasu61kej.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpasu61kej.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpasu61kej.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .== true)]\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4itltbqd.jl:13\nin expression starting at\
    \ /tmp/tmp4itltbqd.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpecurj4tc.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpecurj4tc.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpecurj4tc.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpecurj4tc.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpecurj4tc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpecurj4tc.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpecurj4tc.jl:19 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpecurj4tc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n['abc',\
    \ 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n\
    ['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'e')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'f')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'g')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'r')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 's')\n['abc', 'bacd', 'array']\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_mpijbik.jl:12\nin expression starting at\
    \ /tmp/tmp_mpijbik.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp76rl80p0.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmp76rl80p0.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp76rl80p0.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76rl80p0.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76rl80p0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp76rl80p0.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmp76rl80p0.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp76rl80p0.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp76rl80p0.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp76rl80p0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp76rl80p0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmp76rl80p0.jl:7\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp76rl80p0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that contain a given substring\
    \ anywhere in the string\ne.g. filter_by_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"ab\")\nshould return [\"abc\", \"bacd\"]\nHint: use filter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpili8jc57.jl:11\nin expression starting at\
    \ /tmp/tmpili8jc57.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(x -> contains(x, substring), strings)]\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times the string occurs\
    \ in the string. \nFor example, if the input string is \"abcabc\" and the substring\
    \ \"abc\" occurs 3 times, the function should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnv85xk62.jl:11\nin expression starting at\
    \ /tmp/tmpnv85xk62.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = filter(x->contains(x, substring), strings)\n    \n   \
    \ return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp222dahy8.jl:11\nin expression starting at\
    \ /tmp/tmp222dahy8.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring .== true)]\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"c\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"f\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"i\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"r\")\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzer5aow1.jl:13\nin expression starting at\
    \ /tmp/tmpzer5aow1.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit4azc1u.jl:19\nin expression starting at\
    \ /tmp/tmpit4azc1u.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            strings.remove(string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a vector\
    \ of substrings and returns a vector of strings that only contain substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_r057e1r.jl:19\nin expression starting at\
    \ /tmp/tmp_r057e1r.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of strings and a vector of substrings\
    \ and returns a vector of strings containing only those strings that contain the\
    \ substrings.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6lhd5x6.jl:19\nin expression starting at\
    \ /tmp/tmpf6lhd5x6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters input list of strings only for those that contain given\
    \ substring in any order.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppavwsdwt.jl:19\nin expression starting at\
    \ /tmp/tmppavwsdwt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\n>>> filter_by_substring([], 'a')\n[]\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ab')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ba')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bc')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['bacd', 'cde', 'array']\n>>> filter_by_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnq_gcal5.jl:18\nin expression starting at\
    \ /tmp/tmpnq_gcal5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [s for s in strings if substring in s]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3], \"\
    a\")\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyepwgobm.jl:11\nin expression starting at\
    \ /tmp/tmpyepwgobm.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8d5h_xz8.jl:11\nin expression starting at\
    \ /tmp/tmp8d5h_xz8.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that filters an input list\
    \ of strings only for those that contain given substrings\n    >>> filter_by_substrings([],\
    \ 'a')\n    []\n    >>> filter_by_substrings(['abc', 'bacd', 'cde', 'array'],\
    \ 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substrings(['abc', 'bacd',\
    \ 'cde', 'array'], 'ab')\n    ['abc', 'bacd']\n    >>> filter_by_substrings(['abc',\
    \ 'bacd', 'cde', 'array'], 'ba')\n    ['bacd', 'cde', 'array']\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpre8rnvl0.jl:11\nin expression starting at\
    \ /tmp/tmpre8rnvl0.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"g\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"j\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"m\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"p\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jma6ihp.jl:18\nin expression starting at\
    \ /tmp/tmp3jma6ihp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe9obc5n4.jl:11\nin expression starting at\
    \ /tmp/tmpe9obc5n4.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb9cgl1b5.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpb9cgl1b5.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb9cgl1b5.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb9cgl1b5.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpb9cgl1b5.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpb9cgl1b5.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb9cgl1b5.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb9cgl1b5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2: Filtering by substrings\nWrite a function\
    \ that filters input strings based on a list of substrings\nWrite a function that\
    \ filters input strings based on a list of substrings\nWrite a function that filters\
    \ input strings based on a list of substrings\nWrite a function that filters input\
    \ strings based on a list of substrings\nWrite a function that filters input strings\
    \ based on a list of substrings\nWrite a function that filters input strings based\
    \ on a list of substrings\nWrite a function that filters input strings based on\
    \ a list of substrings\nWrite a function that filters input strings based on a\
    \ list of substrings\nWrite a function that filters input strings based on a list\
    \ of substrings\nWrite a function that filters input strings based on a list of\
    \ substrings\nWrite a function that filters input strings based on a list of substrings\n\
    Write a function that filters input strings based on a list of substrings\nWrite\
    \ a function that filters input strings based on a list of substrings\nWrite a\
    \ function that filters input strings based on a list of substrings\nWrite a function\
    \ that filters input strings based on a list of substrings\nWrite a function that\
    \ filters input strings based on a list of substrings\nWrite a function that filters\
    \ input strings based on a list of substrings\nWrite a function that filters input\
    \ strings based on a list of substrings\nWrite a function that filters input strings\
    \ based on a list of substrings\nWrite a function that filters input strings based\
    \ on a list of substrings\nWrite a function that filters input strings based on\
    \ a list of substrings\nWrite a function that filters input strings based on a\
    \ list of substrings\nWrite a function that filters input strings based on a list\
    \ of substrings\nWrite a function that filters input strings based on a list of\
    \ substrings\nWrite a function that filters input strings based on a list of substrings\n\
    Write a function that filters input strings based on a list of substrings\nWrite\
    \ a function that filters input strings based on a list of substrings\nWrite a\
    \ function that filters input strings based on a list of substrings\nWrite a function\
    \ that filters input strings based on a list of substrings\nWrite a function that\
    \ filters input strings based on a list of substrings\nWrite a function that filters\
    \ input strings based on a list of substrings\nWrite a function that filters input\
    \ strings based on a list of substrings\nWrite a function that filters input strings\
    \ based on a list of substrings\nWrite a function that filters input strings based\
    \ on a list of substrings\nWrite a function that filters input strings based on\
    \ a list of substrings\nWrite a function that filters input strings \nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawrny2bf.jl:19\nin expression starting at\
    \ /tmp/tmpawrny2bf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ string.contains(substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that filters an input list of strings only for those that contain given\
    \ substring\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'array']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5yri_y1a.jl:19\nin expression starting at\
    \ /tmp/tmp5yri_y1a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmhk7x9fi.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpmhk7x9fi.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmhk7x9fi.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmhk7x9fi.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpmhk7x9fi.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpmhk7x9fi.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmhk7x9fi.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmhk7x9fi.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 2: Filtering by substring\nWrite a function that\
    \ filters an input list of strings only for ones that contain given substring\n\
    Write a test that checks that your function works as expected\nWrite a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substring\nWrite a test that checks that your function works as expected\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplcy59mzz.jl:12\nin expression starting at\
    \ /tmp/tmplcy59mzz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6y3isvbw.jl:11\nin expression starting at\
    \ /tmp/tmp6y3isvbw.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2: filter_by_substring\nWrite a function that filters an input list of\
    \ strings only for ones that contain a given substring.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcm286gq2.jl:19\nin expression starting at\
    \ /tmp/tmpcm286gq2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ 'a')\n    []\n    >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'a')\n    ['cde', 'array']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1pwgaizn.jl:11\nin expression starting at\
    \ /tmp/tmp1pwgaizn.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphgrepnte.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmphgrepnte.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmphgrepnte.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphgrepnte.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgrepnte.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphgrepnte.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmphgrepnte.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmphgrepnte.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphgrepnte.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgrepnte.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphgrepnte.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmphgrepnte.jl:7\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphgrepnte.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbhjwfu7q.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpbhjwfu7q.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpbhjwfu7q.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhjwfu7q.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhjwfu7q.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpbhjwfu7q.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpbhjwfu7q.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpbhjwfu7q.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhjwfu7q.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhjwfu7q.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpbhjwfu7q.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmpbhjwfu7q.jl:7\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbhjwfu7q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter a DataFrame\
    \ for rows that contain a given substring\nWrite a function that filters a DataFrame\
    \ for rows that contain a given substring. \nThe function should return a new\
    \ DataFrame with only the rows that contain the substring.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_69kyfl.jl:12\nin expression starting at\
    \ /tmp/tmpt_69kyfl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0xiam38p.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp0xiam38p.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0xiam38p.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0xiam38p.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp0xiam38p.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp0xiam38p.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0xiam38p.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0xiam38p.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ strings and a substring and returns all strings that contain that substring.\
    \ \nFor example, given [\"abc\", \"bacd\", \"cde\", \"array\"] and \"a\", it should\
    \ return [\"abc\", \"bacd\", \"array\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpci_s4npv.jl:19\nin expression starting at\
    \ /tmp/tmpci_s4npv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgnd4c4et.jl:11\nin expression starting at\
    \ /tmp/tmpgnd4c4et.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of strings and a substring and returns a vector\
    \ of strings that only contain the given substring. Test it on some test cases.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54e2z23s.jl:13\nin expression starting at\
    \ /tmp/tmp54e2z23s.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters input strings based on whether they contain given substrings.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlptfrvc.jl:12\nin expression starting at\
    \ /tmp/tmpnlptfrvc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo5rujtty.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpo5rujtty.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo5rujtty.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo5rujtty.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpo5rujtty.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpo5rujtty.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo5rujtty.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo5rujtty.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9wb2dr67.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp9wb2dr67.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9wb2dr67.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9wb2dr67.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp9wb2dr67.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp9wb2dr67.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9wb2dr67.jl:19 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9wb2dr67.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter a DataFrame\
    \ for rows that contain a given substring\nWrite a function that filters a DataFrame\
    \ for rows that contain a given substring. \nThe function should return a DataFrame\
    \ with only those rows that contain the given substring.\nThe function should\
    \ accept two arguments: the DataFrame to be filtered and the substring to be filtered\
    \ for.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_4t033a.jl:11\nin expression starting at\
    \ /tmp/tmpd_4t033a.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns a boolean indicating whether that string is a palindrome.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wrb7ukp.jl:18\nin expression starting at\
    \ /tmp/tmp8wrb7ukp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpymwzk10b.jl:12\nin expression starting at\
    \ /tmp/tmpymwzk10b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    e.g. filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n['bacd', 'cde']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'c')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'cde', 'array']\n>>> \nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpztbio8ki.jl:11\nin expression starting at\
    \ /tmp/tmpztbio8ki.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    substring = lowercase(substring)\n    \n    strings = filter(x->contains(lowercase(x),\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpft89fhuy.jl:15\nin expression starting at\
    \ /tmp/tmpft89fhuy.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb8hclqme.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpb8hclqme.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpb8hclqme.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb8hclqme.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb8hclqme.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpb8hclqme.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpb8hclqme.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpb8hclqme.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb8hclqme.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb8hclqme.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpb8hclqme.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmpb8hclqme.jl:7\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb8hclqme.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"z\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"z\", true)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and a substring and\
    \ returns a vector of strings that only contain the substring.\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphc8qkci4.jl:10\nin expression starting at\
    \ /tmp/tmphc8qkci4.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            delete!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps4rmww0p.jl:19\nin expression starting at\
    \ /tmp/tmps4rmww0p.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpip63i6aj.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpip63i6aj.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpip63i6aj.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpip63i6aj.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpip63i6aj.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpip63i6aj.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpip63i6aj.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpip63i6aj.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpip63i6aj.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpip63i6aj.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpip63i6aj.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmpip63i6aj.jl:7\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpip63i6aj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4667ptyb.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp4667ptyb.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4667ptyb.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4667ptyb.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp4667ptyb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp4667ptyb.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4667ptyb.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4667ptyb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpajh8kki5.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpajh8kki5.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpajh8kki5.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpajh8kki5.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpajh8kki5.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpajh8kki5.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpajh8kki5.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpajh8kki5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter a list for strings\
    \ that contain a given substring\nThe function filter_by_substring takes in two\
    \ arguments:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3qp_po4u.jl:13\nin expression starting at\
    \ /tmp/tmp3qp_po4u.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(x -> contains(x, substring), strings)]\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of strings and a substring and returns a list of\
    \ strings that contain that substring. For example, given [\"abc\", \"bacd\",\
    \ \"cde\", \"array\"], \"a\", the function should return [\"abc\", \"bacd\", \"\
    array\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibgocbi4.jl:11\nin expression starting at\
    \ /tmp/tmpibgocbi4.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    >>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'c')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['abc', 'ba\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpul167rr6.jl:12\nin expression starting at\
    \ /tmp/tmpul167rr6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    for string in strings\n        if\
    \ contains(string, substring)\n            remove!(strings, string)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring!\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ifu_qyw.jl:19\nin expression starting at\
    \ /tmp/tmp0ifu_qyw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpej7_qr3p.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpej7_qr3p.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpej7_qr3p.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpej7_qr3p.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpej7_qr3p.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpej7_qr3p.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpej7_qr3p.jl:19 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpej7_qr3p.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiqbn1dq6.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpiqbn1dq6.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiqbn1dq6.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiqbn1dq6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpiqbn1dq6.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpiqbn1dq6.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiqbn1dq6.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiqbn1dq6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxn_zk9ln.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpxn_zk9ln.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpxn_zk9ln.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxn_zk9ln.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxn_zk9ln.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxn_zk9ln.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpxn_zk9ln.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpxn_zk9ln.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxn_zk9ln.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxn_zk9ln.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxn_zk9ln.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmpxn_zk9ln.jl:7\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxn_zk9ln.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFiltering by substrings\n\
    We can also filter by substrings using the function filter_by_substrings.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0pbutg3.jl:13\nin expression starting at\
    \ /tmp/tmpl0pbutg3.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphqlwtzrs.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphqlwtzrs.jl:1\n\
    in expression starting at /tmp/tmphqlwtzrs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a vector of strings as inputs and returns a vector\
    \ of strings as output. \nThe function should return all strings in the input\
    \ vector that do not contain any of the strings in the input vector.\nThe function\
    \ should return an empty vector if the input vectors are empty.\nThe function\
    \ should return an empty vector if the input vectors are of different lengths.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7gu3_8ts.jl:11\nin expression starting at\
    \ /tmp/tmp7gu3_8ts.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(x -> contains(x, substring), strings)]\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_zau4r3h.jl:11\nin expression starting at\
    \ /tmp/tmp_zau4r3h.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'cde']\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5ecc93n.jl:10\nin expression starting at\
    \ /tmp/tmpd5ecc93n.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1yepygmu.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmp1yepygmu.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp1yepygmu.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1yepygmu.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1yepygmu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1yepygmu.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmp1yepygmu.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp1yepygmu.jl:8\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1yepygmu.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1yepygmu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1yepygmu.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmp1yepygmu.jl:7\n\
    \  Stac"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1yepygmu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x,substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and a substring and returns a vector of strings containing only the strings\
    \ that contain the substring. For example, given the following input vector:\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmjs63v95.jl:11\nin expression starting at\
    \ /tmp/tmpmjs63v95.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters input strings based on whether they\
    \ contain any of a list of substrings.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps6odk_38.jl:18\nin expression starting at\
    \ /tmp/tmps6odk_38.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[:]\n    \n    substring = lowercase(substring)\n\
    \    \n    strings = filter((x) -> contains(lowercase(x), substring), strings)\n\
    \    \n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoja88q57.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    findall(!Matched::Union{AbstractPattern, AbstractString},\
    \ ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpoja88q57.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoja88q57.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoja88q57.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpoja88q57.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    findall(!Matched::Union{AbstractPattern,\
    \ AbstractString}, ::AbstractString; overlap) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:458\n\
    \    findall(!Matched::AbstractChar, ::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/regex.jl:489\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpoja88q57.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoja88q57.jl:18 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoja88q57.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a list of strings based on whether they\
    \ contain a given substring. Test it on a list of strings that contains both substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpclg2x8z1.jl:19\nin expression starting at\
    \ /tmp/tmpclg2x8z1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, true)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\", true)\n</cell>\n<text>\nfilter_by_substring!\nSimilar to filter_by_substring,\
    \ but modifies the input list in-place.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6y67ihjj.jl:10\nin expression starting at\
    \ /tmp/tmp6y67ihjj.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
