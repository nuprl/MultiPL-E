name: HumanEval_83_starts_one_ends
language: julia
prompt: "\"\"\"\n    Given a positive integer n, return the count of the numbers of\
  \ n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
  \ starts_one_ends(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
  \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
  \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
completions: ["    if n == 1 \n        then return 1\n        else return 0\n    end\n\
    end\n\"\"\"\n    Given a positive integer n, return the count of the numbers of\
    \ n-digit\n    positive integers that start or end with 1.\n    \"\"\"", "   \
    \ if n < 10 \n        return 0 \n    else \n        return 1 + starts_one_ends(n//10)\
    \ + starts_one_ends(n%10) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1 \n        then return 1\n\
    \        else return starts_one_ends(n-1) + ends_one_starts(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 10 \n        return 0 \n    else \n        return 1 + starts_one_ends(n//10)\
    \ + starts_one_ends(n%10) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given positive integer n.", "    if n == 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return 1\n    else \n        local count = 0\n    \
    \    for i = 2 to n \n            do if n % i == 0 \n                then count\
    \ = count + 1\n                else break\n        end\n        return count\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"", "    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>", "    if n < 10 \n        return 0 \n\
    \    else \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(", "    if n < 10 \n        return\
    \ n\n    else \n        return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        then return 0\n    else if\
    \ n == 1 \n        then return 1\n    else \n        count_starts_ends(n-1) +\
    \ count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4) + count_starts_ends(n-5)\
    \ + count_starts_ends(n-6)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>", "    if n == 1 \n        then return 1 \n        else return 0 \n  \
    \  end\nend\n\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", " \
    \   if n == 1 \n        then return 1\n    else \n        sum = 0\n        for\
    \ i = 2 to n \n            sum = (sum * i) + starts_one_ends(i-1)\n        return\
    \ sum\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ that end with 2.", "    if n == 1 \n        then return 1\n    else if n ==\
    \ 0 \n        then return 0\n    else \n        local i = 1\n        local count\
    \ = 0\n        while i <= n \n            do \n                if ((i mod 10)\
    \ == 1) \n                    then count = count + 1\n                end\n  \
    \              i = i + 1\n            end\n        return count\n    end\nend\n\
    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if n < 10 \n        then return 1\n    else \n        count_starts_ends(n)\
    \ \nend\n\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", " \
    \   if n == 1 \n        then return 1\n        else return 0\n    else if n <\
    \ 1 \n        then return 0\n        else return starts_one_ends(n-1) + ends_one_starts(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"", "    if n == 1 \n        then return 1\n    else\
    \ if n == 0 \n        then return 0\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n+1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n.", "    if n == 1 \n\
    \        then return 1 \n        else return 0 \n    else \n        let\n    \
    \        digits = digits(n) \n            digits_start = digits[digits.length\
    \ - 1] \n            digits_end = digits[digits.length - 2] \n        in \n  \
    \          if digits_start == 1 \n                then starts_one_ends(digits_end\
    \ - 1) \n                else starts_one_ends(digits_end - 1) + 1 \n        end\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a recursive function which\
    \ solves the problem in O(log(n)) time complexity. \n<code>", "    if n < 10 \n\
    \        return 1 \n    else \n        return starts_one_ends(n//10) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"", "    if n < 10 \n        return 0 \n    else \n      \
    \  return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        then return 1 \n        else return 0 \n    else \n   \
    \     n <- starts_one_ends(n-1) \n        if n % 10 == 1 \n            then return\
    \ 1 + starts_one_ends(n//10) \n            else return starts_one_ends(n//10)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local count = 1\n        local i = 2\n        while i\
    \ <= n \n            do if i%10 == 1 \n                then count = count + 1\n\
    \                else count = count + 1\n            end\n            i = i +\
    \ 1\n        end\n        return count\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>", "    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n < 0 \n\
    \        error(\"n must be positive\")\n    else if n == 0 \n        1\n    else\
    \ \n        1 + starts_one_ends(n / 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n == 0 \n\
    \        then return 0 \n    else \n        local i::Int64 = 1\n        local\
    \ count::Int64 = 0\n        while i <= n \n            do if i%10 == 1 \n    \
    \            then count = count + 1\n                else return 0 \n        \
    \    end\n            i = i + 1\n        end\n        return count\n    end\n\
    end\n</cell>\n<code language=julia-1.4>", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n < 0 \n\
    \        error(\"n must be positive\")\n    else if n == 0 \n        1\n    else\
    \ \n        1 + starts_one_ends(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>",
  "    if n == 0 \n        then return 0 \n    else if n == 1 \n        then return\
    \ 1 \n    else \n        local count = 1\n        for i = 2 to n \n          \
    \  do if i%10 == 1 \n                then count = count + 1\n                else\
    \ count = count + 0\n            end\n        end\n        return count\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"", "    if n == 0 \n        then return 0\n    else\
    \ \n        count_starts_ends(n-1) + count_starts_ends(n+1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time count_starts_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(100)\n</cell>\n<code language=julia-1.5>\n@time count_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\n@time count_starts_ends(10000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(1000000)\n</cell>\n<code language=julia-1.5>\n@time count_starts_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\n@time count_starts_ends(100000000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time count_starts_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(100000000000000000000000)\n</cell", "    if n < 10 \n\
    \        then return 1\n        else return n * starts_one_ends(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        then return 1 \n        else return 0 \n    else \n   \
    \     local count = 1\n        local i = 1\n        while i <= n \n          \
    \  do \n                if ((i-1) == 1) \n                    then count = count\
    \ + 1 \n                else \n                    count = count + 0 \n      \
    \          end \n                i = i + 1 \n            end \n        return\
    \ count \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"", "    if n < 0 \n        error(\"\
    n must be positive\")\n    else if n < 10 \n        1\n    else if n < 100 \n\
    \        2\n    else if n < 1000 \n        3\n    else if n < 10000 \n       \
    \ 4\n    else if n < 100000 \n        5\n    else if n < 1000000 \n        6\n\
    \    else if n < 10000000 \n        7\n    else if n < 100000000 \n        8\n\
    \    else if n < 1000000000 \n        9\n    else \n        10\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(2)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(3)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(4)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(5)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(6)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(7)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(8)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(9)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(11)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(13)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(14)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(15)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(16)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(17)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(18)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(19)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(20)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(21)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(22)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(23)\n</cell>\n<code language=julia-1.5>\nstarts_", "    if n ==\
    \ 1 \n        return 1 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.", "    if n == 0 \n        then return 0\n    else if n\
    \ < 0 \n        then return 0\n    else if n == 1 \n        then return 1\n  \
    \  else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(-10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(0)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(2)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(3)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(4)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(5)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(6)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(7)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(8)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(9)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(11)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(12)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(13)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(14)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(15)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(16)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(17)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(18)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(19)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(20)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(21)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(22)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(23)\n</cell>\n<code language=julia-1.3>\nstarts_one_end", "  \
    \  if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n   \
    \     1\n    else if n == 1 \n        1\n    else if n % 2 == 0 \n        1 +\
    \ starts_one_ends(n / 2)\n    else \n        1 + starts_one_ends(n / 2) + starts_one_ends(n\
    \ / 2 - 1)\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ less than or equal to a given integer n.", "    if n == 0 \n        then return\
    \ 0 \n    else \n        local i::Int64 = n \n        while i >= 10 \n       \
    \     do \n                i /= 10 \n            done \n        return i\nend\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>",
  "    if n < 10 \n        return 0 \n    else \n        return 1 + starts_one_ends(n\
    \ / 10) \nend\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.0>", "    if n < 10 \n        return n\n    else \n   \
    \     return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of integers in the range $[1,n]$ that are divisible by $k$.\
    \ For example, if the range is $[1,10]$ and $k=3$, then the function should return\
    \ $5$. Assume that the range is always sorted and that $k$ is always positive.",
  "    if n < 10 \n        then return 1\n    else \n        local count = 0\n   \
    \     while n > 0 \n            do if n%10 == 1 \n                then count =\
    \ count + 1\n                else return 0\n            end\n            n = n/10\n\
    \        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789)\n</cell>\n<code language=julia-1.5>", "    if n ==\
    \ 0 \n        then return 0 \n    else \n        local count = 1\n        local\
    \ i = 1\n        while i <= n \n            do if i%10 == 1 \n               \
    \ then count = count + 1\n                else \n                    count = 0\n\
    \                end\n            end\n            i = i + 1\n        end\n  \
    \      return count\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n == 1\
    \ \n        then return 1 \n        else return starts_one_ends(n-1) + 1 \n  \
    \  end\nend\n\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", " \
    \   if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n//10)\
    \ + starts_one_ends(n%10)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10)\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<text>\nExercise 2\n\
    Write a function that counts the number of positive integers that start or end\
    \ with 2.", "    if n == 0 \n        then return 0\n    else if n == 1 \n    \
    \    then return 1\n    else \n        count_starts_ends(n-1) + count_starts_ends(n-2)\
    \ + count_starts_ends(n-3) + count_starts_ends(n-4) + count_starts_ends(n-5) +\
    \ count_starts_ends(n-6)\nend\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000001)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000002)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000003)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000004)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000005)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000006)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000007)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000008)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000009)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000010)\n", "    if n < 10 \n        return 1 \n   \
    \ else \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n == 0 \n\
    \        then return 0 \n    else if n == 1 \n        then return 1 \n    else\
    \ \n        count_starts_ends(n-1) + count_starts_ends(n-2) \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time count_starts_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(100)\n</cell>\n<code language=julia-1.5>\n@time count_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\n@time count_starts_ends(10000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(1000000)\n</cell>\n<code language=julia-1.5>\n@time count_starts_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\n@time count_starts_ends(100000000)\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time count_starts_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time ", "    if n == 0 \n        then return 0\n    else if n == 1 \n       \
    \ then return 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n\
    \ / 2)\n    else \n        return starts_one_ends(n / 2) + starts_one_ends(n /\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n == 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return 1\n    else \n        let\n            digits\
    \ = digits(n)\n            first_digit = digits[1]\n            first_digit_index\
    \ = index(digits, first_digit)\n            second_digit = digits[2]\n       \
    \     second_digit_index = index(digits, second_digit)\n            \n       \
    \     first_digit_count = starts_one_ends(first_digit_index - 1)\n           \
    \ second_digit_count = starts_one_ends(second_digit_index - 1)\n            \n\
    \            count = first_digit_count + second_digit_count\n        end\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>",
  "    if n == 1 \n        then return 1 \n        else return starts_one_ends(n-1)\
    \ + 1 \n    end\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of integers\
    \ that are divisible by 3 or 5 but not both.", "    if n == 0 \n        then return\
    \ 0 \n    else if n == 1 \n        then return 1 \n    else \n        let\n  \
    \          digits = digits(n) \n            digits_length = length(digits) \n\
    \            digits_sum = sum(digits) \n            digits_product = 1\n     \
    \       for i in digits_length\n                digits_product *= digits[i]\n\
    \            digits_product /= digits_sum\n            digits_product = digits_product\
    \ % 10\n            digits_product = digits_product == 0 ? 0 : digits_product\n\
    \            digits_product = digits_product == 1 ? 1 : digits_product\n     \
    \       digits_product = digits_product == 2 ? 2 : digits_product\n          \
    \  digits_product = digits_product == 3 ? 3 : digits_product\n            digits_product\
    \ = digits_product == 4 ? 4 : digits_product\n            digits_product = digits_product\
    \ == 5 ? 5 : digits_product\n            digits_product = digits_product == 6\
    \ ? 6 : digits_product\n            digits_product = digits_product == 7 ? 7 :\
    \ digits_product\n            digits_product = digits_product == 8 ? 8 : digits_product\n\
    \            digits_product = digits_product == 9 ? 9 : digits_product\n     \
    \       digits_product = digits_product == 10 ? 10 : digits_product\n        \
    \    digits_product = digits_product == 11 ? 11 : digits_product\n           \
    \ digits_product = digits_product == 12 ? 12 : digits_product\n            digits_product\
    \ = digits_product == 13 ? 13 : digits_product\n            digits_product = digits_product\
    \ == 14 ? 14 : digits_product\n            digits_product = digits_product ==\
    \ 15 ? 15 : digits_product\n            digits_product = digits_product == 16\
    \ ? 16 : digits_product\n            digits_product = digits_product == 17 ? 17\
    \ : digits_product\n            digits_product = digits_product == 18 ? 18 : digits_product\n\
    \            digits_product = digits_product == 19 ? 19 : digits_product\n   \
    \         digits_product = digits_product == 20 ? 20 : digits_product\n      \
    \      digits_product = digits_product == 21 ? 21 : digits_product\n         \
    \   digits_product = digits_product == 22 ? 22 : digits_product\n            digits_product\
    \ = digits_product == 23 ? 23 : digits_product\n            digits_product = digits_product\
    \ == 24 ? 24 : digits_product\n            digits_product", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else if\
    \ n % 2 == 0 \n        then return starts_one_ends(n / 2)\n    else \n       \
    \ return starts_one_ends(n / 2) + starts_one_ends(n / 2 + 1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers that start or end with\
    \ 2.", "    if n == 0 \n        then return 0 \n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) \nend\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"", "    if n == 1 \n        then return 1\n    else \n  \
    \      count_starts_ends(n-1) + count_starts_ends(n+1)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5", "    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4) +\
    \ count_starts_ends(n-5) + count_starts_ends(n-6) + count_starts_ends(n-7) + count_starts_ends(n-8)\
    \ + count_starts_ends(n-9) + count_starts_ends(n-10)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\n", "    if n == 1 \n        return 1 \n  \
    \  else \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers less than or equal\
    \ to a given integer n.", "    if n == 0 \n        then return 0\n    else if\
    \ n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ starts_one_ends(n/2)\n    else \n        return starts_one_ends(n/2) + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.", "    if n < 10 \n        return 0 \n    else \n     \
    \   return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_end", "    if n < 10 \n        return 1\
    \ \n    else \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \n\
    end\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000013)\n</cell>\n<code language=julia-", "    if n < 10\
    \ \n        return 0 \n    else \n        return 1 + starts_one_ends(n//10) \n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(",
  "    if n == 1 \n        then return 1 \n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) \nend\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000000000000)\n</cell>\n\
    <code language=julia-", "    if n < 10 \n        return 1 \n    else \n      \
    \  return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.", "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n//10)\
    \ + starts_one_ends(n%10)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.", "    if n == 0 \n        then return 0\n\
    \    else if n == 1 \n        then return 1\n    else \n        local count =\
    \ 1\n        local i = 1\n        while i <= n \n            do if i %% 10 ==\
    \ 1 \n                then count = count + 1\n                else count = count\
    \ + 1\n            end\n            i = i + 1\n        end\n        return count\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"", "    if n < 0 \n        error(\"n must\
    \ be positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    </cell>\n", "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n//10)\
    \ + starts_one_ends(n%10) \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n < 10\
    \ \n        return 1 \n    else \n        return starts_one_ends(n / 10) + 1 \n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>",
  "    if n < 10 \n        return 0 \n    else \n        return 1 + starts_one_ends(n//10)\
    \ + starts_one_ends(n%10) \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n < 0 \n\
    \        error(\"n must be positive\")\n    else if n == 0 \n        1\n    else\
    \ \n        1 + starts_one_ends(n-1)\nend", "    if n == 1 \n        then return\
    \ 1 \n        else return 0 \n    else \n        let\n            digits = digits(n)\
    \ \n            digits_length = length(digits) \n            digits_sum = sum(digits)\
    \ \n            digits_product = product(digits) \n            digits_product2\
    \ = product2(digits) \n            digits_product3 = product3(digits) \n     \
    \       digits_product4 = product4(digits) \n            digits_product5 = product5(digits)\
    \ \n            digits_product6 = product6(digits) \n            digits_product7\
    \ = product7(digits) \n            digits_product8 = product8(digits) \n     \
    \       digits_product9 = product9(digits) \n            digits_product10 = product10(digits)\
    \ \n            digits_product11 = product11(digits) \n            digits_product12\
    \ = product12(digits) \n            digits_product13 = product13(digits) \n  \
    \          digits_product14 = product14(digits) \n            digits_product15\
    \ = product15(digits) \n            digits_product16 = product16(digits) \n  \
    \          digits_product17 = product17(digits) \n            digits_product18\
    \ = product18(digits) \n            digits_product19 = product19(digits) \n  \
    \          digits_product20 = product20(digits) \n            digits_product21\
    \ = product21(digits) \n            digits_product22 = product22(digits) \n  \
    \          digits_product23 = product23(digits) \n            digits_product24\
    \ = product24(digits) \n            digits_product25 = product25(digits) \n  \
    \          digits_product26 = product26(digits) \n            digits_product27\
    \ = product27(digits) \n            digits_product28 = product28(digits) \n  \
    \          digits_product29 = product29(digits) \n            digits_product30\
    \ = product30(digits) \n            digits_product31 = product31(digits) \n  \
    \          digits_product32 = product32(digits) \n            digits_product33\
    \ = product33(digits) \n            digits_product34 = product34(digits) \n  \
    \          digits_product35 = product35(digits) \n            digits_product36\
    \ = product36(digits) \n            digits_product37 = product37(digits) \n  \
    \          digits_product38 = product38(digits) \n            digits_product39\
    \ = product39(digits) \n            digits_product40 = product40(digits) \n  \
    \          digits_product41 = product41(digit", "    if n == 0 \n        then\
    \ return 0\n    else if n == 1 \n        then return 1\n    else \n        return\
    \ starts_one_ends(n-1) + ends_one_starts(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n  \
    \      then return 1 \n        else return 0 \n    end\nend", "    if n < 0 \n\
    \        error(\"n must be positive\")\n    else if n == 0 \n        1\n    else\
    \ if n == 1 \n        1\n    else \n        1 + starts_one_ends(n - 1)\nend\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(", "    if n < 10 \n        return\
    \ 0 \n    else \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers that start or end with\
    \ 2.", "    if n == 0 \n        then return 0\n    else \n        x <- starts_one_ends(n-1)\n\
    \        if n `mod` x == 0 \n            then return x + 1\n        else return\
    \ x\nend\n\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", " \
    \   if n < 10 \n        return 0 \n    else \n        return 1 + starts_one_ends(n//10)\
    \ + starts_one_ends(n%10) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.", "    if n == 0 \n        then return 0\n\
    \    else if n == 1 \n        then return 1\n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) + count_one_ends(n-3) + count_one_ends(n-4) + count_one_ends(n-5)\
    \ + count_one_ends(n-6)\n    end\nend\n</cell>\n<code language=julia-1.4>\ncount_one_ends(10)\n\
    </cell>\n<code language=julia-1.4>\ncount_one_ends(100)\n</cell>\n<code language=julia-1.4>\n\
    count_one_ends(1000)\n</cell>\n<code language=julia-1.4>\ncount_one_ends(10000)\n\
    </cell>\n<code language=julia-1.4>\ncount_one_ends(100000)\n</cell>\n<code language=julia-1.4>\n\
    count_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\ncount_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\ncount_one_ends(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    count_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\ncount_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_one_ends(1000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\ncount_one_ends(10000000000000)\n</cell>\n<code language=julia-1.4>\n\
    count_one_ends(100000000000000)\n</cell>\n<code language=julia-1.4>\ncount_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\ncount_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    count_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.4>\ncount_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_one_end", "    if n < 10 \n        return 0 \n\
    \    else \n        return starts_one_ends(n/10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(", "    if n < 10 \n        return\
    \ 1 \n    else \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n//10)\
    \ + starts_one_ends(n%10) \nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.", "    if n == 0 \n        then return 0\n\
    \    else if n < 0 \n        then return 0\n    else if n == 1 \n        then\
    \ return 1\n    else \n        local count = 1\n        while n >= 10 \n     \
    \       do count = count + 1\n            n = n / 10\n        end\n        return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"", "    if n < 0 \n        error(\"n must\
    \ be positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>", "    if n < 10 \n        return 0 \n\
    \    else \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(", "    if n < 10 \n        return\
    \ 0 \n    else \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers that start or end with\
    \ 2.", "    if n == 0 \n        then return 0\n    else if n == 1 \n        then\
    \ return 1\n    else \n        local i::Int64 = 1\n        local count::Int64\
    \ = 1\n        while i <= n \n            do if i%10 == 1 \n                then\
    \ count = count + 1\n                else return count\n            end\n    \
    \        i = i + 1\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(2)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(3)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(4)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(5)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(6)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(7)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(8)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(9)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(11)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(13)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(14)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(15)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(16)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(17)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(18)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(19)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(20)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(21)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(22)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(23)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(24)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(25)\n</cell>\n<code language=julia-1.5>\nstart", "    if n ==\
    \ 0 \n        then return 0\n    else if n < 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return 1\n    else \n        local count = 1\n    \
    \    local i = 1\n        while i <= n \n            do if i%10 == 1 \n      \
    \          then count = count + 1\n                else count = count + 1\n  \
    \          end\n            i = i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(-2)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(0)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(2)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(3)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(4)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(5)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(6)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(7)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(8)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(9)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(11)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(12)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(13)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(14)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(15)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(16)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(17)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(18)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(19)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(20)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(21)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(22)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(23)\n</cell>", "    if n ==\
    \ 1 \n        return 1 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.0>\n@time starts_one_ends(10)\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of integers from 1\
    \ to n that start with 1.", "    if n == 0 \n        then return 0 \n    else\
    \ \n        let\n            digits = digits(n) \n            digits_len = length(digits)\
    \ \n            digits_len = digits_len - 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digits_len = digits_len + 1 \n            digits_len = digits_len\
    \ + 1 \n            digit", "    if n == 0 \n        then return 0\n    else if\
    \ n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n / 2) + starts_one_ends(n\
    \ / 2 + 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ less than or equal to a given integer n.", "    if n < 10 \n        return 1\
    \ \n    else \n        return starts_one_ends(n/10) + 1 \nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers that start or end with\
    \ 2.", "    if n == 1 \n        then return 1 \n        else return 0 \n    end\n\
    end\n\"\"\"\n    Given a positive integer n, return the count of the numbers of\
    \ n-digit\n    positive integers that start or end with 1.\n    \"\"\"", "   \
    \ if n < 10 \n        return 0 \n    else \n        return 1 + starts_one_ends(n\
    \ / 10) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of positive integers\
    \ that start or end with 2.", "    if n == 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n / 2) + starts_one_ends(n\
    \ / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n == 1 \n        return 1 \n    else \n\
    \        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers less than or equal to\
    \ a given integer n.", "    if n == 1 \n        then return 1\n        else return\
    \ 0\n    end\nend", "    if n == 0 \n        then return 0\n    else if n == 1\
    \ \n        then return 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n\
    \ / 2) + 1\n    else \n        return starts_one_ends(n / 2) + starts_one_ends(n\
    \ / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100", "    if n == 1 \n  \
    \      then return 1 \n        else return 0 \n    else \n        n <- n - 1 \n\
    \        i <- starts_one_ends(n) \n        j <- starts_one_ends(n) \n        if\
    \ i == 1 \n            then return j \n            else return j + 1 \nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        then return 0 \n    else\
    \ \n        x <- starts_one_ends(n-1) \n        if x == 0 \n            then return\
    \ 1 \n        else \n            if n % x == 0 \n                then return 1\
    \ + starts_one_ends(n-x) \n            else \n                return starts_one_ends(n-x)\
    \ \nend \n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of integers in the range\
    \ $[1,n]$ that are divisible by $k$. For example, if the range is $[1,10]$ and\
    \ the number is $k=3$, then the function should return $4$.", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        local count = 1\n        local i = 2\n        while i <= n \n       \
    \     do if i%10 == 1 \n                then count = count + 1\n             \
    \   else return count\n            end\n            i = i + 1\n        end\n \
    \       return count\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given\
    \ a positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"", "    if n < 10 \n        return\
    \ 1 \n    else \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.0>",
  "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n/10)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"", "    if n < 10 \n        then return\
    \ 0\n    else \n        local count = 0\n        for i = 1, n \n            do\
    \ if i%10 == 1 \n                then count = count + 1\n            else \n \
    \               count = 0\n            end\n        end\n        return count\n\
    \    end\nend\n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        then return 0 \n    else if n == 1 \n        then return\
    \ 1 \n    else \n        local i::Int64 = 1\n        local count::Int64 = 0\n\
    \        while i <= n \n            do if i%10 == 1 \n                then count\
    \ = count + 1 \n                else break \n            end\n            i =\
    \ i + 1\n        end\n        return count\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 0.\n    \"\"\"", "    if n < 10\
    \ \n        return 0 \n    else \n        return 1 + starts_one_ends(n / 10) \n\
    end\n\"\"\"\n    Given a positive integer n, return the count of the numbers of\
    \ n-digit\n    positive integers that start or end with 1.\n    \"\"\"", "   \
    \ if n < 10 \n        then return 1\n        else return starts_one_ends(n//10)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1234567890)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(12345678901)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(123456789012)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1234567890123)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901234)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(12345678901234567)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(123456789012345678)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1234567890123456788)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(12345678901234567889)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789012345678899)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1234567890123456788999)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(12345678901234567889999)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1234567890123456788999999)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(12345678901234567889999999999)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(123456789012345678899999999999)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789012345678899999999999998)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1234567890123456788999999999999987)\n\
    </cell>", "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n\
    \ / 10) + 1 \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n < 10 \n        return n\n    else \n   \
    \     return starts_one_ends(n / 10) + n % 10\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>", "    if n < 10 \n  \
    \      return 1 \n    else \n        return starts_one_ends(n//10) + starts_one_ends(n%10)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ less than or equal to a given integer n.", "    if n < 10 \n        then return\
    \ 1\n    else if n < 100 \n        then return 1 + starts_one_ends(n//10)\n  \
    \  else if n < 1000 \n        then return 1 + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 10000 \n        then return 1 + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 100000 \n        then return 1 + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 1000000 \n        then return 1 + starts_one_ends(n//100000)\
    \ + starts_one_ends(n//10000) + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 10000000 \n        then return 1 +\
    \ starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 100000000 \n        then return 1 + starts_one_ends(n//10000000)\
    \ + starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 1000000000 \n        then return 1 + starts_one_ends(n//100000000)\
    \ + starts_one_ends(n//10000000) + starts_one_ends(n//1000000) + starts_one_ends(n//100000)\
    \ + starts_one_ends(n//10000) + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 10000000000 \n        then return\
    \ 1 + starts_one_ends(n//1000000000) + starts_one_ends(n//100000000) + starts_one_ends(n//10000000)\
    \ + starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + start", "    if n < 10\
    \ \n        return n\n    else \n        return starts_one_ends(n//10)*10 + starts_one_ends(n%10)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n</cell>\n\
    <code language=juli", "    if n == 0 \n        then return 0\n    else if n ==\
    \ 1 \n        then return 1\n    else \n        local count = 1\n        local\
    \ i = 1\n        while i <= n \n            do if i mod 10 == 1 \n           \
    \     then count = count + 1\n                else count = count + 1\n       \
    \     end\n            i = i + 1\n        end\n        return count\n    end\n\
    end\n</cell>\n<code language=julia-1.3>", "    if n == 1 \n        then return\
    \ 1\n    else \n        sum((starts_one_ends(n-1) + ends_one_starts(n-1)))\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n / 2)\n   \
    \ else \n        return starts_one_ends(n / 2) + starts_one_ends(n / 2)\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.", "    if n == 1 \n        then return 1\n    else \n       \
    \ count_starts_ends(n-1) + count_starts_ends(n+1)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5", "    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        local count = 0 \n        local i\
    \ = 1\n        while i <= n \n            do \n                if i%10 == 1 \n\
    \                    then count = count + 1 \n                    else break \n\
    \                end \n                i = i + 1\n            end \n        return\
    \ count \n    end \nend \n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstart", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        let\n    \
    \        digits = digits(n)\n            start = digits[1]\n            end =\
    \ digits[end]\n            count = (end - start) * (starts_one_ends(n - start)\
    \ + ends_one_starts(n - end))\n        in \n            count \n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"", "    if n == 1 \n        then return\
    \ 1\n        else return 0\n    end\nend\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"", "    if n < 10 \n        return 1 \n    else \n\
    \        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        let\n            digits = floor(log(n,10))\n         \
    \   digits_start = floor(digits/2)\n            digits_end = floor(digits/2)\n\
    \            digits_middle = floor(digits/2)\n            digits_middle2 = floor(digits/2)\n\
    \            digits_middle3 = floor(digits/2)\n            digits_middle4 = floor(digits/2)\n\
    \            digits_middle5 = floor(digits/2)\n            digits_middle6 = floor(digits/2)\n\
    \            digits_middle7 = floor(digits/2)\n            digits_middle8 = floor(digits/2)\n\
    \            digits_middle9 = floor(digits/2)\n            digits_middle10 = floor(digits/2)\n\
    \            digits_middle11 = floor(digits/2)\n            digits_middle12 =\
    \ floor(digits/2)\n            digits_middle13 = floor(digits/2)\n           \
    \ digits_middle14 = floor(digits/2)\n            digits_middle15 = floor(digits/2)\n\
    \            digits_middle16 = floor(digits/2)\n            digits_middle17 =\
    \ floor(digits/2)\n            digits_middle18 = floor(digits/2)\n           \
    \ digits_middle19 = floor(digits/2)\n            digits_middle20 = floor(digits/2)\n\
    \            digits_middle21 = floor(digits/2)\n            digits_middle22 =\
    \ floor(digits/2)\n            digits_middle23 = floor(digits/2)\n           \
    \ digits_middle24 = floor(digits/2)\n            digits_middle25 = floor(digits/2)\n\
    \            digits_middle26 = floor(digits/2)\n            digits_middle27 =\
    \ floor(digits/2)\n            digits_middle28 = floor(digits/2)\n           \
    \ digits_middle29 = floor(digits/2)\n            digits_middle30 = floor(digits/2)\n\
    \            digits_middle31 = floor(digits/2)\n            digits_middle32 =\
    \ floor(digits/2)\n            digits_middle33 = floor(digits/2)\n           \
    \ digits_middle34 = floor(digits/2)\n            digits_middle35 = floor(digits/2)\n\
    \            digits_middle36 = floor(digits/2)\n            digits_middle37 =\
    \ floor(digits/2)\n            digits_middle38 = floor(digits/2)\n           \
    \ digits_middle39 = floor(digits/2)\n            digits_middle40 = floor(digits/2)\n\
    \            digits_middle41 = floor(digits/2)\n            digits_middle42 =\
    \ floor(digits/2)\n            digits_middle43 = floor(digits/", "    if n ==\
    \ 0 \n        then return 0\n    else if n < 0 \n        then return -1\n    else\
    \ if n == 1 \n        then return 1\n    else \n        local count = 1\n    \
    \    local i = 1\n        while i <= n \n            do if i%10 == 1 \n      \
    \          then count = count + 1\n                else break\n            end\n\
    \            i = i + 1\n        end\n        return count\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    Given a positive integer n, return the count\
    \ of the numbers of n-digit\n    positive integers that start or end with 0.\n\
    \    \"\"\"", "    if n == 1 \n        then return 1\n        else return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1 \n        then return 1\n\
    \    else \n        count_starts_ends(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100", "    if n == 1 \n\
    \        return 1 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>",
  "    if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n   \
    \     1\n    else if n == 1 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of positive integers\
    \ less than or equal to n.", "    if n < 10 \n        return n\n    else \n  \
    \      return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of integers in the range $[1,n]$ that\
    \ are divisible by $k$. For example, for $k = 3$ and $n = 10$, the output should\
    \ be $5$.", "    if n == 0 \n        then return 0\n    else if n == 1 \n    \
    \    then return 1\n    else \n        local count = 1\n        local i = 2\n\
    \        while i <= n \n            do if i%10 == 1 \n                then count\
    \ = count + 1\n                else return count\n            end\n          \
    \  i = i + 1\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 0.\n    \"\"\"", "    if n == 1\
    \ \n        return 1 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"", "    if n == 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return 1\n    else \n        count_one_ends(n-1) +\
    \ count_one_ends(n-2) + count_one_ends(n-3)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000000000000000",
  "    if n == 1 \n        then return 1\n        else return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that counts the number of positive\
    \ integers that are\ndivisible by 7 and that are between 10 and 99.", "    if\
    \ n == 0 \n        then return 0 \n    else \n        local i::Int64 = 1\n   \
    \     local count::Int64 = 0\n        while i <= n \n            do if i%10 ==\
    \ 1 \n                then count = count + 1 \n                else break \n \
    \           end \n            i = i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.4>\nstarts_", "    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n == 1 \n\
    \        then return 1 \n        else return 0 \n    else \n        n <- starts_one_ends(n-1)\
    \ \n        if n % 10 == 1 \n            then return 1 + starts_one_ends(n) \n\
    \            else return starts_one_ends(n) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>", "    if n < 10 \n  \
    \      return 0 \n    else \n        return 1 + starts_one_ends(n / 10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.", "    if n == 1 \n        return 1 \n    else \n        return\
    \ starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n == 0 \n\
    \        then return 0\n    else \n        x <- starts_one_ends(n-1)\n       \
    \ if n % 10 == 1 \n            then return x + 1\n        else return x\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)", "   \
    \ if n == 0 \n        then return 0 \n    else if n == 1 \n        then return\
    \ 1 \n    else \n        local i::Int64 = 1\n        local count::Int64 = 0\n\
    \        while i <= n \n            do if i%10 == 1 \n                then count\
    \ = count + 1 \n                else break \n            end\n            i =\
    \ i + 1\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000000000000000)\n\
    </cell", "    if n == 1 \n        then return 1 \n        else return starts_one_ends(n-1)\
    \ + 1 \n    end\nend", "    if n == 1 \n        then return 1\n        else return\
    \ 0\n    else if n == 0 \n        then return 0\n        else return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\nend", "    if n < 10 \n        return 1 \n    else \n\
    \        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.", "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n//10)\
    \ + starts_one_ends(n%10) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100_000_000)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.", "    if n < 0 \n        error(\"n must be positive\")\n\
    \    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n - 1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.", "    if n == 1 \n        then return 1\n        else\
    \ return 0\n    end\nend\n\"\"\"\n    Given a positive integer n, return the count\
    \ of the numbers of n-digit\n    positive integers that start or end with 1.\n\
    \    \"\"\"", "    if n == 0 \n        then return 0\n    else if n == 1 \n  \
    \      then return 1\n    else \n        count_starts_ends(n-1) + count_starts_ends(n-2)\
    \ + count_starts_ends(n-3) + count_starts_ends(n-4) + count_starts_ends(n-5) +\
    \ count_starts_ends(n-6)\n    end\nend\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(1000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100000000000000000000000)\n</cell>",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local count = 1\n        local i = 1\n        while i\
    \ <= n \n            do if i%10 == 1 \n                then count = count + 1\n\
    \                else count = count + 1\n            end\n            i = i +\
    \ 1\n        end\n        return count\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n == 1\
    \ \n        then return 1 \n        else return 0 \n    else \n        n <- n\
    \ \n        i <- 1 \n        count <- 0 \n        while i < n \n            do\
    \ if n%i==0 \n                then count <- count + 1 \n                else i\
    \ <- i + 1 \n        return count \nend \n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n < 10\
    \ \n        then return 1\n    else if n < 100 \n        then return 2\n    else\
    \ if n < 1000 \n        then return 3\n    else if n < 10000 \n        then return\
    \ 4\n    else if n < 100000 \n        then return 5\n    else if n < 1000000 \n\
    \        then return 6\n    else if n < 10000000 \n        then return 7\n   \
    \ else if n < 100000000 \n        then return 8\n    else if n < 1000000000 \n\
    \        then return 9\n    else if n < 10000000000 \n        then return 10\n\
    \    else if n < 100000000000 \n        then return 11\n    else if n < 1000000000000\
    \ \n        then return 12\n    else if n < 10000000000000 \n        then return\
    \ 13\n    else if n < 100000000000000 \n        then return 14\n    else if n\
    \ < 1000000000000000 \n        then return 15\n    else if n < 10000000000000000\
    \ \n        then return 16\n    else if n < 100000000000000000 \n        then\
    \ return 17\n    else if n < 1000000000000000000 \n        then return 18\n  \
    \  else if n < 10000000000000000000 \n        then return 19\n    else if n <\
    \ 1000000000000000000 \n        then return 20\n    else if n < 10000000000000000000\
    \ \n        then return 21\n    else if n < 100000000000000000000 \n        then\
    \ return 22\n    else if n < 1000000000000000000000 \n        then return 23\n\
    \    else if n < 10000000000000000000000 \n        then return 24\n    else if\
    \ n < 100000000000000000000000 \n        then return 25\n    else if n < 1000000000000000000000000\
    \ \n        then return 26\n    else if n < 10000000000000000000000000 \n    \
    \    then return 27\n    else if n < 100000000000000000000000000 \n        then\
    \ return 28\n    else if n < 1000000000000000000000000000 \n        then return\
    \ 29\n    else if n < 10000000000000000000000000000 \n        then return 30\n\
    \    else if n < 100000000000000000000000000000 \n        then return 31\n   \
    \ else if n < 1000000000000000000000000000000 \n        then return 32\n    else\
    \ if n < 10000000000000000000000000000000 \n        then return 33\n    else if\
    \ n < 100000000000000000000000000000000 \n        then return 34\n    else if\
    \ n < 1000000000000000000000000000000000 \n        then return 35\n    else if\
    \ n < 10000000000000000000000000000000000 \n        then return 36\n    else if\
    \ n < 100000000000000000000000000000000000 \n        then return 37\n    else\
    \ if n < 1000000000000000000000000000000000000 \n        then return 38\n    else\
    \ if n < 100", "    if n < 10 \n        then return 1\n        else return starts_one_ends(n//10)*10\
    \ + starts_one_ends(n%10)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000013)\n</cell>",
  "    if n == 1 \n        return 1 \n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1) \nend\n</cell>\n<code language=julia-1.5>", "    if n\
    \ < 10 \n        then return 1\n        else return starts_one_ends(n//10)*10\
    \ + starts_one_ends(n%10)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1001)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to a given integer n.", " \
    \   if n == 0 \n        then return 0 \n    else if n == 1 \n        then return\
    \ 1 \n    else \n        count_starts_ends(n-1) + count_starts_ends(n-2) \nend\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100", "    if n < 10 \n\
    \        then return 1 \n        else return starts_one_ends(n-1) + starts_one_ends(n-2)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ less than or equal to a given integer n.", "    if n < 0 \n        error(\"\
    n must be positive\")\n    else if n == 0 \n        1\n    else \n        1 +\
    \ starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that end with 2.", "    if n < 10 \n        return 1 \n    else \n\
    \        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    if n < 0 \n        error(\"n must be positive\")\n    else\
    \ if n == 0 \n        1\n    else \n        1 + starts_one_ends(n - 1)\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of positive integers that start or\
    \ end with 2.", "    if n == 1 \n        then return 1\n    else if n == 0 \n\
    \        then return 0\n    else \n        begin\n            local count = 1\n\
    \            while n >= 10 \n                do \n                    n = n /\
    \ 10\n                    count = count + 1\n            end\n            return\
    \ count\n        end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"", "    if n == 0 \n        then\
    \ return 0\n    else if n == 1 \n        then return 1\n    else \n        local\
    \ i::Int64 = 1\n        local count::Int64 = 0\n        while i <= n \n      \
    \      do if i%10 == 1 \n                then count = count + 1\n            \
    \    else break\n            end\n            i = i + 1\n        end\n       \
    \ return count\n    end\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>", "    if n == 0 \n        then return 0\n    else if n == 1 \n      \
    \  then return 1\n    else \n        let\n            digits = digits(n) \n  \
    \          digits_count = length(digits)\n            digits_sum = sum(digits)\n\
    \            \n            count_starts_ends = 0\n            for i in digits_count\
    \ \n                do if digits[i] == 1 \n                    then count_starts_ends\
    \ += starts_one_ends(digits_sum - digits[i])\n            count_starts_ends\n\
    \        end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"", "    if n < 10 \n        then return\
    \ 1\n        else if n < 100 \n            then return 2\n            else if\
    \ n < 1000 \n                then return 3\n                else if n < 10000\
    \ \n                    then return 4\n                    else if n < 100000\
    \ \n                        then return 5\n                        else if n <\
    \ 1000000 \n                            then return 6\n                      \
    \      else if n < 10000000 \n                                then return 7\n\
    \                                else if n < 100000000 \n                    \
    \                then return 8\n                                    else if n\
    \ < 1000000000 \n                                        then return 9\n     \
    \                                   else if n < 10000000000 \n               \
    \                             then return 10\n                               \
    \             else if n < 100000000000 \n                                    \
    \            then return 11\n                                                else\
    \ if n < 1000000000000 \n                                                    then\
    \ return 12\n                                                    else if n < 10000000000000\
    \ \n                                                        then return 13\n \
    \                                                       else if n < 100000000000000\
    \ \n                                                            then return 14\n\
    \                                                            else if n < 1000000000000000\
    \ \n                                                                then return\
    \ 15\n                                                                else if\
    \ n < 10000000000000000 \n                                                   \
    \                 then return 16\n                                           \
    \                         else if n < 100000000000000000 \n                  \
    \                                                      then return 17\n      \
    \                                                                  else if n <\
    \ 1000000000000000000 \n                                                     \
    \                       then return 18\n                                     \
    \                                       else if n < 10000000000000000000 \n  \
    \                                                                            \
    \  then return 19\n                                                          \
    \                      else if n < 100000000000000000000 \n                  \
    \                                                                  then return\
    \ 20\n                                                                       \
    \             else if n < 1000000000000000000000 \n                          \
    \                                                              then return 21\n\
    \                                                                            \
    \            else if n < 10000000000000000000000 \n                          \
    \                                                                  then return\
    \ 22\n                                                                       \
    \                     else if n < 100000000000000000000000 \n                \
    \                                                                            \
    \    then return 23\n                                                        \
    \                                        else if n < 1000000000000000000000000\
    \ \n                                                                         \
    \                           then return 24\n                                 \
    \                                                                   else if n\
    \ < 10000000000000000000000000 \n                                            \
    \                                                            then return 25\n\
    \                                                                            \
    \                            else if n < 100000000000000000000000000 \n      \
    \                                                                            \
    \                          then return 26\n                                  \
    \                                                                          else\
    \ if n < 1000000000000000000000000000 \n                                     \
    \                                                                           then\
    \ return 27\n                                                                \
    \                                                else if n < 10000000000000000000000000000\
    \ \n                                                                         \
    \                                           then return 28\n                 \
    \                                                                            \
    \                       else if n < 100000000000000000000000000000 \n        \
    \                                                                            \
    \                                    then return 29\n                        \
    \                                                                            \
    \                    else if n < 1000000000000000000000000000000 \n          \
    \                                                                            \
    \                                      then return 30\n                      \
    \                                                                            \
    \                          else if n < 10000000000000000000000000000000 \n   \
    \                                                                            \
    \                                                 then return 31\n           \
    \                                                                            \
    \                                         else if n < 100000000000000000000000000000000\
    \ \n                                                                         \
    \                                                           then return 32\n \
    \                                                                            \
    \                                                       else if n < 1000000000000000000000000000000000\
    \ \n                                                                         \
    \                                                               then return 33\n\
    \                                                                            \
    \                                                            else if n < 10000000000000000000000000000000000\
    \ \n                                                                         \
    \                                                                   then return\
    \ 34\n                                                                       \
    \                                                                     else if\
    \ n < 100000000000000000000000000000000000 \n                                \
    \                                                                            \
    \                                    then return 35\n                        \
    \                                                                            \
    \                                            else if n < 100000000000000000000000000",
  "    if n == 1 \n        then return 1 \n        else return 0 \n    end\nend\n\"\
    \"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n == 1\
    \ \n        then return 1 \n        else return starts_one_ends(n-1) + 1 \n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n < 10 \n        return 1 \n    else \n  \
    \      return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.", "    if n == 0 \n        then return 0\n    else if n < 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        local count = 1\n        local i = 1\n        while i <= n \n       \
    \     do if starts_one_ends(i) == 1 \n                then count = count + 1\n\
    \                else return 0\n            end\n            i = i + 1\n     \
    \   end\n        return count\n    end\nend\n\"\"\"\n    ", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        local i::Int64 = 1\n        local count::Int64 = 0\n        while i <=\
    \ n \n            do if i%10 == 1 \n                then count = count + 1\n \
    \               else break\n            end\n            i = i + 1\n        end\n\
    \        return count\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\
    \n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n < 10\
    \ \n        return 1 \n    else \n        return starts_one_ends(n//10) + starts_one_ends(n%10)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n == 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ starts_one_ends(n/2)\n    else \n        return starts_one_ends(n-1) + starts_one_ends(n-2)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.", "    if n == 0 \n        then return 0 \n        else\
    \ return 1 + starts_one_ends(n - 1) \nend", "    if n < 10 \n        then return\
    \ 1\n        else return starts_one_ends(n//10)*10 + n % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the number of integers less than or equal to n that\
    \ start or end with 1.", "    if n < 10 \n        return n\n    else \n      \
    \  return starts_one_ends(n/10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 0.\n    \"\"\"", "    if n < 0 \n\
    \        error(\"n must be positive\")\n    else if n == 0 \n        1\n    else\
    \ \n        count_starts_ends(n, 1)\nend", "    if n < 0 \n        error(\"n must\
    \ be positive\")\n    else if n < 10 \n        return 0 \n    else if n < 100\
    \ \n        return 1 \n    else if n < 1000 \n        return 2 \n    else if n\
    \ < 10000 \n        return 3 \n    else if n < 100000 \n        return 4 \n  \
    \  else if n < 1000000 \n        return 5 \n    else if n < 10000000 \n      \
    \  return 6 \n    else if n < 100000000 \n        return 7 \n    else if n < 1000000000\
    \ \n        return 8 \n    else if n < 10000000000 \n        return 9 \n    else\
    \ if n < 100000000000 \n        return 10 \n    else if n < 1000000000000 \n \
    \       return 11 \n    else if n < 10000000000000 \n        return 12 \n    else\
    \ if n < 100000000000000 \n        return 13 \n    else if n < 1000000000000000\
    \ \n        return 14 \n    else if n < 10000000000000000 \n        return 15\
    \ \n    else if n < 100000000000000000 \n        return 16 \n    else if n < 1000000000000000000\
    \ \n        return 17 \n    else if n < 10000000000000000000 \n        return\
    \ 18 \n    else if n < 100000000000000000000 \n        return 19 \n    else if\
    \ n < 1000000000000000000000 \n        return 20 \n    else if n < 10000000000000000000000\
    \ \n        return 21 \n    else if n < 100000000000000000000000 \n        return\
    \ 22 \n    else if n < 1000000000000000000000000 \n        return 23 \n    else\
    \ if n < 10000000000000000000000000 \n        return 24 \n    else if n < 100000000000000000000000000\
    \ \n        return 25 \n    else if n < 1000000000000000000000000000 \n      \
    \  return 26 \n    else if n < 10000000000000000000000000000 \n        return\
    \ 27 \n    else if n < 100000000000000000000000000000 \n        return 28 \n \
    \   else if n < 1000000000000000000000000000000 \n        return 29 \n    else\
    \ if n < 10000000000000000000000000000000 \n        return 30 \n    else if n\
    \ < 100000000000000000000000000000000 \n        return 31 \n    else if n < 1000000000000000000000000000000000\
    \ \n        return 32 \n    else if n < 10000000000000000000000000000000000 \n\
    \        return 33 \n    else if n < 100000000000000000000000000000000000 \n \
    \       return 34 \n    else if n < 1000000000000000000000000000000000000 \n \
    \       return 35 \n    else if n < 10000000000000000000000000000000000000 \n\
    \        return 36 \n    else if n < 100000000000000000000000000000000000000 \n\
    \        return 37 \n    else if n < 1000000000000000000000000000000000000000\
    \ \n        return 38 \n    else if n < 10000000000000000000000000000000000000000\
    \ \n        return 39 \n    else if n < 100000000000000000000000000000000000000000\
    \ \n        return 40 \n    else if n < 1000000000000000000000000000000000000000000\
    \ \n        return 41 \n    else if n < 1000000000000000000", "    if n == 1 \n\
    \        then return 1\n    else \n        let\n            digits = digits(n)\n\
    \            first = digits[1]\n            rest = digits[2:end]\n           \
    \ count = (first == 1) + (rest == 1)\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1234567891)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890123)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901234)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234567)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789012345678)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1234567890123456788)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567889)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678899)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890123456788999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234567889999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789012345678899999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234567889999999999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789012345678899999999999)\n</cell>\n\
    <code language=julia-1.5", "    if n == 1 \n        then return 1 \n        else\
    \ return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"", "    if n == 0 \n        then return 0 \n    else \n      \
    \  x <- starts_one_ends(n-1) \n        if n % x == 0 \n            then return\
    \ 1 + starts_one_ends(n-x) \n            else return 0 \nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers less than or equal to a given integer n.", " \
    \   if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else if n == 2 \n        then return 2\n    else if n % 2 == 0 \n   \
    \     then return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n\
    \ / 2) + starts_one_ends(n / 2 + 1)\nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.4>", "    if n == 1 \n  \
    \      then return 1 \n        else return 0 \n    else \n        n <= 10 \n \
    \           ? starts_one_ends(n-1) + starts_one_ends(n-2) + starts_one_ends(n-3)\
    \ + starts_one_ends(n-4) + starts_one_ends(n-5) + starts_one_ends(n-6) + starts_one_ends(n-7)\
    \ + starts_one_ends(n-8) + starts_one_ends(n-9) + starts_one_ends(n-10) + starts_one_ends(n-11)\
    \ + starts_one_ends(n-12) + starts_one_ends(n-13) + starts_one_ends(n-14) + starts_one_ends(n-15)\
    \ + starts_one_ends(n-16) + starts_one_ends(n-17) + starts_one_ends(n-18) + starts_one_ends(n-19)\
    \ + starts_one_ends(n-20) + starts_one_ends(n-21) + starts_one_ends(n-22) + starts_one_ends(n-23)\
    \ + starts_one_ends(n-24) + starts_one_ends(n-25) + starts_one_ends(n-26) + starts_one_ends(n-27)\
    \ + starts_one_ends(n-28) + starts_one_ends(n-29) + starts_one_ends(n-30) + starts_one_ends(n-31)\
    \ + starts_one_ends(n-32) + starts_one_ends(n-33) + starts_one_ends(n-34) + starts_one_ends(n-35)\
    \ + starts_one_ends(n-36) + starts_one_ends(n-37) + starts_one_ends(n-38) + starts_one_ends(n-39)\
    \ + starts_one_ends(n-40) + starts_one_ends(n-41) + starts_one_ends(n-42) + starts_one_ends(n-43)\
    \ + starts_one_ends(n-44) + starts_one_ends(n-45) + starts_one_ends(n-46) + starts_one_ends(n-47)\
    \ + starts_one_ends(n-48) + starts_one_ends(n-49) + starts_one_ends(n-50) + starts_one_ends(n-51)\
    \ + starts_one_ends(n-52) + starts_one_ends(n-53) + starts_one_ends(n-54) + starts_one_ends(n-55)\
    \ + starts_one_ends(n-56) + starts_one_ends(n-57) + starts_one_ends(n-58) + starts_one_ends(n-59)\
    \ + starts_one_ends(n-60) + starts_one_ends(n-61) + start", "    if n < 10 \n\
    \        return 1 \n    else \n        return starts_one_ends(n//10) + starts_one_ends(n%10)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n<code language=julia-",
  "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n//10)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n < 10 \n        then return 0\n    else if\
    \ n < 100\n        then return 1\n    else if n < 1000\n        then return 2\n\
    \    else if n < 10000\n        then return 3\n    else if n < 100000\n      \
    \  then return 4\n    else if n < 1000000\n        then return 5\n    else if\
    \ n < 10000000\n        then return 6\n    else if n < 100000000\n        then\
    \ return 7\n    else if n < 1000000000\n        then return 8\n    else if n <\
    \ 10000000000\n        then return 9\n    else if n < 100000000000\n        then\
    \ return 10\n    else if n < 1000000000000\n        then return 11\n    else if\
    \ n < 10000000000000\n        then return 12\n    else if n < 100000000000000\n\
    \        then return 13\n    else if n < 1000000000000000\n        then return\
    \ 14\n    else if n < 10000000000000000\n        then return 15\n    else if n\
    \ < 100000000000000000\n        then return 16\n    else if n < 1000000000000000000\n\
    \        then return 17\n    else if n < 10000000000000000000\n        then return\
    \ 18\n    else if n < 100000000000000000000\n        then return 19\n    else\
    \ if n < 1000000000000000000000\n        then return 20\n    else if n < 10000000000000000000000\n\
    \        then return 21\n    else if n < 100000000000000000000000\n        then\
    \ return 22\n    else if n < 1000000000000000000000000\n        then return 23\n\
    \    else if n < 10000000000000000000000000\n        then return 24\n    else\
    \ if n < 100000000000000000000000000\n        then return 25\n    else if n <\
    \ 1000000000000000000000000000\n        then return 26\n    else if n < 10000000000000000000000000000\n\
    \        then return 27\n    else if n < 100000000000000000000000000000\n    \
    \    then return 28\n    else if n < 1000000000000000000000000000000\n       \
    \ then return 29\n    else if n < 10000000000000000000000000000000\n        then\
    \ return 30\n    else if n < 100000000000000000000000000000000\n        then return\
    \ 31\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 32\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 33\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 34\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 35\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 36\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 37\n    else if n < 1000000000000000000000000000000000\n        then return\
    \ 38\n    else if n < 1000000000000000000000000000000000\n        then ", "  \
    \  if n == 0 \n        then return 0\n    else \n        local i::Int64 = 1\n\
    \        local count::Int64 = 0\n        while i <= n \n            do if i %%\
    \ 10 == 1 \n                then count = count + 1\n                else break\n\
    \            end\n            i = i + 1\n        end\n        return count\n \
    \   end\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.4>", "    if n == 0 \n        then return 0\n    else if\
    \ n == 1 \n        then return 1\n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1 \n        then return 1\n\
    \    else if n == 0 \n        then return 0\n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1\n                else break\n\
    \            end\n            i = i + 1\n        end\n        return count\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>", "    if n == 0 \n        then return 0\n    else if n == 1 \n      \
    \  then return 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n\
    \ / 2)\n    else \n        return starts_one_ends(n / 2) + starts_one_ends(n /\
    \ 2 - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100", "    if n == 0 \n  \
    \      then return 0\n    else \n        count_starts_ends(n-1) + count_starts_ends(n-2)\
    \ + count_starts_ends(n-3) + count_starts_ends(n-4) + count_starts_ends(n-5) +\
    \ count_starts_ends(n-6)\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_end", "    if n == 0 \n        then return\
    \ 0 \n    else \n        local count = 1\n        local i = 1\n        while i\
    \ <= n \n            do if i%10 == 1 \n                then count = count + 1\n\
    \                else count = count + 1\n            end\n            i = i +\
    \ 1\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n that start or end with\
    \ 1.", "    if n == 0 \n        then return 0\n    else \n        local count\
    \ = 1\n        local i = 2\n        while i <= n \n            do if digit(i)\
    \ == 1 \n                then count = count + 1\n                else return count\n\
    \            end\n            i = i + 1\n        end\n        return count\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>", "    if n < 0 \n        error(\"\
    n must be positive\")\n    else if n == 0 \n        1\n    else \n        count_starts_ends(n-1,\
    \ 1)\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        then\
    \ return 1\n        else return starts_one_ends(n-1) + ends_one_starts(n-1)\n\
    \    end\nend", "    if n < 10 \n        return 0 \n    else \n        return\
    \ 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that end with 2.", "    if n == 1 \n        then return 1 \n      \
    \  else return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n < 10 \n\
    \        return 0 \n    else \n        return 1 + starts_one_ends(n / 10) \nend\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.", "    if n == 0 \n        then return 0\n    else if n < 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        local count = 1\n        local i = 1\n        while i <= n \n       \
    \     do \n                if i%10 == 1 \n                    and i%100 != 11\
    \ \n                    and i%100 != 12 \n                    and i%100 != 13\
    \ \n                    and i%100 != 14 \n                    and i%100 != 15\
    \ \n                    and i%100 != 16 \n                    and i%100 != 17\
    \ \n                    and i%100 != 18 \n                    and i%100 != 19\
    \ \n                    and i%100 != 20 \n                    and i%100 != 21\
    \ \n                    and i%100 != 22 \n                    and i%100 != 23\
    \ \n                    and i%100 != 24 \n                    and i%100 != 25\
    \ \n                    and i%100 != 26 \n                    and i%100 != 27\
    \ \n                    and i%100 != 28 \n                    and i%100 != 29\
    \ \n                    and i%100 != 30 \n                    and i%100 != 31\
    \ \n                    and i%100 != 32 \n                    and i%100 != 33\
    \ \n                    and i%100 != 34 \n                    and i%100 != 35\
    \ \n                    and i%100 != 36 \n                    and i%100 != 37\
    \ \n                    and i%100 != 38 \n                    and i%100 != 39\
    \ \n                    and i%100 != 40 \n                    and i%100 != 41\
    \ \n                    and i%100 != 42 \n                    and i%100 != 43\
    \ \n                    and i%100 != 44 \n                    and i%100 != 45\
    \ \n                    and i%100 != 46 \n                    and i%100 != 47\
    \ \n                    and i%100 != 48 \n                    and i%100 != 49\
    \ \n                    and i%100 != 50 \n                    and i%100 != 51\
    \ \n                    and i%100 != 52 \n                    and i%100 != 53\
    \ \n                    and i%100 != 54 \n                    and i%100 != 55\
    \ \n                    and i%100 != 56 \n                    and i%100 != 57\
    \ \n                    and i%100 != 58 \n                    and i%100 != 59\
    \ \n                    and i%100 != 60 \n                    and i%100 != 61\
    \ \n                    and i%100 != 62 \n                    and i%100 != 63\
    \ \n                    and i%100 != 64 \n                    ", "    if n ==\
    \ 0 \n        then return 0 \n    else if n < 0 \n        then return 0 \n   \
    \ else if n == 1 \n        then return 1 \n    else \n        local count = 1\n\
    \        for i = 2 to n \n            do if starts_one_ends(i) == 1 \n       \
    \         then count = count + 1\n                else return 0 \n           \
    \ end \n        end \n        return count \nend \n</cell>\n<code language=julia-1.0>",
  "    if n == 1 \n        return 1 \n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers less\
    \ than or equal to a given integer n.", "    if n == 0 \n        then return 0\n\
    \    else if n == 1 \n        then return 1\n    else \n        local count =\
    \ 1\n        while n >= 10 \n            do count = count + 1\n            n =\
    \ n / 10\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 1 \n        then return 1\n    else \n        n <- starts_one_ends(n-1)\n\
    \        if n % 10 == 1 \n            then return 1 + starts_one_ends(n-1)\n \
    \       else return starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>", "    if n < 10 \n  \
    \      return 0 \n    else \n        return 1 + starts_one_ends(n//10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n   \
    \     1\n    else \n        1 + starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>",
  "    if n == 1 \n        then return 1\n    else if n == 0 \n        then return\
    \ 0\n    else \n        begin\n            local count = 1\n            local\
    \ i = 1\n            while i <= n \n                do \n                    if\
    \ ((n % i) == 0) \n                        then count = count + 1\n          \
    \          end\n                    i = i + 1\n                end\n         \
    \   return count\n        end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    \n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
