name: HumanEval_36_fizz_buzz
language: julia
results:
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp66y4wte6.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp66y4wte6.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n%11==0 \n        1\n    else if n%13==0\
    \ \n        2\n    else \n        fizz_buzz(n/11)\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd4nctlcs.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd4nctlcs.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return fizz_buzz(n/11)\n</code>\n\
    <|/ a tags=fizzbuzz,haskell,recursion |>\n<| a |>\n<code>\nfizzbuzz :: Int ->\
    \ String\nfizzbuzz n = if n==0 then \"FizzBuzz\" else if n==1 then \"Fizz\" else\
    \ if n==2 then \"Buzz\" else if n==3 then \"Fizz\" else if n==4 then \"Buzz\"\
    \ else if n==5 then \"FizzBuzz\" else if n==6 then \"Fizz\" else if n==7 then\
    \ \"Buzz\" else if n==8 then \"Fizz\" else if n==9 then \"Buzz\" else if n==10\
    \ then \"FizzBuzz\" else if n==11 then \"Fizz\" else if n==12 then \"Buzz\" else\
    \ if n==13 then \"Fizz\" else if n==14 then \"Buzz\" else if n==15 then \"FizzBuzz\"\
    \ else if n==16 then \"Fizz\" else if n==17 then \"Buzz\" else if n==18 then \"\
    Fizz\" else if n==19 then \"Buzz\" else if n==20 then \"FizzBuzz\" else if n==21\
    \ then \"Fizz\" else if n==22 then \"Buzz\" else if n==23 then \"Fizz\" else if\
    \ n==24 then \"Buzz\" else if n==25 then \"FizzBuzz\" else if n==26 then \"Fizz\"\
    \ else if n==27 then \"Buzz\" else if n==28 then \"Fizz\" else if n==29 then \"\
    Buzz\" else if n==30 then \"FizzBuzz\" else if n==31 then \"Fizz\" else if n==32\
    \ then \"Buzz\" else if n==33 then \"Fizz\" else if n==34 then \"Buzz\" else if\
    \ n==35 then \"FizzBuzz\" else if n==36 then \"Fizz\" else if n==37 then \"Buzz\"\
    \ else if n==38 then \"Fizz\" else if n==39 then \"Buzz\" else if n==40 then \"\
    FizzBuzz\" else if n==41 then \"Fizz\" else if n==42 \nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpov3p7njh.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpov3p7njh.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     if n % 11 == 1 \n            then return 1\n        else if n % 13 == 1\
    \ \n            then return 2\n        else \n            if n % 11 == 2 \n  \
    \              then return 3\n            else if n % 13 == 2 \n             \
    \   then return 4\n            else \n                if n % 11 == 3 \n      \
    \              then return 5\n                else if n % 13 == 3 \n         \
    \           then return 6\n                else \n                    if n % 11\
    \ == 4 \n                        then return 7\n                    else if n\
    \ % 13 == 4 \n                        then return 8\n                    else\
    \ \n                        if n % 11 == 5 \n                            then\
    \ return 9\n                        else if n % 13 == 5 \n                   \
    \         then return 10\n                        else \n                    \
    \        if n % 11 == 6 \n                                then return 11\n   \
    \                         else if n % 13 == 6 \n                             \
    \   then return 12\n                            else \n                      \
    \          if n % 11 == 7 \n                                    then return 13\n\
    \                                else if n % 13 == 7 \n                      \
    \              then return 14\n                                else \n       \
    \                             if n % 11 == 8 \n                              \
    \          then return 15\n                                    else if n % 13\
    \ == 8 \n                                        then return 16\n            \
    \                        else \n                                        if n %\
    \ 11 == 9 \n                                            then return 17\n     \
    \                                   else if n % 13 == 9 \n                   \
    \                         then return 18\n                                   \
    \     else \n                                            if n % 11 == 10 \n  \
    \                                              then return 19\n              \
    \                              else if n % 13 == 10 \n                       \
    \                         then return 20\n                                   \
    \         else \n                                                if n % 11 ==\
    \ 11 \n                                                    then return 21\n  \
    \                                              else if n % 13 == 11 \n       \
    \                                             then return 22\n               \
    \                                 else \n                                    \
    \                if n % 11 == 12 \n                                          \
    \              then return 23\n                                              \
    \      else if n % 13 == 12 \n                                               \
    \         then return 24\n                                                   \
    \ else \n                                                        if n % 11 ==\
    \ 13 \n                                                            then return\
    \ 25\n                                                        else if n % 13 ==\
    \ 13 \n                                                            then return\
    \ 26\n                                                        else \n        \
    \                                                    if n % 11 == 14 \n      \
    \                                                          then return 27\n  \
    \                                                          else if n % 13 == 14\
    \ \n                                                                then return\
    \ 28\n                                                            else \n    \
    \                                                            if n % 11 == 15 \n\
    \                                                                    then return\
    \ 29\n                                                                else if\
    \ n % 13 == 15 \n                                                            \
    \        then return 30\n                                                    \
    \            else \n                                                         \
    \           if n % 11 == 16 \n                                               \
    \                         then return 31\n                                   \
    \                                 else if n % 13 == 16 \n                    \
    \                                                    then return 32\n        \
    \                                                            else \n         \
    \                                                               if n % 11 == 17\
    \ \n                                                            then return 33\n\
    \                                                        else if n % 13 == 17\
    \ \n                                                            then return 34\n\
    \                                                        else \n             \
    \                                               if n % 11 == 18 \n           \
    \                                                     then return 35\n       \
    \                                                     else if n % 13 == 18 \n\
    \                                                                then return 36\n\
    \                                                            else \n         \
    \                                                       if n % 11 == 19 \n   \
    \                                                                 then return\
    \ 37\n\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp_z1cmup.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp_z1cmup.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 || n%13==0 \n        then return 0\n    else \n        if n%11==0\
    \ \n            then return 1\n        else if n%13==0 \n            then return\
    \ 2\n        else return 3\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp17a3hbkb.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp17a3hbkb.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else fizz_buzz(n-1)\nend\n</code>\n<|/ a\
    \ tags=fizzbuzz,julia |>\n<| a tags=fizzbuzz,julia |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpht_rwtz7.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpht_rwtz7.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpetq9_hgt.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpetq9_hgt.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return 1 + fizz_buzz(n / 11)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fizz_buzz(50)\n</cell>\n<code language=julia-1.3>\n@time fizz_buzz(78)\n\
    </cell>\n<code language=julia-1.3>\n@time fizz_buzz(79)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13. Test your function by calling it\
    \ on integers between 1 and 100.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoulzswpo.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoulzswpo.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else fizz_buzz(n-1)\nend\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n\
    0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n</text>\n<text>\nExercise 8\nWrite\
    \ a function that returns the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n\
    2\n>>> fizz_buzz(79)\n3\n</text>\n<text>\nExercise 9\nWrite a function that returns\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n\
    3\n</text>\n<text>\nExercise 10\nWrite a function that returns the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    >>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n</text>\n<text>\n\
    Exercise 11\nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n\
    0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n</text>\n<text>\nExercise 12\n\
    Write a function that returns the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n\
    2\n>>> fizz_buzz(79)\n3\n</text>\n<text>\nExercise 13\nWrite a function that returns\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n\
    3\n</text>\n<text>\nExercise 14\nWrite a function that returns the number of times\
    \ the digit 7 appears in integers less than n which are di\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp1e90nmh.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp1e90nmh.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n==1 \n        1\n    else if n==2 \n\
    \        2\n    else if n%3==0 \n        fizz_buzz(n/3)\n    else if n%5==0 \n\
    \        fizz_buzz(n/5)\n    else if n%7==0 \n        fizz_buzz(n/7)\n    else\
    \ \n        fizz_buzz(n/11)\nend\n</cell>\n<code language=julia-1.0>\nfizz_buzz(50)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpimf0coc8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpimf0coc8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%11==0 then return 1\n    if n%13==0 then\
    \ return 2\n    return fizz_buzz(n/11)\nend\n</cell>\n<code language=julia-1.5>\n\
    fizz_buzz(50)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of times the digit 7 appears in integers less than n which are divisible\
    \ by 3 or 5.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n\
    3\n>>> fizz_buzz(81)\n1\n>>> fizz_buzz(82)\n2\n>>> fizz_buzz(83)\n3\n>>> fizz_buzz(84)\n\
    4\n>>> fizz_buzz(85)\n5\n>>> fizz_buzz(86)\n6\n>>> fizz_buzz(87)\n7\n>>> fizz_buzz(88)\n\
    8\n>>> fizz_buzz(89)\n9\n>>> fizz_buzz(90)\n10\n>>> fizz_buzz(91)\n11\n>>> fizz_buzz(92)\n\
    12\n>>> fizz_buzz(93)\n13\n>>> fizz_buzz(94)\n14\n>>> fizz_buzz(95)\n15\n>>> fizz_buzz(96)\n\
    16\n>>> fizz_buzz(97)\n17\n>>> fizz_buzz(98)\n18\n>>> fizz_buzz(99)\n19\n>>> fizz_buzz(100)\n\
    20\n>>> fizz_buzz(101)\n21\n>>> fizz_buzz(102)\n22\n>>> fizz_buzz(103)\n23\n>>>\
    \ fizz_buzz(104)\n24\n>>> fizz_buzz(105)\n25\n>>> fizz_buzz(106)\n26\n>>> fizz_buzz(107)\n\
    27\n>>> fizz_buzz(108)\n28\n>>> fizz_buzz(109)\n29\n>>> fizz_buzz(110)\n30\n>>>\
    \ fizz_buzz(111)\n31\n>>> fizz_buzz(112)\n32\n>>> fizz_buzz(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_40o874s.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_40o874s.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0\n \
    \       then return 1\n    else if n%13==0\n        then return 2\n    else return\
    \ 3\nend\n</code>\n<|/ a tags=fizzbuzz,julia,if-statement |>\n<| a dscore=2 |>\n\
    The other answers here are great, but I wanted to add that you can also use ifelse,\
    \ which is a bit more concise:\n<code>\njulia> ifelse(x -> x%11==0 || x%13==0,\
    \ 0, ifelse(x -> x%11==0, 1, ifelse(x -> x%13==0, 2, 3)))\n1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc544ynkx.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc544ynkx.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0\n \
    \       then return 1\n    else if n%13==0\n        then return 2\n    else return\
    \ 3\n</code>\n<|/ a tags=fizzbuzz,haskell |>\n<| a tags=fizzbuzz,haskell |>\n\
    Here's a solution using recursion:\n<code>\nfizzbuzz :: Int -> String\nfizzbuzz\
    \ n = if n < 10 then \"FizzBuzz\" else if n < 100 then \"Fizz\" else if n < 1000\
    \ then \"Buzz\" else if n < 10000 then \"FizzBuzz\" else if n < 100000 then \"\
    FizzBuzz\" else if n < 1000000 then \"FizzBuzz\" else if n < 10000000 then \"\
    FizzBuzz\" else if n < 100000000 then \"FizzBuzz\" else if n < 1000000000 then\
    \ \"FizzBuzz\" else if n < 10000000000 then \"FizzBuzz\" else if n < 100000000000\
    \ then \"FizzBuzz\" else if n < 1000000000000 then \"FizzBuzz\" else if n < 10000000000000\
    \ then \"FizzBuzz\" else if n < 100000000000000 then \"FizzBuzz\" else if n <\
    \ 1000000000000000 then \"FizzBuzz\" else if n < 10000000000000000 then \"FizzBuzz\"\
    \ else if n < 100000000000000000 then \"FizzBuzz\" else if n < 100000000000000000\
    \ then \"FizzBuzz\" else if n < 1000000000000000000 then \"FizzBuzz\" else if\
    \ n < 10000000000000000000 then \"FizzBuzz\" else if n < 100000000000000000000\
    \ then \"FizzBuzz\" else if n < 1000000000000000000000 then \"FizzBuzz\" else\
    \ if n < 10000000000000000000000 then \"FizzBuzz\" else if n < 100000000000000000000000\
    \ then \"FizzBuzz\" else if n < 1000000000000000000000000 then \"FizzBuzz\" else\
    \ if n < 10000000000000000000000000 then \"FizzBuzz\" else if n < 100000000000000000000000000\
    \ then \"FizzBuzz\" else if n < 1000000000000000000000000000 then \"FizzBuzz\"\
    \ else if n < 10000000000000000000000000000 then \"FizzBuzz\" else if n < 100000000000000000000000000000\
    \ then \"FizzBuzz\" else if n < 1000000000000000000000000000000 then \"FizzBuzz\"\
    \ else if n < 1000000000000000000\nusing Test\n\n@testset begin\n\ncandidate =\
    \ fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0_gjn75n.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0_gjn75n.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return fizz_buzz(n / 11) + fizz_buzz(n / 13)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj7f82emw.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj7f82emw.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        return\
    \ fizz_buzz(n/11) + fizz_buzz(n/13)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8mcuf1no.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8mcuf1no.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return fizz_buzz(n / 11) + fizz_buzz(n / 13)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fizz_buzz(50)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13 and which are also divisible by 3 or 5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgzabh6oe.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgzabh6oe.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfz4re6gu.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfz4re6gu.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return 1\n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5qcrhmnw.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5qcrhmnw.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 || n==1 || n==2 || n==3 || n==4 || n==5 || n==6 || n==7 || n==8\
    \ || n==9 || n==10 || n==11 || n==12 || n==13\n        0\n    else\n        fizz_buzz(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpde12hk3f.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpde12hk3f.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return 1\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef\
    \ fizz_buzz(n::Int64)::Int64\n    if n % 11 == 0 or n % 13 == 0\n        then\
    \ return 0\n    else \n        then return 1\n</code>\n<|/ a tags=fizzbuzz,haskell\
    \ |>\n<| c |>\nPlease explain your answer, and why you think it solves the problem.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/27867760)\n<|/ c |>\n<| c |>\nThis does\
    \ provide an answer to the question. He asked how to write a function that returns\
    \ 0 if the number is a multiple of 11 or 13, and 1 otherwise. He also asked how\
    \ to write it in a functional programming style. He also asked how to write it\
    \ in Haskell. He also asked how to write it in Haskell. He also asked how to write\
    \ it in Haskell. He also asked how to write it in Haskell. He also asked how to\
    \ write it in Haskell. He also asked how to write it in Haskell. He also asked\
    \ how to write it in Haskell. He also asked how to write it in Haskell. He also\
    \ asked how to write it in Haskell. He also asked how to write it in Haskell.\
    \ He also asked how to write it in Haskell. He also asked how to write it in Haskell.\
    \ He also asked how to write it in Haskell. He also asked how to write it in Haskell.\
    \ He also asked how to write it in Haskell. He also asked how to write it in Haskell.\
    \ He also asked how to write it in Haskell. He also asked how to write it in Haskell.\
    \ He also asked how to write it in Haskell. He also asked how to write it in Haskell.\
    \ He also asked how to write it in Haskell. He also asked how to write it in Haskell.\
    \ He also asked how to write it in Haskell. He also asked how to write it in Hask\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfy8gt6s1.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfy8gt6s1.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else if n%11==0\n        1\n    else if n%13==0\n\
    \        2\n    else\n        fizz_buzz(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps055ov1v.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps055ov1v.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n==2 then return\
    \ 2\n    if n%3==0 then return 3\n    if n%3==1 then return 3\n    if n%3==2 then\
    \ return 3\n    if n%7==0 then return 7\n    if n%7==1 then return 7\n    if n%7==2\
    \ then return 7\n    if n%7==3 then return 7\n    if n%7==4 then return 7\n  \
    \  if n%7==5 then return 7\n    if n%7==6 then return 7\n    if n%7==7 then return\
    \ 7\n    if n%11==0 then return 11\n    if n%11==1 then return 11\n    if n%11==2\
    \ then return 11\n    if n%13==0 then return 13\n    if n%13==1 then return 13\n\
    \    if n%13==2 then return 13\n    if n%13==3 then return 13\n    if n%13==4\
    \ then return 13\n    if n%13==5 then return 13\n    if n%13==6 then return 13\n\
    \    if n%13==7 then return 13\n    return n\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp123ib5g_.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp123ib5g_.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        then\
    \ return 1\n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjggfk5hu.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjggfk5hu.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%11==0 then return 1\n    if n%13==0 then\
    \ return 2\n    return fizz_buzz(n/10)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptllqvhdq.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptllqvhdq.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     if n % 11 == 1 \n            then return 1\n        else if n % 13 == 1\
    \ \n            then return 2\n        else return 3\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxe978e7j.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxe978e7j.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return 1 + fizz_buzz(n / 11)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants to know how many times `7` appears in\
    \ `n which are divisible by 11 or 13`.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I've edited my answer to reflect this.\n<|/ c |>\n<| a tags=fizzbuzz,haskell,fizzbuzz-buzz\
    \ |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = if n `mod` 3 == 0 then n `mod`\
    \ 3 else if n `mod` 5 == 0 then n `mod` 5 else if n `mod` 7 == 0 then n `mod`\
    \ 7 else n\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfizzbuzz ::\
    \ Int -> Int\nfizzbuzz n = if n `mod` 3 == 0 then n `mod` 3 else if n `mod` 5\
    \ == 0 then n `mod` 5 else if n `mod` 7 == 0 then n `mod` 7 else n\n</code>\n\
    <|/ a tags=fizzbuzz,haskell,fizzbuzz-buzz |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| a |>\n<code>\n\
    fizzbuzz :: Int -> Int\nfizzbuzz n = if n `mod` 3 == 0 then n `mod` 3 else if\
    \ n `mod` 5 == 0 then n `mod` 5 else if n `mod` 7 == 0 then n `mod` 7 else n\n\
    </code>\n<|/ a tags=fizzbuzz,haskell,fizzbuzz-buzz dscore=0 |>\n<| c |>\nWhile\
    \ this code may answer the question, providing additional context regarding why\
    \ and/or how this code answers the question improves its long-term value.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = if n `mod`\
    \ 3 == 0 then n `mod` 3 else if n `\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1jf6qqgs.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1jf6qqgs.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return 1 + fizz_buzz(n / 11)\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13. \nThe function should return 0 if n\
    \ is not divisible by 11 or 13.\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppzbq1zez.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppzbq1zez.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp791t5r2b.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp791t5r2b.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnajfsro6.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnajfsro6.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return 1\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13 and which are divisible\
    \ by 3 or 5.\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbx8o4edf.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbx8o4edf.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then 2 else fizz_buzz(n-1)\n\
    end\n</cell>\n<text>\nExercise 10\nWrite a function that returns the number of\
    \ times the digit 7 appears in integers less than n which are divisible by 11\
    \ or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n>>>\
    \ fizz_buzz(100)\n0\n>>> fizz_buzz(101)\n1\n>>> fizz_buzz(102)\n2\n>>> fizz_buzz(103)\n\
    3\n>>> fizz_buzz(104)\n0\n>>> fizz_buzz(105)\n1\n>>> fizz_buzz(106)\n2\n>>> fizz_buzz(107)\n\
    3\n>>> fizz_buzz(108)\n0\n>>> fizz_buzz(109)\n1\n>>> fizz_buzz(110)\n2\n>>> fizz_buzz(111)\n\
    3\n>>> fizz_buzz(112)\n0\n>>> fizz_buzz(113)\n1\n>>> fizz_buzz(114)\n2\n>>> fizz_buzz(115)\n\
    3\n>>> fizz_buzz(116)\n0\n>>> fizz_buzz(117)\n1\n>>> fizz_buzz(118)\n2\n>>> fizz_buzz(119)\n\
    3\n>>> fizz_buzz(120)\n0\n>>> fizz_buzz(121)\n1\n>>> fizz_buzz(122)\n2\n>>> fizz_buzz(123)\n\
    3\n>>> fizz_buzz(124)\n0\n>>> fizz_buzz(125)\n1\n>>> fizz_buzz(126)\n2\n>>> fizz_buzz(127)\n\
    3\n>>> fizz_buzz(128)\n0\n>>> fizz_buzz(129)\n1\n>>> fizz_buzz(130)\n2\n>>> fizz_buzz(131)\n\
    3\n>>> fizz_buzz(132)\n0\n>>> fizz_buzz(133)\n1\n>>> fizz_buzz(13\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk8gb7or5.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk8gb7or5.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then 2 else fizz_buzz(n-1)\n\
    end\n</cell>\n<text>\nExercise 10\nWrite a function that returns the number of\
    \ times the digit 7 appears in integers less than n which are divisible by 11\
    \ or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n>>>\
    \ fizz_buzz(100)\n0\n>>> fizz_buzz(101)\n1\n>>> fizz_buzz(102)\n2\n>>> fizz_buzz(103)\n\
    3\n>>> fizz_buzz(104)\n0\n>>> fizz_buzz(105)\n1\n>>> fizz_buzz(106)\n2\n>>> fizz_buzz(107)\n\
    3\n>>> fizz_buzz(108)\n0\n>>> fizz_buzz(109)\n1\n>>> fizz_buzz(110)\n2\n>>> fizz_buzz(111)\n\
    3\n>>> fizz_buzz(112)\n0\n>>> fizz_buzz(113)\n1\n>>> fizz_buzz(114)\n2\n>>> fizz_buzz(115)\n\
    3\n>>> fizz_buzz(116)\n0\n>>> fizz_buzz(117)\n1\n>>> fizz_buzz(118)\n2\n>>> fizz_buzz(119)\n\
    3\n>>> fizz_buzz(120)\n0\n>>> fizz_buzz(121)\n1\n>>> fizz_buzz(122)\n2\n>>> fizz_buzz(123)\n\
    3\n>>> fizz_buzz(124)\n0\n>>> fizz_buzz(125)\n1\n>>> fizz_buzz(126)\n2\n>>> fizz_buzz(127)\n\
    3\n>>> fizz_buzz(128)\n0\n>>> fizz_buzz(129)\n1\n>>> fizz_buzz(130)\n2\n>>> fizz_buzz(131)\n\
    3\n>>> fizz_buzz(132)\n0\n>>> fizz_buzz(133)\n1\n>>> fizz_buzz(13\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc1_kdin2.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc1_kdin2.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else if n==1\n        1\n    else if n==2\n  \
    \      2\n    else if n%3==0\n        fizz_buzz(n/3)\n    else if n%5==0\n   \
    \     fizz_buzz(n/5)\n    else if n%7==0\n        fizz_buzz(n/7)\n    else\n \
    \       fizz_buzz(n*3)\nend\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<| a dscore=1\
    \ |>\nI wrote a Julia package called FizzBuzz.jl that does this for you. \n<code>\n\
    using FizzBuzz\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz0unb8g2.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz0unb8g2.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then 2 else fizz_buzz(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzphu1b0j.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzphu1b0j.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return fizz_buzz(n / 11) + fizz_buzz(n / 13)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 3 or 5.\n    >>> fizz_buzz(50)\n\
    \    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwiirrq9_.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwiirrq9_.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then 2 else fizz_buzz(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpng06rws3.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpng06rws3.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%11==0 then return 1\n    if n%13==0 then\
    \ return 2\n    return fizz_buzz(n/11)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Return the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n\
    \    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpksrcpdqk.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpksrcpdqk.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    elseif n==1 \n        1\n    elseif n==2 \n \
    \       2\n    elseif n==3 \n        3\n    elseif n==4 \n        4\n    elseif\
    \ n==5 \n        5\n    elseif n==6 \n        6\n    elseif n==7 \n        7\n\
    \    elseif n==8 \n        8\n    elseif n==9 \n        9\n    elseif n==10 \n\
    \        10\n    elseif n==11 \n        11\n    elseif n==12 \n        12\n  \
    \  elseif n==13 \n        13\n    elseif n==14 \n        14\n    elseif n==15\
    \ \n        15\n    elseif n==16 \n        16\n    elseif n==17 \n        17\n\
    \    elseif n==18 \n        18\n    elseif n==19 \n        19\n    elseif n==20\
    \ \n        20\n    elseif n==21 \n        21\n    elseif n==22 \n        22\n\
    \    elseif n==23 \n        23\n    elseif n==24 \n        24\n    elseif n==25\
    \ \n        25\n    elseif n==26 \n        26\n    elseif n==27 \n        27\n\
    \    elseif n==28 \n        28\n    elseif n==29 \n        29\n    elseif n==30\
    \ \n        30\n    elseif n==31 \n        31\n    elseif n==32 \n        32\n\
    \    elseif n==33 \n        33\n    elseif n==34 \n        34\n    elseif n==35\
    \ \n        35\n    elseif n==36 \n        36\n    elseif n==37 \n        37\n\
    \    elseif n==38 \n        38\n    elseif n==39 \n        39\n    elseif n==40\
    \ \n        40\n    elseif n==41 \n        41\n    elseif n==42 \n        42\n\
    \    elseif n==43 \n        43\n    elseif n==44 \n        44\n    elseif n==45\
    \ \n        45\n    elseif n==46 \n        46\n    elseif n==47 \n        47\n\
    \    elseif n==48 \n        48\n    elseif n==49 \n        49\n    elseif n==50\
    \ \n        50\n    elseif n==51 \n        51\n    elseif n==52 \n        52\n\
    \    elseif n==53 \n        53\n    elseif n==54 \n        54\n    elseif n==55\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppbus_lwj.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppbus_lwj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then 2 else fizz_buzz(n-1)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ times the digit 7 appears in integers less than n which are divisible by 3 or\
    \ 5.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n\
    \    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t\
    @test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp901zsh54.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp901zsh54.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else fizz_buzz(n-1)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 and 13. For example, fizz_buzz(50)\
    \ should return 0, fizz_buzz(78) should return 2, and fizz_buzz(79) should return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0z9kuzmn.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0z9kuzmn.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        if n%11==0\n            1\n    \
    \    else\n            if n%13==0\n                2\n            else\n     \
    \           0\n        end\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 3 or 5.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwfvvt7_.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzwfvvt7_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    elseif n==1 \n        1\n    elseif n==2 \n \
    \       2\n    elseif n%3==0 \n        3\n    elseif n%3==1 \n        4\n    elseif\
    \ n%3==2 \n        5\n    elseif n%3==3 \n        6\n    elseif n%3==4 \n    \
    \    7\n    elseif n%3==5 \n        8\n    elseif n%3==6 \n        9\n    elseif\
    \ n%3==7 \n        10\n    elseif n%3==8 \n        11\n    elseif n%3==9 \n  \
    \      12\n    elseif n%3==10 \n        13\n    elseif n%3==11 \n        14\n\
    \    elseif n%3==12 \n        15\n    elseif n%3==13 \n        16\n    elseif\
    \ n%3==14 \n        17\n    elseif n%3==15 \n        18\n    elseif n%3==16 \n\
    \        19\n    elseif n%3==17 \n        20\n    elseif n%3==18 \n        21\n\
    \    elseif n%3==19 \n        22\n    elseif n%3==20 \n        23\n    elseif\
    \ n%3==21 \n        24\n    elseif n%3==22 \n        25\n    elseif n%3==23 \n\
    \        26\n    elseif n%3==24 \n        27\n    elseif n%3==25 \n        28\n\
    \    elseif n%3==26 \n        29\n    elseif n%3==27 \n        30\n    elseif\
    \ n%3==28 \n        31\n    elseif n%3==29 \n        32\n    elseif n%3==30 \n\
    \        33\n    elseif n%3==31 \n        34\n    elseif n%3==32 \n        35\n\
    \    elseif n%3==33 \n        36\n    elseif n%3==34 \n        37\n    elseif\
    \ n%3==35 \n        38\n    elseif n%3==36 \n        39\n    elseif n%3==37 \n\
    \        40\n    elseif n%3==38 \n        41\n    elseif n%3==39 \n        42\n\
    \    elseif n%3==40 \n        43\n    elseif n%3==41 \n        44\n    elseif\
    \ n%3==42 \n        45\n    elseif n%3==43 \n        46\n    elseif n%3==44 \n\
    \        47\n    elseif n%3==45 \n        48\n    elseif n%3==46 \n        49\n\
    \    elseif n%3==47 \n        50\nusing Test\n\n@testset begin\n\ncandidate =\
    \ fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn6lxzacz.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn6lxzacz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.5>\nfizz_buzz(50)\n\
    </cell>\n<code language=julia-1.5>\nfizz_buzz(78)\n</cell>\n<code language=julia-1.5>\n\
    fizz_buzz(79)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz6cvlas6.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz6cvlas6.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return 1\n</code>\n<|/ a tags=fizzbuzz,haskell,fizzbuzz-problem\
    \ |>\n<| a tags=fizzbuzz,haskell,fizzbuzz-problem |>\n<code>\nfizzbuzz :: Int\
    \ -> Int\nfizzbuzz n = if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then\
    \ 2 else if n%15==0 then 3 else if n%17==0 then 4 else 5\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = if n==0 then\
    \ 0 else if n%11==0 then 1 else if n%13==0 then 2 else if n%15==0 then 3 else\
    \ if n%17==0 then 4 else 5\n</code>\n<|/ a tags=fizzbuzz,haskell,fizzbuzz-problem\
    \ |>\n<| a dscore=2 |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = if n==0 then\
    \ 0 else if n%11==0 then 1 else if n%13==0 then 2 else if n%15==0 then 3 else\
    \ if n%17==0 then 4 else 5\n</code>\n<|/ a tags=fizzbuzz,haskell,fizzbuzz-problem\
    \ |>\n<| a dscore=2 |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = if n==0 then\
    \ 0 else if n%11==0 then 1 else if n%13==0 then 2 else if n%15==0 then 3 else\
    \ if n%17==0 then 4 else 5\n</code>\n<|/ a tags=fizzbuzz,haskell,fizzbuzz-problem\
    \ |>\n<| a tags=fizzbuzz,haskell,fizzbuzz-problem |>\n<code>\nfizzbuzz :: Int\
    \ -> Int\nfizzbuzz n = if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then\
    \ 2 else if n%15==0 then 3 else if n%17==0 then 4 else 5\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nfizzbuzz :: Int \nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzp7g3hau.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzp7g3hau.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return 1\n</code>\n<|/ a tags=fizzbuzz,haskell\
    \ |>\n<| a dscore=0 |>\n<code>\nfizzbuzz :: Int -> String\nfizzbuzz n = if n==0\
    \ then \"FizzBuzz\" else if n==1 then \"Fizz\" else if n==2 then \"Buzz\" else\
    \ if n==3 then \"Fizz\" else if n==4 then \"Buzz\" else if n==5 then \"FizzBuzz\"\
    \ else if n==6 then \"Fizz\" else if n==7 then \"Buzz\" else if n==8 then \"Fizz\"\
    \ else if n==9 then \"Buzz\" else if n==10 then \"FizzBuzz\" else if n==11 then\
    \ \"Fizz\" else if n==12 then \"Buzz\" else if n==13 then \"Fizz\" else if n==14\
    \ then \"Buzz\" else if n==15 then \"FizzBuzz\" else if n==16 then \"Fizz\" else\
    \ if n==17 then \"Buzz\" else if n==18 then \"Fizz\" else if n==19 then \"Buzz\"\
    \ else if n==20 then \"FizzBuzz\" else if n==21 then \"Fizz\" else if n==22 then\
    \ \"Buzz\" else if n==23 then \"Fizz\" else if n==24 then \"Buzz\" else if n==25\
    \ then \"FizzBuzz\" else if n==26 then \"Fizz\" else if n==27 then \"Buzz\" else\
    \ if n==28 then \"Fizz\" else if n==29 then \"Buzz\" else if n==30 then \"FizzBuzz\"\
    \ else if n==31 then \"Fizz\" else if n==32 then \"Buzz\" else if n==33 then \"\
    Fizz\" else if n==34 then \"Buzz\" else if n==35 then \"FizzBuzz\" else if n==36\
    \ then \"Fizz\" else if n==37 then \"Buzz\" else if n==38 then \"Fizz\" else if\
    \ n==39 then \"Buzz\" else if n==40 then \"FizzBuzz\" else if n==41 then \"Fizz\"\
    \ else if n==42 then \"Buzz\" \nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplt_tyj4g.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplt_tyj4g.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then 2 else fizz_buzz(n-1)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=fizzbuzz,julia,recursion |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr8vfgqw4.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr8vfgqw4.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return 1\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=fizzbuzz,haskell,recursion |>\n<code>\nfizzbuzz :: Int -> String\n\
    fizzbuzz n = if n `mod` 3 == 0 then \"Fizz\" else if n `mod` 5 == 0 then \"Buzz\"\
    \ else if n `mod` 7 == 0 then \"FizzBuzz\" else show n\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=fizzbuzz,haskell,recursion |>\n<code>\nfizzbuzz :: Int -> String\n\
    fizzbuzz n = if n `mod` 3 == 0 then \"Fizz\" else if n `mod` 5 == 0 then \"Buzz\"\
    \ else if n `mod` 7 == 0 then \"FizzBuzz\" else show n\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=fizzbuzz,haskell,recursion |>\n<code>\nfizzbuzz :: Int -> String\n\
    fizzbuzz n = if n `mod` 3 == 0 then \"Fizz\" else if n `mod` 5 == 0 then \"Buzz\"\
    \ else if n `mod` 7 == 0 then \"FizzBuzz\" else show n\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=fizzbuzz,haskell,recursion |>\n<code>\nfizzbuzz :: Int -> String\n\
    fizzbuzz n = if n `mod` 3 == 0 then \"Fizz\" else if n `mod` 5 == 0 then \"Buzz\"\
    \ else if n `mod` 7 == 0 then \"FizzBuzz\" else show n\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the ask\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgukauxo6.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgukauxo6.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return fizz_buzz(n / 11) + fizz_buzz(n / 13)\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to know how many times\
    \ 7 appears in numbers divisible by 11 or 13. Your code doesn't do that.\n<|/\
    \ c |>\n<| c |>\nI guess I misunderstood the question. I'll edit my answer.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a recursive solution.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to know how many times\
    \ 7 appears in numbers divisible by 11 or 13. Your code doesn't do that.\n<|/\
    \ c |>\n<| c |>\nI edited my answer to include a recursive solution.\n<|/ c |>\n\
    <| a tags=fizzbuzz,haskell |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = if\
    \ n `mod` 11 == 0 then 0 else if n `mod` 13 == 0 then 0 else fizzbuzz (n `div`\
    \ 11) + fizzbuzz (n `div` 13)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to know how many times 7 appears in numbers divisible\
    \ by 11 or 13. Your code doesn't do that.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a recursive solution.\n<|/ c |>\n<| a tags=fizzbuzz,haskell |>\n\
    <code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = if n `mod` 11 == 0 then 0 else if\
    \ n `mod` 13 == 0 then 0 else fizzbuzz (n `div` 11) + fizzbuzz (n `div` 13)\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to know how many times 7 appears in numbers divisible by 11 or 13. Your code\
    \ doesn't do that.\n<|/ c |>\n<| a tags=fizzbuzz,haskell |>\n<code>\nfizzbuzz\
    \ :: Int -> Int\nfizzbuzz n = if n `mod` 11 == 0 then 0 else \nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3mjnr5fv.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3mjnr5fv.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpif4ml079.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpif4ml079.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return 1\n    end\nend\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<| c\
    \ |>\nThanks for your answer! I understand that my code was wrong, but I still\
    \ don't understand why my code didn't work. Could you please explain to me why\
    \ my code didn't work?\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I understand that\
    \ my code was wrong, but I still don't understand why my code didn't work. Could\
    \ you please explain to me why my code didn't work?\n<|/ c |>\n<| c |>\nI added\
    \ some explanation to the answer. Hope it helps.\n<|/ c |>\n<| a tags=fizzbuzz,julia\
    \ |>\nThe reason your code doesn't work is that you are trying to use an if statement\
    \ to determine whether a number is divisible by 11 or 13. Julia doesn't support\
    \ this kind of conditional expression. Instead, you should use the mod function,\
    \ which returns the remainder of a division operation. \n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdzuuce8y.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdzuuce8y.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     if n % 11 == 1 \n            then return 1\n        else \n            if\
    \ n % 13 == 1 \n                then return 2\n            else \n           \
    \     if n % 11 == 2 \n                    then return 3\n                else\
    \ \n                    if n % 13 == 2 \n                        then return 4\n\
    \                    else \n                        if n % 11 == 3 \n        \
    \                    then return 5\n                        else \n          \
    \                  if n % 13 == 3 \n                                then return\
    \ 6\n                            else \n                                if n %\
    \ 11 == 4 \n                                    then return 7\n              \
    \                  else \n                                    if n % 13 == 4 \n\
    \                                        then return 8\n                     \
    \               else \n                                        if n % 11 == 5\
    \ \n                                            then return 9\n              \
    \                          else \n                                           \
    \ if n % 13 == 5 \n                                                then return\
    \ 10\n                                            else \n                    \
    \                            if n % 11 == 6 \n                               \
    \                     then return 11\n                                       \
    \         else \n                                                    if n % 13\
    \ == 6 \n                                                        then return 12\n\
    \                                                    else \n                 \
    \                                       if n % 11 == 7 \n                    \
    \                                        then return 13\n                    \
    \                                    else \n                                 \
    \                           if n % 13 == 7 \n                                \
    \                                then return 14\n                            \
    \                                else \n                                     \
    \                           if n % 11 == 8 \n                                \
    \                                    then return 15\n                        \
    \                                        else \n                             \
    \                                       if n % 13 == 8 \n                    \
    \                                                    then return 16\n        \
    \                                                            else \n         \
    \                                                               if n % 11 == 9\
    \ \n                                                            then return 17\n\
    \                                                        else \n             \
    \                                               if n % 13 == 9 \n            \
    \                                                    then return 18\n        \
    \                                                    else \n                 \
    \                                               if n % 11 == 10 \n           \
    \                                                         then return 19\n   \
    \                                                             else \n        \
    \                                                            if n % 13 == 10 \n\
    \                                                                        then\
    \ return 20\n                                                                \
    \    else \n                                                        if n % 11\
    \ == 11 \n                                                            then return\
    \ 21\n                                                        else \n        \
    \                                                    if n % 13 == 11 \n      \
    \                                                          then return 22\n  \
    \                                                          else \n           \
    \                                                     if n % 11 == 12 \n     \
    \                                                               then return 23\n\
    \                                                                else \n     \
    \                                                               if n % 13 == 12\
    \ \n                                                                        then\
    \ return 24\n                                                                \
    \    else \n                                                        if n % 11\
    \ == 13 \n                                                            then return\
    \ 25\n                                                        else \n        \
    \                                                    if n % 13 == 13 \n      \
    \                                                          then return 26\n  \
    \                                                          else \n           \
    \                                                     if n % 11 == 14 \n     \
    \                                                               then return 27\n\
    \                                                                else \n     \
    \                                                               if n % 13 == 14\
    \ \n                                                                        then\
    \ return 28\n                                                                \
    \    else \n                                                        if n % 11\
    \ == 15 \n                                                            then return\
    \ 29\n                                                        else \n        \
    \                                                    if n % 13 == 15 \n      \
    \                                                          then return 30\n  \
    \                                                          else \n           \
    \                                                     if n % 11 == 16 \n     \
    \                                                               then return 31\n\
    \                                                                else \n     \
    \                                                               if n % 13 == 16\
    \ \n                                                                        then\
    \ return 32\n                                                                \
    \    else \n                                                        if n % 11\
    \ == 17 \n                                                            then return\
    \ 33\n                                                        else \n        \
    \                                                    if n % 13 == 17 \nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl8_ap0f4.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl8_ap0f4.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        return\
    \ fizz_buzz(n/11) + fizz_buzz(n/13)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 3 or 5.\n    >>> fizz_buzz(50)\n    0\n \
    \   >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9cnfkcx2.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9cnfkcx2.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0 \n\
    \        then return 1\n    else if n%13==0 \n        then return 2\n    else\
    \ return 3\nend\n</cell>\n<text>\nExercise 10\nWrite a function that returns the\
    \ number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13. For example, fizz_buzz(78) returns 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz1xe8z4r.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz1xe8z4r.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     if n % 11 == 1 \n            then return 1\n        else if n % 13 == 1\
    \ \n            then return 2\n        else return 3\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdmds6jvp.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdmds6jvp.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else 1\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8rpgh92m.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8rpgh92m.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then 2 else fizz_buzz(n-1)\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8jgzlfio.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8jgzlfio.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return fizz_buzz(n/11) + fizz_buzz(n/13)\n\
    end\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz98mgnmk.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz98mgnmk.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then 2 else fizz_buzz(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaucpjvfd.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaucpjvfd.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return fizz_buzz(n / 11) + fizz_buzz(n / 13)\n</code>\n<|/ a tags=fizzbuzz,haskell\
    \ |>\n<| c |>\nThis doesn't work for `fizz_buzz 10`, which should return `1`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the answer to include\
    \ a fix for that.\n<|/ c |>\n<| a dscore=2 |>\nThe other answers here are great,\
    \ but they don't take into account that fizz buzz isn't just \"Fizz\" followed\
    \ by \"Buzz\".  It's \"FizzBuzz\".  So here's a function that does that:\n<code>\n\
    fizzBuzz :: Int -> Int\nfizzBuzz n = if n `mod` 3 == 0 then n `mod` 5 else n `mod`\
    \ 3 `mod` 5\n</code>\n<|/ a tags=fizzbuzz,haskell |>\n<| a |>\n<code>\nfizzBuzz\
    \ :: Int -> Int\nfizzBuzz n = if n `mod` 3 == 0 then n `mod` 5 else n `mod` 3\
    \ `mod` 5\n</code>\n<|/ a tags=fizzbuzz,haskell dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nfizzBuzz :: Int -> Int\nfizzBuzz n = if n `mod` 3 == 0 then n `mod` 5\
    \ else n `mod` 3 `mod` 5\n</code>\n<|/ a tags=fizzbuzz,haskell |>\n<| a dscore=1\
    \ |>\n<code>\nfizzBuzz :: Int -> Int\nfizzBuzz n = if n `mod` 3 == 0 then n `mod`\
    \ 5 else n `mod` 3 `mod` 5\n</code>\n<|/ a tags=fizzbuzz,haskell |>\n<| a tags=fizzbuzz,haskell\
    \ |>\n<code>\nfizzBuzz :: Int -> Int\nfizzBuzz n = if n `mod` 3 == 0 then n `mod`\
    \ 5 else n `mod` 3 `mod` 5\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,haskell\
    \ |>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe7tm55ms.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe7tm55ms.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return fizz_buzz(n-1)\nend\n\
    </code>\n<|/ a tags=fizzbuzz,julia |>\n<| c |>\nI like your solution. Thanks!\n\
    <|/ c |>\n<| a dscore=2 |>\nI like your solution, but I thought I'd add my own\
    \ since I find it more readable and easier to understand.\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa02s0unf.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa02s0unf.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the number of times the digit 7 appears in integers less than n which\
    \ are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>>\
    \ fizz_buzz(79)\n3\n>>> fizz_buzz(100)\n0\n>>> fizz_buzz(101)\n1\n>>> fizz_buzz(102)\n\
    2\n>>> fizz_buzz(103)\n3\n>>> fizz_buzz(104)\n4\n>>> fizz_buzz(105)\n5\n>>> fizz_buzz(106)\n\
    6\n>>> fizz_buzz(107)\n7\n>>> fizz_buzz(108)\n8\n>>> fizz_buzz(109)\n9\n>>> fizz_buzz(110)\n\
    10\n>>> fizz_buzz(111)\n11\n>>> fizz_buzz(112)\n12\n>>> fizz_buzz(113)\n13\n>>>\
    \ fizz_buzz(114)\n14\n>>> fizz_buzz(115)\n15\n>>> fizz_buzz(116)\n16\n>>> fizz_buzz(117)\n\
    17\n>>> fizz_buzz(118)\n18\n>>> fizz_buzz(119)\n19\n>>> fizz_buzz(120)\n20\n>>>\
    \ fizz_buzz(121)\n21\n>>> fizz_buzz(122)\n22\n>>> fizz_buzz(123)\n23\n>>> fizz_buzz(124)\n\
    24\n>>> fizz_buzz(125)\n25\n>>> fizz_buzz(126)\n26\n>>> fizz_buzz(127)\n27\n>>>\
    \ fizz_buzz(128)\n28\n>>> fizz_buzz(129)\n29\n>>> fizz_buzz(130)\n30\n>>> fizz_buzz(131)\n\
    31\n>>> fizz_buzz(132)\n32\n>>> fizz_bu\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqiqn8blm.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqiqn8blm.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return fizz_buzz(n/11)+fizz_buzz(n/13)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcjqrg0ec.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcjqrg0ec.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0 else return fizz_buzz(n/11)\n\
    \    end\nfizz_buzz(50)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 3 or 5.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n   \
    \ >>> fizz_buzz(79)\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg2xykehx.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg2xykehx.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n==2 then return\
    \ 2\n    if n%3==0 then return 3\n    if n%3==1 then return 3\n    if n%3==2 then\
    \ return 3\n    if n%7==0 then return 7\n    if n%7==1 then return 7\n    if n%7==2\
    \ then return 7\n    if n%7==3 then return 7\n    if n%7==4 then return 7\n  \
    \  if n%7==5 then return 7\n    if n%7==6 then return 7\n    if n%7==7 then return\
    \ 7\n    if n%11==0 then return 11\n    if n%11==1 then return 11\n    if n%11==2\
    \ then return 11\n    if n%13==0 then return 13\n    if n%13==1 then return 13\n\
    \    if n%13==2 then return 13\n    if n%13==3 then return 13\n    if n%13==4\
    \ then return 13\n    if n%13==5 then return 13\n    if n%13==6 then return 13\n\
    \    if n%13==7 then return 13\n    return 0\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpl4l4yz67.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpl4l4yz67.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return 1\n</code>\n<|/ a tags=fizzbuzz,haskell\
    \ |>\n<| c |>\nI like your solution, but I believe that `fizz_buzz` should return\
    \ `0` when `n mod 11 == 0` and `n mod 13 == 0`, not `1`.\n<|/ c |>\n<| c |>\n\
    I agree with you, thanks for pointing that out. I've edited my answer to reflect\
    \ that.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfizz_buzz :: Int -> Int\nfizz_buzz\
    \ n = if n `mod` 11 == 0 then 0 else if n `mod` 13 == 0 then 1 else 0\n</code>\n\
    <|/ a tags=fizzbuzz,haskell |>\n<| a dscore=1 |>\n<code>\nfizz_buzz :: Int ->\
    \ Int\nfizz_buzz n = if n==0 then 0 else if n==1 then 1 else fizz_buzz (n-1)\n\
    </code>\n<|/ a tags=fizzbuzz,haskell |>\n<| a dscore=1 |>\n<code>\nfizz_buzz ::\
    \ Int -> Int\nfizz_buzz n = if n==0 then 0 else if n==1 then 1 else fizz_buzz\
    \ (n-1)\n</code>\n<|/ a tags=fizzbuzz,haskell |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nfizz_buzz :: Int -> Int\nfizz_buzz n = if n==0 then 0 else if n==1 then\
    \ 1 else fizz_buzz (n-1)\n</code>\n<|/ a tags=fizzbuzz,haskell |>\n<| a tags=fizzbuzz,haskell\
    \ |>\n<code>\nfizz_buzz :: Int -> Int\nfizz_buzz n = if n==0 then 0 else if n==1\
    \ then 1 else fizz_buzz (n-1)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nfizz_buzz :: Int -> Int\nfizz_buzz n = if n==0 then 0 else if n==1 then\
    \ 1 else fizz_bu\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4ntt0x4w.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ntt0x4w.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        then\
    \ return 1\n    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpov9x5108.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpov9x5108.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return 1\n    fizz_buzz(n / 11)\n    fizz_buzz(n / 13)\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fizz_buzz(50)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13. \nFor example, fizz_buzz(50) should\
    \ return 0 because 50 is divisible by 11 and 13. \nThe function should work for\
    \ any integer n.\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3hyloths.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3hyloths.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return 1 + fizz_buzz(n / 11)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1vzpsd8v.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1vzpsd8v.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 || n==1 || n==2 || n==3 || n==4 || n==5 || n==6 || n==7 || n==8\
    \ || n==9 || n==10 || n==11 || n==12 || n==13\n        0\n    else\n        fizz_buzz(n-1)\n\
    end\n</code>\n<|/ a tags=fizzbuzz,julia,recursion |>\n<| a tags=fizzbuzz,julia,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvqwlsbnn.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvqwlsbnn.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else fizz_buzz(n-1)\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=fizzbuzz,julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2x34mmp_.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2x34mmp_.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return 1\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to know how many times\
    \ 7 appears in numbers divisible by 11 or 13. Your code returns how many times\
    \ 7 appears in numbers divisible by 11 or 13. Your code doesn't even compile.\n\
    <|/ c |>\n<| c |>\nI see what you mean. My code was a little off. I'll edit my\
    \ answer.\n<|/ c |>\n<| c |>\nI edited my answer to include a function that will\
    \ do what you're looking for.\n<|/ c |>\n<| c |>\nThank you so much! I appreciate\
    \ it!\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb4qckvuh.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb4qckvuh.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n==1 \n        1\n    else if n==2 \n\
    \        2\n    else if n%3==0 \n        fizz_buzz(n/3)\n    else if n%5==0 \n\
    \        fizz_buzz(n/5)\n    else if n%7==0 \n        fizz_buzz(n/7)\n    else\
    \ \n        fizz_buzz(n+1)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphgv60oxc.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphgv60oxc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     if n % 11 == 1 \n            then return 1\n        else if n % 13 == 1\
    \ \n            then return 2\n        else return 3\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplekd13bw.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplekd13bw.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else fizz_buzz(n-1)\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprsw_ihti.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprsw_ihti.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n==2 then return\
    \ 2\n    if n%3==0 then return 3\n    if n%3==1 then return 4\n    if n%3==2 then\
    \ return 5\n    if n%3==3 then return 6\n    if n%3==4 then return 7\n    if n%3==5\
    \ then return 8\n    if n%3==6 then return 9\n    if n%3==7 then return 10\n \
    \   if n%3==8 then return 11\n    if n%3==9 then return 12\n    if n%3==10 then\
    \ return 13\n    if n%3==11 then return 14\n    if n%3==12 then return 15\n  \
    \  if n%3==13 then return 16\n    if n%3==14 then return 17\n    if n%3==15 then\
    \ return 18\n    if n%3==16 then return 19\n    if n%3==17 then return 20\n  \
    \  if n%3==18 then return 21\n    if n%3==19 then return 22\n    if n%3==20 then\
    \ return 23\n    if n%3==21 then return 24\n    if n%3==22 then return 25\n  \
    \  if n%3==23 then return 26\n    if n%3==24 then return 27\n    if n%3==25 then\
    \ return 28\n    if n%3==26 then return 29\n    if n%3==27 then return 30\n  \
    \  if n%3==28 then return 31\n    if n%3==29 then return 32\n    if n%3==30 then\
    \ return 33\n    if n%3==31 then return 34\n    if n%3==32 then return 35\n  \
    \  if n%3==33 then return 36\n    if n%3==34 then return 37\n    if n%3==35 then\
    \ return 38\n    if n%3==36 then return 39\n    if n%3==37 then return 40\n  \
    \  if n%3==38 then return 41\n    if n%3==39 then return 42\n    if n%3==40 then\
    \ return 43\n    if n%3==41 then return 44\n    if n%3==42 then return 45\n  \
    \  if n%3==43 then return 46\n    if n%3==44 then return 47\n    if n%3==45 then\
    \ return 48\n    if n%3==46 then return 49\n    if n%3==47 then return 50\n  \
    \  if n%3==48 then return 51\n    if n%3==49 then return 52\n    if n%3==50 then\
    \ return 53\n    if n%3==51 then return 54\n    if n%3==52 then return 55\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiyojn7t3.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpiyojn7t3.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n==2 then return\
    \ 2\n    if n%3==0 then return 3\n    if n%3==1 then return 3\n    if n%3==2 then\
    \ return 3\n    if n%3==3 then return 3\n    if n%3==4 then return 3\n    if n%3==5\
    \ then return 3\n    if n%3==6 then return 3\n    if n%3==7 then return 3\n  \
    \  if n%3==8 then return 3\n    if n%3==9 then return 3\n    if n%3==10 then return\
    \ 3\n    if n%3==11 then return 3\n    if n%3==12 then return 3\n    if n%3==13\
    \ then return 3\n    if n%3==14 then return 3\n    if n%3==15 then return 3\n\
    \    if n%3==16 then return 3\n    if n%3==17 then return 3\n    if n%3==18 then\
    \ return 3\n    if n%3==19 then return 3\n    if n%3==20 then return 3\n    if\
    \ n%3==21 then return 3\n    if n%3==22 then return 3\n    if n%3==23 then return\
    \ 3\n    if n%3==24 then return 3\n    if n%3==25 then return 3\n    if n%3==26\
    \ then return 3\n    if n%3==27 then return 3\n    if n%3==28 then return 3\n\
    \    if n%3==29 then return 3\n    if n%3==30 then return 3\n    if n%3==31 then\
    \ return 3\n    if n%3==32 then return 3\n    if n%3==33 then return 3\n    if\
    \ n%3==34 then return 3\n    if n%3==35 then return 3\n    if n%3==36 then return\
    \ 3\n    if n%3==37 then return 3\n    if n%3==38 then return 3\n    if n%3==39\
    \ then return 3\n    if n%3==40 then return 3\n    if n%3==41 then return 3\n\
    \    if n%3==42 then return 3\n    if n%3==43 then return 3\n    if n%3==44 then\
    \ return 3\n    if n%3==45 then return 3\n    if n%3==46 then return 3\n    if\
    \ n%3==47 then return 3\n    if n%3==48 then return 3\n    if n%3==49 then return\
    \ 3\n    if n%3==50 then return 3\n    if n%3==51 then return 3\n    if n%3==52\
    \ then return 3\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5yu7fg58.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5yu7fg58.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5t7v9b_3.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5t7v9b_3.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return 1 + fizz_buzz(n / 11)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fizz_buzz(50)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13. Test it on small numbers. How fast is it?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn33mfun8.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn33mfun8.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0 else if n==1 then return 1 else if n==2 then return\
    \ 2 else if n%3==0 then return fizz_buzz(n/3)+1 else return fizz_buzz(n/3)+fizz_buzz(n%3)\n\
    end\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5fh5oeax.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5fh5oeax.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        if n%11==0\n            1\n    \
    \    else\n            if n%13==0\n                2\n            else\n     \
    \           3\n        end\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13. For example, fizz_buzz(50) should return\
    \ 0, fizz_buzz(78) should return 2, and fizz_buzz(79) should return 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70hgf7h1.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp70hgf7h1.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n==2 then return\
    \ 2\n    if n%3==0 then return 3\n    if n%3==1 then return 4\n    if n%3==2 then\
    \ return 5\n    if n%3==3 then return 6\n    if n%3==4 then return 7\n    if n%3==5\
    \ then return 8\n    if n%3==6 then return 9\n    if n%3==7 then return 10\n \
    \   if n%3==8 then return 11\n    if n%3==9 then return 12\n    if n%3==10 then\
    \ return 13\n    if n%3==11 then return 14\n    if n%3==12 then return 15\n  \
    \  if n%3==13 then return 16\n    if n%3==14 then return 17\n    if n%3==15 then\
    \ return 18\n    if n%3==16 then return 19\n    if n%3==17 then return 20\n  \
    \  if n%3==18 then return 21\n    if n%3==19 then return 22\n    if n%3==20 then\
    \ return 23\n    if n%3==21 then return 24\n    if n%3==22 then return 25\n  \
    \  if n%3==23 then return 26\n    if n%3==24 then return 27\n    if n%3==25 then\
    \ return 28\n    if n%3==26 then return 29\n    if n%3==27 then return 30\n  \
    \  if n%3==28 then return 31\n    if n%3==29 then return 32\n    if n%3==30 then\
    \ return 33\n    if n%3==31 then return 34\n    if n%3==32 then return 35\n  \
    \  if n%3==33 then return 36\n    if n%3==34 then return 37\n    if n%3==35 then\
    \ return 38\n    if n%3==36 then return 39\n    if n%3==37 then return 40\n  \
    \  if n%3==38 then return 41\n    if n%3==39 then return 42\n    if n%3==40 then\
    \ return 43\n    if n%3==41 then return 44\n    if n%3==42 then return 45\n  \
    \  if n%3==43 then return 46\n    if n%3==44 then return 47\n    if n%3==45 then\
    \ return 48\n    if n%3==46 then return 49\n    if n%3==47 then return 50\n  \
    \  if n%3==48 then return 51\n    if n%3==49 then return 52\n    if n%3==50 then\
    \ return 53\n    if n%3==51 then return 54\n    if n%3==52 then return 55\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp33dojprs.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp33dojprs.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        then\
    \ return 1\n    fizz_buzz(n / 10)\nend\n</code>\n<|/ a tags=fizzbuzz,julia |>\n\
    <| a tags=fizzbuzz,julia |>\nThe answer by is correct, but I wanted to add that\
    \ you can also use recursion to solve this problem. \n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm6ws733z.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm6ws733z.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<| c |>\n\
    This doesn't work. `fizz_buzz(50)` returns `0` instead of `2`.\n<|/ c |>\n<| c\
    \ |>\nThanks for pointing that out. I've updated the answer accordingly.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp3koudi1.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp3koudi1.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0 \n\
    \        then return 1\n    else if n%13==0 \n        then return 2\n    else\
    \ return 3\nend\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<| a tags=fizzbuzz,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgfbypyk7.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgfbypyk7.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n \
    \   >>> fizz_buzz(79)\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpunzw2aap.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpunzw2aap.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return 1 + fizz_buzz(n / 11)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fizz_buzz(50)\n</cell>\n<code language=julia-1.3>\n@time fizz_buzz(78)\n\
    </cell>\n<code language=julia-1.3>\n@time fizz_buzz(79)\n</cell>\n<text>\nExercise\n\
    Write a function that returns the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13. \nWrite a function that returns\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13. \nWrite a function that returns the number of times the digit 7\
    \ appears in integers less than n which are divisible by 11 or 13. \nWrite a function\
    \ that returns the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13. \nWrite a function that returns the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13. \nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13. \nWrite a function\
    \ that returns the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13. \nWrite a function that returns the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13. \nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13. \nWrite a function\
    \ that returns the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13. \nWrite a function that returns the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13. \nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13. \nWrite a function\
    \ that returns the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13. \nWrite a function that returns the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13. \nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13. \nWrite a function\
    \ that returns the number of times the digit 7 appears in integers less than n\
    \ which are divisible by 11 or 13. \nWrite a function that returns the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13. \nWrite \nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvd56av51.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvd56av51.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 || n%13==0 \n        then return 0\n    else if n%11==1 \n\
    \        then return 1\n    else if n%13==1\n        then return 2\n    else return\
    \ 3\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 3 or 5.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>>\
    \ fizz_buzz(79)\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz77eo7lq.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpz77eo7lq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return 1\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=fizzbuzz,haskell |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz\
    \ n = if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then 2 else if n%15==0\
    \ then 3 else if n%17==0 then 4 else if n%19==0 then 5 else if n%21==0 then 6\
    \ else if n%23==0 then 7 else if n%25==0 then 8 else if n%27==0 then 9 else if\
    \ n%29==0 then 10 else if n%31==0 then 11 else if n%33==0 then 12 else if n%35==0\
    \ then 13 else if n%37==0 then 14 else if n%39==0 then 15 else if n%41==0 then\
    \ 16 else if n%43==0 then 17 else if n%45==0 then 18 else if n%47==0 then 19 else\
    \ if n%49==0 then 20 else if n%51==0 then 21 else if n%53==0 then 22 else if n%55==0\
    \ then 23 else if n%57==0 then 24 else if n%59==0 then 25 else if n%61==0 then\
    \ 26 else if n%63==0 then 27 else if n%65==0 then 28 else if n%67==0 then 29 else\
    \ if n%69==0 then 30 else if n%71==0 then 31 else if n%73==0 then 32 else if n%75==0\
    \ then 33 else if n%77==0 then 34 else if n%79==0 then 35 else if n%81==0 then\
    \ 36 else if n%83==0 then 37 else if n%85==0 then 38 else if n%87==0 then 39 else\
    \ if n%89==0 then 40 else if n%91==0 then 41 else if n%93==0 then 42 else if n%95==0\
    \ then 43 else if n%97==0 then 44 else if n%99==0 then 45 else if n%101==0 then\
    \ 46 else if n%103==0 then 47 else if n%105==0 then 48 else if n%107==0 then 49\
    \ else if n%109==0 \nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t\
    @test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiiontm1y.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiiontm1y.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return fizz_buzz(n - 1) \nend\n</cell>\n<code language=julia-1.0>\n@time\
    \ fizz_buzz(50)\n</cell>\n<code language=julia-1.0>\n@time fizz_buzz(78)\n</cell>\n\
    <code language=julia-1.0>\n@time fizz_buzz(79)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13. \n    >>> fizz_buzz(50)\n    0\n\
    \    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6oz_l_ml.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6oz_l_ml.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0 and\
    \ n%13!=0 \n        then return 1\n    else if n%11!=0 and n%13==0 \n        then\
    \ return 2\n    else if n%11!=0 and n%13!=0 \n        then return 3\n    else\
    \ return 4\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxw6askd6.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxw6askd6.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return fizz_buzz(n - 1) \nend\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<|\
    \ c |>\nThanks for the answer. Can you please explain what is the purpose of using\
    \ \"return\" here?\n<|/ c |>\n<| c |>\nThe `return` keyword is used in Julia to\
    \ return a value from a function. In your case it returns 0 when the number is\
    \ a multiple of 11 or 13 and 1 otherwise. More info here: https://julialang.org/blog/2017/12/tips-and-tricks-for-julia/\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz4nw9pn8.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz4nw9pn8.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 || n%13==0\n        then return 0\n    else if n%11==0\n  \
    \      then return 1\n    else if n%13==0\n        then return 2\n    else return\
    \ 3\nend\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<| c |>\nThis is not an answer\
    \ to the question. OP asked for Julia, not Python.\n<|/ c |>\n<| c |>\nThe question\
    \ was tagged with Julia, so I thought it would be helpful to someone. My answer\
    \ was in Julia, but OP can easily translate it to Python.\n<|/ c |>\n<| c |>\n\
    The question was tagged with Julia, so I thought it would be helpful to someone.\
    \ My answer was in Julia, but OP can easily translate it to Python.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfgqbq38_.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfgqbq38_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0 \n\
    \        then return 1\n    else if n%13==0 \n        then return 2\n    else\
    \ return 3\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpks0a_4vy.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpks0a_4vy.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return fizz_buzz(n/11) + fizz_buzz(n/13)\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp2k0tv1d.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp2k0tv1d.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0 else return fizz_buzz(n/11)+1\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd7rkyyjy.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd7rkyyjy.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a number as input and returns the number of digits in the number. For\
    \ example, fizz_buzz(12) should return 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpluouolg9.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpluouolg9.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0\n \
    \       then return 1\n    else if n%13==0\n        then return 2\n    else return\
    \ 3\n</code>\n<|/ a tags=fizzbuzz,haskell |>\n<| c |>\nThe `fizz_buzz` function\
    \ can be written more concisely as `fizz_buzz n = case n `mod` 11 of\n    0 ->\
    \ 0\n    1 -> 1\n    2 -> 2\n    3 -> 3\n    _ -> 3`\n<|/ c |>\n<| c |>\nThanks,\
    \ I didn't know about that syntax for pattern matching.\n<|/ c |>\n<| a |>\n<code>\n\
    fizzbuzz :: Int -> Int\nfizzbuzz n = if n==0 then 0 else if n==1 then 1 else if\
    \ n==2 then 2 else if n==3 then 3 else if n==4 then 4 else if n==5 then 5 else\
    \ if n==6 then 6 else if n==7 then 7 else if n==8 then 8 else if n==9 then 9 else\
    \ if n==10 then 10 else if n==11 then 11 else if n==12 then 12 else if n==13 then\
    \ 13 else if n==14 then 14 else if n==15 then 15 else if n==16 then 16 else if\
    \ n==17 then 17 else if n==18 then 18 else if n==19 then 19 else if n==20 then\
    \ 20 else if n==21 then 21 else if n==22 then 22 else if n==23 then 23 else if\
    \ n==24 then 24 else if n==25 then 25 else if n==26 then 26 else if n==27 then\
    \ 27 else if n==28 then 28 else if n==29 then 29 else if n==30 then 30 else if\
    \ n==31 then 31 else if n==32 then 32 else if n==33 then 33 else if n==34 then\
    \ 34 else if n==35 then 35 else if n==36 then 36 else if n==37 then 37 else if\
    \ n==38 then 38 else if n==39 then 39 else if n==40 then 40 else if n==41 then\
    \ 41 else if n==42 then 42 else if n==43 then 43 else if n==44 then 44 else if\
    \ n==45 then 45 else if n==46 then 46\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphv2wzfnz.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphv2wzfnz.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0 and\
    \ n%13!=0 \n        then return 1\n    else if n%11!=0 and n%13==0 \n        then\
    \ return 2\n    else if n%11!=0 and n%13!=0 \n        then return 3\n    else\
    \ return 4\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcfem6zjn.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcfem6zjn.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\n</code>\n<|/ a tags=fizzbuzz,haskell |>\n<| a dscore=0\
    \ |>\n<code>\nfizzbuzz :: Int -> String\nfizzbuzz n = if n==0 then \"FizzBuzz\"\
    \ else if n==1 then \"Fizz\" else if n==2 then \"Buzz\" else if n==3 then \"FizzBuzz\"\
    \ else if n==4 then \"Buzz\" else if n==5 then \"Fizz\" else if n==6 then \"Buzz\"\
    \ else if n==7 then \"FizzBuzz\" else if n==8 then \"Buzz\" else if n==9 then\
    \ \"Fizz\" else if n==10 then \"Buzz\" else if n==11 then \"FizzBuzz\" else if\
    \ n==12 then \"Buzz\" else if n==13 then \"FizzBuzz\" else if n==14 then \"Buzz\"\
    \ else if n==15 then \"FizzBuzz\" else if n==16 then \"Buzz\" else if n==17 then\
    \ \"FizzBuzz\" else if n==18 then \"Buzz\" else if n==19 then \"FizzBuzz\" else\
    \ if n==20 then \"Buzz\" else if n==21 then \"FizzBuzz\" else if n==22 then \"\
    Buzz\" else if n==23 then \"FizzBuzz\" else if n==24 then \"Buzz\" else if n==25\
    \ then \"FizzBuzz\" else if n==26 then \"Buzz\" else if n==27 then \"FizzBuzz\"\
    \ else if n==28 then \"Buzz\" else if n==29 then \"FizzBuzz\" else if n==30 then\
    \ \"Buzz\" else if n==31 then \"FizzBuzz\" else if n==32 then \"Buzz\" else if\
    \ n==33 then \"FizzBuzz\" else if n==34 then \"Buzz\" else if n==35 then \"FizzBuzz\"\
    \ else if n==36 then \"Buzz\" else if n==37 then \"FizzBuzz\" else if n==38 then\
    \ \"Buzz\" \nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2mx_a3o2.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2mx_a3o2.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else return 1\nend\n\
    </code>\n<|/ a tags=fizzbuzz,julia |>\n<| a tags=fizzbuzz,julia |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbkhdeg7x.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbkhdeg7x.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0 else if n==1 then return 1 else if n%11==0 then\
    \ return 2 else if n%13==0 then return 3 else return fizz_buzz(n-1)\nend\n</code>\n\
    <|/ a tags=fizzbuzz,julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpeyglwo1p.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpeyglwo1p.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n==2 then return\
    \ 2\n    if n%3==0 then return 3\n    if n%3==1 then return 3\n    if n%3==2 then\
    \ return 3\n    if n%3==3 then return 3\n    if n%3==4 then return 3\n    if n%3==5\
    \ then return 3\n    if n%3==6 then return 3\n    if n%3==7 then return 3\n  \
    \  if n%3==8 then return 3\n    if n%3==9 then return 3\n    if n%3==10 then return\
    \ 3\n    if n%3==11 then return 3\n    if n%3==12 then return 3\n    if n%3==13\
    \ then return 3\n    if n%3==14 then return 3\n    if n%3==15 then return 3\n\
    \    if n%3==16 then return 3\n    if n%3==17 then return 3\n    if n%3==18 then\
    \ return 3\n    if n%3==19 then return 3\n    if n%3==20 then return 3\n    if\
    \ n%3==21 then return 3\n    if n%3==22 then return 3\n    if n%3==23 then return\
    \ 3\n    if n%3==24 then return 3\n    if n%3==25 then return 3\n    if n%3==26\
    \ then return 3\n    if n%3==27 then return 3\n    if n%3==28 then return 3\n\
    \    if n%3==29 then return 3\n    if n%3==30 then return 3\n    if n%3==31 then\
    \ return 3\n    if n%3==32 then return 3\n    if n%3==33 then return 3\n    if\
    \ n%3==34 then return 3\n    if n%3==35 then return 3\n    if n%3==36 then return\
    \ 3\n    if n%3==37 then return 3\n    if n%3==38 then return 3\n    if n%3==39\
    \ then return 3\n    if n%3==40 then return 3\n    if n%3==41 then return 3\n\
    \    if n%3==42 then return 3\n    if n%3==43 then return 3\n    if n%3==44 then\
    \ return 3\n    if n%3==45 then return 3\n    if n%3==46 then return 3\n    if\
    \ n%3==47 then return 3\n    if n%3==48 then return 3\n    if n%3==49 then return\
    \ 3\n    if n%3==50 then return 3\n    if n%3==51 then return 3\n    if n%3==52\
    \ then return 3\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptq_tqav8.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptq_tqav8.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return fizz_buzz(n / 11) + fizz_buzz(n / 13)\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI appreciate your answer. Can you please explain how this works?\n\
    <|/ c |>\n<| c |>\nThe function `fizz_buzz` takes an integer `n` and returns an\
    \ integer `0` if the number `n` is divisible by 11 or 13 and an integer `2` if\
    \ the number `n` is divisible by 11 and 13. Otherwise, the function recursively\
    \ calls itself with the quotient `n` divided by 11 and 13 until it reaches 1.\
    \ Then it returns the number of times the digit 7 appears in integers less than\
    \ `n` which are divisible by 11 or 13. Does this help?\n<|/ c |>\n<| c |>\nYes,\
    \ it does. Thank you very much!\n<|/ c |>\n<| c |>\nI added some comments to the\
    \ code so you can understand how it works.\n<|/ c |>\n<| c |>\nThank you very\
    \ much! I appreciate your help!\n<|/ c |>\n<| a tags=fizzbuzz,julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyfj0_m23.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyfj0_m23.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        return\
    \ fizz_buzz(n/11)\n    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwop9au8d.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwop9au8d.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp66xr1zjw.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp66xr1zjw.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n \
    \   >>> fizz_buzz(79)\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpik9v_1oa.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpik9v_1oa.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n==2 then return\
    \ 2\n    if n%3==0 then return 3\n    if n%3==1 then return 4\n    if n%3==2 then\
    \ return 5\n    if n%3==3 then return 6\n    if n%3==4 then return 7\n    if n%3==5\
    \ then return 8\n    if n%3==6 then return 9\n    if n%3==7 then return 10\n \
    \   if n%3==8 then return 11\n    if n%3==9 then return 12\n    if n%3==10 then\
    \ return 13\n    if n%3==11 then return 14\n    if n%3==12 then return 15\n  \
    \  if n%3==13 then return 16\n    if n%3==14 then return 17\n    if n%3==15 then\
    \ return 18\n    if n%3==16 then return 19\n    if n%3==17 then return 20\n  \
    \  if n%3==18 then return 21\n    if n%3==19 then return 22\n    if n%3==20 then\
    \ return 23\n    if n%3==21 then return 24\n    if n%3==22 then return 25\n  \
    \  if n%3==23 then return 26\n    if n%3==24 then return 27\n    if n%3==25 then\
    \ return 28\n    if n%3==26 then return 29\n    if n%3==27 then return 30\n  \
    \  if n%3==28 then return 31\n    if n%3==29 then return 32\n    if n%3==30 then\
    \ return 33\n    if n%3==31 then return 34\n    if n%3==32 then return 35\n  \
    \  if n%3==33 then return 36\n    if n%3==34 then return 37\n    if n%3==35 then\
    \ return 38\n    if n%3==36 then return 39\n    if n%3==37 then return 40\n  \
    \  if n%3==38 then return 41\n    if n%3==39 then return 42\n    if n%3==40 then\
    \ return 43\n    if n%3==41 then return 44\n    if n%3==42 then return 45\n  \
    \  if n%3==43 then return 46\n    if n%3==44 then return 47\n    if n%3==45 then\
    \ return 48\n    if n%3==46 then return 49\n    if n%3==47 then return 50\n  \
    \  if n%3==48 then return 51\n    if n%3==49 then return 52\n    if n%3==50 then\
    \ return 53\n    if n%3==51 then return 54\n    if n%3==52 then return 55\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz34ln1yw.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpz34ln1yw.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n==1 then 1 else fizz_buzz(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpozq380y6.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpozq380y6.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n==2 then return\
    \ 2\n    if n%3==0 then return 3\n    if n%3==1 then return 4\n    if n%3==2 then\
    \ return 5\n    if n%3==3 then return 6\n    if n%3==4 then return 7\n    if n%3==5\
    \ then return 8\n    if n%3==6 then return 9\n    if n%3==7 then return 10\n \
    \   if n%3==8 then return 11\n    if n%3==9 then return 12\n    if n%3==10 then\
    \ return 13\n    if n%3==11 then return 14\n    if n%3==12 then return 15\n  \
    \  if n%3==13 then return 16\n    if n%3==14 then return 17\n    if n%3==15 then\
    \ return 18\n    if n%3==16 then return 19\n    if n%3==17 then return 20\n  \
    \  if n%3==18 then return 21\n    if n%3==19 then return 22\n    if n%3==20 then\
    \ return 23\n    if n%3==21 then return 24\n    if n%3==22 then return 25\n  \
    \  if n%3==23 then return 26\n    if n%3==24 then return 27\n    if n%3==25 then\
    \ return 28\n    if n%3==26 then return 29\n    if n%3==27 then return 30\n  \
    \  if n%3==28 then return 31\n    if n%3==29 then return 32\n    if n%3==30 then\
    \ return 33\n    if n%3==31 then return 34\n    if n%3==32 then return 35\n  \
    \  if n%3==33 then return 36\n    if n%3==34 then return 37\n    if n%3==35 then\
    \ return 38\n    if n%3==36 then return 39\n    if n%3==37 then return 40\n  \
    \  if n%3==38 then return 41\n    if n%3==39 then return 42\n    if n%3==40 then\
    \ return 43\n    if n%3==41 then return 44\n    if n%3==42 then return 45\n  \
    \  if n%3==43 then return 46\n    if n%3==44 then return 47\n    if n%3==45 then\
    \ return 48\n    if n%3==46 then return 49\n    if n%3==47 then return 50\n  \
    \  if n%3==48 then return 51\n    if n%3==49 then return 52\n    if n%3==50 then\
    \ return 53\n    if n%3==51 then return 54\n    if n%3==52 then return 55\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu2lnshl9.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpu2lnshl9.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0\n \
    \       then return 1\n    else if n%13==0\n        then return 2\n    else return\
    \ 3\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13 and which are also divisible by 3 or 5.\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi5xjmk6q.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi5xjmk6q.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return 1 + fizz_buzz(n / 11)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprd1ajusw.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprd1ajusw.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return 1\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,fizzbuzz\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsw4sey8c.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsw4sey8c.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else \n        return 3\nend\n</cell>\n<code language=julia-1.0>\nfizz_buzz(50)\n\
    </cell>\n<code language=julia-1.0>\nfizz_buzz(78)\n</cell>\n<code language=julia-1.0>\n\
    fizz_buzz(79)\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13 and are also divisible by 3 or 5.\nusing Test\n\n@testset begin\n\n\
    candidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptiknzdwe.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptiknzdwe.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else fizz_buzz(n-1)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 3 or 5.\n>>> fizz_buzz(50)\n\
    0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n>>> fizz_buzz(81)\n0\n>>> fizz_buzz(82)\n\
    0\n>>> fizz_buzz(83)\n0\n>>> fizz_buzz(84)\n0\n>>> fizz_buzz(85)\n1\n>>> fizz_buzz(86)\n\
    1\n>>> fizz_buzz(87)\n1\n>>> fizz_buzz(88)\n1\n>>> fizz_buzz(89)\n1\n>>> fizz_buzz(90)\n\
    2\n>>> fizz_buzz(91)\n2\n>>> fizz_buzz(92)\n2\n>>> fizz_buzz(93)\n2\n>>> fizz_buzz(94)\n\
    2\n>>> fizz_buzz(95)\n2\n>>> fizz_buzz(96)\n3\n>>> fizz_buzz(97)\n3\n>>> fizz_buzz(98)\n\
    3\n>>> fizz_buzz(99)\n3\n>>> fizz_buzz(100)\n3\n>>> fizz_buzz(101)\n3\n>>> fizz_buzz(102)\n\
    3\n>>> fizz_buzz(103)\n3\n>>> fizz_buzz(104)\n3\n>>> fizz_buzz(105)\n3\n>>> fizz_buzz(106)\n\
    3\n>>> fizz_buzz(107)\n3\n>>> fizz_buzz(108)\n3\n>>> fizz_buzz(109)\n3\n>>> fizz_buzz(110)\n\
    3\n>>> fizz_buzz(111)\n3\n>>> fizz_buzz(112)\n3\n>>> fizz_buzz(113)\n3\n>>> fizz_buzz(114)\n\
    3\n>>> fizz_buzz(115)\n3\n>>> fizz_buzz\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbuk4_zkh.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbuk4_zkh.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return 1 + fizz_buzz(n / 11)\n</code>\n<|/ a tags=fizzbuzz,haskell,recursion\
    \ |>\n<| c |>\nThis doesn't work for `fizz_buzz 10`, which should return `1`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ a tags=fizzbuzz,haskell,recursion |>\n<code>\nfizz_buzz :: Int -> Int\nfizz_buzz\
    \ n = if n `mod` 3 == 0 then n `mod` 3 else if n `mod` 5 == 0 then n `mod` 5 else\
    \ if n `mod` 7 == 0 then n `mod` 7 else n\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work for `fizz_buzz 10`, which should return `1`.\n<|/ c |>\n<| c\
    \ |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = if n `mod` 3 == 0 then n `mod` 3\
    \ else if n `mod` 5 == 0 then n `mod` 5 else if n `mod` 7 == 0 then n `mod` 7\
    \ else n\n</code>\n<|/ a tags=fizzbuzz,haskell,recursion |>\n<| a dscore=1 |>\n\
    <code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = if n `mod` 3 == 0 then n `mod` 3\
    \ else if n `mod` 5 == 0 then n `mod` 5 else if n `mod` 7 == 0 then n `mod` 7\
    \ else n\n</code>\n<|/ a tags=fizzbuzz,haskell,recursion |>\n<| c |>\nThis doesn't\
    \ work for `fizz_buzz 10`, which should return `1`.\n<|/ c |>\n<| a |>\n<code>\n\
    fizzbuzz :: Int -> Int\nfizzbuzz n = if n `mod` 3 == 0 then n `mod` 3 else if\
    \ n `mod` 5 == 0 then n `mod` 5 else if n `mod` 7 == 0 \nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9rkxnlw8.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9rkxnlw8.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0 else if n==1 then return 1 else if n==2 then return\
    \ 2 else if n%3==0 then return fizz_buzz(n/3) else return fizz_buzz(n/3)+1\nend\n\
    </code>\n<|/ a tags=fizzbuzz,julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphgiv1h46.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphgiv1h46.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return 1\n    end\nend\n</cell>\n<code language=julia-1.1>\nfizz_buzz(50)\n\
    </cell>\n<code language=julia-1.1>\nfizz_buzz(78)\n</cell>\n<code language=julia-1.1>\n\
    fizz_buzz(79)\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of times the digit 7 appears in integers less than n which are divisible by\
    \ 11 or 13. Test your function with n = 50 and n = 78.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa4xq7cjx.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa4xq7cjx.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        return\
    \ fizz_buzz(n/11)+1\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu214ku64.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu214ku64.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else return 1\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprefv9yjk.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprefv9yjk.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpla5fffww.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpla5fffww.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n==1 \n        1\n    else if n==2 \n\
    \        2\n    else if n%3==0 \n        fizz_buzz(n/3)\n    else if n%5==0 \n\
    \        fizz_buzz(n/5)\n    else if n%7==0 \n        fizz_buzz(n/7)\n    else\
    \ \n        fizz_buzz(n*3+2)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprojktggz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprojktggz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0 else if n==1 then return 1 else if n==2 then return\
    \ 2 else if n%3==0 then return fizz_buzz(n/3)+1 else return fizz_buzz(n/3)+2\n\
    end\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<| a dscore=2 |>\nI came up with a\
    \ solution using recursion and a while loop:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6tni4ftc.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6tni4ftc.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then 2 else fizz_buzz(n-1)\n\
    end\n</cell>\n<text>\nExercise 9\nWrite a function that returns the number of\
    \ times the digit 7 appears in integers less than n which are divisible by 11\
    \ or 13.\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1itopaa0.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1itopaa0.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        then\
    \ return 1\n    fizz_buzz(n - 1)\n</code>\n<|/ a tags=fizzbuzz,haskell,recursion\
    \ |>\n<| a tags=fizzbuzz,haskell,recursion |>\n<code>\nfizzbuzz :: Int -> String\n\
    fizzbuzz n = if n==0 then \"FizzBuzz\" else if n==1 then \"Fizz\" else if n==2\
    \ then \"Buzz\" else if n==3 then \"FizzBuzz\" else if n==4 then \"Buzz\" else\
    \ if n==5 then \"Fizz\" else if n==6 then \"Buzz\" else if n==7 then \"FizzBuzz\"\
    \ else if n==8 then \"Buzz\" else if n==9 then \"Fizz\" else if n==10 then \"\
    Buzz\" else if n==11 then \"FizzBuzz\" else if n==12 then \"Buzz\" else if n==13\
    \ then \"FizzBuzz\" else if n==14 then \"Buzz\" else if n==15 then \"FizzBuzz\"\
    \ else if n==16 then \"Buzz\" else if n==17 then \"FizzBuzz\" else if n==18 then\
    \ \"Buzz\" else if n==19 then \"FizzBuzz\" else if n==20 then \"Buzz\" else if\
    \ n==21 then \"FizzBuzz\" else if n==22 then \"Buzz\" else if n==23 then \"FizzBuzz\"\
    \ else if n==24 then \"Buzz\" else if n==25 then \"FizzBuzz\" else if n==26 then\
    \ \"Buzz\" else if n==27 then \"FizzBuzz\" else if n==28 then \"Buzz\" else if\
    \ n==29 then \"FizzBuzz\" else if n==30 then \"Buzz\" else if n==31 then \"FizzBuzz\"\
    \ else if n==32 then \"Buzz\" else if n==33 then \"FizzBuzz\" else if n==34 then\
    \ \"Buzz\" else if n==35 then \"FizzBuzz\" else if n==36 then \"Buzz\" else if\
    \ n==37 then \"FizzBuzz\" else if n==38 then \"Buzz\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt231rpzk.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt231rpzk.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        then\
    \ return 1\n    end\nend\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<| c |>\nThis\
    \ doesn't answer the question, which is about how to write this in Julia.\n<|/\
    \ c |>\n<| c |>\nI added a Julia version of the code to the answer\n<|/ c |>\n\
    <| a tags=fizzbuzz,julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4sjwa3zk.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4sjwa3zk.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else return 1\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsr2yr66a.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsr2yr66a.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0 \n\
    \        then return 1\n    else if n%13==0 \n        then return 2\n    else\
    \ return 3\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbs10ai_5.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbs10ai_5.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        return\
    \ fizz_buzz(n/11) + fizz_buzz(n/13)\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsa644fmd.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsa644fmd.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return fizz_buzz(n/11) + fizz_buzz(n/13)\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp89gtonim.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp89gtonim.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        then\
    \ return 1\n    fizz_buzz(n+1)\n</code>\n<|/ a tags=fizzbuzz,haskell |>\n<| c\
    \ |>\nThe `fizz_buzz` function should return `0` when `n` is `0`.\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I've fixed it.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nfizz_buzz :: Int -> Int\nfizz_buzz n\n    | n < 0     = error \"\
    Negative number\"\n    | n == 0    = 0\n    | otherwise = fizz_buzz (n-1) + buzz\
    \ (n-1)\n    where\n        buzz :: Int -> Int\n        buzz n\n            |\
    \ n < 0     = error \"Negative number\"\n            | n == 0    = 0\n       \
    \     | otherwise = buzz (n-1) + fizz (n-1)\n        fizz :: Int -> Int\n    \
    \    fizz n\n            | n < 0     = error \"Negative number\"\n           \
    \ | n == 0    = 0\n            | otherwise = fizz (n-1) + fizz (n-1)\n</code>\n\
    <|/ a tags=fizzbuzz,haskell |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ c |>\nThis code doesn't work. `fizzbuzz` should return `0` when `n` is `0`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed it.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = if n < 0 then 0\
    \ else if n == 0 then 0 else fizzbuzz (n-1) + buzzbuzz (n-1)\n    where buzzbuzz\
    \ n = if n < 0 then 0 else if n == 0 then 0 else buzzbuzz (n-1) + fizzbuzz (n-1)\n\
    </code>\n<|/ a tags=fizzbuzz,haskell |>\n<| c |>\nPlease don't post only code\
    \ as an answer, but \nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjg6f7scy.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjg6f7scy.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0 \n\
    \        then return 1\n    else if n%13==0 \n        then return 2\n    else\
    \ \n        then return 3\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0l0ymqao.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0l0ymqao.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 || n%13==0 \n        then return 0\n    else \n        fizz_buzz(n/11)\n\
    \        fizz_buzz(n/13)\nend\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph0mim_nq.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmph0mim_nq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     if n % 11 == 1 \n            then return 1\n        else if n % 13 == 1\
    \ \n            then return 2\n        else return 3\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=fizzbuzz,julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6qhd96be.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6qhd96be.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n==1 \n        1\n    else if n==2 \n\
    \        2\n    else if n%3==0 \n        fizz_buzz(n/3)\n    else if n%5==0 \n\
    \        fizz_buzz(n/5)\n    else if n%7==0 \n        fizz_buzz(n/7)\n    else\
    \ \n        fizz_buzz(n/11)\nend\n</cell>\n<code language=julia-1.0>\n@time fizz_buzz(50)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13.\
    \ \nFor example, fizz_buzz(78) should return 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6rfgblpy.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6rfgblpy.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        then\
    \ return 1\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpohcknf6w.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpohcknf6w.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return 1\n    fizz_buzz(n - 1)\n</code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,haskell,recursion\
    \ |>\n<code>\nfizzbuzz :: Int -> String\nfizzbuzz n = if n `mod` 3 == 0 then \"\
    Fizz\" else if n `mod` 5 == 0 then \"Buzz\" else if n `mod` 7 == 0 then \"FizzBuzz\"\
    \ else show n\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code\
    \ as an answer, but also provide an explanation of what your code does and how\
    \ it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. Once you have\
    \ sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you\
    \ will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26546135)\n<|/ c |>\n<| c |>\nThis\
    \ does provide an answer to the question. Although it does require a little more\
    \ explanation than a code dump.\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. Once you have\
    \ sufficient [reputation](https://stackoverflow.com/help/whats-reputation) you\
    \ will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/21417\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3qmfrwdn.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3qmfrwdn.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else fizz_buzz(n-1)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 3 or 5.\n    >>> fizz_buzz(50)\n\
    \    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmkvdorvb.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmkvdorvb.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else fizz_buzz(n-1)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n\
    0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n>>> fizz_buzz(100)\n0\n>>> fizz_buzz(101)\n\
    1\n>>> fizz_buzz(102)\n2\n>>> fizz_buzz(103)\n3\n>>> fizz_buzz(104)\n4\n>>> fizz_buzz(105)\n\
    5\n>>> fizz_buzz(106)\n6\n>>> fizz_buzz(107)\n7\n>>> fizz_buzz(108)\n8\n>>> fizz_buzz(109)\n\
    9\n>>> fizz_buzz(110)\n10\n>>> fizz_buzz(111)\n11\n>>> fizz_buzz(112)\n12\n>>>\
    \ fizz_buzz(113)\n13\n>>> fizz_buzz(114)\n14\n>>> fizz_buzz(115)\n15\n>>> fizz_buzz(116)\n\
    16\n>>> fizz_buzz(117)\n17\n>>> fizz_buzz(118)\n18\n>>> fizz_buzz(119)\n19\n>>>\
    \ fizz_buzz(120)\n20\n>>> fizz_buzz(121)\n21\n>>> fizz_buzz(122)\n22\n>>> fizz_buzz(123)\n\
    23\n>>> fizz_buzz(124)\n24\n>>> fizz_buzz(125)\n25\n>>> fizz_buzz(126)\n26\n>>>\
    \ fizz_buzz(127)\n27\n>>> fizz_buzz(128)\n28\n>>> fizz_buzz(129)\n29\n>>> fizz_buzz(130)\n\
    30\n>>> fizz_buzz(131)\n31\n>>> fizz_buzz(132)\n32\n>>> fizz_buzz(133)\n33\n>>>\
    \ fizz_buzz(134)\n34\n>>> fizz_bu\nusing Test\n\n@testset begin\n\ncandidate =\
    \ fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7j85id68.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7j85id68.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n==1 then 1 else fizz_buzz(n-1) + fizz_buzz(n-2)\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwi581yu1.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwi581yu1.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     fizz_buzz(n / 11)\n        fizz_buzz(n / 13)\n        fizz_buzz(n / 17)\n\
    \        fizz_buzz(n / 19)\n        fizz_buzz(n / 23)\n        fizz_buzz(n / 29)\n\
    \        fizz_buzz(n / 31)\n        fizz_buzz(n / 37)\n        fizz_buzz(n / 43)\n\
    \        fizz_buzz(n / 49)\n        fizz_buzz(n / 51)\n        fizz_buzz(n / 59)\n\
    \        fizz_buzz(n / 61)\n        fizz_buzz(n / 67)\n        fizz_buzz(n / 73)\n\
    \        fizz_buzz(n / 79)\n        fizz_buzz(n / 81)\n        fizz_buzz(n / 87)\n\
    \        fizz_buzz(n / 93)\n        fizz_buzz(n / 99)\n        fizz_buzz(n / 101)\n\
    \        fizz_buzz(n / 107)\n        fizz_buzz(n / 113)\n        fizz_buzz(n /\
    \ 127)\n        fizz_buzz(n / 131)\n        fizz_buzz(n / 137)\n        fizz_buzz(n\
    \ / 143)\n        fizz_buzz(n / 149)\n        fizz_buzz(n / 151)\n        fizz_buzz(n\
    \ / 157)\n        fizz_buzz(n / 163)\n        fizz_buzz(n / 169)\n        fizz_buzz(n\
    \ / 171)\n        fizz_buzz(n / 177)\n        fizz_buzz(n / 183)\n        fizz_buzz(n\
    \ / 189)\n        fizz_buzz(n / 191)\n        fizz_buzz(n / 197)\n        fizz_buzz(n\
    \ / 203)\n        fizz_buzz(n / 209)\n        fizz_buzz(n / 211)\n        fizz_buzz\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp96zwsicc.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp96zwsicc.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else fizz_buzz(n-1)\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=fizzbuzz,julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv6fzrewt.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv6fzrewt.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    elseif n==1\n        1\n    elseif n==2\n    \
    \    2\n    elseif n%3==0\n        3\n    elseif n%3==1\n        4\n    elseif\
    \ n%3==2\n        5\n    elseif n%3%3==0\n        6\n    elseif n%3%3==1\n   \
    \     7\n    elseif n%3%3==2\n        8\n    elseif n%3%3%3==0\n        9\n  \
    \  elseif n%3%3%3==1\n        10\n    elseif n%3%3%3==2\n        11\n    elseif\
    \ n%3%3%3%3==0\n        12\n    elseif n%3%3%3%3==1\n        13\n    elseif n%3%3%3%3==2\n\
    \        14\n    elseif n%3%3%3%3==3\n        15\n    elseif n%3%3%3%3==4\n  \
    \      16\n    elseif n%3%3%3%3==5\n        17\n    elseif n%3%3%3%3==6\n    \
    \    18\n    elseif n%3%3%3%3==7\n        19\n    elseif n%3%3%3%3==8\n      \
    \  20\n    elseif n%3%3%3%3==9\n        21\n    elseif n%3%3%3%3==10\n       \
    \ 22\n    elseif n%3%3%3%3==11\n        23\n    elseif n%3%3%3%3==12\n       \
    \ 24\n    elseif n%3%3%3%3==13\n        25\n    elseif n%3%3%3%3==14\n       \
    \ 26\n    elseif n%3%3%3%3==15\n        27\n    elseif n%3%3%3%3==16\n       \
    \ 28\n    elseif n%3%3%3%3==17\n        29\n    elseif n%3%3%3%3==18\n       \
    \ 30\n    elseif n%3%3%3%3==19\n        31\n    elseif n%3%3%3%3==20\n       \
    \ 32\n    elseif n%3%3%3%3==21\n        33\n    elseif n%3%3%3%3==22\n       \
    \ 34\n    elseif n%3%3%3%3==23\n        35\n    elseif n%3%3%3%3==24\n       \
    \ 36\n    elseif n%3%3%3%3==25\n        37\n    elseif n%3%3%3%3==26\n       \
    \ 38\n    elseif n%3%3%3%3==27\n        39\n    elseif n%3%3%3%3==28\n       \
    \ 40\n    elseif n%3%3%3%3==29\n        \nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkym4muk4.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkym4muk4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0 \n\
    \        then return 1\n    else if n%13==0 \n        then return 2\n    else\
    \ return 3\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjfxe6o99.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjfxe6o99.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 || n%13==0\n        then return 0\n    else if n%11==0\n  \
    \      then return 1\n    else if n%13==0\n        then return 2\n    else return\
    \ 3\nend\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<| a tags=fizzbuzz,julia |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsnvdclgz.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsnvdclgz.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return 1 + fizz_buzz(n / 11)\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,haskell\
    \ |>\n<code>\nfizzbuzz :: Int -> String\nfizzbuzz n = if n `mod` 3 == 0 then \"\
    Fizz\" else if n `mod` 5 == 0 then \"Buzz\" else if n `mod` 7 == 0 then \"FizzBuzz\"\
    \ else show n\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfizzbuzz\
    \ :: Int -> String\nfizzbuzz n = if n `mod` 3 == 0 then \"Fizz\" else if n `mod`\
    \ 5 == 0 then \"Buzz\" else if n `mod` 7 == 0 then \"FizzBuzz\" else show n\n\
    </code>\n<|/ a tags=fizzbuzz,haskell |>\n<| a tags=fizzbuzz,haskell |>\n<code>\n\
    fizzbuzz :: Int -> String\nfizzbuzz n = if n `mod` 3 == 0 then \"Fizz\" else if\
    \ n `mod` 5 == 0 then \"Buzz\" else if n `mod` 7 == 0 then \"FizzBuzz\" else show\
    \ n\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,haskell |>\n<code>\nfizzbuzz\
    \ :: Int -> String\nfizzbuzz n = if n `mod` 3 == 0 then \"Fizz\" else if n `mod`\
    \ 5 == 0 then \"Buzz\" else if n `mod` 7 == 0 then \"FizzBuzz\" else show n\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,haskell |>\n<code>\nfizzbuzz ::\
    \ Int -> String\nfizzbuzz n = if n `mod` 3 == 0 then \"Fizz\" else if n `mod`\
    \ 5 == 0 then \"Buzz\" else if n `mod` 7 == 0 then \"FizzBuzz\" else show n\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it \nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmqwq1pom.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmqwq1pom.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return fizz_buzz(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6f8f6cv7.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6f8f6cv7.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return 1 + fizz_buzz(n / 11)\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    def fizz_buzz(number):\n    \n    if number % 11 == 0 and number % 13 == 0:\n\
    \        return 'FizzBuzz'\n    elif number % 11 == 0:\n        return 'Fizz'\n\
    \    elif number % 13 == 0:\n        return 'Buzz'\n    else:\n        return\
    \ str(number)\n</code>\n<|/ a tags=fizzbuzz,haskell |>\n<| c |>\nPlease don't\
    \ post only code as answer, but also provide an explanation what your code does\
    \ and how it solves the problem of the question. Answers with an explanation are\
    \ usually more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| c |>\nWhile this code may provide a solution to the question, it's\
    \ better to add context as to why/how it works. This can help future users learn\
    \ and eventually apply that knowledge to their own code. You are also likely to\
    \ have positive feedback from users in the form of upvotes, when the code is explained.\n\
    <|/ c |>\n<| a tags=fizzbuzz,haskell |>\n<code>\nfizz_buzz :: Int -> String\n\
    fizz_buzz n = if n `mod` 11 == 0 then \"FizzBuzz\" else if n `mod` 13 == 0 then\
    \ \"Fizz\" else if n `mod` 3 == 0 then \"Buzz\" else show n\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=fizzbuzz,haskell |>\n<code>\nfizzbuzz :: Int -> String\nfizzbuzz\
    \ n = if n `mod` 11 == 0 then \"FizzBuzz\" else if n `mod` 13 == 0 then \"Fizz\"\
    \ else if n `mod` 3 == 0 then \"Buzz\" else show n\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nfizzbuzz :: Int -> String\nfizzbuzz n = if n `mod` 11\
    \ == 0 then \"FizzBuzz\" else if n `mod` 13 == 0 then \"Fizz\" else if n `mod`\
    \ 3 == 0 then \"Buzz\" else show n\n</code>\n<|/ a tags=fizz\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7kyaz3rj.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7kyaz3rj.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return 1\n</code>\n<|/ a |>\n\
    <| a tags=fizzbuzz,haskell,fizzbuzz-buzz |>\nThe simplest solution is to use recursion:\n\
    <code>\nfizzbuzz :: Int -> String\nfizzbuzz n = if n==0 then \"FizzBuzz\" else\
    \ if n==1 then \"Fizz\" else if n==2 then \"Buzz\" else if n==3 then \"Fizz\"\
    \ else if n==4 then \"Buzz\" else if n==5 then \"Fizz\" else if n==6 then \"Buzz\"\
    \ else if n==7 then \"Fizz\" else if n==8 then \"Buzz\" else if n==9 then \"Fizz\"\
    \ else if n==10 then \"Buzz\" else if n==11 then \"Fizz\" else if n==12 then \"\
    Buzz\" else if n==13 then \"FizzBuzz\"\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    This solution is very inefficient. Using `if` statements makes it O(n^2) instead\
    \ of O(n).\n<|/ c |>\n<| c |>\n: I agree, but I wanted to show a solution that\
    \ is simple to understand.\n<|/ c |>\n<| a tags=fizzbuzz,haskell,fizzbuzz-buzz\
    \ |>\nHere's a solution that uses recursion and pattern matching:\n<code>\nfizzbuzz\
    \ :: Int -> String\nfizzbuzz n = case n of\n  0 -> \"FizzBuzz\"\n  1 -> \"Fizz\"\
    \n  2 -> \"Buzz\"\n  3 -> \"Fizz\"\n  4 -> \"Buzz\"\n  5 -> \"Fizz\"\n  6 -> \"\
    Buzz\"\n  7 -> \"Fizz\"\n  8 -> \"Buzz\"\n  9 -> \"Fizz\"\n  10 -> \"Buzz\"\n\
    \  11 -> \"Fizz\"\n  12 -> \"Buzz\"\n  13 -> \"FizzBuzz\"\n  n -> \"FizzBuzz\"\
    \n</code>\n<|/ a dscore=3 |>\n<| a tags=fizzbuzz,haskell,fizzbuzz-buzz |>\n<code>\n\
    fizzbuzz :: Int -> \nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t\
    @test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplc0ofgli.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplc0ofgli.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n==1 \n        1\n    else if n==2 \n\
    \        2\n    else if n%3==0 \n        fizz_buzz(n/3)\n    else if n%5==0 \n\
    \        fizz_buzz(n/5)\n    else if n%7==0 \n        fizz_buzz(n/7)\n    else\
    \ \n        fizz_buzz(n/11)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbtwxlb9n.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbtwxlb9n.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n%11==0 \n        1\n    else if n%13==0\
    \ \n        2\n    else \n        3\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp50cxqkww.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp50cxqkww.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return 1\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=fizzbuzz,haskell |>\n<code>\nfizzbuzz :: Int -> String\nfizzbuzz\
    \ n = if n==0 then \"FizzBuzz\" else if n==1 then \"Fizz\" else if n==2 then \"\
    Buzz\" else if n%3==0 then \"Fizz\" else if n%3==1 then \"Buzz\" else if n%3==2\
    \ then \"FizzBuzz\" else if n%3==3 then \"FizzBuzz\" else if n%3==4 then \"FizzBuzz\"\
    \ else if n%3==5 then \"FizzBuzz\" else if n%3==6 then \"FizzBuzz\" else if n%3==7\
    \ then \"FizzBuzz\" else if n%3==8 then \"FizzBuzz\" else if n%3==9 then \"FizzBuzz\"\
    \ else if n%3==10 then \"FizzBuzz\" else if n%3==11 then \"FizzBuzz\" else if\
    \ n%3==12 then \"FizzBuzz\" else if n%3==13 then \"FizzBuzz\" else if n%3==14\
    \ then \"FizzBuzz\" else if n%3==15 then \"FizzBuzz\" else if n%3==16 then \"\
    FizzBuzz\" else if n%3==17 then \"FizzBuzz\" else if n%3==18 then \"FizzBuzz\"\
    \ else if n%3==19 then \"FizzBuzz\" else if n%3==20 then \"FizzBuzz\" else if\
    \ n%3==21 then \"FizzBuzz\" else if n%3==22 then \"FizzBuzz\" else if n%3==23\
    \ then \"FizzBuzz\" else if n%3==24 then \"FizzBuzz\" else if n%3==25 then \"\
    FizzBuzz\" else if n%3==26 then \"FizzBuzz\" else if n%3==27 then \"FizzBuzz\"\
    \ else if n%3==28 then \"FizzBuzz\" else if n%3==29 then \"FizzBuzz\" else if\
    \ n%3==30 then \"FizzBuzz\" else if n%3==31 then \"FizzBuzz\" else if n%3==32\
    \ then \"F\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwnphizfr.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwnphizfr.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis answer does\
    \ not answer the question at all. Also, the question was about how to write this\
    \ in Haskell, not how to write it in Python.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, my answer was more of a general approach to solving this problem and I\
    \ thought it would be helpful to others who came across this question. I've edited\
    \ my answer to include a Haskell solution as well.\n<|/ c |>\n<| a |>\n<code>\n\
    fizzbuzz :: Int -> Int\nfizzbuzz n = if n==0 then 0 else if n==1 then 1 else if\
    \ n==2 then 2 else if n==3 then 3 else if n==4 then 4 else if n==5 then 5 else\
    \ if n==6 then 6 else if n==7 then 7 else if n==8 then 8 else if n==9 then 9 else\
    \ if n==10 then 10 else if n==11 then 11 else if n==12 then 12 else if n==13 then\
    \ 13 else if n==14 then 14 else if n==15 then 15 else if n==16 then 16 else if\
    \ n==17 then 17 else if n==18 then 18 else if n==19 then 19 else if n==20 then\
    \ 20 else if n==21 then 21 else if n==22 then 22 else if n==23 then 23 else if\
    \ n==24 then 24 else if n==25 then 25 else if n==26 then 26 else if n==27 then\
    \ 27 else if n==28 then 28 else if n==29 then 29 else if n==30 then 30 else if\
    \ n==31 then 31 else if n==32 then 32 else if n==33 then 33 else if n==34 then\
    \ 34 else if n==35 then 35 else if n==36 then 36 else if n==37 then 37 else if\
    \ n==38 then 38 else if n==39 then 39 else if n==40 then 40 else if n==41 then\
    \ 41 else if n==42 then 42 else if n==43 then 43 else if n==44 then 44 else if\
    \ n==45 then 45 else if n==46 then 46 else if n==47 then \nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8smqs209.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8smqs209.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n%11==0\n        1\n    else if n%13==0\n\
    \        2\n    else \n        fizz_buzz(n-1)\nend\n</code>\n<|/ a tags=fizzbuzz,julia,recursion\
    \ |>\n<| c |>\nThanks for your answer! I understand your code, but I still don't\
    \ understand why my code doesn't work. Could you please explain why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nYour code doesn't work because you never return anything\
    \ from your recursive calls. You also don't need to call `fizz_buzz` recursively,\
    \ you can just use a loop.\n<|/ c |>\n<| c |>\nI understand that my code doesn't\
    \ work, but I don't understand why my code doesn't work. Could you please explain\
    \ why my code doesn't work?\n<|/ c |>\n<| c |>\nThe reason your code doesn't work\
    \ is because you never return anything from your recursive calls. You also don't\
    \ need to call `fizz_buzz` recursively, you can just use a loop.\n<|/ c |>\n<|\
    \ c |>\nI understand that my code doesn't work, but I don't understand why my\
    \ code doesn't work. Could you please explain why my code doesn't work?\n<|/ c\
    \ |>\n<| a tags=fizzbuzz,julia,recursion |>\nThe reason your code doesn't work\
    \ is because you never return anything from your recursive calls. You also don't\
    \ need to call fizz_buzz recursively, you can just use a loop.\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ismfxhf.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ismfxhf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n==2 then return\
    \ 2\n    if n%3==0 then return 3\n    if n%3==1 then return 3\n    if n%3==2 then\
    \ return 3\n    if n%3==3 then return 3\n    if n%3==4 then return 3\n    if n%3==5\
    \ then return 3\n    if n%3==6 then return 3\n    if n%3==7 then return 3\n  \
    \  if n%3==8 then return 3\n    if n%3==9 then return 3\n    if n%3==10 then return\
    \ 3\n    if n%3==11 then return 3\n    if n%3==12 then return 3\n    if n%3==13\
    \ then return 3\n    if n%3==14 then return 3\n    if n%3==15 then return 3\n\
    \    if n%3==16 then return 3\n    if n%3==17 then return 3\n    if n%3==18 then\
    \ return 3\n    if n%3==19 then return 3\n    if n%3==20 then return 3\n    if\
    \ n%3==21 then return 3\n    if n%3==22 then return 3\n    if n%3==23 then return\
    \ 3\n    if n%3==24 then return 3\n    if n%3==25 then return 3\n    if n%3==26\
    \ then return 3\n    if n%3==27 then return 3\n    if n%3==28 then return 3\n\
    \    if n%3==29 then return 3\n    if n%3==30 then return 3\n    if n%3==31 then\
    \ return 3\n    if n%3==32 then return 3\n    if n%3==33 then return 3\n    if\
    \ n%3==34 then return 3\n    if n%3==35 then return 3\n    if n%3==36 then return\
    \ 3\n    if n%3==37 then return 3\n    if n%3==38 then return 3\n    if n%3==39\
    \ then return 3\n    if n%3==40 then return 3\n    if n%3==41 then return 3\n\
    \    if n%3==42 then return 3\n    if n%3==43 then return 3\n    if n%3==44 then\
    \ return 3\n    if n%3==45 then return 3\n    if n%3==46 then return 3\n    if\
    \ n%3==47 then return 3\n    if n%3==48 then return 3\n    if n%3==49 then return\
    \ 3\n    if n%3==50 then return 3\n    if n%3==51 then return 3\n    if n%3==52\
    \ then return 3\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc1pso87w.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpc1pso87w.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return 1 + fizz_buzz(n / 11)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpluyy8yya.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpluyy8yya.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return 1\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=fizzbuzz,haskell |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz\
    \ n = if n%11==0 || n%13==0 then 0 else 1\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = if n%11==0 || n%13==0 then\
    \ 0 else 1\n</code>\n<|/ a tags=fizzbuzz,haskell |>\n<| c |>\nPlease don't post\
    \ only code as an answer, but also provide an explanation of what your code does\
    \ and how it solves the problem of the question. Answers with an explanation are\
    \ usually more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| a tags=fizzbuzz,haskell |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz\
    \ n = if n%11==0 || n%13==0 then 0 else 1\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Please don't post only code as an answer, but also provide an explanation of what\
    \ your code does and how it solves the problem of the question. Answers with an\
    \ explanation are usually more helpful and of better quality, and are more likely\
    \ to attract upvotes.\n<|/ c |>\n<| a tags=fizzbuzz,haskell |>\n<code>\nfizzbuzz\
    \ :: Int -> Int\nfizzbuzz n = if n%11==0 || n%13==0 then 0 else 1\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=fizzbuzz,haskell |>\n<code>\nfizzbuzz :: Int -> Int\n\
    fizzbuzz n = if n%11==0 || n%13==0 then 0 else 1\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=fizzbuzz,haskell |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = if\
    \ n%11==0 || n%13==0 then 0 else 1\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nfizzbuzz \nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpup8r7cxb.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpup8r7cxb.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0 \n\
    \        then return 1\n    else if n%13==0 \n        then return 2\n    else\
    \ return 3\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 and 13. \n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n\
    3\n>>> fizz_buzz(81)\n0\n>>> fizz_buzz(82)\n1\n>>> fizz_buzz(83)\n2\n>>> fizz_buzz(84)\n\
    3\n>>> fizz_buzz(85)\n0\n>>> fizz_buzz(86)\n1\n>>> fizz_buzz(87)\n2\n>>> fizz_buzz(88)\n\
    3\n>>> fizz_buzz(89)\n0\n>>> fizz_buzz(90)\n1\n>>> fizz_buzz(91)\n2\n>>> fizz_buzz(92)\n\
    3\n>>> fizz_buzz(93)\n0\n>>> fizz_buzz(94)\n1\n>>> fizz_buzz(95)\n2\n>>> fizz_buzz(96)\n\
    3\n>>> fizz_buzz(97)\n0\n>>> fizz_buzz(98)\n1\n>>> fizz_buzz(99)\n2\n>>> fizz_buzz(100)\n\
    3\n>>> fizz_buzz(101)\n0\n>>> fizz_buzz(102)\n1\n>>> fizz_buzz(103)\n2\n>>> fizz_buzz(104)\n\
    3\n>>> fizz_buzz(105)\n0\n>>> fizz_buzz(106)\n1\n>>> fizz_buzz(107)\n2\n>>> fizz_buzz(108)\n\
    3\n>>> fizz_buzz(109)\n0\n>>> fizz_buzz(110)\n1\n>>> fizz_buzz(111)\n2\n>>> fizz_buzz(112)\n\
    3\n>>> fizz_buzz(113)\n0\n\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd9sl04yb.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd9sl04yb.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0 \n\
    \        then return 1\n    else if n%13==0 \n        then return 2\n    else\
    \ return 3\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,julia,if-statement\
    \ |>\nI like to use this kind of approach:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw1pjx0uz.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw1pjx0uz.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return 1\n    fizz_buzz(n - 1)\n</code>\n<|/ a tags=fizzbuzz,haskell\
    \ |>\n<| a dscore=0 |>\n<code>\nfizzbuzz :: Int -> String\nfizzbuzz n = if n `mod`\
    \ 3 == 0 then \"Fizz\" else if n `mod` 5 == 0 then \"Buzz\" else if n `mod` 7\
    \ == 0 then \"FizzBuzz\" else if n `mod` 11 == 0 then \"FizzBuzz\" else if n `mod`\
    \ 13 == 0 then \"FizzBuzz\" else if n `mod` 17 == 0 then \"FizzBuzz\" else if\
    \ n `mod` 19 == 0 then \"FizzBuzz\" else if n `mod` 23 == 0 then \"FizzBuzz\"\
    \ else if n `mod` 29 == 0 then \"FizzBuzz\" else if n `mod` 31 == 0 then \"FizzBuzz\"\
    \ else if n `mod` 37 == 0 then \"FizzBuzz\" else if n `mod` 41 == 0 then \"FizzBuzz\"\
    \ else if n `mod` 43 == 0 then \"FizzBuzz\" else if n `mod` 47 == 0 then \"FizzBuzz\"\
    \ else if n `mod` 53 == 0 then \"FizzBuzz\" else if n `mod` 59 == 0 then \"FizzBuzz\"\
    \ else if n `mod` 61 == 0 then \"FizzBuzz\" else if n `mod` 67 == 0 then \"FizzBuzz\"\
    \ else if n `mod` 71 == 0 then \"FizzBuzz\" else if n `mod` 73 == 0 then \"FizzBuzz\"\
    \ else if n `mod` 79 == 0 then \"FizzBuzz\" else if n `mod` 83 == 0 then \"FizzBuzz\"\
    \ else if n `mod` 89 == 0 then \"FizzBuzz\" else if n `mod` 97 == 0 then \"FizzBuzz\"\
    \ else if n `mod` 101 == 0 then \"FizzBuzz\" else if n `mod` 107 == 0 then \"\
    FizzBuzz\" else if n `mod` 113 == 0 then \"FizzBuzz\" else if n `mod` 119 == 0\
    \ then \"\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj0p97n2h.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj0p97n2h.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n==2 then return\
    \ 2\n    if n%3==0 then return 3\n    if n%3==1 then return 4\n    if n%3==2 then\
    \ return 5\n    if n%3==3 then return 6\n    if n%3==4 then return 7\n    if n%3==5\
    \ then return 8\n    if n%3==6 then return 9\n    if n%3==7 then return 10\n \
    \   if n%3==8 then return 11\n    if n%3==9 then return 12\n    if n%3==10 then\
    \ return 13\n    if n%3==11 then return 14\n    if n%3==12 then return 15\n  \
    \  if n%3==13 then return 16\n    if n%3==14 then return 17\n    if n%3==15 then\
    \ return 18\n    if n%3==16 then return 19\n    if n%3==17 then return 20\n  \
    \  if n%3==18 then return 21\n    if n%3==19 then return 22\n    if n%3==20 then\
    \ return 23\n    if n%3==21 then return 24\n    if n%3==22 then return 25\n  \
    \  if n%3==23 then return 26\n    if n%3==24 then return 27\n    if n%3==25 then\
    \ return 28\n    if n%3==26 then return 29\n    if n%3==27 then return 30\n  \
    \  if n%3==28 then return 31\n    if n%3==29 then return 32\n    if n%3==30 then\
    \ return 33\n    if n%3==31 then return 34\n    if n%3==32 then return 35\n  \
    \  if n%3==33 then return 36\n    if n%3==34 then return 37\n    if n%3==35 then\
    \ return 38\n    if n%3==36 then return 39\n    if n%3==37 then return 40\n  \
    \  if n%3==38 then return 41\n    if n%3==39 then return 42\n    if n%3==40 then\
    \ return 43\n    if n%3==41 then return 44\n    if n%3==42 then return 45\n  \
    \  if n%3==43 then return 46\n    if n%3==44 then return 47\n    if n%3==45 then\
    \ return 48\n    if n%3==46 then return 49\n    if n%3==47 then return 50\n  \
    \  if n%3==48 then return 51\n    if n%3==49 then return 52\n    if n%3==50 then\
    \ return 53\n    if n%3==51 then return 54\n    if n%3==52 then return 55\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpo8nhrim3.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpo8nhrim3.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0 else if n==1 then return 1 else if n==2 then return\
    \ 2 else if n%3==0 then return fizz_buzz(n/3) else return fizz_buzz(n/3)+1\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphdcedl3q.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphdcedl3q.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%11==0 then return 1\n    if n%13==0 then\
    \ return 2\n    return fizz_buzz(n/11)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplkqi4wyc.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplkqi4wyc.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 || n%13==0 \n        then return 0\n    else if n%11==1\n \
    \       then return 1\n    else if n%13==1\n        then return 2\n    else return\
    \ 3\nend\n</code>\n<|/ a tags=fizzbuzz,julia |>\n<| a tags=fizzbuzz,julia |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgj7bmz5e.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgj7bmz5e.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0\n \
    \       then return 1\n    else if n%13==0\n        then return 2\n    else return\
    \ 3\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplwjcrklo.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplwjcrklo.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        then\
    \ return 1\n    fizz_buzz(n / 10)\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyyn1rxvc.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyyn1rxvc.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return fizz_buzz(n / 11) + fizz_buzz(n / 13)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fizz_buzz(50)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 or 13 and which are also divisible by 3 or 5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2majh2ef.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2majh2ef.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question, which is about how to write this in Julia.\n<|/ c |>\n\
    <| c |>\nThe question was about how to write this in Julia. Your answer doesn't\
    \ answer the question, which is about how to write this in Julia.\n<|/ c |>\n\
    <| c |>\nThe question was about how to write this in Julia. Your answer doesn't\
    \ answer the question, which is about how to write this in Julia.\n<|/ c |>\n\
    <| c |>\nThe question was about how to write this in Julia. Your answer doesn't\
    \ answer the question, which is about how to write this in Julia.\n<|/ c |>\n\
    <| c |>\nThe question was about how to write this in Julia. Your answer doesn't\
    \ answer the question, which is about how to write this in Julia.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmdojjt16.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmdojjt16.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else \n        return 3\n</code>\n<|/ a dscore=0 |>\n<| a tags=fizzbuzz,haskell,recursion\
    \ |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = fizzbuzz' 0 n\n    where fizzbuzz'\
    \ i n = if n `mod` 3 == 0 then i else fizzbuzz' (i+1) (n-1)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=fizzbuzz,haskell,recursion |>\n<code>\nfizzbuzz :: Int -> Int\n\
    fizzbuzz n = fizzbuzz' 0 n\n    where fizzbuzz' i n = if n `mod` 3 == 0 then i\
    \ else fizzbuzz' (i+1) (n-1)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add\
    \ some explanation to your answer\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfizzbuzz\
    \ :: Int -> Int\nfizzbuzz n = fizzbuzz' 0 n\n    where fizzbuzz' i n = if n `mod`\
    \ 3 == 0 then i else fizzbuzz' (i+1) (n-1)\n</code>\n<|/ a tags=fizzbuzz,haskell,recursion\
    \ |>\n<| c |>\nPlease add some explanation to your answer\n<|/ c |>\n<| a tags=fizzbuzz,haskell,recursion\
    \ |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = fizzbuzz' 0 n\n    where fizzbuzz'\
    \ i n = if n `mod` 3 == 0 then i else fizzbuzz' (i+1) (n-1)\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease add some explanation to your answer\n<|/ c |>\n<| a tags=fizzbuzz,haskell,recursion\
    \ |>\n<code>\nfizzbuzz :: Int -> Int\nfizzbuzz n = fizzbuzz' 0 n\n    where fizzbuzz'\
    \ i n = if n `mod` 3 == 0 then i else fizzbuzz' (i+1) (n-1)\n</code>\n<|/ a dscore=0\
    \ \nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpds2ackzx.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpds2ackzx.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     then return 1\n    fizz_buzz(n - 1)\n</code>\n<|/ a tags=fizzbuzz,haskell,fizzbuzz-buzz\
    \ |>\n<| c |>\nThis doesn't work. `fizz_buzz` returns `Int64` but `fizz_buzz`\
    \ itself is `IO Int64`.\n<|/ c |>\n<| c |>\nI fixed the return type. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| c |>\nThis still doesn't work. `fizz_buzz`\
    \ returns `IO Int64` but `fizz_buzz` itself is `IO Int64`.\n<|/ c |>\n<| c |>\n\
    I fixed the return type. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI fixed\
    \ the return type. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nfizz_buzz :: Int -> IO ()\nfizz_buzz n = do\n    putStrLn $ show n\n \
    \   putStrLn $ show $ fizzbuzz n\n    where fizzbuzz n = if n `mod` 11 == 0 then\
    \ \"FizzBuzz\" else if n `mod` 13 == 0 then \"Fizz\" else if n `mod` 15 == 0 then\
    \ \"Buzz\" else \"FizzBuzz\"\n</code>\n<|/ a tags=fizzbuzz,haskell,fizzbuzz-buzz\
    \ |>\n<| c |>\nThis doesn't work. `fizz_buzz` returns `IO ()` and you call `putStrLn`\
    \ on it.\n<|/ c |>\n<| c |>\nI fixed the return type. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfizz_buzz :: Int -> IO ()\nfizz_buzz\
    \ n = do\n    putStrLn $ show n\n    putStrLn $ show $ fizzbuzz n\n    where fizzbuzz\
    \ n = if n `mod` 11 == 0 then \"FizzBuzz\" else if n `mod` 13 == 0 then \"Fizz\"\
    \ else if n `mod` 15 == 0 then \"Buzz\" else \"F\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp01j08kmv.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp01j08kmv.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        fizz_buzz(n/11)\n\
    \        fizz_buzz(n/13)\n    end\nend\n</code>\n<|/ a tags=fizzbuzz,julia |>\n\
    <| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd110bq2v.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd110bq2v.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\n</code>\n<|/ a tags=fizzbuzz,haskell,fizzbuzz-buzz,fizz\
    \ |>\n<| a dscore=0 |>\nI wrote this in Haskell and it works fine:\n<code>\nfizzbuzz\
    \ :: Int -> String\nfizzbuzz n = if n==0 then \"FizzBuzz\" else if n==1 then \"\
    Fizz\" else if n==2 then \"Buzz\" else if n==3 then \"FizzBuzz\" else if n==4\
    \ then \"Buzz\" else if n==5 then \"Fizz\" else if n==6 then \"Buzz\" else if\
    \ n==7 then \"FizzBuzz\" else if n==8 then \"Buzz\" else if n==9 then \"Fizz\"\
    \ else if n==10 then \"Buzz\" else if n==11 then \"FizzBuzz\" else if n==12 then\
    \ \"Buzz\" else if n==13 then \"FizzBuzz\" else if n==14 then \"Buzz\" else if\
    \ n==15 then \"FizzBuzz\" else if n==16 then \"Buzz\" else if n==17 then \"FizzBuzz\"\
    \ else if n==18 then \"Buzz\" else if n==19 then \"FizzBuzz\" else if n==20 then\
    \ \"Buzz\" else if n==21 then \"FizzBuzz\" else if n==22 then \"Buzz\" else if\
    \ n==23 then \"FizzBuzz\" else if n==24 then \"Buzz\" else if n==25 then \"FizzBuzz\"\
    \ else if n==26 then \"Buzz\" else if n==27 then \"FizzBuzz\" else if n==28 then\
    \ \"Buzz\" else if n==29 then \"FizzBuzz\" else if n==30 then \"Buzz\" else if\
    \ n==31 then \"FizzBuzz\" else if n==32 then \"Buzz\" else if n==33 then \"FizzBuzz\"\
    \ else if n==34 then \"Buzz\" else if n==35 then \"FizzBuzz\" else if n==36 then\
    \ \"Buzz\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps22h319h.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps22h319h.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx_vqgfn7.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx_vqgfn7.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpww1h7xfk.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpww1h7xfk.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n%11==0\n        1\n    else if n%13==0\n\
    \        2\n    else \n        fizz_buzz(n/11)\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the number of times the digit 7 appears in\
    \ integers less than n which are divisible by 11 or 13. \nFor example, fizz_buzz(50)\
    \ should return 0, fizz_buzz(78) should return 2, and fizz_buzz(79) should return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1bxtgqva.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1bxtgqva.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else fizz_buzz(n-1)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 and 13. For example, fizz_buzz(50)\
    \ should return 0, fizz_buzz(78) should return 2, and fizz_buzz(79) should return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj8a1az5h.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj8a1az5h.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return fizz_buzz(n - 1) \nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants to know how many times `7` appears in\
    \ `1..n` that are divisible by `11` or `13`.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've edited my answer to reflect this.\n<|/ c |>\n<| c |>\nThis still\
    \ doesn't answer the question. OP wants to know how many times `7` appears in\
    \ `1..n` that are divisible by `11` or `13`.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've edited my answer to reflect this.\n<|/ c |>\n<| a |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpajntp6zy.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpajntp6zy.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else return 1\nend\n\
    </cell>\n<text>\nExercise 3: Write a function that returns the number of times\
    \ the digit 7 appears in integers less than n which are divisible by 11 or 13\
    \ and are multiples of 3 or 5.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n\
    \    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp18xp8lbt.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp18xp8lbt.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n==2 then return\
    \ 2\n    if n%3==0 then return 3\n    if n%3==1 then return 4\n    if n%3==2 then\
    \ return 5\n    if n%3==3 then return 6\n    if n%3==4 then return 7\n    if n%3==5\
    \ then return 8\n    if n%3==6 then return 9\n    if n%3==7 then return 10\n \
    \   if n%3==8 then return 11\n    if n%3==9 then return 12\n    if n%3==10 then\
    \ return 13\n    if n%3==11 then return 14\n    if n%3==12 then return 15\n  \
    \  if n%3==13 then return 16\n    if n%3==14 then return 17\n    if n%3==15 then\
    \ return 18\n    if n%3==16 then return 19\n    if n%3==17 then return 20\n  \
    \  if n%3==18 then return 21\n    if n%3==19 then return 22\n    if n%3==20 then\
    \ return 23\n    if n%3==21 then return 24\n    if n%3==22 then return 25\n  \
    \  if n%3==23 then return 26\n    if n%3==24 then return 27\n    if n%3==25 then\
    \ return 28\n    if n%3==26 then return 29\n    if n%3==27 then return 30\n  \
    \  if n%3==28 then return 31\n    if n%3==29 then return 32\n    if n%3==30 then\
    \ return 33\n    if n%3==31 then return 34\n    if n%3==32 then return 35\n  \
    \  if n%3==33 then return 36\n    if n%3==34 then return 37\n    if n%3==35 then\
    \ return 38\n    if n%3==36 then return 39\n    if n%3==37 then return 40\n  \
    \  if n%3==38 then return 41\n    if n%3==39 then return 42\n    if n%3==40 then\
    \ return 43\n    if n%3==41 then return 44\n    if n%3==42 then return 45\n  \
    \  if n%3==43 then return 46\n    if n%3==44 then return 47\n    if n%3==45 then\
    \ return 48\n    if n%3==46 then return 49\n    if n%3==47 then return 50\n  \
    \  if n%3==48 then return 51\n    if n%3==49 then return 52\n    if n%3==50 then\
    \ return 53\n    if n%3==51 then return 54\n    if n%3==52 then return 55\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpahfvq913.jl:10\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpahfvq913.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    elseif n==1\n        1\n    elseif n==2\n    \
    \    2\n    elseif n%3==0\n        fizz_buzz(n/3)\n    elseif n%5==0\n       \
    \ fizz_buzz(n/5)\n    elseif n%7==0\n        fizz_buzz(n/7)\n    else\n      \
    \  fizz_buzz(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprw4qk93j.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprw4qk93j.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer.\
    \ Could you please explain how this works?\n<|/ c |>\n<| c |>\nThis code uses\
    \ pattern matching to determine which number should be returned based on the value\
    \ of `n`.  In your original code, you were returning `0` if the number was divisible\
    \ by `11`, but you were also returning `1` if the number was divisible by `13`.\
    \  I changed my code so that it only returns `0` if the number was divisible by\
    \ `11`, otherwise it returns `1`.  I then changed my code so that it only returns\
    \ `2` if the number was divisible by `13`, otherwise it returns `3`.  I then changed\
    \ my code so that it only returns `3` if the number was divisible by `11` and\
    \ `13`, otherwise it returns `0`.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ Could you please explain how this works?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer.\n<|/ c |>\n<| c |>\nThanks for your explanation. Could you please\
    \ explain how this works?\n<|/ c |>\n<| a tags=fizzbuzz,julia,if-statement |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkhwnnlw9.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkhwnnlw9.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        then\
    \ return 1\n    fizz_buzz(n div 11)\n    fizz_buzz(n div 13)\nend\n</code>\n<|/\
    \ a tags=fizzbuzz,julia |>\n<| c |>\nThis does not answer the question. OP wants\
    \ to know how to use recursion to solve this problem.\n<|/ c |>\n<| c |>\nI added\
    \ a recursive solution to the answer\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I appreciate it. I was able to solve it using recursion and your solution. I'm\
    \ going to post my solution below.\n<|/ c |>\n<| a dscore=1 |>\nI solved it using\
    \ recursion and your solution. I'm posting my solution below. \n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\
    \t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_0g9jzr8.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_0g9jzr8.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        if n%11==0\n            1\n    \
    \    else\n            if n%13==0\n                2\n            else\n     \
    \           3\n        end\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that returns the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 3 or 5.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj12fv7b_.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj12fv7b_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0 else return 1\n    else\
    \ return fizz_buzz(n/11)\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfgz6h4x8.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfgz6h4x8.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n==1 \n        1\n    else if n==2 \n\
    \        2\n    else if n%3==0 \n        fizz_buzz(n/3)\n    else if n%5==0 \n\
    \        fizz_buzz(n/5)\n    else if n%7==0 \n        fizz_buzz(n/7)\n    else\
    \ \n        fizz_buzz(n/11)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprq4uzmb8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprq4uzmb8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0 else return 1\n    else\
    \ return fizz_buzz(n/11) + fizz_buzz(n/13)\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7wdn3_dy.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7wdn3_dy.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then return 0 else return fizz_buzz(n/11)+fizz_buzz(n/13)\n\
    </code>\n<|/ a |>\n<| a tags=fizzbuzz,haskell,fizzbuzz-buzz |>\n<code>\nfizzbuzz\
    \ :: Int -> String\nfizzbuzz n = if n==0 then \"FizzBuzz\" else if n==1 then \"\
    Fizz\" else if n==2 then \"Buzz\" else if n==3 then \"FizzBuzz\" else if n==4\
    \ then \"Fizz\" else if n==5 then \"Buzz\" else if n==6 then \"FizzBuzz\" else\
    \ if n==7 then \"Fizz\" else if n==8 then \"Buzz\" else if n==9 then \"FizzBuzz\"\
    \ else if n==10 then \"Fizz\" else if n==11 then \"Buzz\" else if n==12 then \"\
    FizzBuzz\" else if n==13 then \"Fizz\" else if n==14 then \"Buzz\" else if n==15\
    \ then \"FizzBuzz\" else if n==16 then \"Fizz\" else if n==17 then \"Buzz\" else\
    \ if n==18 then \"FizzBuzz\" else if n==19 then \"Fizz\" else if n==20 then \"\
    Buzz\" else if n==21 then \"FizzBuzz\" else if n==22 then \"Fizz\" else if n==23\
    \ then \"Buzz\" else if n==24 then \"FizzBuzz\" else if n==25 then \"Fizz\" else\
    \ if n==26 then \"Buzz\" else if n==27 then \"FizzBuzz\" else if n==28 then \"\
    Fizz\" else if n==29 then \"Buzz\" else if n==30 then \"FizzBuzz\" else if n==31\
    \ then \"Fizz\" else if n==32 then \"Buzz\" else if n==33 then \"FizzBuzz\" else\
    \ if n==34 then \"Fizz\" else if n==35 then \"Buzz\" else if n==36 then \"FizzBuzz\"\
    \ else if n==37 then \"Fizz\" else if n==38 then \"Buzz\" else if n==39 then \"\
    FizzBuzz\" else if \nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t\
    @test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpibr1rxtr.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpibr1rxtr.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n==1 then 1 else fizz_buzz(n-1) + fizz_buzz(n-2)\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa_z0u76l.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa_z0u76l.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else fizz_buzz(n-1)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 3 or 5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpopy0yr_d.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpopy0yr_d.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return fizz_buzz(n / 11) + fizz_buzz(n / 13)\nend\n</code>\n<|/ a tags=fizzbuzz,julia\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\
    \t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvvl1zyii.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvvl1zyii.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpws3a4_0k.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpws3a4_0k.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        return\
    \ fizz_buzz(n/11) + fizz_buzz(n/13)\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxg66zghe.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxg66zghe.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 || n%13==0 \n        then return 0\n    else \n        then\
    \ return 1\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of times the digit 7 appears in integers less than n which are divisible\
    \ by 11 and 13. For example, fizz_buzz(78) should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppk_wy_gd.jl:11\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppk_wy_gd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     return 1 + fizz_buzz(n / 11)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=fizzbuzz,julia\
    \ |>\nI wrote a package called FizzBuzz.jl that does this for you:\n<code>\nusing\
    \ FizzBuzz\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkrg7b16h.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkrg7b16h.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else \n        then\
    \ return 1\n    fizz_buzz(n - 1)\n</code>\n<|/ a tags=fizzbuzz,haskell |>\n<|\
    \ a dscore=0 |>\n<code>\nfizzbuzz :: Int -> String\nfizzbuzz n = if n==0 then\
    \ \"FizzBuzz\" else if n==1 then \"Fizz\" else if n==2 then \"Buzz\" else if n==3\
    \ then \"Fizz\" else if n==4 then \"Buzz\" else if n==5 then \"FizzBuzz\" else\
    \ if n==6 then \"Fizz\" else if n==7 then \"Buzz\" else if n==8 then \"Fizz\"\
    \ else if n==9 then \"Buzz\" else if n==10 then \"FizzBuzz\" else if n==11 then\
    \ \"Fizz\" else if n==12 then \"Buzz\" else if n==13 then \"Fizz\" else if n==14\
    \ then \"Buzz\" else if n==15 then \"FizzBuzz\" else if n==16 then \"Fizz\" else\
    \ if n==17 then \"Buzz\" else if n==18 then \"Fizz\" else if n==19 then \"Buzz\"\
    \ else if n==20 then \"FizzBuzz\" else if n==21 then \"Fizz\" else if n==22 then\
    \ \"Buzz\" else if n==23 then \"Fizz\" else if n==24 then \"Buzz\" else if n==25\
    \ then \"FizzBuzz\" else if n==26 then \"Fizz\" else if n==27 then \"Buzz\" else\
    \ if n==28 then \"Fizz\" else if n==29 then \"Buzz\" else if n==30 then \"FizzBuzz\"\
    \ else if n==31 then \"Fizz\" else if n==32 then \"Buzz\" else if n==33 then \"\
    Fizz\" else if n==34 then \"Buzz\" else if n==35 then \"FizzBuzz\" else if n==36\
    \ then \"Fizz\" else if n==37 then \"Buzz\" else if n==38 then \"Fizz\" else if\
    \ n==39 then \"Buzz\" else if n==40 then \"FizzBuzz\" else if n==4\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoapot5iz.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoapot5iz.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 then 0 else fizz_buzz(n-1)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 3 or 5.\n    >>> fizz_buzz(50)\n\
    \    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplf9_yy7l.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplf9_yy7l.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n%11==0 or n%13==0 \n        then return 0\n    else if n%11==0 \n\
    \        then return 1\n    else if n%13==0 \n        then return 2\n    else\
    \ return 3\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) ==\
    \ 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplzz264yv.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplzz264yv.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else if n %\
    \ 11 == 1 \n        then return 1\n    else if n % 13 == 1 \n        then return\
    \ 2\n    else return 3\nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ but I believe it would be more efficient to just use `if n % 11 == 0 or n %\
    \ 13 == 0` instead of `if n % 11 == 1 || n % 13 == 1`\n<|/ c |>\n<| c |>\nI agree,\
    \ that would be more efficient. Thanks for the suggestion.\n<|/ c |>\n<| a tags=fizzbuzz,julia\
    \ |>\nHere's a solution using Julia's built-in functions:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78)\
    \ == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200)\
    \ == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000) == 639)\n\t\
    @test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpga05t1n4.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpga05t1n4.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else if n==1\n        1\n    else if n==2\n  \
    \      2\n    else if n%3==0\n        fizz_buzz(n/3)\n    else\n        fizz_buzz(n/3)+1\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjs7ksgor.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjs7ksgor.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n % 11 == 0 or n % 13 == 0 \n        then return 0\n    else \n   \
    \     if n % 11 == 1 \n            then return 1\n        else if n % 13 == 1\
    \ \n            then return 2\n        else \n            if n % 11 == 2 \n  \
    \              then return 3\n            else if n % 13 == 2 \n             \
    \   then return 4\n            else \n                if n % 11 == 3 \n      \
    \              then return 5\n                else if n % 13 == 3 \n         \
    \           then return 6\n                else \n                    if n % 11\
    \ == 4 \n                        then return 7\n                    else if n\
    \ % 13 == 4 \n                        then return 8\n                    else\
    \ \n                        if n % 11 == 5 \n                            then\
    \ return 9\n                        else if n % 13 == 5 \n                   \
    \         then return 10\n                        else \n                    \
    \        if n % 11 == 6 \n                                then return 11\n   \
    \                         else if n % 13 == 6 \n                             \
    \   then return 12\n                            else \n                      \
    \          if n % 11 == 7 \n                                    then return 13\n\
    \                                else if n % 13 == 7 \n                      \
    \              then return 14\n                                else \n       \
    \                             if n % 11 == 8 \n                              \
    \          then return 15\n                                    else if n % 13\
    \ == 8 \n                                        then return 16\n            \
    \                        else \n                                        if n %\
    \ 11 == 9 \n                                            then return 17\n     \
    \                                   else if n % 13 == 9 \n                   \
    \                         then return 18\n                                   \
    \     else \n                                            if n % 11 == 10 \n  \
    \                                              then return 19\n              \
    \                              else if n % 13 == 10 \n                       \
    \                         then return 20\n                                   \
    \         else \n                                                if n % 11 ==\
    \ 11 \n                                                    then return 21\n  \
    \                                              else if n % 13 == 11 \n       \
    \                                             then return 22\n               \
    \                                 else \n                                    \
    \                if n % 11 == 12 \n                                          \
    \              then return 23\n                                              \
    \      else if n % 13 == 12 \n                                               \
    \         then return 24\n                                                   \
    \ else \n                                                        if n % 11 ==\
    \ 13 \n                                                            then return\
    \ 25\n                                                        else if n % 13 ==\
    \ 13 \n                                                            then return\
    \ 26\n                                                        else \n        \
    \                                                    if n % 11 == 14 \n      \
    \                                                          then return 27\n  \
    \                                                          else if n % 13 == 14\
    \ \n                                                                then return\
    \ 28\n                                                            else \n    \
    \                                                            if n % 11 == 15 \n\
    \                                                                    then return\
    \ 29\n                                                                else if\
    \ n % 13 == 15 \n                                                            \
    \        then return 30\n                                                    \
    \            else \n                                                         \
    \           if n % 11 == 16 \n                                               \
    \                         then return 31\n                                   \
    \                                 else if n % 13 == 16 \n                    \
    \                                                    then return 32\n        \
    \                                                            else \n         \
    \                                                               if n % 11 == 17\
    \ \n                                                                         \
    \   then return 33\n                                                         \
    \               else if n % 13 == 17 \n                                      \
    \                                      then return 34\n                      \
    \                                                  else \n                   \
    \                                                         if n % 11 == 18 \n \
    \                                                                            \
    \   then return 35\n                                                         \
    \                   else if n % 13 == 18 \n                                  \
    \                                              then return 36\n              \
    \                                                              else \n       \
    \                                                                         if n\
    \ % 11 == 19 \n\nusing Test\n\n@testset begin\n\ncandidate = fizz_buzz;\n\t@test(candidate(50)\
    \ == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79) == 3)\n\t@test(candidate(100)\
    \ == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000) == 192)\n\t@test(candidate(10000)\
    \ == 639)\n\t@test(candidate(100000) == 8026)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"n\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd_p8ed57.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd_p8ed57.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return the number of times the digit 7 appears in integers less\
    \ than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>>\
    \ fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\nfunction fizz_buzz(n::Int64)::Int64\
    \ \n    if n==0 then 0 else if n%11==0 then 1 else if n%13==0 then 2 else fizz_buzz(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fizz_buzz;\n\t@test(candidate(50) == 0)\n\t@test(candidate(78) == 2)\n\t@test(candidate(79)\
    \ == 3)\n\t@test(candidate(100) == 3)\n\t@test(candidate(200) == 6)\n\t@test(candidate(4000)\
    \ == 192)\n\t@test(candidate(10000) == 639)\n\t@test(candidate(100000) == 8026)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"0\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptsru2i0w.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptsru2i0w.jl:10\n"
  exit_code: 1
  status: Exception
