name: HumanEval_41_car_race_collision
language: julia
prompt: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n\
  \    n cars are driving left to right;  simultaneously, a different set of n cars\n\
  \    are driving right to left.   The two sets of cars start out being very far\
  \ from\n    each other.  All cars move in the same speed.  Two cars are said to\
  \ collide\n    when a car that's moving left to right hits a car that's moving right\
  \ to left.\n    However, the cars are infinitely sturdy and strong; as a result,\
  \ they continue moving\n    in their trajectory as if they did not collide.\n\n\
  \    This function outputs the number of such collisions.\n    \"\"\"\nfunction\
  \ car_race_collision(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
  \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
  \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
completions: ["    \"\"\"\n    Imagine a road that's a perfectly straight infinitely\
    \ long line.\n    n cars are driving left to right;  simultaneously, a different\
    \ set of n cars\n    are driving right to left.   The two sets of cars start out\
    \ being very far from\n    each other.  All cars move in the same speed.  Two\
    \ cars are said to collide\n    when a car that's moving left to right hits a\
    \ car that's moving right to left.\n    However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    in their trajectory as if\
    \ they did not collide.", "    collide = 0\n    for i = 1:n\n        for j = i+1:n\n\
    \            if car_race_collision_test(i,j)\n                collide = collide\
    \ + 1\n            end\n        end\n    end\n    return collide\nend\n\"\"\"\n\
    \    car_race_collision_test(i,j)\n    returns true if the cars i and j collide\n\
    \"\"\"", "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n       \
    \     if car_collision(i, j) == true\n                collisions += 1\n      \
    \      end\n        end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i, j) == true\n         \
    \       collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n\
    \        for j = 1:n\n            if i != j && car_collision(i, j)\n         \
    \       collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n          \
    \  if car_collision(i, j) == true\n                collisions += 1\n         \
    \   end\n        end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>",
  "    collisions = 0\n    for i = 1:n\n        for j = 1:n\n            if i != j\n\
    \                if abs(car_speed(i, j)) < car_speed(i, j+1)\n               \
    \     collisions += 1\n                end\n            end\n        end\n   \
    \ end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i, j) == true\n         \
    \       collisions = collisions + 1\n            end\n        end\n    end\n \
    \   return collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collide::Int64 = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i, j)\n                collide\
    \ += 1\n            end\n        end\n    end\n    return collide\nend\n</cell>\n\
    <code language=julia-1.1>", "    \"\"\"\n    Imagine a road that's a perfectly\
    \ straight infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.", "    collisions = 0\n    for i = 1:n\n       \
    \ for j = i+1:n\n            if car_collision(i, j)\n                collisions\
    \ += 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) \n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.0>", "    collide\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collide = collide + 1\n            end\n       \
    \ end\n    end\n    return collide\nend\n</cell>\n<code language=julia-1.5>",
  "    collide = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,j)\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) \n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the number of cars\
    \ that collide with each other in a race.  (The function should take two integer\
    \ arguments: the number of cars in the first race and the number of cars in the\
    \ second race.)", "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n\
    \            if car_collision(j, i)\n                collisions += 1\n       \
    \     end\n        end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.4>",
  "    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n\
    \    n cars are driving left to right;  simultaneously, a different set of n cars\n\
    \    are driving right to left.   The two sets of cars start out being very far\
    \ from\n    each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n    when a car that's moving left to right hits a car that's moving\
    \ right to left.\n    However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n    in their trajectory as if they did not collide.",
  "    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n\
    \    n cars are driving left to right;  simultaneously, a different set of n cars\n\
    \    are driving right to left.   The two sets of cars start out being very far\
    \ from\n    each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n    when a car that's moving left to right hits a car that's moving\
    \ right to left.\n    However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n    in their trajectory as if they did not collide.",
  "    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n\
    \    n cars are driving left to right;  simultaneously, a different set of n cars\n\
    \    are driving right to left.   The two sets of cars start out being very far\
    \ from\n    each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n    when a car that's moving left to right hits a car that's moving\
    \ right to left.\n    However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n    in their trajectory as if they did not collide.",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ == true\n                collisions = collisions + 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n\"\"\"\n    car_race_collision_check(i,j)\
    \ checks to see if the cars at indices i and j collide.\n    car_race_collision_check(i,j)\
    \ returns true if the cars at indices i and j collide.\n    car_race_collision_check(i,j)\
    \ returns false if the cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if cars at indices i and j do not collide.\n    car_", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i, j)\n                collisions\
    \ += 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \   collisions = 0\n    for i = 1:n\n        for j = 1:n\n            if i !=\
    \ j\n                if abs(car_position(i, 1) - car_position(j, 1)) < car_speed\n\
    \                    collisions += 1\n                end\n            end\n \
    \       end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>",
  "    collides = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collides += 1\n            end\n        end\n  \
    \  end\n    return collides\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j)\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.0>", "    collide\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j)\n                collide += 1\n            end\n        end\n    end\n  \
    \  return collide\nend\n</cell>\n<code language=julia-1.5>", "    collisions =\
    \ 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    \"\
    \"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n \
    \   n cars are driving left to right;  simultaneously, a different set of n cars\n\
    \    are driving right to left.   The two sets of cars start out being very far\
    \ from\n    each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n    when a car that's moving left to right hits a car that's moving\
    \ right to left.\n    However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n    in their trajectory as if they did not collide.",
  "    collisions = 0\n    for i = 1:n\n        for j = 1:n\n            if i != j\n\
    \                if abs(car_distance(i,j)) < car_distance(i,j+1)\n           \
    \         collisions += 1\n                end\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.0>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i)\
    \ && car_collision(j)\n                collisions += 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.1>", "    collides = 0\n  \
    \  for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n  \
    \              collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.5>", "    collisions = 0\n  \
    \  for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n  \
    \              collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions = 0\n\
    \    for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) ==\
    \ true\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend", "    collide = 0\n    for i = 1:n\n        for j\
    \ = i+1:n\n            if car_collision(i) && car_collision(j)\n             \
    \   collide += 1\n            end\n        end\n    end\n    return collide\n\
    end", "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n          \
    \  if car_collision(i) && car_collision(j)\n                collisions += 1\n\
    \            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>\ncar_race_collision(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that computes the number of collisions given any two cars.",
  "    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n\
    \    n cars are driving left to right;  simultaneously, a different set of n cars\n\
    \    are driving right to left.   The two sets of cars start out being very far\
    \ from\n    each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n    when a car that's moving left to right hits a car that's moving\
    \ right to left.\n    However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n    in their trajectory as if they did not collide.",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collides = 0\n    for i = 1:n\n  \
    \      for j = i+1:n\n            if car_collision(i) && car_collision(j)\n  \
    \              collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.0>", "    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.3>", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_race_collision_helper(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n\
    \            if car_collision(i, j)\n                collisions += 1\n       \
    \     end\n        end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\n\
    car_race_collision(10)\n</cell>\n<text>\nExercise\nWrite a function that computes\
    \ the number of collisions given any two cars.", "    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions = 0\n\
    \    for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) ==\
    \ true\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i, j) == true\n         \
    \       collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>", "    collides = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i, j)\n                collides\
    \ += 1\n            end\n        end\n    end\n    return collides\nend\n</cell>\n\
    <code language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n        for\
    \ j = 1:n\n            if i != j && car_collision(i - 1, j) && car_collision(i,\
    \ j - 1)\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.3>", " \
    \   collide::Int64 = 0\n    for i = 1:n\n        for j = i+1:n\n            if\
    \ car_collision(i, j) == true\n                collide += 1\n            end\n\
    \        end\n    end\n    return collide\nend\n</cell>\n<code language=julia-1.4>",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i)\
    \ && car_collision(j)\n                collisions += 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>",
  "    collides = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collides += 1\n            end\n        end\n  \
    \  end\n    return collides\nend\n</cell>\n<code language=julia-1.4>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.1>", " \
    \   \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n\
    \    n cars are driving left to right;  simultaneously, a different set of n cars\n\
    \    are driving right to left.   The two sets of cars start out being very far\
    \ from\n    each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n    when a car that's moving left to right hits a car that's moving\
    \ right to left.\n    However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n    in their trajectory as if they did not collide.",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions = collisions + 1\n            end\n \
    \       end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.0>",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>", "    collisions = 0\n\
    \    for i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>", "    \"\"\"\n    Imagine\
    \ a road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n   \
    \     for j = i+1:n\n            if car_race_collision_helper(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    \"\"\"\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.", "    collisions = 0\n    for i = 1:n\n       \
    \ for j = i+1:n\n            if car_collision(i) && car_collision(j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>", "    \"\"\"\n    Imagine a road that's\
    \ a perfectly straight infinitely long line.\n    n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n    are driving right to left. \
    \  The two sets of cars start out being very far from\n    each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n    when a car that's\
    \ moving left to right hits a car that's moving right to left.\n    However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n \
    \   in their trajectory as if they did not collide.", "    collisions = 0\n  \
    \  for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n  \
    \              collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the number of cars\
    \ colliding with each other in a race car race.  You will need to use car_race_collision\
    \ to do this.", "    collide = 0\n    for i = 1:n\n        for j = i+1:n\n   \
    \         if car_collision(i, j) == true\n                collide = collide +\
    \ 1\n            end\n        end\n    end\n    return collide\nend\n</cell>\n\
    <code language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n        for\
    \ j = i+1:n\n            if car_collision(i, j) \n                collisions +=\
    \ 1\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n        for\
    \ j = i+1:n\n            if car_collision(i - 1, j - 1) || car_collision(i, j\
    \ - 1)\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the number of cars\
    \ that collide with each other in a race.  Then use that function to calculate\
    \ the number of cars that collide with each other in a race with $n$ cars.", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions = collisions + 1\n            end\n \
    \       end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>",
  "    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n\
    \    n cars are driving left to right;  simultaneously, a different set of n cars\n\
    \    are driving right to left.   The two sets of cars start out being very far\
    \ from\n    each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n    when a car that's moving left to right hits a car that's moving\
    \ right to left.\n    However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n    in their trajectory as if they did not collide.",
  "    collisions = 0\n    for i = 1:n\n        for j = 1:n\n            if i != j\n\
    \                if car_collision(i) == car_collision(j)\n                   \
    \ collisions += 1\n                end\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    collides\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,j)\
    \ \n                collides += 1\n            end\n        end\n    end\n   \
    \ return collides\nend\n</cell>\n<code language=julia-1.5>", "    collisions =\
    \ 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) \n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.0>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n\
    \        for j = 1:n\n            if i != j\n                if car_collision(i,\
    \ j) == true\n                    collisions += 1\n                end\n     \
    \       end\n        end\n    end\n    return collisions\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n        for j =\
    \ i+1:n\n            if car_collision(i) && car_collision(j)\n               \
    \ collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.0>", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i, j) \n                collisions\
    \ += 1\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.3>", "    collisions = 0\n    for i = 1:n\n        for\
    \ j = i+1:n\n            if car_race_collision_helper(i, j) == true\n        \
    \        collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    collisions = 0\n    for i = 1:n\n        for j = 1:n\n            if\
    \ i != j && car_collision(i, j)\n                collisions += 1\n           \
    \ end\n        end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\n\
    car_race_collision(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of cars that collide with each other in a race.  (The function should\
    \ take two arguments: the number of cars in the race and the number of cars in\
    \ the race after a collision.)", "    collisions = 0\n    for i = 1:n\n      \
    \  for j = i+1:n\n            if car_collision(i, j) \n                collisions\
    \ += 1\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n        for\
    \ j = i+1:n\n            if car_collision(i, j) == true\n                collisions\
    \ += 1\n            end\n        end\n    end\n    return collisions\nend", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_race_collision_test(i,j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n\
    \            if car_collision(i) && car_collision(j)\n                collisions\
    \ += 1\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n        for\
    \ j = i+1:n\n            if car_collision(i, j) \n                collisions +=\
    \ 1\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.3>\ncar_race_collision(10)\n</cell>\n<text>\nExercise:\
    \ Write a function car_collision that takes two cars as inputs and returns true\
    \ if the cars collide, false otherwise.", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i, j) == true\n         \
    \       collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_race_collision_helper(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n\
    \            if car_collision(i, j) \n                collisions += 1\n      \
    \      end\n        end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.3>",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i)\
    \ && car_collision(j)\n                collisions += 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.0>",
  "    collide = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collide += 1\n            end\n        end\n   \
    \ end\n    return collide\nend\n</cell>\n<code language=julia-1.5>", "    collides\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collides += 1\n            end\n        end\n  \
    \  end\n    return collides\nend", "    collisions = 0\n    for i = 1:n\n    \
    \    for j = i+1:n\n            if car_collision(i, j) \n                collisions\
    \ += 1\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.0>", "    collisions = 0\n    for i = 1:n\n        for\
    \ j = i+1:n\n            if car_collision(i, j)\n                collisions +=\
    \ 1\n            end\n        end\n    end\n    return collisions\nend", "   \
    \ collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(car_position(i),\
    \ car_position(j))\n                collisions += 1\n            end\n       \
    \ end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.4>",
  "    collisions = 0\n    for i = 1:n\n        for j = 1:n\n            if i != j\
    \ && car_collision(i, j) == true\n                collisions += 1\n          \
    \  end\n        end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions = collisions + 1\n            end\n \
    \       end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>",
  "    collide = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j)\n                collide += 1\n            end\n        end\n    end\n  \
    \  return collide\nend\n</cell>\n<code language=julia-1.5>", "    collisions =\
    \ 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\n</cell>\n<code language=julia-1.3>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that computes the number of cars that\
    \ collide with each other in a race.  Then use that function to find the smallest\
    \ number of cars that collide with each other in a race (that is, that minimizes\
    \ the number of cars that collide).", "    collisions = 0\n    for i = 1:n\n \
    \       for j = i+1:n\n            if car_race_collision_test(i,j) == true\n \
    \               collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    collisions = 0\n    for i = 1:n\n        for j = 1:n\n\
    \            if i != j\n                if abs(car_positions[i,1] - car_positions[j,1])\
    \ < car_speed\n                    collisions += 1\n                end\n    \
    \        end\n        end\n    end\n    return collisions\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n        for j =\
    \ i+1:n\n            if car_race_collision_helper(i, j) == true\n            \
    \    collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    collisions = 0\n    for i = 1:n\n        for j = 1:n\n            if\
    \ i != j\n                if abs(car_x_position(i) - car_x_position(j)) < car_width\
    \ + car_length\n                    collisions += 1\n                end\n   \
    \         end\n        end\n    end\n    return collisions\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    collides = 0\n    for i = 1:n\n        for j = i+1:n\n\
    \            if car_collision(i, j) \n                collides += 1\n        \
    \    end\n        end\n    end\n    return collides\nend\n</cell>\n<code language=julia-1.0>",
  "    collide = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collide = collide + 1\n            end\n       \
    \ end\n    end\n    return collide\nend\n</cell>\n<code language=julia-1.5>",
  "    collide = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collide = collide + 1\n            end\n       \
    \ end\n    end\n    return collide\nend\n</cell>\n<code language=julia-1.5>",
  "    collides = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) \n                collides += 1\n            end\n        end\n    end\n\
    \    return collides\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i)\
    \ && car_collision(j)\n                collisions += 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.3>\n\
    car_race_collision(10)\n</cell>\n<text>\nExercise: Write a function that determines\
    \ whether two cars collide with each other.", "    \"\"\"\n    Imagine a road\
    \ that's a perfectly straight infinitely long line.\n    n cars are driving left\
    \ to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.", "    \"\"\"\n\
    \    Imagine a road that's a perfectly straight infinitely long line.\n    n cars\
    \ are driving left to right;  simultaneously, a different set of n cars\n    are\
    \ driving right to left.   The two sets of cars start out being very far from\n\
    \    each other.  All cars move in the same speed.  Two cars are said to collide\n\
    \    when a car that's moving left to right hits a car that's moving right to\
    \ left.\n    However, the cars are infinitely sturdy and strong; as a result,\
    \ they continue moving\n    in their trajectory as if they did not collide.",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_race_collision_helper(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    collide = 0\n    for i = 1:n\n        for j = i+1:n\n\
    \            if car_collision(i, j) == true\n                collide = collide\
    \ + 1\n            end\n        end\n    end\n    return collide\nend\n</cell>\n\
    <code language=julia-1.0>", "    collides = 0\n    for i = 1:n\n        for j\
    \ = i+1:n\n            if car_race_collision_helper(i, j) == true\n          \
    \      collides += 1\n            end\n        end\n    end\n    return collides\n\
    end", "    collides = 0\n    for i = 1:n\n        for j = i+1:n\n            if\
    \ car_collision(i, j) == true\n                collides += 1\n            end\n\
    \        end\n    end\n    return collides\nend", "    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the number of cars\
    \ that collide with each other in a race.  Test it by calling it with the number\
    \ of cars in the simulation.", "    collisions = 0\n    for i = 1:n\n        for\
    \ j = i+1:n\n            if car_collision(j, i)\n                collisions +=\
    \ 1\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n     \
    \   for j = i+1:n\n            if car_collision(i, j)\n                collisions\
    \ += 1\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n        for\
    \ j = i+1:n\n            if car_race_collision_helper(i, j) == true\n        \
    \        collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.4>", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i, j) == true\n         \
    \       collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i, j) \n                collisions\
    \ += 1\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>", "    collide::Int64 = 0\n    for i = 1:n\n       \
    \ for j = 1:n\n            if i != j\n                if abs(car_x_position(i)\
    \ - car_x_position(j)) < car_width/2 \n                    collide = collide +\
    \ 1\n                end\n            end\n        end\n    end\n    return collide\n\
    end\n</cell>\n<code language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>", "    collide = 0\n   \
    \ for i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collide = collide + 1\n            end\n        end\n\
    \    end\n    return collide\nend", "    \"\"\"\n    Imagine a road that's a perfectly\
    \ straight infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.", "    collisions = 0\n    for i = 1:n\n       \
    \ for j = i+1:n\n            if car_race_collision_helper(i, j) == true\n    \
    \            collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n\
    \            if car_collision(i) && car_collision(j)\n                collisions\
    \ += 1\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>", "    collides = 0\n    for i = 1:n\n        for j\
    \ = i+1:n\n            if car_collision(i, j) \n                collides += 1\n\
    \            end\n        end\n    end\n    return collides\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n        for j =\
    \ 1:n\n            if i != j\n                if abs(car_position(i, j) - car_position(j,\
    \ i)) < car_speed\n                    collisions += 1\n                end\n\
    \            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>", "    collide = 0\n    for i = 1:n\n        for j =\
    \ i+1:n\n            if car_collision(i, j) == true\n                collide =\
    \ collide + 1\n            end\n        end\n    end\n    return collide\nend\n\
    </cell>\n<code language=julia-1.5>", "    collide = 0\n    for i = 1:n\n     \
    \   for j = i+1:n\n            if car_collision(i) && car_collision(j)\n     \
    \           collide = collide + 1\n            end\n        end\n    end\n   \
    \ return collide\nend\n</cell>\n<code language=julia-1.5>", "    collisions =\
    \ 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions = 0\n\
    \    for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>", "    collides = 0\n  \
    \  for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n  \
    \              collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.5>", "    collisions = 0\n  \
    \  for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n \
    \               collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the time it takes\
    \ to drive n cars through a race car collision.", "    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>", "    collide = 0\n   \
    \ for i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.0>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i)\
    \ && car_collision(j)\n                collisions += 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.3>",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) \n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that counts the number of cars colliding\
    \ with each other in a race.  (The function should take two arguments: the number\
    \ of cars in the race and the number of cars in the race that have already collided.)",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    \"\"\"\n    Imagine a road that's\
    \ a perfectly straight infinitely long line.\n    n cars are driving left to right;\
    \  simultaneously, a different set of n cars\n    are driving right to left. \
    \  The two sets of cars start out being very far from\n    each other.  All cars\
    \ move in the same speed.  Two cars are said to collide\n    when a car that's\
    \ moving left to right hits a car that's moving right to left.\n    However, the\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n \
    \   in their trajectory as if they did not collide.", "    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collide += 1\n            end\n        end\n   \
    \ end\n    return collide\nend", "    collisions = 0\n    for i = 1:n\n      \
    \  for j = i+1:n\n            if car_collision(@car_positions(i,:), @car_positions(j,:))\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend", "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n\
    \            if car_collision(@car_pos(i,j))\n                collisions += 1\n\
    \            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>\ncar_race_collision(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that outputs the number of cars that collide with each other\
    \ in a race.  (The function should take two arguments: the number of cars in the\
    \ race and the number of cars in the race that collide with each other.)", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i)\
    \ && car_collision(j)\n                collisions += 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.0>",
  "    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n\
    \    n cars are driving left to right;  simultaneously, a different set of n cars\n\
    \    are driving right to left.   The two sets of cars start out being very far\
    \ from\n    each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n    when a car that's moving left to right hits a car that's moving\
    \ right to left.\n    However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n    in their trajectory as if they did not collide.",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j)\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n\
    \    n cars are driving left to right;  simultaneously, a different set of n cars\n\
    \    are driving right to left.   The two sets of cars start out being very far\
    \ from\n    each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n    when a car that's moving left to right hits a car that's moving\
    \ right to left.\n    However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n    in their trajectory as if they did not collide.",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i)\
    \ && car_collision(j)\n                collisions += 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.3>\n\
    car_race_collision(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of cars that collide with each other.", "    \"\"\"\n    Imagine\
    \ a road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions = 0\n\
    \    for i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) ==\
    \ true\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.0>", "    \"\"\"\n\
    \    Imagine a road that's a perfectly straight infinitely long line.\n    n cars\
    \ are driving left to right;  simultaneously, a different set of n cars\n    are\
    \ driving right to left.   The two sets of cars start out being very far from\n\
    \    each other.  All cars move in the same speed.  Two cars are said to collide\n\
    \    when a car that's moving left to right hits a car that's moving right to\
    \ left.\n    However, the cars are infinitely sturdy and strong; as a result,\
    \ they continue moving\n    in their trajectory as if they did not collide.",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.3>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j)\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j)\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function car_collision that takes two cars\
    \ as inputs and returns true if the cars collide.  (The function should return\
    \ false if either of the cars is out of bounds.)", "    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end", "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n          \
    \  if car_collision(i) == car_collision(j)\n                collisions += 1\n\
    \            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.3>", "    collide = 0\n    for i = 1:n\n        for j =\
    \ 1:n\n            if i != j && car_collision(i, j)\n                collide =\
    \ collide + 1\n            end\n        end\n    end\n    return collide\nend",
  "    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n\
    \    n cars are driving left to right;  simultaneously, a different set of n cars\n\
    \    are driving right to left.   The two sets of cars start out being very far\
    \ from\n    each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n    when a car that's moving left to right hits a car that's moving\
    \ right to left.\n    However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n    in their trajectory as if they did not collide.",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.4>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) \n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n\
    \        for j = i+1:n\n            if car_collision(i, j) \n                collisions\
    \ += 1\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>", "    collisions = 0\n    for i = 1:n\n        for\
    \ j = i+1:n\n            if car_collision(i, j)\n                collisions +=\
    \ 1\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>\ncar_race_collision(10)\n</cell>\n<text>\nExercise\n\
    Write a function called car_race_collisions that takes in an array of n cars,\
    \ and outputs the number of cars that collide with each other.", "    \"\"\"\n\
    \    Imagine a road that's a perfectly straight infinitely long line.\n    n cars\
    \ are driving left to right;  simultaneously, a different set of n cars\n    are\
    \ driving right to left.   The two sets of cars start out being very far from\n\
    \    each other.  All cars move in the same speed.  Two cars are said to collide\n\
    \    when a car that's moving left to right hits a car that's moving right to\
    \ left.\n    However, the cars are infinitely sturdy and strong; as a result,\
    \ they continue moving\n    in their trajectory as if they did not collide.",
  "    collide = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j)\n                collide += 1\n            end\n        end\n    end\n  \
    \  return collide\nend\n</cell>\n<code language=julia-1.5>", "    collisions =\
    \ 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", " \
    \   collides = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i)\
    \ && car_collision(j)\n                collides += 1\n            end\n      \
    \  end\n    end\n    return collides\nend\n</cell>\n<code language=julia-1.3>",
  "    collisions = 0\n    for i = 1:n\n        for j = 1:n\n            if i != j\
    \ && car_collision(i, j)\n                collisions += 1\n            end\n \
    \       end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ then \n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    \"\"\"\n\
    \    Imagine a road that's a perfectly straight infinitely long line.\n    n cars\
    \ are driving left to right;  simultaneously, a different set of n cars\n    are\
    \ driving right to left.   The two sets of cars start out being very far from\n\
    \    each other.  All cars move in the same speed.  Two cars are said to collide\n\
    \    when a car that's moving left to right hits a car that's moving right to\
    \ left.\n    However, the cars are infinitely sturdy and strong; as a result,\
    \ they continue moving\n    in their trajectory as if they did not collide.",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ == true\n                collisions = collisions + 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n\"\"\"\n    car_race_collision_check(i,j)\
    \ returns true if the cars at indices i and j collide.\n    car_race_collision_check(i,j)\
    \ returns false if the cars at indices i and j do not collide.\n\"\"\"", "   \
    \ collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = 1:n\n            if i !=\
    \ j\n                if abs(car_distance(i,j)) < car_distance(i,j+1)\n       \
    \             collisions += 1\n                end\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j)\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i)\
    \ && car_collision(j)\n                collisions += 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) \n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = 1:n\n            if i !=\
    \ j\n                if abs(car_speed(i,j)) < car_speed(i,j+1)\n             \
    \       collisions += 1\n                end\n            end\n        end\n \
    \   end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) \n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.1>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j)\n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\n</cell>\n<code language=julia-1.5>", "    collisions\
    \ = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.0>", " \
    \   collide = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collide += 1\n            end\n        end\n   \
    \ end\n    return collide\nend", "    collide = 0\n    for i = 1:n\n        for\
    \ j = i+1:n\n            if car_collision(i, j)\n                collide += 1\n\
    \            end\n        end\n    end\n    return collide\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    collides = 0\n    for i = 1:n\n        for j = i+1:n\n\
    \            if car_collision(i,j) \n                collides += 1\n         \
    \   end\n        end\n    end\n    return collides\nend\n</cell>\n<code language=julia-1.0>",
  "    collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_collision(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.3>", " \
    \   collisions = 0\n    for i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend", "    collisions = 0\n    for i = 1:n\n\
    \        for j = 1:n\n            if i != j\n                if abs(car_speed(i,j))\
    \ > car_speed(i,j+1)\n                    collisions += 1\n                end\n\
    \            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
