name: HumanEval_40_triples_sum_to_zero
language: julia
results:
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkhcue1fq.jl:25\nin expression starting at\
    \ /tmp/tmpkhcue1fq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers and returns the number of integers in the list that sum to zero.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zljc_13.jl:27\nin expression starting at\
    \ /tmp/tmp4zljc_13.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for x in l\n        sum += x\n        if sum == 0 \n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkrg68xeo.jl:25\nin expression starting at\
    \ /tmp/tmpkrg68xeo.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_8k17n6q.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 3, 5, 0]) == false\\n  MethodError:\
    \ no method matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\\n  Closest\
    \ candidates are:\\n    triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp_8k17n6q.jl:17\\\
    n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\n     @ Main /tmp/tmp_8k17n6q.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_8k17n6q.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_8k17n6q.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_8k17n6q.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\\n  Closest candidates are:\\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp_8k17n6q.jl:17\\n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\\
    n     @ Main /tmp/tmp_8k17n6q.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_8k17n6q.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_8k17n6q.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmp_8k17n6q.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\\n  Closest candidates are:\\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp_8k17n6q.jl:17\\n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\\
    n     @ Main /tmp/tmp_8k17n6q.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n    "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = true\n    triples_sum_to_zero[2]\
    \ = true\n    triples_sum_to_zero[3] = true\n    for x in l\n        if triples_sum_to_zero[x]\
    \ == true\n            triples_sum_to_zero[x+3] = true\n        end\n    end\n\
    \    return triples_sum_to_zero[1] && triples_sum_to_zero[2] && triples_sum_to_zero[3]\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a list of integers as an input.\n    it returns True if there are three distinct\
    \ elements in the list that\n    sum to zero, and False otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppkr3mciy.jl:29\nin expression starting at\
    \ /tmp/tmppkr3mciy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of integers as an input, and returns the\
    \ number of integers in the list that sum to zero.\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxpujfizf.jl:28\nin expression starting at\
    \ /tmp/tmpxpujfizf.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+0)==0, l) |> length==3\n    return triples_sum_to_zero\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmp6t85ffn1.jl:1\nin expression starting at /tmp/tmp6t85ffn1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprcb9ab5.jl:20\nin expression starting at\
    \ /tmp/tmpprcb9ab5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a list of integers as an input, and returns True if there\
    \ are two distinct elements in the list that sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpknt1zzgm.jl:27\nin expression starting at\
    \ /tmp/tmpknt1zzgm.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc\
    \ triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1,3,-2,1])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqorg937a.jl:20\nin expression starting at\
    \ /tmp/tmpqorg937a.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l\n    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero = @view triples_sum_to_zero\n    triples_sum_to_zero\
    \ = @view triples_sum_to_zero\n    triples_sum_to_zero = @view triples_sum_to_zero\n\
    \    triples_sum_to_zero\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp56s658r4.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp56s658r4.jl:1\n\
    in expression starting at /tmp/tmp56s658r4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    for i in 1:length(l)\n        if triples_sum_to_zero[i]\
    \ == 1\n            triples_sum_to_zero[i] = 0\n        elseif triples_sum_to_zero[i]\
    \ == 0\n            triples_sum_to_zero[i] = 1\n        elseif triples_sum_to_zero[i]\
    \ == 2\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0])\
    \ == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of integers and returns the number of integers\
    \ in the list that sum to zero.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpma8uksmv.jl:33\nin expression starting at\
    \ /tmp/tmpma8uksmv.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmp2rh294.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmp2rh294.jl:1\n\
    in expression starting at /tmp/tmpmp2rh294.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = \n        sum(l) == 0 && \n        length(l)==3 && \n        l.sum() == 0\
    \ && \n        l.sum() == 0 && \n        l.sum() == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfttf0w2q.jl:25\nin expression starting at\
    \ /tmp/tmpfttf0w2q.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqjd7ety4.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 3, 5, 0]) == false\\n  MethodError:\
    \ no method matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\\n  Closest\
    \ candidates are:\\n    triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpqjd7ety4.jl:17\\\
    n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\n     @ Main /tmp/tmpqjd7ety4.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqjd7ety4.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqjd7ety4.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpqjd7ety4.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\\n  Closest candidates are:\\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpqjd7ety4.jl:17\\n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\\
    n     @ Main /tmp/tmpqjd7ety4.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqjd7ety4.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqjd7ety4.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpqjd7ety4.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\\n  Closest candidates are:\\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpqjd7ety4.jl:17\\n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\\
    n     @ Main /tmp/tmpqjd7ety4.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n    "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps0_eu7aw.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 3, 5, 0]) == false\\n  MethodError:\
    \ no method matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\\n  Closest\
    \ candidates are:\\n    triples_sum_to_zero(::Vector{Int64}) at /tmp/tmps0_eu7aw.jl:17\\\
    n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\n     @ Main /tmp/tmps0_eu7aw.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmps0_eu7aw.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps0_eu7aw.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmps0_eu7aw.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\\n  Closest candidates are:\\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmps0_eu7aw.jl:17\\n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\\
    n     @ Main /tmp/tmps0_eu7aw.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmps0_eu7aw.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps0_eu7aw.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmps0_eu7aw.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\\n  Closest candidates are:\\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmps0_eu7aw.jl:17\\n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\\
    n     @ Main /tmp/tmps0_eu7aw.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n    "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    triples_sum_to_zero = triples_sum_to_zero\
    \ * l\n    \n    return triples_sum_to_zero[1]+triples_sum_to_zero[2]+triples_sum_to_zero[3]\
    \ == 0\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a list of integers and returns\
    \ a list of integers whose elements are the sum of the integers in the list that\
    \ sum to zero.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcy0qrht.jl:26\nin expression starting at\
    \ /tmp/tmprcy0qrht.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    return triples_sum_to_zero\
    \ == 3\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7_bb9ggz.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  UndefVarError: triples_sum_to_zero\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp7_bb9ggz.jl:18\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp7_bb9ggz.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp7_bb9ggz.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp7_bb9ggz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  UndefVarError: triples_sum_to_zero not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp7_bb9ggz.jl:18\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp7_bb9ggz.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp7_bb9ggz.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp7_bb9ggz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  UndefVarError: triples_sum_to_zero not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7_bb9ggz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    l\
    \ = sort(l)\n    \n    sum = 0\n    for i in l\n        sum += i\n        if sum\
    \ == 0 \n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2s5ywgou.jl:30\nin expression starting at\
    \ /tmp/tmp2s5ywgou.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt9sxxz19.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 3, 5, 0]) == false\\n  MethodError:\
    \ no method matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\\n  Closest\
    \ candidates are:\\n    triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpt9sxxz19.jl:17\\\
    n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\n     @ Main /tmp/tmpt9sxxz19.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt9sxxz19.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt9sxxz19.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpt9sxxz19.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\\n  Closest candidates are:\\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpt9sxxz19.jl:17\\n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\\
    n     @ Main /tmp/tmpt9sxxz19.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpt9sxxz19.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt9sxxz19.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpt9sxxz19.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\\n  Closest candidates are:\\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpt9sxxz19.jl:17\\n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\\
    n     @ Main /tmp/tmpt9sxxz19.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n    "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for x in l\n        sum += x\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeeidfjw6.jl:28\nin expression starting at\
    \ /tmp/tmpeeidfjw6.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers as an input,\
    \ and returns True if there are three distinct elements in the list that sum to\
    \ zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6k4rzrf.jl:25\nin expression starting at\
    \ /tmp/tmpx6k4rzrf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj8_vpzkg.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 3, 5, 0]) == false\\n  MethodError:\
    \ no method matching triples_sum_to_zero(::Vector{Int64}, ::Int64)\\n  Closest\
    \ candidates are:\\n    triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpj8_vpzkg.jl:17\\\
    n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\n     @ Main /tmp/tmpj8_vpzkg.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpj8_vpzkg.jl:25 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj8_vpzkg.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpj8_vpzkg.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\\n  Closest candidates are:\\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpj8_vpzkg.jl:17\\n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\\
    n     @ Main /tmp/tmpj8_vpzkg.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpj8_vpzkg.jl:26 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj8_vpzkg.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpj8_vpzkg.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\\n  Closest candidates are:\\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpj8_vpzkg.jl:17\\n  Stacktrace:\\n   [1] triples_sum_to_zero(l::Vector{Int64})\\\
    n     @ Main /tmp/tmpj8_vpzkg.jl:18\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n    "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,3,7])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([2,4,-5,3,9,7])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of integers as an input, and returns True if there are three distinct\
    \ elements in the list that sum to zero, and False otherwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5,\
    \ 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0abw0vee.jl:20\nin expression starting at\
    \ /tmp/tmp0abw0vee.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    \n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list\
    \ of integers as an input.\n    it returns True if there are three distinct elements\
    \ in the list that\n    sum to zero, and False otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) ==\
    \ false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3,\
    \ -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vc4d1ds.jl:31\nin expression starting at\
    \ /tmp/tmp2vc4d1ds.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpj3t5mkk0.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj3t5mkk0.jl:1\n\
    in expression starting at /tmp/tmpj3t5mkk0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcmnc2r5o.jl:25\nin expression starting at\
    \ /tmp/tmpcmnc2r5o.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    return triples_sum_to_zero\
    \ == 3\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphvpzi2rm.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  UndefVarError: triples_sum_to_zero\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmphvpzi2rm.jl:18\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmphvpzi2rm.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmphvpzi2rm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmphvpzi2rm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  UndefVarError: triples_sum_to_zero not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmphvpzi2rm.jl:18\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmphvpzi2rm.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmphvpzi2rm.jl:25\ntest set:\
    \ Error During Test at /tmp/tmphvpzi2rm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  UndefVarError: triples_sum_to_zero not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphvpzi2rm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return false\n\
    \    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers as an input, and returns the number of integers in the list\
    \ that sum to zero.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf5x4ie56.jl:25\nin expression starting at\
    \ /tmp/tmpf5x4ie56.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+x+x)==0, l) |> length==3\n    return triples_sum_to_zero\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmpoapyadp7.jl:1\nin expression starting at /tmp/tmpoapyadp7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqafcpia6.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpqafcpia6.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpqafcpia6.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqafcpia6.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqafcpia6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpqafcpia6.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpqafcpia6.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpqafcpia6.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqafcpia6.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqafcpia6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpqafcpia6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpqafcpia6.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpqafcpia6.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqafcpia6.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqafcpia6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns a list of integers that\nsum to zero.\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11pxw7qc.jl:25\nin expression starting at\
    \ /tmp/tmp11pxw7qc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    for x in l\n        for y in l\n            for z in\
    \ l\n                if x+y+z == 0 \n                    triples_sum_to_zero[x,y,z]\
    \ = True\n                end\n            end\n        end\n    end\n    return\
    \ triples_sum_to_zero[1,1,1]\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns True if there are three distinct elements in the list that sum to zero,\
    \ and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6v3q6026.jl:30\nin expression starting at\
    \ /tmp/tmp6v3q6026.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfgjk14le.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpfgjk14le.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpfgjk14le.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfgjk14le.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfgjk14le.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfgjk14le.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpfgjk14le.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpfgjk14le.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfgjk14le.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfgjk14le.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpfgjk14le.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpfgjk14le.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpfgjk14le.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfgjk14le.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfgjk14le.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp529dbch0.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp529dbch0.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp529dbch0.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp529dbch0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp529dbch0.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp529dbch0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp529dbch0.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp529dbch0.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp529dbch0.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp529dbch0.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp529dbch0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp529dbch0.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp529dbch0.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp529dbch0.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp529dbch0.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy1ckesdu.jl:34\n  Expression: candidate([1,\
    \ 3, -2, 1]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy1ckesdu.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1ckesdu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy1ckesdu.jl:37\n  Expression: candidate([2, 4, -5, 3, 9, 7])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy1ckesdu.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy1ckesdu.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1ckesdu.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu3hsoypk.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpu3hsoypk.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpu3hsoypk.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu3hsoypk.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu3hsoypk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpu3hsoypk.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpu3hsoypk.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpu3hsoypk.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu3hsoypk.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu3hsoypk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpu3hsoypk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpu3hsoypk.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpu3hsoypk.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu3hsoypk.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu3hsoypk.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbpny6b2q.jl:27\nin expression starting at\
    \ /tmp/tmpbpny6b2q.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1i5ejk6u.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp1i5ejk6u.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp1i5ejk6u.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1i5ejk6u.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1i5ejk6u.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1i5ejk6u.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp1i5ejk6u.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp1i5ejk6u.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1i5ejk6u.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1i5ejk6u.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1i5ejk6u.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp1i5ejk6u.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp1i5ejk6u.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1i5ejk6u.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1i5ejk6u.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsrv7bo26.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpsrv7bo26.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpsrv7bo26.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsrv7bo26.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsrv7bo26.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpsrv7bo26.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpsrv7bo26.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpsrv7bo26.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsrv7bo26.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsrv7bo26.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpsrv7bo26.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpsrv7bo26.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpsrv7bo26.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsrv7bo26.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsrv7bo26.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    for x in l\n        triples_sum_to_zero = triples_sum_to_zero\
    \ || triples_sum_to_zero[x] == 0 || triples_sum_to_zero[x] == x\n    end\n   \
    \ return triples_sum_to_zero\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers as an input, and returns True if there are three\
    \ distinct elements in the list that sum to zero, and False otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0evd5bvb.jl:24\nin expression starting at\
    \ /tmp/tmp0evd5bvb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsrjvm87s.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpsrjvm87s.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpsrjvm87s.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsrjvm87s.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsrjvm87s.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpsrjvm87s.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpsrjvm87s.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpsrjvm87s.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsrjvm87s.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsrjvm87s.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpsrjvm87s.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpsrjvm87s.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpsrjvm87s.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsrjvm87s.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsrjvm87s.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5_p_z7or.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp5_p_z7or.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp5_p_z7or.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5_p_z7or.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5_p_z7or.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp5_p_z7or.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp5_p_z7or.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp5_p_z7or.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5_p_z7or.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5_p_z7or.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp5_p_z7or.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp5_p_z7or.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp5_p_z7or.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5_p_z7or.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5_p_z7or.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    for x in l\n        triples_sum_to_zero = triples_sum_to_zero\
    \ + (x - x^3)\n    end\n    return triples_sum_to_zero == zeros(Int64, 3)\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers as\
    \ an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe8399fvk.jl:24\nin expression starting at\
    \ /tmp/tmpe8399fvk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprkowthnz.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmprkowthnz.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmprkowthnz.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprkowthnz.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprkowthnz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmprkowthnz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmprkowthnz.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmprkowthnz.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprkowthnz.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprkowthnz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmprkowthnz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmprkowthnz.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmprkowthnz.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprkowthnz.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprkowthnz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpabgpfwwj.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpabgpfwwj.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpabgpfwwj.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabgpfwwj.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabgpfwwj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpabgpfwwj.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpabgpfwwj.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpabgpfwwj.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabgpfwwj.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabgpfwwj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpabgpfwwj.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpabgpfwwj.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpabgpfwwj.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabgpfwwj.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpabgpfwwj.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ < 3\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc6dhykle.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  UndefVarError: triples_sum_to_zero\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpc6dhykle.jl:18\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpc6dhykle.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpc6dhykle.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpc6dhykle.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  UndefVarError: triples_sum_to_zero not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpc6dhykle.jl:18\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpc6dhykle.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpc6dhykle.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpc6dhykle.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  UndefVarError: triples_sum_to_zero not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc6dhykle.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgsuhonhj.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpgsuhonhj.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpgsuhonhj.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgsuhonhj.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgsuhonhj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpgsuhonhj.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpgsuhonhj.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpgsuhonhj.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgsuhonhj.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgsuhonhj.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpgsuhonhj.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpgsuhonhj.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpgsuhonhj.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgsuhonhj.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgsuhonhj.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8nrsjlql.jl:25\nin expression starting at\
    \ /tmp/tmp8nrsjlql.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = l[1]\n    triples_sum_to_zero[2]\
    \ = l[2]\n    triples_sum_to_zero[3] = l[3]\n    return triples_sum_to_zero ==\
    \ zeros(Int64, 3)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers as an input and returns the number of integers in the list\
    \ that sum to zero.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp94gmqdik.jl:24\nin expression starting at\
    \ /tmp/tmp94gmqdik.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = l == sum(l)\n    return triples_sum_to_zero\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgiydmr7j.jl:28\n  Expression: candidate([1,\
    \ 3, -2, 1]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgiydmr7j.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgiydmr7j.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpgiydmr7j.jl:31\n  Expression: candidate([2, 4, -5, 3, 9, 7])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgiydmr7j.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgiydmr7j.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgiydmr7j.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpad8p1u6f.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpad8p1u6f.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpad8p1u6f.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpad8p1u6f.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpad8p1u6f.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpad8p1u6f.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpad8p1u6f.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpad8p1u6f.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpad8p1u6f.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpad8p1u6f.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpad8p1u6f.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpad8p1u6f.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpad8p1u6f.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpad8p1u6f.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpad8p1u6f.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n\
    <text>\nExercise 2\nWrite a function called triples_sum_to_zero that takes a list\
    \ of integers as an input.\nIt returns True if there are three distinct elements\
    \ in the list that sum to zero, and False otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgwhu1aab.jl:20\nin expression starting at\
    \ /tmp/tmpgwhu1aab.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a list of integers as an input, and returns a list of integers whose elements\
    \ are the sum of the input list except for those elements that are zero.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzl733knf.jl:25\nin expression starting at\
    \ /tmp/tmpzl733knf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo21gsm3s.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpo21gsm3s.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpo21gsm3s.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo21gsm3s.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo21gsm3s.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpo21gsm3s.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpo21gsm3s.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpo21gsm3s.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo21gsm3s.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo21gsm3s.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpo21gsm3s.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpo21gsm3s.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpo21gsm3s.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo21gsm3s.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo21gsm3s.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.2 The function is_power_of_two\nWrite a function\
    \ that takes an integer as an input and checks if it is a\npower of two. Return\
    \ True if the integer is a power of two, and False\notherwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5,\
    \ 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplkk1o_qp.jl:27\nin expression starting at\
    \ /tmp/tmplkk1o_qp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n\
    </cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero\n</cell>\n<code language=julia-1.5>\n@doc triples_\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdyyi5xmc.jl:20\nin expression starting at\
    \ /tmp/tmpdyyi5xmc.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzjzwmv75.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpzjzwmv75.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpzjzwmv75.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjzwmv75.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzjzwmv75.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzjzwmv75.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpzjzwmv75.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpzjzwmv75.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjzwmv75.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzjzwmv75.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpzjzwmv75.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpzjzwmv75.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpzjzwmv75.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzjzwmv75.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzjzwmv75.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum > 0\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers and returns True if there are two distinct elements in the list that\
    \ sum to zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpca8fixen.jl:28\nin expression starting at\
    \ /tmp/tmpca8fixen.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ == length(l)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) ==\
    \ false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3,\
    \ -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdhwrm4d.jl:21\nin expression starting at\
    \ /tmp/tmpfdhwrm4d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) ==\
    \ false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3,\
    \ -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvq60tppp.jl:25\nin expression starting at\
    \ /tmp/tmpvq60tppp.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxo58rp0i.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpxo58rp0i.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpxo58rp0i.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo58rp0i.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo58rp0i.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpxo58rp0i.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpxo58rp0i.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpxo58rp0i.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo58rp0i.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxo58rp0i.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpxo58rp0i.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpxo58rp0i.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpxo58rp0i.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxo58rp0i.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxo58rp0i.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @. sum(l) == 0 \n    return triples_sum_to_zero\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) ==\
    \ false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3,\
    \ -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4xlqffx9.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: Cannot `convert`\
    \ an object of type BitVector to an object of type Bool\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @\
    \ Main /tmp/tmp4xlqffx9.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4xlqffx9.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4xlqffx9.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4xlqffx9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: Cannot `convert` an object\
    \ of type BitVector to an object of type Bool\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @\
    \ Main /tmp/tmp4xlqffx9.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4xlqffx9.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xlqffx9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter(x->x==0 || x==-3 || x==-7, l)\n    return length(triples_sum_to_zero)\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns True if there are three distinct elements in the list that sum to zero,\
    \ and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmpity227kb.jl:1\nin expression starting at /tmp/tmpity227kb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter(x->x==0 || x==-3 || x==-7, l) |> length==3\n    return triples_sum_to_zero\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmptm5io7ag.jl:1\nin expression starting at /tmp/tmptm5io7ag.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp80lo73w6.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp80lo73w6.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp80lo73w6.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp80lo73w6.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp80lo73w6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp80lo73w6.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp80lo73w6.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp80lo73w6.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp80lo73w6.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp80lo73w6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp80lo73w6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp80lo73w6.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp80lo73w6.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp80lo73w6.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp80lo73w6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj12kf18k.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpj12kf18k.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpj12kf18k.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj12kf18k.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj12kf18k.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpj12kf18k.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpj12kf18k.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj12kf18k.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj12kf18k.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj12kf18k.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpj12kf18k.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpj12kf18k.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpj12kf18k.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj12kf18k.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj12kf18k.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv2y23gxw.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpv2y23gxw.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpv2y23gxw.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv2y23gxw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv2y23gxw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv2y23gxw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpv2y23gxw.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpv2y23gxw.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv2y23gxw.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv2y23gxw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv2y23gxw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpv2y23gxw.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpv2y23gxw.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv2y23gxw.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv2y23gxw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd_ilcgdw.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpd_ilcgdw.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpd_ilcgdw.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd_ilcgdw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd_ilcgdw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpd_ilcgdw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpd_ilcgdw.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpd_ilcgdw.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd_ilcgdw.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd_ilcgdw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpd_ilcgdw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpd_ilcgdw.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpd_ilcgdw.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd_ilcgdw.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd_ilcgdw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6y1sxdit.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp6y1sxdit.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp6y1sxdit.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6y1sxdit.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6y1sxdit.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp6y1sxdit.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp6y1sxdit.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp6y1sxdit.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6y1sxdit.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6y1sxdit.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp6y1sxdit.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp6y1sxdit.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp6y1sxdit.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6y1sxdit.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6y1sxdit.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplrvcf_u_.jl:20\nin expression starting at\
    \ /tmp/tmplrvcf_u_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbb3sv4rq.jl:25\nin expression starting at\
    \ /tmp/tmpbb3sv4rq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-7, l)\n    length(triples_sum_to_zero)\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:100);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers as\
    \ an input and returns a list of integers that sum to zero.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) ==\
    \ false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3,\
    \ -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmpmbbxo_ry.jl:1\nin expression starting at /tmp/tmpmbbxo_ry.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0bfzpcjw.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp0bfzpcjw.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp0bfzpcjw.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0bfzpcjw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0bfzpcjw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp0bfzpcjw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp0bfzpcjw.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp0bfzpcjw.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0bfzpcjw.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0bfzpcjw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp0bfzpcjw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp0bfzpcjw.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp0bfzpcjw.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0bfzpcjw.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0bfzpcjw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq8dimdo7.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpq8dimdo7.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpq8dimdo7.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8dimdo7.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8dimdo7.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpq8dimdo7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpq8dimdo7.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpq8dimdo7.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8dimdo7.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq8dimdo7.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpq8dimdo7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpq8dimdo7.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpq8dimdo7.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq8dimdo7.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq8dimdo7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x==0 || x==-3 || x==-7 || x==-9), l) |> filter(x->(x==0\
    \ || x==-3 || x==-7 || x==-9), l) |> filter(x->(x==0 || x==-3 || x==-7 || x==-9),\
    \ l) |> filter(x->(x==0 || x==-3 || x==-7 || x==-9), l)\n    return triples_sum_to_zero\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes\
    \ a list of integers as an input.\n    it returns True if there are three distinct\
    \ elements in the list that\n    sum to zero, and False otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmppojteaw5.jl:1\nin expression starting at /tmp/tmppojteaw5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7ilcwc57.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp7ilcwc57.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp7ilcwc57.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7ilcwc57.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7ilcwc57.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7ilcwc57.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp7ilcwc57.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp7ilcwc57.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7ilcwc57.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7ilcwc57.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7ilcwc57.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp7ilcwc57.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp7ilcwc57.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7ilcwc57.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ilcwc57.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqn3lr78y.jl:25\nin expression starting at\
    \ /tmp/tmpqn3lr78y.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = triples_sum_to_zero_helper(l)\n    return triples_sum_to_zero\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzlbp9tiu.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  UndefVarError: triples_sum_to_zero_helper\
    \ not defined\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n \
    \    @ Main /tmp/tmpzlbp9tiu.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzlbp9tiu.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzlbp9tiu.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzlbp9tiu.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  UndefVarError: triples_sum_to_zero_helper\
    \ not defined\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n \
    \    @ Main /tmp/tmpzlbp9tiu.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzlbp9tiu.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzlbp9tiu.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzlbp9tiu.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  UndefVarError: triples_sum_to_zero_helper\
    \ not defined\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n \
    \    @ Main /tmp/tmpzlbp9tiu.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzlbp9tiu.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzlbp9tiu.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpzlbp9tiu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 7]) == false\n  UndefVarError: triples_sum_to_zero_helper\
    \ not defined\n  Stacktrace:\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzlbp9tiu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczyhj_6o.jl:27\nin expression starting at\
    \ /tmp/tmpczyhj_6o.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            if sum > 3\n\
    \                return true\n            else\n                sum = 0\n    \
    \    end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time triples_sum_to_zero(vec(1:100000));\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of integers as an input, and returns True if there\
    \ are three distinct elements in the list that sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vpvsj3w.jl:30\nin expression starting at\
    \ /tmp/tmp7vpvsj3w.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbfganti8.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpbfganti8.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpbfganti8.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbfganti8.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfganti8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbfganti8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpbfganti8.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpbfganti8.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbfganti8.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfganti8.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbfganti8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpbfganti8.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpbfganti8.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbfganti8.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbfganti8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter(x->x==0 || x==-3 || x==-7, l)\n    return length(triples_sum_to_zero)\
    \ == 3\nend\n</cell>\n<code language=julia-1.4>\n@time triples_sum_to_zero(vec(1:10000));\n\
    </cell>\n<text>\nExercise: Write a function that takes a list of integers as an\
    \ input, and returns True if there are three distinct elements in the list that\
    \ sum to zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmpydtjts2o.jl:1\nin expression starting at /tmp/tmpydtjts2o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a list of integers as an input, and returns True if there\
    \ are two distinct elements in the list that sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7upu2q4w.jl:27\nin expression starting at\
    \ /tmp/tmp7upu2q4w.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkdqzk5xc.jl:29\nin expression starting at\
    \ /tmp/tmpkdqzk5xc.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3fx_spa0.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp3fx_spa0.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp3fx_spa0.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3fx_spa0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3fx_spa0.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp3fx_spa0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp3fx_spa0.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp3fx_spa0.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3fx_spa0.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3fx_spa0.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp3fx_spa0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp3fx_spa0.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp3fx_spa0.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3fx_spa0.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3fx_spa0.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @. sum(l) == 0 \n    return triples_sum_to_zero\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) ==\
    \ false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3,\
    \ -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi496ihzf.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: Cannot `convert`\
    \ an object of type BitVector to an object of type Bool\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @\
    \ Main /tmp/tmpi496ihzf.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi496ihzf.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi496ihzf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpi496ihzf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: Cannot `convert` an object\
    \ of type BitVector to an object of type Bool\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n     @\
    \ Main /tmp/tmpi496ihzf.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi496ihzf.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi496ihzf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n\
    <code language=julia-1.5>\n@doc triples_sum_to_zero([1,3,-2,1])\n</cell>\n<code\
    \ language=julia-1.5>\n@doc triples_sum_to_zero([1,2,3,7])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([2,4,-5,3,9,7])\n</cell>\n<code language=julia-1.5>\n\
    @doc triples_sum_to_zero([1])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of integers as an input, and returns True if there are three distinct\
    \ elements in the list that sum to zero, and False otherwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5,\
    \ 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph38mk1mb.jl:20\nin expression starting at\
    \ /tmp/tmph38mk1mb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    for i in l\n        triples_sum_to_zero[i]\
    \ = triples_sum_to_zero[i-1] + triples_sum_to_zero[i-2] + triples_sum_to_zero[i-3]\n\
    \    end\n    return triples_sum_to_zero[1] == 0 && triples_sum_to_zero[2] ==\
    \ 0 && triples_sum_to_zero[3] == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nProblem 7: Triples\nWrite a function triples that\
    \ takes a list of integers as an input.\nIt returns True if there are three distinct\
    \ elements in the list that sum to zero, and False otherwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5,\
    \ 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61kazz7p.jl:27\nin expression starting at\
    \ /tmp/tmp61kazz7p.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> Vector{Int64}\n    triples_sum_to_zero[triples_sum_to_zero == 0]\
    \ = 1\n    triples_sum_to_zero[triples_sum_to_zero .== 0] = 2\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 1] = 3\n    triples_sum_to_zero[triples_sum_to_zero .== 2] = 4\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 3] = 5\n    triples_sum_to_zero[triples_sum_to_zero .== 4] = 6\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 5] = 7\n    triples_sum_to_zero[triples_sum_to_zero .== 6] = 8\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 7] = 9\n    triples_sum_to_zero[triples_sum_to_zero .== 8] = 10\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 9] = 11\n    triples_sum_to_zero[triples_sum_to_zero .== 10] = 12\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 11] = 13\n    triples_sum_to_zero[triples_sum_to_zero .== 12] = 14\n   \
    \ triples_sum_to_zero[triples_sum_to_zero .== 13] = 15\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 14] = 16\n    triples_sum_to_zero[triples_sum_to_zero .== 15] = 17\n   \
    \ triples_sum_to_zero[triples_sum_to_zero .== 16] = 18\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 17] = 19\n    triples_sum_to_zero[triples_sum_to_zero .== 18] = 20\n   \
    \ triples_sum_to_zero[triples_sum_to_zero .== 19] = 21\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 20] = 22\n    triples_sum_to_zero[triples_sum_to_zero .== 21] = 23\n   \
    \ triples_sum_to_zero[triples_sum_to_zero .== 22] = 24\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== 23] = 25\n    triples_sum_to_zero[triples_sum_to_zero .== 24] = 26\n   \
    \ triples_sum_to_zero[triples_sum_to_zero .== 25] = 27\n    triples_sum_to_zero[triples_sum_to_zero\
    \ .== \nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbnco_2xx.jl:1\nin expression starting at /tmp/tmpbnco_2xx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbjyqatnk.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpbjyqatnk.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpbjyqatnk.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbjyqatnk.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbjyqatnk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbjyqatnk.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpbjyqatnk.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpbjyqatnk.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbjyqatnk.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbjyqatnk.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbjyqatnk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpbjyqatnk.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpbjyqatnk.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbjyqatnk.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbjyqatnk.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    return triples_sum_to_zero\
    \ == 3\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_kxrrh9.jl:21\nin expression starting at\
    \ /tmp/tmp6_kxrrh9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmf3ya_ny.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpmf3ya_ny.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpmf3ya_ny.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmf3ya_ny.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmf3ya_ny.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmf3ya_ny.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpmf3ya_ny.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpmf3ya_ny.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmf3ya_ny.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmf3ya_ny.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmf3ya_ny.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpmf3ya_ny.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpmf3ya_ny.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmf3ya_ny.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmf3ya_ny.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    \n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5, 0])\
    \ == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of integers as an input, and returns True if there\
    \ are three distinct elements in the list that sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpva5e6c.jl:31\nin expression starting at\
    \ /tmp/tmpnpva5e6c.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpejgk7z_i.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpejgk7z_i.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpejgk7z_i.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejgk7z_i.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpejgk7z_i.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpejgk7z_i.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpejgk7z_i.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpejgk7z_i.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejgk7z_i.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpejgk7z_i.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpejgk7z_i.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpejgk7z_i.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpejgk7z_i.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpejgk7z_i.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejgk7z_i.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88nxgs3f.jl:25\nin expression starting at\
    \ /tmp/tmp88nxgs3f.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp_7204gbr.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_7204gbr.jl:1\n\
    in expression starting at /tmp/tmp_7204gbr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of integers as an input, and returns a\
    \ list of integers that sum to zero.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfqqtzac8.jl:28\nin expression starting at\
    \ /tmp/tmpfqqtzac8.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0euwp9u5.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp0euwp9u5.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp0euwp9u5.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0euwp9u5.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0euwp9u5.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp0euwp9u5.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp0euwp9u5.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp0euwp9u5.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0euwp9u5.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0euwp9u5.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp0euwp9u5.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp0euwp9u5.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp0euwp9u5.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0euwp9u5.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0euwp9u5.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for x in l\n        sum += x\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that takes a list of integers and returns True if there\
    \ are three distinct elements in the list that sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphne7_0vm.jl:28\nin expression starting at\
    \ /tmp/tmphne7_0vm.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\n4.2 The function is_palindrome\nThe function is_palindrome takes as input\
    \ a list of integers and returns True if and only if the list is a palindrome.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2co7y0mb.jl:25\nin expression starting at\
    \ /tmp/tmp2co7y0mb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([x == 0 for x in l])\n    return triples_sum_to_zero == 3\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5j6gcvwg.jl:21\nin expression starting at\
    \ /tmp/tmp5j6gcvwg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd8e2sj_t.jl:27\nin expression starting at\
    \ /tmp/tmpd8e2sj_t.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpltpk0hhs.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpltpk0hhs.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpltpk0hhs.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpltpk0hhs.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpltpk0hhs.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpltpk0hhs.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpltpk0hhs.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpltpk0hhs.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpltpk0hhs.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpltpk0hhs.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpltpk0hhs.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpltpk0hhs.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpltpk0hhs.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpltpk0hhs.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpltpk0hhs.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum > 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgv7siql.jl:27\nin expression starting at\
    \ /tmp/tmpmgv7siql.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 7\nWrite\
    \ a function that takes a list of integers as an input, and returns the number\
    \ of integers in the list that sum to zero.\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_3pjbry.jl:27\nin expression starting at\
    \ /tmp/tmp5_3pjbry.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers as\
    \ an input, and returns True if there are three distinct elements in the list\
    \ that sum to zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnm2dvqcs.jl:29\nin expression starting at\
    \ /tmp/tmpnm2dvqcs.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppp5931t6.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmppp5931t6.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmppp5931t6.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppp5931t6.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppp5931t6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppp5931t6.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmppp5931t6.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmppp5931t6.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppp5931t6.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppp5931t6.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppp5931t6.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmppp5931t6.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmppp5931t6.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppp5931t6.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppp5931t6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+0)==x, l) |> filter(x->(x+0)==x, l) |> filter(x->(x+0)==x,\
    \ l)\n    return length(triples_sum_to_zero) == 3\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers as an input, and returns True\
    \ if there are three distinct elements in the list that sum to zero, and False\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmp1v5_xtck.jl:1\nin expression starting at /tmp/tmp1v5_xtck.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1,3,-5,0]) == false\n@assert triples_sum_to_zero([1,3,-2,1])\
    \ == true\n@assert triples_sum_to_zero([1,2,3,7]) == false\n@assert triples_sum_to_zero([2,4,-5,3,9,7])\
    \ == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\n4.5 Write\
    \ a function that checks whether a number is prime (for numbers upto 10^18).\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0hewhsqi.jl:27\nin expression starting at\
    \ /tmp/tmp0hewhsqi.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for x in l\n        sum += x\n        if sum == 0 \n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:10000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers as\
    \ an input, and returns the number of integers in the list that sum to zero.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpip3ip250.jl:26\nin expression starting at\
    \ /tmp/tmpip3ip250.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> Vector{Int64}\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n\
    \    triples_sum_to_zero = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero\
    \ = triples_sum_to_zero[1..end-1]\n    triples_sum_to_zero = triple\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa7lwi1ta.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa7lwi1ta.jl:1\n\
    in expression starting at /tmp/tmpa7lwi1ta.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter(x->(x+0)==0, l) |> length==3\n    return triples_sum_to_zero\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: ArgumentError: Invalid use of @view macro: argument must\
    \ be a reference expression A[...].\nStacktrace:\n [1] var\"@view\"(__source__::LineNumberNode,\
    \ __module__::Module, ex::Any)\n   @ Base ./views.jl:136\n [2] #macroexpand#51\n\
    \   @ ./expr.jl:115 [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n\
    \ [4] docm(source::LineNumberNode, mod::Module, meta::Any, ex::Any, define::Bool)\
    \ (repeats 2 times)\n   @ Base.Docs ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any})\n   @ Core ./boot.jl:517\nin expression starting\
    \ at /tmp/tmpsefn0zc4.jl:1\nin expression starting at /tmp/tmpsefn0zc4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpeid5g12b.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeid5g12b.jl:1\n\
    in expression starting at /tmp/tmpeid5g12b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    for x in l\n        if triples_sum_to_zero[x]\
    \ == 1\n            triples_sum_to_zero[x] = 0\n        end\n    end\n    return\
    \ triples_sum_to_zero[1]+triples_sum_to_zero[2]+triples_sum_to_zero[3] == 3\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1, 3, 5,\
    \ 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert triples_sum_to_zero([1,\
    \ 2, 3, 7]) == false\n@assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n\
    @assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\nProblem 7: Write a\
    \ function that takes a positive integer $n$ and returns the number of positive\
    \ integers less than or equal to $n$ that are coprime to $n$. For example, given\
    \ $n = 6$, the function should return $3$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdzmrex1q.jl:29\nin expression starting at\
    \ /tmp/tmpdzmrex1q.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = l[1]\n    triples_sum_to_zero[2]\
    \ = l[2]\n    triples_sum_to_zero[3] = l[3]\n    triples_sum_to_zero = triples_sum_to_zero[findall(triples_sum_to_zero)]\n\
    \    return length(triples_sum_to_zero) == 3\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6o5n1zi.jl:25\nin expression starting at\
    \ /tmp/tmpn6o5n1zi.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn0hy_o2q.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpn0hy_o2q.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpn0hy_o2q.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0hy_o2q.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn0hy_o2q.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpn0hy_o2q.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpn0hy_o2q.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpn0hy_o2q.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0hy_o2q.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn0hy_o2q.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpn0hy_o2q.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpn0hy_o2q.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpn0hy_o2q.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0hy_o2q.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn0hy_o2q.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> \n        filter(x -> x == 0 || x == -x, \n            filter(x\
    \ -> x == 0 || x == -x, \n                filter(x -> x == 0 || x == -x, \n  \
    \                  filter(x -> x == 0 || x == -x, \n                        filter(x\
    \ -> x == 0 || x == -x, \n                            filter(x -> x == 0 || x\
    \ == -x, \n                                filter(x -> x == 0 || x == -x, \n \
    \                                   filter(x -> x == 0 || x == -x, \n        \
    \                                filter(x -> x == 0 || x == -x, \n           \
    \                                 filter(x -> x == 0 || x == -x, \n          \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                               filter(x -> x == 0 || x == -x,\
    \ \n                                                        filter(x -> x == 0\
    \ || x == -x, \n                                                            filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \             filter(x -> x == 0 || x == -x, \n                              \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                                                   filter(x ->\
    \ x == 0 || x == -x, \n                                                      \
    \                      filter(x -> x == 0 || x == -x, \n                     \
    \                                                           filter(x -> x == 0\
    \ || x == -x, \n                                                             \
    \                       filter(x -> x == 0 || x == -x, \n                    \
    \                                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                         filter(x -> x == 0 || x == -x, \n  \
    \                                                                            \
    \                  filter(x -> x == 0 || x == -x, \n                         \
    \                                                                           filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                     filter(x -> x == 0 || x\
    \ == -x, \n                                                                  \
    \                                          filter(x -> x == 0 || x == -x, \n \
    \                                                                            \
    \                                   filter(x -> x == 0 || x == -x, \n        \
    \                                                                            \
    \                                filter(x -> x == 0 || x == -x, \n           \
    \                                                                            \
    \                                 filter(x -> x == 0 || x == -x, \n          \
    \                                                                            \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                                                            \
    \                                               filter(x -> x == 0 || x == -x,\
    \ \n                                                                         \
    \                                                           filter(x -> x == 0\
    \ || x == -x, \n                                                             \
    \                                                                           filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \             filter(x -> x == 0 || x == -x, \n                              \
    \                                                                            \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                                                            \
    \                                                                   filter(x ->\
    \ x == 0 || x == -x, \n                                                      \
    \                                                                            \
    \                      filter(x -> x == 0 || x == -x, \n                     \
    \                                                                            \
    \                                                           filter(x -> x == 0\
    \ || x == -x, \n                                                             \
    \                                                                            \
    \                       filter(x -> x == 0 || x == -x, \n                    \
    \                                                                            \
    \                                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                                         filter(x -> x == 0 || x == -x, \n  \
    \                                                                            \
    \                                                                            \
    \                  filter(x -> x == 0 || x == -x, \n                         \
    \                                                                            \
    \                                                                           filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                                                     filter(x -> x == 0 || x\
    \ == -x, \n                                                                  \
    \                                                                            \
    \                                          filter(x -> x == 0 || x == -x, \n \
    \                                                                            \
    \                                                                            \
    \                                   filter(x \nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwje21xbo.jl:65\nin expression starting at\
    \ /tmp/tmpwje21xbo.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    \n    for i in l\n        if triples_sum_to_zero[i]\
    \ == 1\n            return true\n        end\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@test triples_sum_to_zero([1,3,5,0]) == false\n\
    @test triples_sum_to_zero([1,3,-2,1]) == true\n@test triples_sum_to_zero([1,2,3,7])\
    \ == false\n@test triples_sum_to_zero([2,4,-5,3,9,7]) == true\n@test triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function called triples_sum_to_zero\
    \ that takes a list of integers as an input.\nIt returns True if there are three\
    \ distinct elements in the list that sum to zero, and False otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1wtxi2p.jl:31\nin expression starting at\
    \ /tmp/tmpi1wtxi2p.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> Vector{Int64}\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\n    triples_sum_to_zero = unique(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = sort(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = unique(triples_sum_to_zero)\n    triples_sum_to_zero = sort(triples_sum_to_zero)\n\
    \    triples_sum_to_zero = unique(triples_sum_to_zero)\n    triples_sum_to_zero\
    \ = sort(triples_sum_to_zero)\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphi4hwlug.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphi4hwlug.jl:1\n\
    in expression starting at /tmp/tmphi4hwlug.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@doc triples_sum_to_zero\n</cell>\n\
    <text>\nExercise 3: Write a function that takes a list of integers and returns\
    \ True if there are three distinct elements in the list that sum to zero, and\
    \ False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphekwif29.jl:20\nin expression starting at\
    \ /tmp/tmphekwif29.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpybjzhi6g.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpybjzhi6g.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpybjzhi6g.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpybjzhi6g.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpybjzhi6g.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpybjzhi6g.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpybjzhi6g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpybjzhi6g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpybjzhi6g.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpybjzhi6g.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpybjzhi6g.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpybjzhi6g.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpybjzhi6g.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpybjzhi6g.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpybjzhi6g.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = l == sort(l)\n    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwqiy0mq2.jl:21\nin expression starting at\
    \ /tmp/tmpwqiy0mq2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8mv1712u.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp8mv1712u.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp8mv1712u.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8mv1712u.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8mv1712u.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp8mv1712u.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp8mv1712u.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp8mv1712u.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8mv1712u.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8mv1712u.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp8mv1712u.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp8mv1712u.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp8mv1712u.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8mv1712u.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8mv1712u.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa4mwkbyr.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpa4mwkbyr.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpa4mwkbyr.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa4mwkbyr.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa4mwkbyr.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpa4mwkbyr.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpa4mwkbyr.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpa4mwkbyr.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa4mwkbyr.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa4mwkbyr.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpa4mwkbyr.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpa4mwkbyr.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpa4mwkbyr.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa4mwkbyr.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa4mwkbyr.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmg1rc1dz.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpmg1rc1dz.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpmg1rc1dz.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg1rc1dz.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg1rc1dz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmg1rc1dz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpmg1rc1dz.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpmg1rc1dz.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg1rc1dz.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg1rc1dz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpmg1rc1dz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpmg1rc1dz.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpmg1rc1dz.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg1rc1dz.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmg1rc1dz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpie2lw8rp.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpie2lw8rp.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpie2lw8rp.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpie2lw8rp.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpie2lw8rp.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpie2lw8rp.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpie2lw8rp.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpie2lw8rp.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpie2lw8rp.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpie2lw8rp.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpie2lw8rp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpie2lw8rp.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpie2lw8rp.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpie2lw8rp.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpie2lw8rp.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprsnobn1c.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmprsnobn1c.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmprsnobn1c.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprsnobn1c.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprsnobn1c.jl:24\ntest set:\
    \ Error During Test at /tmp/tmprsnobn1c.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmprsnobn1c.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmprsnobn1c.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprsnobn1c.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprsnobn1c.jl:24\ntest set:\
    \ Error During Test at /tmp/tmprsnobn1c.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmprsnobn1c.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmprsnobn1c.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprsnobn1c.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprsnobn1c.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triples_sum_to_zero\
    \ = @view l |> filter((x) -> x==0 || x==-3 || x==-5, l)\n    triple\nusing Test\n\
    \n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3,\
    \ 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptdp59tgr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptdp59tgr.jl:1\n\
    in expression starting at /tmp/tmptdp59tgr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ integers as an input, and returns True if there are three distinct elements\
    \ in the list that sum to zero, and False otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1d6ogoca.jl:27\nin expression starting at\
    \ /tmp/tmp1d6ogoca.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    return triples_sum_to_zero\
    \ == 3\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu8l1pxrs.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  UndefVarError: triples_sum_to_zero\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpu8l1pxrs.jl:18\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpu8l1pxrs.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpu8l1pxrs.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpu8l1pxrs.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  UndefVarError: triples_sum_to_zero not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpu8l1pxrs.jl:18\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpu8l1pxrs.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpu8l1pxrs.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpu8l1pxrs.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  UndefVarError: triples_sum_to_zero not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu8l1pxrs.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7e43ldyx.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp7e43ldyx.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp7e43ldyx.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7e43ldyx.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7e43ldyx.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7e43ldyx.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp7e43ldyx.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp7e43ldyx.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7e43ldyx.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7e43ldyx.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7e43ldyx.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp7e43ldyx.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp7e43ldyx.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7e43ldyx.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7e43ldyx.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0]) == false\n@test triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@test triples_sum_to_zero([1, 2, 3, 7]) == false\n@test\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@test triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers and returns True if there are three distinct elements in the list that\
    \ sum to zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ncgxvqh.jl:28\nin expression starting at\
    \ /tmp/tmp4ncgxvqh.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp3nshq7vo.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3nshq7vo.jl:1\n\
    in expression starting at /tmp/tmp3nshq7vo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb2hjo6xn.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpb2hjo6xn.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpb2hjo6xn.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb2hjo6xn.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb2hjo6xn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpb2hjo6xn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpb2hjo6xn.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpb2hjo6xn.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb2hjo6xn.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb2hjo6xn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpb2hjo6xn.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpb2hjo6xn.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpb2hjo6xn.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb2hjo6xn.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb2hjo6xn.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ == length(l)\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwnl9sbir.jl:21\nin expression starting at\
    \ /tmp/tmpwnl9sbir.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm_deoilv.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpm_deoilv.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpm_deoilv.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm_deoilv.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm_deoilv.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpm_deoilv.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpm_deoilv.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpm_deoilv.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm_deoilv.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm_deoilv.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpm_deoilv.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpm_deoilv.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpm_deoilv.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm_deoilv.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm_deoilv.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    for x in l\n        triples_sum_to_zero = triples_sum_to_zero\
    \ || triples_sum_to_zero[x-1] + triples_sum_to_zero[x+1] + triples_sum_to_zero[x+2]\n\
    \    end\n    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqycplar.jl:24\nin expression starting at\
    \ /tmp/tmpiqycplar.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy_l7kkyu.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpy_l7kkyu.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpy_l7kkyu.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy_l7kkyu.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy_l7kkyu.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpy_l7kkyu.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpy_l7kkyu.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpy_l7kkyu.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy_l7kkyu.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy_l7kkyu.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpy_l7kkyu.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpy_l7kkyu.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpy_l7kkyu.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy_l7kkyu.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy_l7kkyu.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpibi_d6ql.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpibi_d6ql.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpibi_d6ql.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibi_d6ql.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibi_d6ql.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpibi_d6ql.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpibi_d6ql.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpibi_d6ql.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibi_d6ql.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibi_d6ql.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpibi_d6ql.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpibi_d6ql.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpibi_d6ql.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibi_d6ql.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibi_d6ql.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4x8xmbxw.jl:25\nin expression starting at\
    \ /tmp/tmp4x8xmbxw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for x in l\n        sum += x\n        if sum == 0 \n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert triples_sum_to_zero([1,\
    \ 3, 5, 0]) == false\n@assert triples_sum_to_zero([1, 3, -2, 1]) == true\n@assert\
    \ triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n\
    <text>\nProblem 4\nWrite a function that takes a list of integers and returns\
    \ a list of all positive integers less than the sum of the input list. For example,\
    \ if the input list is [4, 3, -2, 1], the output should be [4, 3, -2, 1].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkz_rebr0.jl:26\nin expression starting at\
    \ /tmp/tmpkz_rebr0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3: Write\
    \ a function that takes a list of integers as an input, and returns True if there\
    \ are two distinct elements in the list that sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwipae9vp.jl:27\nin expression starting at\
    \ /tmp/tmpwipae9vp.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> \n        filter(x -> x == 0 || x == -x, \n            filter(x\
    \ -> x == 0 || x == -x, \n                filter(x -> x == 0 || x == -x, \n  \
    \                  filter(x -> x == 0 || x == -x, \n                        filter(x\
    \ -> x == 0 || x == -x, \n                            filter(x -> x == 0 || x\
    \ == -x, \n                                filter(x -> x == 0 || x == -x, \n \
    \                                   filter(x -> x == 0 || x == -x, \n        \
    \                                filter(x -> x == 0 || x == -x, \n           \
    \                                 filter(x -> x == 0 || x == -x, \n          \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                               filter(x -> x == 0 || x == -x,\
    \ \n                                                        filter(x -> x == 0\
    \ || x == -x, \n                                                            filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \             filter(x -> x == 0 || x == -x, \n                              \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                                                   filter(x ->\
    \ x == 0 || x == -x, \n                                                      \
    \                      filter(x -> x == 0 || x == -x, \n                     \
    \                                                           filter(x -> x == 0\
    \ || x == -x, \n                                                             \
    \                       filter(x -> x == 0 || x == -x, \n                    \
    \                                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                         filter(x -> x == 0 || x == -x, \n  \
    \                                                                            \
    \                  filter(x -> x == 0 || x == -x, \n                         \
    \                                                                           filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                     filter(x -> x == 0 || x\
    \ == -x, \n                                                                  \
    \                                          filter(x -> x == 0 || x == -x, \n \
    \                                                                            \
    \                                   filter(x -> x == 0 || x == -x, \n        \
    \                                                                            \
    \                                filter(x -> x == 0 || x == -x, \n           \
    \                                                                            \
    \                                 filter(x -> x == 0 || x == -x, \n          \
    \                                                                            \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                                                            \
    \                                               filter(x -> x == 0 || x == -x,\
    \ \n                                                                         \
    \                                                           filter(x -> x == 0\
    \ || x == -x, \n                                                             \
    \                                                                           filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \             filter(x -> x == 0 || x == -x, \n                              \
    \                                                                            \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                                                            \
    \                                                                   filter(x ->\
    \ x == 0 || x == -x, \n                                                      \
    \                                                                            \
    \                      filter(x -> x == 0 || x == -x, \n                     \
    \                                                                            \
    \                                                           filter(x -> x == 0\
    \ || x == -x, \n                                                             \
    \                                                                            \
    \                       filter(x -> x == 0 || x == -x, \n                    \
    \                                                                            \
    \                                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                                         filter(x -> x == 0 || x == -x, \n  \
    \                                                                            \
    \                                                                            \
    \                  filter(x -> x == 0 || x == -x, \n                         \
    \                                                                            \
    \                                                                           filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                                                     filter(x -> x == 0 || x\
    \ == -x, \n                                                                  \
    \                                                                            \
    \                                          filter(x -> x == 0 || x == -x, \n \
    \                                                                            \
    \                                                                            \
    \                                   filter(x \nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbrh_i4fc.jl:65\nin expression starting at\
    \ /tmp/tmpbrh_i4fc.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2f7roxjg.jl:25\nin expression starting at\
    \ /tmp/tmp2f7roxjg.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp227avpuw.jl:34\n  Expression: candidate([1,\
    \ 3, -2, 1]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp227avpuw.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp227avpuw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp227avpuw.jl:37\n  Expression: candidate([2, 4, -5, 3, 9, 7])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp227avpuw.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp227avpuw.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp227avpuw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpodoli08l.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpodoli08l.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpodoli08l.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpodoli08l.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpodoli08l.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpodoli08l.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpodoli08l.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpodoli08l.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpodoli08l.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpodoli08l.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpodoli08l.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpodoli08l.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpodoli08l.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpodoli08l.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpodoli08l.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22pgy4ag.jl:20\nin expression starting at\
    \ /tmp/tmp22pgy4ag.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = 1\n    triples_sum_to_zero[2]\
    \ = 1\n    triples_sum_to_zero[3] = 1\n    for i in l\n        triples_sum_to_zero[i]\
    \ = triples_sum_to_zero[i-1] + triples_sum_to_zero[i-2] + triples_sum_to_zero[i-3]\n\
    \    end\n    return triples_sum_to_zero[1]==0 && triples_sum_to_zero[2]==0 &&\
    \ triples_sum_to_zero[3]==0\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphrqt1o0x.jl:27\nin expression starting at\
    \ /tmp/tmphrqt1o0x.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    for x in l\n        triples_sum_to_zero = triples_sum_to_zero\
    \ + (x != 0)\n    end\n    return triples_sum_to_zero == zeros(Int64, 3)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time triples_sum_to_zero(1:10000);\n</cell>\n\
    <text>\nExercise: Write a function that takes a list of integers as an input,\
    \ and returns True if there are three distinct elements in the list that sum to\
    \ zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkpg2cshi.jl:24\nin expression starting at\
    \ /tmp/tmpkpg2cshi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgy250k1j.jl:20\nin expression starting at\
    \ /tmp/tmpgy250k1j.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphc6nhy6c.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmphc6nhy6c.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmphc6nhy6c.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphc6nhy6c.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphc6nhy6c.jl:24\ntest set:\
    \ Error During Test at /tmp/tmphc6nhy6c.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmphc6nhy6c.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmphc6nhy6c.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphc6nhy6c.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphc6nhy6c.jl:24\ntest set:\
    \ Error During Test at /tmp/tmphc6nhy6c.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmphc6nhy6c.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmphc6nhy6c.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphc6nhy6c.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphc6nhy6c.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1,3,-5,0]) == false\n@assert triples_sum_to_zero([1,3,-2,1])\
    \ == true\n@assert triples_sum_to_zero([1,2,3,7]) == false\n@assert triples_sum_to_zero([2,4,-5,3,9,7])\
    \ == true\n@assert triples_sum_to_zero([1]) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of integers as an input, and returns True\
    \ if there are three distinct elements in the list that sum to zero, and False\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuskky41h.jl:27\nin expression starting at\
    \ /tmp/tmpuskky41h.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a list of integers and returns the number of integers in the list that sum to\
    \ zero.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnkmjb1n2.jl:25\nin expression starting at\
    \ /tmp/tmpnkmjb1n2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    for triple in l\n        triples_sum_to_zero[triple]\
    \ += 1\n    end\n    return triples_sum_to_zero[1]==3\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0])\n@test triples_sum_to_zero([1, 3, -2,\
    \ 1])\n@test triples_sum_to_zero([1, 2, 3, 7])\n@test triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n@test triples_sum_to_zero([1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the number of\
    \ integers in the list that sum to zero.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsi78ryuj.jl:24\nin expression starting at\
    \ /tmp/tmpsi78ryuj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc4ghqw31.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpc4ghqw31.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpc4ghqw31.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc4ghqw31.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc4ghqw31.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpc4ghqw31.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpc4ghqw31.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpc4ghqw31.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc4ghqw31.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc4ghqw31.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpc4ghqw31.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpc4ghqw31.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpc4ghqw31.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc4ghqw31.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc4ghqw31.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpseelkp1s.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpseelkp1s.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpseelkp1s.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpseelkp1s.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpseelkp1s.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpseelkp1s.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpseelkp1s.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpseelkp1s.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpseelkp1s.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpseelkp1s.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpseelkp1s.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpseelkp1s.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpseelkp1s.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpseelkp1s.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpseelkp1s.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbyu1riar.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpbyu1riar.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpbyu1riar.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbyu1riar.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbyu1riar.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbyu1riar.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpbyu1riar.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpbyu1riar.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbyu1riar.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbyu1riar.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpbyu1riar.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpbyu1riar.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpbyu1riar.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbyu1riar.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbyu1riar.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwzrlvce.jl:27\nin expression starting at\
    \ /tmp/tmpbwzrlvce.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5ntmmej.jl:25\nin expression starting at\
    \ /tmp/tmpu5ntmmej.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.4 Exercise: Write a function that checks if a list\
    \ contains all negative integers. Test it on all possible lists below.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4oysjcjg.jl:27\nin expression starting at\
    \ /tmp/tmp4oysjcjg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp418ut3a6.jl:20\nin expression starting at\
    \ /tmp/tmp418ut3a6.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) ==\
    \ false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3,\
    \ -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ia4_lt2.jl:25\nin expression starting at\
    \ /tmp/tmp_ia4_lt2.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @where sum(l) == 0 \n    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: @where not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp90t4gua8.jl:1\nin\
    \ expression starting at /tmp/tmp90t4gua8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpivi9mfsq.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpivi9mfsq.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpivi9mfsq.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivi9mfsq.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivi9mfsq.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpivi9mfsq.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpivi9mfsq.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpivi9mfsq.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivi9mfsq.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivi9mfsq.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpivi9mfsq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpivi9mfsq.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpivi9mfsq.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivi9mfsq.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpivi9mfsq.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe2xd7c9_.jl:34\n  Expression: candidate([1,\
    \ 3, -2, 1]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe2xd7c9_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe2xd7c9_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe2xd7c9_.jl:37\n  Expression: candidate([2, 4, -5, 3, 9, 7])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe2xd7c9_.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe2xd7c9_.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe2xd7c9_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = true\n    triples_sum_to_zero[2]\
    \ = true\n    triples_sum_to_zero[3] = true\n    \n    for i in 1:length(l)\n\
    \        if triples_sum_to_zero[i] == true\n            triples_sum_to_zero[i]\
    \ = false\n        end\n    end\n    \n    if triples_sum_to_zero[1] == true &&\
    \ triples_sum_to_zero[2] == true && triples_sum_to_zero[3] == true\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_hl2lf3.jl:36\nin expression starting at\
    \ /tmp/tmpy_hl2lf3.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\n4.2 Write a function that checks if a list contains\
    \ all unique elements.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcmzstpph.jl:28\nin expression starting at\
    \ /tmp/tmpcmzstpph.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    \n    for x in l\n        if triples_sum_to_zero[x] ==\
    \ 1\n            triples_sum_to_zero[x] = 0\n        else\n            triples_sum_to_zero[x]\
    \ += 1\n        end\n    end\n    \n    if triples_sum_to_zero[1] == 1\n     \
    \   return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero takes a list of integers\
    \ as an input.\n    it returns True if there are three distinct elements in the\
    \ list that\n    sum to zero, and False otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmu1dg3qp.jl:35\nin expression starting at\
    \ /tmp/tmpmu1dg3qp.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgi5qajnh.jl:20\nin expression starting at\
    \ /tmp/tmpgi5qajnh.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    triples_sum_to_zero\
    \ > 0 and triples_sum_to_zero < 3\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns\
    \ True if there are three distinct elements in the list that\n    sum to zero,\
    \ and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmph066bbcn.jl:17 expected\
    \ \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph066bbcn.jl:19\n\
    in expression starting at /tmp/tmph066bbcn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = l == [0, 0, 0]\n    return triples_sum_to_zero\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4mpoea40.jl:21\nin expression starting at\
    \ /tmp/tmp4mpoea40.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyrpeobcm.jl:20\nin expression starting at\
    \ /tmp/tmpyrpeobcm.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7u9en_zu.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp7u9en_zu.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp7u9en_zu.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7u9en_zu.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7u9en_zu.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7u9en_zu.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp7u9en_zu.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp7u9en_zu.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7u9en_zu.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7u9en_zu.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7u9en_zu.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp7u9en_zu.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp7u9en_zu.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7u9en_zu.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7u9en_zu.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = sum([triples_sum_to_zero(triple) for triple in l])\n    return triples_sum_to_zero\
    \ == 3\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpki0s0zdu.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  UndefVarError: triples_sum_to_zero\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpki0s0zdu.jl:18\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpki0s0zdu.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpki0s0zdu.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpki0s0zdu.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  UndefVarError: triples_sum_to_zero not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpki0s0zdu.jl:18\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpki0s0zdu.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpki0s0zdu.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpki0s0zdu.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  UndefVarError: triples_sum_to_zero not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(triple::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{Vector{Int64},\
    \ var\"#1#2\"})\n     @ Base ./array.jl:724\n   [4] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpki0s0zdu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppjj2f6km.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmppjj2f6km.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmppjj2f6km.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppjj2f6km.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppjj2f6km.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppjj2f6km.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmppjj2f6km.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmppjj2f6km.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppjj2f6km.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppjj2f6km.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppjj2f6km.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmppjj2f6km.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmppjj2f6km.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppjj2f6km.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppjj2f6km.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl5l85fkn.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpl5l85fkn.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpl5l85fkn.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl5l85fkn.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl5l85fkn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpl5l85fkn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpl5l85fkn.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpl5l85fkn.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl5l85fkn.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl5l85fkn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpl5l85fkn.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpl5l85fkn.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpl5l85fkn.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl5l85fkn.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl5l85fkn.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptwp29b92.jl:25\nin expression starting at\
    \ /tmp/tmptwp29b92.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdy1rak1t.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpdy1rak1t.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpdy1rak1t.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdy1rak1t.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdy1rak1t.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpdy1rak1t.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpdy1rak1t.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpdy1rak1t.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdy1rak1t.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdy1rak1t.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpdy1rak1t.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpdy1rak1t.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpdy1rak1t.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdy1rak1t.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdy1rak1t.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp0uh10w65.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0uh10w65.jl:1\n\
    in expression starting at /tmp/tmp0uh10w65.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv9_0b6e2.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpv9_0b6e2.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpv9_0b6e2.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv9_0b6e2.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv9_0b6e2.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv9_0b6e2.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpv9_0b6e2.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpv9_0b6e2.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv9_0b6e2.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv9_0b6e2.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv9_0b6e2.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpv9_0b6e2.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpv9_0b6e2.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv9_0b6e2.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv9_0b6e2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = l .== 0 .* l .== 0 .* l .== 0\n    return triples_sum_to_zero\nend\n</cell>\n\
    <code language=julia-1.5>\n@time triples_sum_to_zero(1:100);\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers as an input, and returns\
    \ True if there are three distinct elements in the list that sum to zero, and\
    \ False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7wdxhtqf.jl:21\nin expression starting at\
    \ /tmp/tmp7wdxhtqf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers as an input, and returns True if there are three distinct\
    \ elements in the list that sum to zero, and False otherwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5,\
    \ 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54ybw_3d.jl:25\nin expression starting at\
    \ /tmp/tmp54ybw_3d.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxu1s5r6d.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpxu1s5r6d.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpxu1s5r6d.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxu1s5r6d.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxu1s5r6d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpxu1s5r6d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpxu1s5r6d.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpxu1s5r6d.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxu1s5r6d.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxu1s5r6d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpxu1s5r6d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpxu1s5r6d.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpxu1s5r6d.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxu1s5r6d.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxu1s5r6d.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a list of integers as an input, and returns the number\
    \ of integers in the list that sum to zero.\nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpll16a7oh.jl:27\nin expression starting at\
    \ /tmp/tmpll16a7oh.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp3e3airws.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3e3airws.jl:1\n\
    in expression starting at /tmp/tmp3e3airws.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = l .== 0\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n \
    \   triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n \
    \   triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n \
    \   triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n \
    \   triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n \
    \   triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero\
    \ .& (l .== 0)\n    triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n \
    \   triples_sum_to_zero = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\
    \ = triples_sum_to_zero .& (l .== 0)\n    triples_sum_to_zero\nusing Test\n\n\
    @testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5,\
    \ 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpilnunhis.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpilnunhis.jl:1\n\
    in expression starting at /tmp/tmpilnunhis.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps3bfq4rz.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmps3bfq4rz.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmps3bfq4rz.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps3bfq4rz.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps3bfq4rz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmps3bfq4rz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmps3bfq4rz.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmps3bfq4rz.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps3bfq4rz.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps3bfq4rz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmps3bfq4rz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmps3bfq4rz.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmps3bfq4rz.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps3bfq4rz.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps3bfq4rz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers as an input, and returns True if there are three distinct\
    \ elements in the list that sum to zero, and False otherwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5,\
    \ 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz29ph7ir.jl:25\nin expression starting at\
    \ /tmp/tmpz29ph7ir.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = zeros(Int64, 3)\n    triples_sum_to_zero[1] = l[1]\n    triples_sum_to_zero[2]\
    \ = l[2]\n    triples_sum_to_zero[3] = l[3]\n    \n    \n    if triples_sum_to_zero[1]\
    \ == 0 && triples_sum_to_zero[2] == 0 && triples_sum_to_zero[3] == 0\n       \
    \ return true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test triples_sum_to_zero([1, 3, 5, 0]) == false\n@test triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@test triples_sum_to_zero([1, 2, 3, 7]) == false\n@test\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@test triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers as an input.\nIt returns True if there are two distinct elements in\
    \ the list that sum to zero, and False otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjuxc_1a9.jl:30\nin expression starting at\
    \ /tmp/tmpjuxc_1a9.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero\
    \ = @view l |> \n        filter(x -> x == 0 || x == -x, \n            filter(x\
    \ -> x == 0 || x == -x, \n                filter(x -> x == 0 || x == -x, \n  \
    \                  filter(x -> x == 0 || x == -x, \n                        filter(x\
    \ -> x == 0 || x == -x, \n                            filter(x -> x == 0 || x\
    \ == -x, \n                                filter(x -> x == 0 || x == -x, \n \
    \                                   filter(x -> x == 0 || x == -x, \n        \
    \                                filter(x -> x == 0 || x == -x, \n           \
    \                                 filter(x -> x == 0 || x == -x, \n          \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                               filter(x -> x == 0 || x == -x,\
    \ \n                                                        filter(x -> x == 0\
    \ || x == -x, \n                                                            filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \             filter(x -> x == 0 || x == -x, \n                              \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                                                   filter(x ->\
    \ x == 0 || x == -x, \n                                                      \
    \                      filter(x -> x == 0 || x == -x, \n                     \
    \                                                           filter(x -> x == 0\
    \ || x == -x, \n                                                             \
    \                       filter(x -> x == 0 || x == -x, \n                    \
    \                                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                         filter(x -> x == 0 || x == -x, \n  \
    \                                                                            \
    \                  filter(x -> x == 0 || x == -x, \n                         \
    \                                                                           filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                     filter(x -> x == 0 || x\
    \ == -x, \n                                                                  \
    \                                          filter(x -> x == 0 || x == -x, \n \
    \                                                                            \
    \                                   filter(x -> x == 0 || x == -x, \n        \
    \                                                                            \
    \                                filter(x -> x == 0 || x == -x, \n           \
    \                                                                            \
    \                                 filter(x -> x == 0 || x == -x, \n          \
    \                                                                            \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                                                            \
    \                                               filter(x -> x == 0 || x == -x,\
    \ \n                                                                         \
    \                                                           filter(x -> x == 0\
    \ || x == -x, \n                                                             \
    \                                                                           filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \             filter(x -> x == 0 || x == -x, \n                              \
    \                                                                            \
    \                                      filter(x -> x == 0 || x == -x, \n     \
    \                                                                            \
    \                                                                   filter(x ->\
    \ x == 0 || x == -x, \n                                                      \
    \                                                                            \
    \                      filter(x -> x == 0 || x == -x, \n                     \
    \                                                                            \
    \                                                           filter(x -> x == 0\
    \ || x == -x, \n                                                             \
    \                                                                            \
    \                       filter(x -> x == 0 || x == -x, \n                    \
    \                                                                            \
    \                                                                    filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                                         filter(x -> x == 0 || x == -x, \n  \
    \                                                                            \
    \                                                                            \
    \                  filter(x -> x == 0 || x == -x, \n                         \
    \                                                                            \
    \                                                                           filter(x\
    \ -> x == 0 || x == -x, \n                                                   \
    \                                                                            \
    \                                                     filter(x -> x == 0 || x\
    \ == -x, \n                                                                  \
    \                                                                            \
    \                                          filter(x -> x == 0 || x == -x, \n \
    \                                                                            \
    \                                                                            \
    \                                   filter(x \nusing Test\n\n@testset begin\n\n\
    candidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\t\
    @test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3h32pu_s.jl:65\nin expression starting at\
    \ /tmp/tmp3h32pu_s.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqrnu284_.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpqrnu284_.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpqrnu284_.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrnu284_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrnu284_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpqrnu284_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpqrnu284_.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpqrnu284_.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrnu284_.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrnu284_.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpqrnu284_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpqrnu284_.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpqrnu284_.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrnu284_.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqrnu284_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwlpc68fn.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpwlpc68fn.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpwlpc68fn.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwlpc68fn.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwlpc68fn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwlpc68fn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpwlpc68fn.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpwlpc68fn.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwlpc68fn.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwlpc68fn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpwlpc68fn.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpwlpc68fn.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpwlpc68fn.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwlpc68fn.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwlpc68fn.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0 \n            return true\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triples_sum_to_zero([1, 3, 5, 0]) == false\n@assert triples_sum_to_zero([1,\
    \ 3, -2, 1]) == true\n@assert triples_sum_to_zero([1, 2, 3, 7]) == false\n@assert\
    \ triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == true\n@assert triples_sum_to_zero([1])\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers as an input, and returns True if there are two distinct elements in\
    \ the list that sum to zero, and False otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = triples_sum_to_zero;\n\t@test(candidate([1, 3, 5, 0]) == false)\n\
    \t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1, 3, -2, 1]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1, 2, 5,\
    \ 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt1xf_bq2.jl:27\nin expression starting at\
    \ /tmp/tmpt1xf_bq2.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    sum = 0\n\
    \    for i in l\n        sum += i\n        if sum == 0\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    triples_sum_to_zero\
    \ takes a list of integers as an input.\n    it returns True if there are three\
    \ distinct elements in the list that\n    sum to zero, and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t@test(candidate([1,\
    \ 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\t@test(candidate([1,\
    \ 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) == false)\n\t@test(candidate([1,\
    \ 2, 5, 7]) == false)\n\t@test(candidate([2, 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1])\
    \ == false)\n\t@test(candidate([1, 3, 5, -100]) == false)\n\t@test(candidate([100,\
    \ 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyunnpwpt.jl:25\nin expression starting at\
    \ /tmp/tmpyunnpwpt.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvzxg7as7.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpvzxg7as7.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpvzxg7as7.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvzxg7as7.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvzxg7as7.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpvzxg7as7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpvzxg7as7.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpvzxg7as7.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvzxg7as7.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvzxg7as7.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpvzxg7as7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpvzxg7as7.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpvzxg7as7.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvzxg7as7.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvzxg7as7.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5asocu2d.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmp5asocu2d.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmp5asocu2d.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5asocu2d.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5asocu2d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp5asocu2d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp5asocu2d.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp5asocu2d.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5asocu2d.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5asocu2d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp5asocu2d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmp5asocu2d.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp5asocu2d.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5asocu2d.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5asocu2d.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz82d0i1t.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpz82d0i1t.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpz82d0i1t.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz82d0i1t.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz82d0i1t.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpz82d0i1t.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpz82d0i1t.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz82d0i1t.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz82d0i1t.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz82d0i1t.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpz82d0i1t.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpz82d0i1t.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpz82d0i1t.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz82d0i1t.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz82d0i1t.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    triples_sum_to_zero(l,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\t\
    @test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) == false)\n\
    \t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2, 3, 7]) ==\
    \ false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2, 4,\
    \ -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv0ikflo5.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 3, 5, 0]) == false\n  MethodError: no method matching\
    \ triples_sum_to_zero(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   triples_sum_to_zero(::Vector{Int64}) at /tmp/tmpv0ikflo5.jl:17\n  Stacktrace:\n\
    \   [1] triples_sum_to_zero(l::Vector{Int64})\n     @ Main /tmp/tmpv0ikflo5.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv0ikflo5.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv0ikflo5.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv0ikflo5.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 5, -1]) == false\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpv0ikflo5.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpv0ikflo5.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv0ikflo5.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv0ikflo5.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv0ikflo5.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, -2, 1]) == true\n  MethodError: no method matching triples_sum_to_zero(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    triples_sum_to_zero(::Vector{Int64})\
    \ at /tmp/tmpv0ikflo5.jl:17\n  Stacktrace:\n   [1] triples_sum_to_zero(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpv0ikflo5.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv0ikflo5.jl:27 [inlined]\n\
    \   [4] macro"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv0ikflo5.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n\
    \    it returns True if there are three distinct elements in the list that\n \
    \   sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>>\
    \ triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n  \
    \  \"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool \n    \n    sum\
    \ = 0\n    for i in l\n        sum += i\n        if sum == 0 \n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it\
    \ returns True if there are three distinct elements in the list that\n    sum\
    \ to zero, and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = triples_sum_to_zero;\n\
    \t@test(candidate([1, 3, 5, 0]) == false)\n\t@test(candidate([1, 3, 5, -1]) ==\
    \ false)\n\t@test(candidate([1, 3, -2, 1]) == true)\n\t@test(candidate([1, 2,\
    \ 3, 7]) == false)\n\t@test(candidate([1, 2, 5, 7]) == false)\n\t@test(candidate([2,\
    \ 4, -5, 3, 9, 7]) == true)\n\t@test(candidate([1]) == false)\n\t@test(candidate([1,\
    \ 3, 5, -100]) == false)\n\t@test(candidate([100, 3, 5, -100]) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz2a114ik.jl:28\nin expression starting at\
    \ /tmp/tmpz2a114ik.jl:28\n"
  exit_code: 1
  status: SyntaxError
