name: HumanEval_61_correct_bracketing
language: julia
results:
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5yeh18l1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5yeh18l1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5yeh18l1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \",\")\n    brackets = brackets.replace(\"\
    :\", \";\")\n    brackets = brackets.replace(\";\", \":\")\n    brackets = brackets.replace(\"\
    !\", \";\")\n    brackets = brackets.replace(\";\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \";\")\n    brackets = brackets.replace(\";\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \";\")\n    brackets = brackets.replace(\";\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \";\")\n    brackets = brackets.replace(\";\", \">\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \",\")\n    brackets = brackets.replace(\"\
    :\", \";\")\n    brackets = brackets.replace(\";\", \":\")\n    brackets = brackets.replace(\"\
    !\", \";\")\n    brackets = brackets.replace(\";\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \";\")\n    brackets = brackets.replace(\";\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \";\")\n    brackets = brackets.replace(\";\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \";\")\n    brackets = brackets.replace(\";\", \">\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \",\")\n    brackets = brackets.replace(\"\
    :\", \";\")\n    brackets = brackets.replace(\";\", \":\")\n    brackets = brackets.replace(\"\
    !\", \";\")\n    brackets = brackets.replace(\";\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \";\")\n    brackets = brackets.replace(\";\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \";\")\n    brackets = brackets.replace(\";\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \";\")\n    brackets = brackets.replace(\";\", \">\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \",\")\n    brackets = brackets.replace(\"\
    :\", \";\")\n    brackets = brackets.replace(\";\", \":\")\n    brackets = brackets.replace(\"\
    !\", \";\")\n    brackets = brackets.replace(\";\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \";\")\n    brackets = brackets.replace(\";\", \"?\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppgvnwr_q.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppgvnwr_q.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppgvnwr_q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmph1kz9qgn.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmph1kz9qgn.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi_ivs65l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpi_ivs65l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpi_ivs65l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7bx1lrii.jl:68\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7bx1lrii.jl:68\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxyet26hs.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxyet26hs.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxyet26hs.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx1od2qwf.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx1od2qwf.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsx81k5_5.jl:66\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsx81k5_5.jl:66\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa94tani6.jl:68\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa94tani6.jl:68\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpme9z3f7q.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpme9z3f7q.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1hf_58pt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1hf_58pt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1hf_58pt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpvmg61ex8.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpvmg61ex8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphdthf6vb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphdthf6vb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphdthf6vb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj2z7v_1a.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpj2z7v_1a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpj2z7v_1a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdybw1rp0.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdybw1rp0.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    @\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets =\
    \ brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ~\", \"\\~\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\\
    %\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfrinh3ta.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpfrinh3ta.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptbfqel8r.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptbfqel8r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptbfqel8r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy7gvzu_3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpy7gvzu_3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpy7gvzu_3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpheyieu7o.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpheyieu7o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpheyieu7o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88zgz5pe.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp88zgz5pe.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp88zgz5pe.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbh1h3wdh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbh1h3wdh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbh1h3wdh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwwliynoo.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwwliynoo.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp51mvirfl.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp51mvirfl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp51mvirfl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcbmnnoh_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcbmnnoh_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcbmnnoh_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnwn1sn9y.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpnwn1sn9y.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyagcjkh0.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyagcjkh0.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvb0xgqy5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvb0xgqy5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvb0xgqy5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\",\", \"\\, \")\n    brackets = brackets.replace(\";\", \"\
    \\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\"\
    ;\", \"\\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets\
    \ = brackets.replace(\";\", \"\\; \")\n    brackets = brackets.replace(\":\",\
    \ \"\\: \")\n    brackets = brackets.replace(\";\", \"\\; \")\n    brackets =\
    \ brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\";\", \"\
    \\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\"\
    ;\", \"\\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets\
    \ = brackets.replace(\";\", \"\\; \")\n    brackets = brackets.replace(\":\",\
    \ \"\\: \")\n    brackets = brackets.replace(\";\", \"\\; \")\n    brackets =\
    \ brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\";\", \"\
    \\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\"\
    ;\", \"\\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets\
    \ = brackets.replace(\";\", \"\\; \")\n    brackets = brackets.replace(\":\",\
    \ \"\\: \")\n    brackets = brackets.replace(\";\", \"\\; \")\n    brackets =\
    \ brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\";\", \"\
    \\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\"\
    ;\", \"\\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets\
    \ = brackets.replace(\";\", \"\\; \")\n    brackets = brackets.replace(\":\",\
    \ \"\\: \")\n    brackets = brackets.replace(\";\", \"\\; \")\n    brackets =\
    \ brackets.replace(\":\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmptc4i8jtw.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmptc4i8jtw.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmper4sgv8e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmper4sgv8e.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmper4sgv8e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprohf4_1a.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmprohf4_1a.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoc9auom0.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoc9auom0.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl7w0vxv4.jl:54\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl7w0vxv4.jl:54\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpn_4f2sqo.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpn_4f2sqo.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpm9ypdh2_.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpm9ypdh2_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjywy1t6_.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjywy1t6_.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptlk34vn7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptlk34vn7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptlk34vn7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    )(\", \"}(\")\n    brackets = brackets.replace(\")(\", \"}(\")\n    brackets =\
    \ brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"\
    (\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") ==\
    \ true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphugmmxeo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphugmmxeo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphugmmxeo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcmqgzv_i.jl:54\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcmqgzv_i.jl:54\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf_07cw88.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf_07cw88.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf_07cw88.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzop3wjdd.jl:68\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzop3wjdd.jl:68\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpenvcgkug.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpenvcgkug.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpenvcgkug.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu2ja7tnd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu2ja7tnd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu2ja7tnd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9581ypc7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9581ypc7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9581ypc7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbrbgi2gw.jl:54\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbrbgi2gw.jl:54\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\"+\", \"+\")\n    brackets = brackets.replace(\"\
    -\", \"_\")\n    brackets = brackets.replace(\"*\", \"*\")\n    brackets = brackets.replace(\"\
    ^\", \"^\")\n    brackets = brackets.replace(\"~\", \"~\")\n    brackets = brackets.replace(\"\
    $\", \"$\")\n    brackets = brackets.replace(\"%\", \"%\")\n    brackets = brackets.replace(\"\
    &\", \"&\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\"\
    )\", \")\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    +\", \"+\")\n    brackets = brackets.replace(\"-\", \"_\")\n    brackets = brackets.replace(\"\
    *\", \"*\")\n    brackets = brackets.replace(\"^\", \"^\")\n    brackets = brackets.replace(\"\
    ~\", \"~\")\n    brackets = brackets.replace(\"$\", \"$\")\n    brackets = brackets.replace(\"\
    %\", \"%\")\n    brackets = brackets.replace(\"&\", \"&\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1cgcn9g3.jl:40\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1cgcn9g3.jl:40\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    -\", \"\\-\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    `\", \"\\`\")\n    brackets = brackets.replace(\"'\", \"\\'\")\n    brackets =\
    \ brackets.replace(\"\\(\", \"\\(\")\n    brackets = brackets.replace(\"\\)\"\
    , \"\\)\")\n    brackets = brackets.replace(\"\\[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"\\]\", \"\\]\")\n    brackets = brackets.replace(\"\\{\"\
    , \"\\{\")\n    brackets = brackets.replace(\"\\}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    brackets = brackets.replace(\"\\>\"\
    , \"\\>\")\n    brackets = brackets.replace(\"\\{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"\\}\", \"\\}\")\n    brackets = brackets.replace(\"\\,\"\
    , \"\\,\")\n    brackets = brackets.replace(\"\\;\", \"\\;\")\n    brackets =\
    \ brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\=\"\
    , \"\\=\")\n    brackets = brackets.replace(\"\\+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\"-\", \"\\-\")\n    brackets = brackets.replace(\"\\*\", \"\
    \\*\")\n    brackets = brackets.replace(\"\\?\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp66z3jm4r.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp66z3jm4r.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2t6i2v53.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2t6i2v53.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2t6i2v53.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp51vyhgpc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp51vyhgpc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp51vyhgpc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbacuwjvd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbacuwjvd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbacuwjvd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk1idb_2f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk1idb_2f.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk1idb_2f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp00qrsqib.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp00qrsqib.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbmjwn9na.jl:68\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbmjwn9na.jl:68\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeanpwo5l.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeanpwo5l.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3e35t51l.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp3e35t51l.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8klqj1hx.jl:56\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8klqj1hx.jl:56\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvq60wry6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvq60wry6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvq60wry6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp73l86sgc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp73l86sgc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp73l86sgc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyfurox5n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyfurox5n.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyfurox5n.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ib80ca5.jl:68\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3ib80ca5.jl:68\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9xo8ph_k.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9xo8ph_k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9xo8ph_k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    bracket\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx_tetay7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx_tetay7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx_tetay7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnf_gjyls.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnf_gjyls.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp21p00cnv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp21p00cnv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp21p00cnv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkgfrg41w.jl:65\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkgfrg41w.jl:65\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7r51many.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7r51many.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7r51many.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptez00ljb.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptez00ljb.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8xah252t.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp8xah252t.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpald4ouja.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpald4ouja.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcx0jwx0r.jl:68\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcx0jwx0r.jl:68\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \",\")\n    brackets = brackets.replace(\"\
    :\", \";\")\n    brackets = brackets.replace(\";\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeexrvwkz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpeexrvwkz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpeexrvwkz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv3gx40kw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpv3gx40kw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv3gx40kw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6qiyyxqc.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6qiyyxqc.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt2_ia1b6.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt2_ia1b6.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1wumoeru.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp1wumoeru.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2v3fkosh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2v3fkosh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2v3fkosh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2fi089l5.jl:65\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2fi089l5.jl:65\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpx69zj82g.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpx69zj82g.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv8w2sxif.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpv8w2sxif.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv8w2sxif.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnk2n693z.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnk2n693z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnk2n693z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0z14c8wz.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0z14c8wz.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpol_b2m7h.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpol_b2m7h.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpol_b2m7h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp6sa5yb7x.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp6sa5yb7x.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfxz37b_b.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfxz37b_b.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfxz37b_b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp_rl87dle.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp_rl87dle.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\\(\", \"\
    \\(\")\n    brackets = brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\
    \\{\\}\", \"\\{\\}\")\n    brackets = brackets.replace(\"\\[\", \"\\[\")\n   \
    \ brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets = brackets.replace(\"\
    \\,\", \"\\,\")\n    brackets = brackets.replace(\"\\;\", \"\\;\")\n    brackets\
    \ = brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\=\"\
    , \"\\=\")\n    brackets = brackets.replace(\"\\!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"\\~\", \"\\~\")\n    brackets = brackets.replace(\"\\$\"\
    , \"\\$\")\n    brackets = brackets.replace(\"\\%\", \"\\%\")\n    brackets =\
    \ brackets.replace(\"\\^\", \"\\^\")\n    brackets = brackets.replace(\"\\&\"\
    , \"\\&\")\n    brackets = brackets.replace(\"\\*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"\\+\", \"\\+\")\n    brackets = brackets.replace(\"\\<\"\
    , \"\\<\")\n    brackets = brackets.replace(\"\\>\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"\\|\", \"\\|\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\)\", \"\\)\")\n\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") ==\
    \ true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfx5ymefg.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpfx5ymefg.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_v8cy_xd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_v8cy_xd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_v8cy_xd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptzq18w0e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptzq18w0e.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptzq18w0e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\"\
    )\", \")\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"[\", \"[\")\n    brackets = brackets.replace(\"\
    ]\", \"]\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo3lt_x46.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpo3lt_x46.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo3lt_x46.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyi1k8uuv.jl:50\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyi1k8uuv.jl:50\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj17h672i.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj17h672i.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppve74hem.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppve74hem.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppve74hem.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyfwgn5v9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyfwgn5v9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyfwgn5v9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_6qkm5pf.jl:50\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_6qkm5pf.jl:50\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpolaaqie3.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpolaaqie3.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf0s5i9mm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf0s5i9mm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf0s5i9mm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphczgm89x.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphczgm89x.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    @\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets =\
    \ brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    '\", \"\\'\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets =\
    \ brackets.replace(\"`\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    @\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\"\"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets\
    \ = brackets.replace(\"`\", \"\")\n    brackets = brackets.replace(\"~\", \"\"\
    )\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    @\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\"\"\")\n    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0yul6051.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp0yul6051.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe7br8awn.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe7br8awn.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"-\", \"\\-\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\\\\\\\\\")\n    brackets = brackets.replace(\"\\\"\", \"\\\\\\\"\"\
    )\n    brackets = brackets.replace(\"'\", \"\\\\'\")\n    brackets = brackets.replace(\"\
    `\", \"\\`\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmptzley1yg.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmptzley1yg.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\"'\", \"\\'\")\n    brackets =\
    \ brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    brackets = brackets.replace(\"\\>\"\
    , \"\\>\")\n    brackets = brackets.replace(\"\\,\", \"\\,\")\n    brackets =\
    \ brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\;\"\
    , \"\\;\")\n    brackets = brackets.replace(\"\\'\", \"\\'\")\n    brackets =\
    \ brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    brackets = brackets.replace(\"\\>\"\
    , \"\\>\")\n    brackets = brackets.replace(\"\\,\", \"\\,\")\n    brackets =\
    \ brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\;\"\
    , \"\\;\")\n    brackets = brackets.replace(\"\\'\", \"\\'\")\n    brackets =\
    \ brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    brackets = brackets.replace(\"\\>\"\
    , \"\\>\")\n    brackets = brackets.replace(\"\\,\", \"\\,\")\n    brackets =\
    \ brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\;\"\
    , \"\\;\")\n    brackets = brackets.replace(\"\\'\", \"\\'\")\n    brackets =\
    \ brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    bracket\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpr9zs51s0.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpr9zs51s0.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9wm7xvec.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9wm7xvec.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9wm7xvec.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpynogiti0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpynogiti0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpynogiti0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0tdpux8y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0tdpux8y.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0tdpux8y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp39x16d8b.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp39x16d8b.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpljyr2_nt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpljyr2_nt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpljyr2_nt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq3neiv20.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpq3neiv20.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpq3neiv20.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpajdb9asd.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpajdb9asd.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb0b8g2_l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpb0b8g2_l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpb0b8g2_l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxw6gqakf.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxw6gqakf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxw6gqakf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpawzibuht.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpawzibuht.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpawzibuht.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy838emtu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpy838emtu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpy838emtu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6fe3rb3s.jl:54\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6fe3rb3s.jl:54\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpcc9qhehi.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpcc9qhehi.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3bncwjte.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3bncwjte.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3bncwjte.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgj6pvg_v.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgj6pvg_v.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgj6pvg_v.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp786r76wh.jl:50\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp786r76wh.jl:50\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbbqt4oho.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbbqt4oho.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl0tnecao.jl:65\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl0tnecao.jl:65\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4jjqsuew.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4jjqsuew.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = \n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph4ofyguq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmph4ofyguq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmph4ofyguq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfzzkcsh0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfzzkcsh0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfzzkcsh0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"'\", \"\\'\")\n    brackets = brackets.replace(\"\\(\", \"\
    \\(\")\n    brackets = brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\
    \\{\\}\", \"\\{\\}\")\n    brackets = brackets.replace(\"\\[\", \"\\[\")\n   \
    \ brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets = brackets.replace(\"\
    \\,\", \"\\,\")\n    brackets = brackets.replace(\"\\;\", \"\\;\")\n    brackets\
    \ = brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\!\"\
    , \"\\!\")\n    brackets = brackets.replace(\"\\~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"\\$\", \"\\$\")\n    brackets = brackets.replace(\"\\%\"\
    , \"\\%\")\n    brackets = brackets.replace(\"\\^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"\\&\", \"\\&\")\n    brackets = brackets.replace(\"\\*\"\
    , \"\\*\")\n    brackets = brackets.replace(\"\\+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    brackets = brackets.replace(\"\\>\"\
    , \"\\>\")\n    brackets = brackets.replace(\"\\?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"\\'\", \"\\'\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\)\", \"\\)\")\n    brackets =\
    \ bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpob3zgrhz.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpob3zgrhz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyru6pd1k.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyru6pd1k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyru6pd1k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3ap6u1pf.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp3ap6u1pf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqa_rxqp1.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpqa_rxqp1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxmmkz5ol.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxmmkz5ol.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxmmkz5ol.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb1eou5x4.jl:50\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpb1eou5x4.jl:50\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr1i8ywxc.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr1i8ywxc.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \"}\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\"\
    )\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\"\
    )\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\"\
    )\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\"\
    )\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\"\
    )\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets\
    \ = brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpld3ea_6k.jl:50\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpld3ea_6k.jl:50\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjg9n6c65.jl:68\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjg9n6c65.jl:68\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp_9yalopc.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp_9yalopc.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphcc46js6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphcc46js6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphcc46js6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphhdnxcdp.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmphhdnxcdp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4m63egun.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4m63egun.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4m63egun.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgq5hm9i3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgq5hm9i3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgq5hm9i3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4360y2nb.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4360y2nb.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt85dwjok.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt85dwjok.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjiof_p80.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpjiof_p80.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprn4f91aq.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprn4f91aq.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp5mhg5pfw.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp5mhg5pfw.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp936gmw4l.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp936gmw4l.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplax3ej4k.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplax3ej4k.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxaie794v.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxaie794v.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfv71ss3a.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfv71ss3a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfv71ss3a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpujch4flh.jl:68\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpujch4flh.jl:68\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgs6nvsen.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgs6nvsen.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5sdkjfhe.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5sdkjfhe.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5sdkjfhe.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphup90lcp.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmphup90lcp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"\
    $\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\\
    &\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\\
    %\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"@\", \"\\\
    @\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3v_j_f25.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp3v_j_f25.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmeafze7v.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpmeafze7v.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplvhvtceq.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplvhvtceq.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp64cv3u82.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp64cv3u82.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoo7qs09y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoo7qs09y.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoo7qs09y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb1isui8u.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpb1isui8u.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpb1isui8u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8tzkxwg4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8tzkxwg4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8tzkxwg4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    -\", \"\\-\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"&\", \"\\\
    &\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    $\", \"\\$\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"=\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpe6fgqfrp.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpe6fgqfrp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\(\")\n    brackets = brackets.replace(\"\
    ]\", \"\\)\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\(\")\n    brackets = brackets.replace(\"]\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"\
    }\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\(\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\)\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\(\")\n    brackets = brackets.replace(\"]\", \"\\\
    )\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    (\")\n    brackets = brackets.replace(\"]\", \"\\)\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\(\")\n    brackets = brackets.replace(\"\
    ]\", \"\\)\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\(\")\n    brackets = brackets.replace(\"]\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwg0q3txg.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpwg0q3txg.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpu1u2h3e1.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpu1u2h3e1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1w7wjm1z.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1w7wjm1z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1w7wjm1z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6mdj_fab.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6mdj_fab.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp01lqlj8r.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp01lqlj8r.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe8294rgl.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe8294rgl.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_jxh1gmq.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_jxh1gmq.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz1l7p887.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz1l7p887.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz1l7p887.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm_3yg7a3.jl:68\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm_3yg7a3.jl:68\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjgut8jvz.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjgut8jvz.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ue3dkon.jl:66\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9ue3dkon.jl:66\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppihh8hgu.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmppihh8hgu.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpesjmvxo6.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpesjmvxo6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpuligu99_.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpuligu99_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    bracket\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg5i7ri2x.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpg5i7ri2x.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpg5i7ri2x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0n3j7in9.jl:68\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0n3j7in9.jl:68\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpz2zy7b8s.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpz2zy7b8s.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp88sxfi_u.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp88sxfi_u.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdm0_f9cq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdm0_f9cq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdm0_f9cq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpk0u4nwoi.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpk0u4nwoi.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmwwjrkhk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmwwjrkhk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmwwjrkhk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9migc4f3.jl:54\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9migc4f3.jl:54\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmbefqjvg.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpmbefqjvg.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyqs7zho0.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyqs7zho0.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnwcq9fv1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnwcq9fv1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnwcq9fv1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphfkdjcnq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphfkdjcnq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphfkdjcnq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyp6wtgy1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyp6wtgy1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyp6wtgy1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\\
    &\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    @\", \"\\@\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpcng6p2nq.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpcng6p2nq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps2xsdvmh.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps2xsdvmh.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2mwlwbs5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2mwlwbs5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2mwlwbs5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppluaqwcs.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmppluaqwcs.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprmui839s.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprmui839s.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphyot18v0.jl:66\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphyot18v0.jl:66\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr2rj_lvt.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr2rj_lvt.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"~\", \"~\")\n    brackets = brackets.replace(\"\
    @\", \"@\")\n    brackets = brackets.replace(\"$\", \"$\")\n    brackets = brackets.replace(\"\
    %\", \"%\")\n    brackets = brackets.replace(\"^\", \"^\")\n    brackets = brackets.replace(\"\
    &\", \"&\")\n    brackets = brackets.replace(\"*\", \"*\")\n    brackets = brackets.replace(\"\
    +\", \"+\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"~\", \"~\")\n    brackets = brackets.replace(\"\
    @\", \"@\")\n    brackets = brackets.replace(\"$\", \"$\")\n    brackets = brackets.replace(\"\
    %\", \"%\")\n    brackets = brackets.replace(\"^\", \"^\")\n    brackets = \n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_lt8wkrn.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_lt8wkrn.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp79j4tn2f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp79j4tn2f.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp79j4tn2f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpve3kzgmo.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpve3kzgmo.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpegkm8fbe.jl:54\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpegkm8fbe.jl:54\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa12vj1_a.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa12vj1_a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa12vj1_a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpucjzcqq3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpucjzcqq3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpucjzcqq3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"@\", \"\\\
    @\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"`\", \"\\\
    `\")\n    brackets = brackets.replace(\"'\", \"\\'\")\n    brackets = brackets.replace(\"\
    \\(\", \"\\(\")\n    brackets = brackets.replace(\"\\)\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"\\[\", \"\\[\")\n    brackets = brackets.replace(\"\\]\"\
    , \"\\]\")\n    brackets = brackets.replace(\"\\{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"\\}\", \"\\}\")\n    brackets = brackets.replace(\"\\<\"\
    , \"\\<\")\n    brackets = brackets.replace(\"\\>\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"\\,\", \"\\,\")\n    brackets = brackets.replace(\"\\;\"\
    , \"\\;\")\n    brackets = brackets.replace(\"\\:\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"\\!\", \"\\!\")\n    brackets = brackets.replace(\"\\?\"\
    , \"\\?\")\n    brackets = brackets.replace(\"\\@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"\\$\", \"\\$\")\n    brackets = brackets.replace(\"\\%\"\
    , \"\\%\")\n    brackets = brackets.replace(\"\\^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"\\&\", \"\\&\")\n    brackets = brackets.replace(\"\\*\"\
    , \"\\*\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpacqbtqtz.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpacqbtqtz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    $\", \"\\$\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets =\
    \ brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpveoyej3t.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpveoyej3t.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\"\\\"\", \"\\\\\"\")\n    brackets\
    \ = brackets.replace(\"'\", \"\\'\")\n    brackets = brackets.replace(\"`\", \"\
    \\`\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"-\", \"\\-\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\"\\\"\", \"\\\\\"\")\n    brackets = brackets.replace(\"\
    '\", \"\\'\")\n    brackets = brackets.replace(\"`\", \"\\`\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\"-\", \"\\-\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpo5gysiq_.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpo5gysiq_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyuyfyz9f.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyuyfyz9f.jl:67\n"
  exit_code: 1
  status: Exception
