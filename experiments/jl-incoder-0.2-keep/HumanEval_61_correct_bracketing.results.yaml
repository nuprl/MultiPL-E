name: HumanEval_61_correct_bracketing
language: julia
results:
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpznjgm44u.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpznjgm44u.jl:1\n\
    in expression starting at /tmp/tmpznjgm44u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \",\")\n    brackets = brackets.replace(\"\
    :\", \";\")\n    brackets = brackets.replace(\";\", \":\")\n    brackets = brackets.replace(\"\
    !\", \";\")\n    brackets = brackets.replace(\";\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \";\")\n    brackets = brackets.replace(\";\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \";\")\n    brackets = brackets.replace(\";\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \";\")\n    brackets = brackets.replace(\";\", \">\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \",\")\n    brackets = brackets.replace(\"\
    :\", \";\")\n    brackets = brackets.replace(\";\", \":\")\n    brackets = brackets.replace(\"\
    !\", \";\")\n    brackets = brackets.replace(\";\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \";\")\n    brackets = brackets.replace(\";\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \";\")\n    brackets = brackets.replace(\";\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \";\")\n    brackets = brackets.replace(\";\", \">\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \",\")\n    brackets = brackets.replace(\"\
    :\", \";\")\n    brackets = brackets.replace(\";\", \":\")\n    brackets = brackets.replace(\"\
    !\", \";\")\n    brackets = brackets.replace(\";\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \";\")\n    brackets = brackets.replace(\";\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \";\")\n    brackets = brackets.replace(\";\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \";\")\n    brackets = brackets.replace(\";\", \">\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \",\")\n    brackets = brackets.replace(\"\
    :\", \";\")\n    brackets = brackets.replace(\";\", \":\")\n    brackets = brackets.replace(\"\
    !\", \";\")\n    brackets = brackets.replace(\";\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \";\")\n    brackets = brackets.replace(\";\", \"?\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8izqvn3a.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8izqvn3a.jl:1\n\
    in expression starting at /tmp/tmp8izqvn3a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwby5a9h0.jl:14\nin expression starting at /tmp/tmpwby5a9h0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo8q09fwx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo8q09fwx.jl:1\n\
    in expression starting at /tmp/tmpo8q09fwx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpva2_y1ye.jl:68\nin expression starting at\
    \ /tmp/tmpva2_y1ye.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxz0afchi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxz0afchi.jl:1\n\
    in expression starting at /tmp/tmpxz0afchi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbo1_0pa5.jl:67\nin expression starting at\
    \ /tmp/tmpbo1_0pa5.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpga2jtw3x.jl:66\nin expression starting at\
    \ /tmp/tmpga2jtw3x.jl:66\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4bngilaj.jl:68\nin expression starting at\
    \ /tmp/tmp4bngilaj.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjst10qt.jl:67\nin expression starting at\
    \ /tmp/tmpfjst10qt.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8d2qfr_e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8d2qfr_e.jl:1\n\
    in expression starting at /tmp/tmp8d2qfr_e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprdeqkbxm.jl:14\nin expression starting at /tmp/tmprdeqkbxm.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn1ovac6c.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn1ovac6c.jl:1\n\
    in expression starting at /tmp/tmpn1ovac6c.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpif2bc8c1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpif2bc8c1.jl:1\n\
    in expression starting at /tmp/tmpif2bc8c1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfpoggzwl.jl:67\nin expression starting at\
    \ /tmp/tmpfpoggzwl.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    @\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets =\
    \ brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ~\", \"\\~\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\\
    %\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvx_geyp6.jl:14\nin expression starting at /tmp/tmpvx_geyp6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyud7yt7a.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyud7yt7a.jl:1\n\
    in expression starting at /tmp/tmpyud7yt7a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\":\", \" \")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8798jbbn.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8798jbbn.jl:1\n\
    in expression starting at /tmp/tmp8798jbbn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv3upbi9e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv3upbi9e.jl:1\n\
    in expression starting at /tmp/tmpv3upbi9e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuq9u28af.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuq9u28af.jl:1\n\
    in expression starting at /tmp/tmpuq9u28af.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0n9hogpb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0n9hogpb.jl:1\n\
    in expression starting at /tmp/tmp0n9hogpb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvj0hrzhu.jl:67\nin expression starting at\
    \ /tmp/tmpvj0hrzhu.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3jvda941.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3jvda941.jl:1\n\
    in expression starting at /tmp/tmp3jvda941.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp06076zu2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp06076zu2.jl:1\n\
    in expression starting at /tmp/tmp06076zu2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8t4edaea.jl:14\nin expression starting at /tmp/tmp8t4edaea.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpac1whu5u.jl:67\nin expression starting at\
    \ /tmp/tmpac1whu5u.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpctrrorj1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpctrrorj1.jl:1\n\
    in expression starting at /tmp/tmpctrrorj1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\",\", \"\\, \")\n    brackets = brackets.replace(\";\", \"\
    \\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\"\
    ;\", \"\\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets\
    \ = brackets.replace(\";\", \"\\; \")\n    brackets = brackets.replace(\":\",\
    \ \"\\: \")\n    brackets = brackets.replace(\";\", \"\\; \")\n    brackets =\
    \ brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\";\", \"\
    \\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\"\
    ;\", \"\\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets\
    \ = brackets.replace(\";\", \"\\; \")\n    brackets = brackets.replace(\":\",\
    \ \"\\: \")\n    brackets = brackets.replace(\";\", \"\\; \")\n    brackets =\
    \ brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\";\", \"\
    \\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\"\
    ;\", \"\\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets\
    \ = brackets.replace(\";\", \"\\; \")\n    brackets = brackets.replace(\":\",\
    \ \"\\: \")\n    brackets = brackets.replace(\";\", \"\\; \")\n    brackets =\
    \ brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\";\", \"\
    \\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets = brackets.replace(\"\
    ;\", \"\\; \")\n    brackets = brackets.replace(\":\", \"\\: \")\n    brackets\
    \ = brackets.replace(\";\", \"\\; \")\n    brackets = brackets.replace(\":\",\
    \ \"\\: \")\n    brackets = brackets.replace(\";\", \"\\; \")\n    brackets =\
    \ brackets.replace(\":\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa7tcpnhu.jl:14\nin expression starting at /tmp/tmpa7tcpnhu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsqotdw18.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsqotdw18.jl:1\n\
    in expression starting at /tmp/tmpsqotdw18.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzy3nrayu.jl:14\nin expression starting at /tmp/tmpzy3nrayu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpybg8af1y.jl:67\nin expression starting at\
    \ /tmp/tmpybg8af1y.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzhk_psgo.jl:54\nin expression starting at\
    \ /tmp/tmpzhk_psgo.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnwm2pkam.jl:14\nin expression starting at /tmp/tmpnwm2pkam.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpktcc8te9.jl:14\nin expression starting at /tmp/tmpktcc8te9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptywd2k57.jl:67\nin expression starting at\
    \ /tmp/tmptywd2k57.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdakfyx9m.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdakfyx9m.jl:1\n\
    in expression starting at /tmp/tmpdakfyx9m.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    )(\", \"}(\")\n    brackets = brackets.replace(\")(\", \"}(\")\n    brackets =\
    \ brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"\
    (\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") ==\
    \ true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa580h7h1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa580h7h1.jl:1\n\
    in expression starting at /tmp/tmpa580h7h1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_sa80lt.jl:54\nin expression starting at\
    \ /tmp/tmpl_sa80lt.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0xqjdqgk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0xqjdqgk.jl:1\n\
    in expression starting at /tmp/tmp0xqjdqgk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwj2gw8m9.jl:68\nin expression starting at\
    \ /tmp/tmpwj2gw8m9.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplwupiwsd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplwupiwsd.jl:1\n\
    in expression starting at /tmp/tmplwupiwsd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9fjdogho.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9fjdogho.jl:1\n\
    in expression starting at /tmp/tmp9fjdogho.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplkbwo91c.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplkbwo91c.jl:1\n\
    in expression starting at /tmp/tmplkbwo91c.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39r_3r7v.jl:54\nin expression starting at\
    \ /tmp/tmp39r_3r7v.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\"+\", \"+\")\n    brackets = brackets.replace(\"\
    -\", \"_\")\n    brackets = brackets.replace(\"*\", \"*\")\n    brackets = brackets.replace(\"\
    ^\", \"^\")\n    brackets = brackets.replace(\"~\", \"~\")\n    brackets = brackets.replace(\"\
    $\", \"$\")\n    brackets = brackets.replace(\"%\", \"%\")\n    brackets = brackets.replace(\"\
    &\", \"&\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\"\
    )\", \")\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    +\", \"+\")\n    brackets = brackets.replace(\"-\", \"_\")\n    brackets = brackets.replace(\"\
    *\", \"*\")\n    brackets = brackets.replace(\"^\", \"^\")\n    brackets = brackets.replace(\"\
    ~\", \"~\")\n    brackets = brackets.replace(\"$\", \"$\")\n    brackets = brackets.replace(\"\
    %\", \"%\")\n    brackets = brackets.replace(\"&\", \"&\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5qlu01l.jl:40\nin expression starting at\
    \ /tmp/tmpm5qlu01l.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    -\", \"\\-\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    `\", \"\\`\")\n    brackets = brackets.replace(\"'\", \"\\'\")\n    brackets =\
    \ brackets.replace(\"\\(\", \"\\(\")\n    brackets = brackets.replace(\"\\)\"\
    , \"\\)\")\n    brackets = brackets.replace(\"\\[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"\\]\", \"\\]\")\n    brackets = brackets.replace(\"\\{\"\
    , \"\\{\")\n    brackets = brackets.replace(\"\\}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    brackets = brackets.replace(\"\\>\"\
    , \"\\>\")\n    brackets = brackets.replace(\"\\{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"\\}\", \"\\}\")\n    brackets = brackets.replace(\"\\,\"\
    , \"\\,\")\n    brackets = brackets.replace(\"\\;\", \"\\;\")\n    brackets =\
    \ brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\=\"\
    , \"\\=\")\n    brackets = brackets.replace(\"\\+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\"-\", \"\\-\")\n    brackets = brackets.replace(\"\\*\", \"\
    \\*\")\n    brackets = brackets.replace(\"\\?\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpncgubllb.jl:14\nin expression starting at /tmp/tmpncgubllb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpipayygms.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpipayygms.jl:1\n\
    in expression starting at /tmp/tmpipayygms.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpla64ifoi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpla64ifoi.jl:1\n\
    in expression starting at /tmp/tmpla64ifoi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqvhjrthz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqvhjrthz.jl:1\n\
    in expression starting at /tmp/tmpqvhjrthz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmp2q2fq3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmp2q2fq3.jl:1\n\
    in expression starting at /tmp/tmpmp2q2fq3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxl8fw7vw.jl:67\nin expression starting at\
    \ /tmp/tmpxl8fw7vw.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps3nc7ylv.jl:68\nin expression starting at\
    \ /tmp/tmps3nc7ylv.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcmie9nad.jl:67\nin expression starting at\
    \ /tmp/tmpcmie9nad.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4k21paln.jl:14\nin expression starting at /tmp/tmp4k21paln.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbui3zv2.jl:56\nin expression starting at\
    \ /tmp/tmpqbui3zv2.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgpsmc9e7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgpsmc9e7.jl:1\n\
    in expression starting at /tmp/tmpgpsmc9e7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpznh9pluh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpznh9pluh.jl:1\n\
    in expression starting at /tmp/tmpznh9pluh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"[\"\
    ).replace(\"}\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd8gb_4k8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd8gb_4k8.jl:1\n\
    in expression starting at /tmp/tmpd8gb_4k8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_upaq2jl.jl:68\nin expression starting at\
    \ /tmp/tmp_upaq2jl.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptbpduc2t.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptbpduc2t.jl:1\n\
    in expression starting at /tmp/tmptbpduc2t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    bracket\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjurrhpyl.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjurrhpyl.jl:1\n\
    in expression starting at /tmp/tmpjurrhpyl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6u2y3ac7.jl:67\nin expression starting at\
    \ /tmp/tmp6u2y3ac7.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzgrtjwqi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzgrtjwqi.jl:1\n\
    in expression starting at /tmp/tmpzgrtjwqi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnaxsyoni.jl:65\nin expression starting at\
    \ /tmp/tmpnaxsyoni.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd8gw9ork.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd8gw9ork.jl:1\n\
    in expression starting at /tmp/tmpd8gw9ork.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzx6e359y.jl:67\nin expression starting at\
    \ /tmp/tmpzx6e359y.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppaltda15.jl:14\nin expression starting at /tmp/tmppaltda15.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5l_f6y33.jl:14\nin expression starting at /tmp/tmp5l_f6y33.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg9isnhy6.jl:68\nin expression starting at\
    \ /tmp/tmpg9isnhy6.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    ,\", \";\")\n    brackets = brackets.replace(\";\", \",\")\n    brackets = brackets.replace(\"\
    :\", \";\")\n    brackets = brackets.replace(\";\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsyqs1j_6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsyqs1j_6.jl:1\n\
    in expression starting at /tmp/tmpsyqs1j_6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptqrozzwz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptqrozzwz.jl:1\n\
    in expression starting at /tmp/tmptqrozzwz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb69393kj.jl:67\nin expression starting at\
    \ /tmp/tmpb69393kj.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8zv21z96.jl:67\nin expression starting at\
    \ /tmp/tmp8zv21z96.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj3x2lm1g.jl:14\nin expression starting at /tmp/tmpj3x2lm1g.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkb4qzn1u.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkb4qzn1u.jl:1\n\
    in expression starting at /tmp/tmpkb4qzn1u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpay65fyz6.jl:65\nin expression starting at\
    \ /tmp/tmpay65fyz6.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp14pof6ak.jl:14\nin expression starting at /tmp/tmp14pof6ak.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjj5tpn1_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjj5tpn1_.jl:1\n\
    in expression starting at /tmp/tmpjj5tpn1_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptcdtuctt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptcdtuctt.jl:1\n\
    in expression starting at /tmp/tmptcdtuctt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qr31ti1.jl:67\nin expression starting at\
    \ /tmp/tmp2qr31ti1.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpon5xe5u8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpon5xe5u8.jl:1\n\
    in expression starting at /tmp/tmpon5xe5u8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy1mq7enx.jl:14\nin expression starting at /tmp/tmpy1mq7enx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp14no97wk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp14no97wk.jl:1\n\
    in expression starting at /tmp/tmp14no97wk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpea0sa1zb.jl:14\nin expression starting at /tmp/tmpea0sa1zb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\\(\", \"\
    \\(\")\n    brackets = brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\
    \\{\\}\", \"\\{\\}\")\n    brackets = brackets.replace(\"\\[\", \"\\[\")\n   \
    \ brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets = brackets.replace(\"\
    \\,\", \"\\,\")\n    brackets = brackets.replace(\"\\;\", \"\\;\")\n    brackets\
    \ = brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\=\"\
    , \"\\=\")\n    brackets = brackets.replace(\"\\!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"\\~\", \"\\~\")\n    brackets = brackets.replace(\"\\$\"\
    , \"\\$\")\n    brackets = brackets.replace(\"\\%\", \"\\%\")\n    brackets =\
    \ brackets.replace(\"\\^\", \"\\^\")\n    brackets = brackets.replace(\"\\&\"\
    , \"\\&\")\n    brackets = brackets.replace(\"\\*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"\\+\", \"\\+\")\n    brackets = brackets.replace(\"\\<\"\
    , \"\\<\")\n    brackets = brackets.replace(\"\\>\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"\\|\", \"\\|\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\)\", \"\\)\")\n\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") ==\
    \ true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkg93woq1.jl:14\nin expression starting at /tmp/tmpkg93woq1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk4gdlvkr.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk4gdlvkr.jl:1\n\
    in expression starting at /tmp/tmpk4gdlvkr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5olts7oj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5olts7oj.jl:1\n\
    in expression starting at /tmp/tmp5olts7oj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\"\
    )\", \")\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"[\", \"[\")\n    brackets = brackets.replace(\"\
    ]\", \"]\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoz61bwbx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoz61bwbx.jl:1\n\
    in expression starting at /tmp/tmpoz61bwbx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmponj03m_b.jl:13 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmponj03m_b.jl:50\n\
    in expression starting at /tmp/tmponj03m_b.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp08t0dkt2.jl:67\nin expression starting at\
    \ /tmp/tmp08t0dkt2.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk5jj9wqk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk5jj9wqk.jl:1\n\
    in expression starting at /tmp/tmpk5jj9wqk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiher3q00.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiher3q00.jl:1\n\
    in expression starting at /tmp/tmpiher3q00.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp8j3swvbq.jl:13 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8j3swvbq.jl:50\n\
    in expression starting at /tmp/tmp8j3swvbq.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe60k74be.jl:14\nin expression starting at /tmp/tmpe60k74be.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8ij8xhy_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ij8xhy_.jl:1\n\
    in expression starting at /tmp/tmp8ij8xhy_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyrmhlx7m.jl:67\nin expression starting at\
    \ /tmp/tmpyrmhlx7m.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    @\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets =\
    \ brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    '\", \"\\'\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets =\
    \ brackets.replace(\"`\", \"\")\n    brackets = brackets.replace(\"~\", \"\")\n\
    \    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    @\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\"\"\")\n    brackets = brackets.replace(\"\\\"\", \"\")\n    brackets\
    \ = brackets.replace(\"`\", \"\")\n    brackets = brackets.replace(\"~\", \"\"\
    )\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    @\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"^\", \"\")\n    brackets = brackets.replace(\"\
    &\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\"\"\")\n    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq0xdnm1f.jl:14\nin expression starting at /tmp/tmpq0xdnm1f.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp26c6wirv.jl:67\nin expression starting at\
    \ /tmp/tmp26c6wirv.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"-\", \"\\-\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\\\\\\\\\")\n    brackets = brackets.replace(\"\\\"\", \"\\\\\\\"\"\
    )\n    brackets = brackets.replace(\"'\", \"\\\\'\")\n    brackets = brackets.replace(\"\
    `\", \"\\`\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplrvvsrjc.jl:14\nin expression starting at /tmp/tmplrvvsrjc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\"'\", \"\\'\")\n    brackets =\
    \ brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    brackets = brackets.replace(\"\\>\"\
    , \"\\>\")\n    brackets = brackets.replace(\"\\,\", \"\\,\")\n    brackets =\
    \ brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\;\"\
    , \"\\;\")\n    brackets = brackets.replace(\"\\'\", \"\\'\")\n    brackets =\
    \ brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    brackets = brackets.replace(\"\\>\"\
    , \"\\>\")\n    brackets = brackets.replace(\"\\,\", \"\\,\")\n    brackets =\
    \ brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\;\"\
    , \"\\;\")\n    brackets = brackets.replace(\"\\'\", \"\\'\")\n    brackets =\
    \ brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    brackets = brackets.replace(\"\\>\"\
    , \"\\>\")\n    brackets = brackets.replace(\"\\,\", \"\\,\")\n    brackets =\
    \ brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\;\"\
    , \"\\;\")\n    brackets = brackets.replace(\"\\'\", \"\\'\")\n    brackets =\
    \ brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    bracket\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9l12a05d.jl:14\nin expression starting at /tmp/tmp9l12a05d.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz3svg6xr.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz3svg6xr.jl:1\n\
    in expression starting at /tmp/tmpz3svg6xr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8iuyvxis.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8iuyvxis.jl:1\n\
    in expression starting at /tmp/tmp8iuyvxis.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp59_jhber.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp59_jhber.jl:1\n\
    in expression starting at /tmp/tmp59_jhber.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqes_51dp.jl:67\nin expression starting at\
    \ /tmp/tmpqes_51dp.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnioaft7g.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnioaft7g.jl:1\n\
    in expression starting at /tmp/tmpnioaft7g.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps0mao8bh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps0mao8bh.jl:1\n\
    in expression starting at /tmp/tmps0mao8bh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_88iwpcj.jl:67\nin expression starting at\
    \ /tmp/tmp_88iwpcj.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpylel1k_e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpylel1k_e.jl:1\n\
    in expression starting at /tmp/tmpylel1k_e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0w8wjd2e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0w8wjd2e.jl:1\n\
    in expression starting at /tmp/tmp0w8wjd2e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkzira2tv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkzira2tv.jl:1\n\
    in expression starting at /tmp/tmpkzira2tv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyfz5zb6r.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyfz5zb6r.jl:1\n\
    in expression starting at /tmp/tmpyfz5zb6r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplwah_k0z.jl:54\nin expression starting at\
    \ /tmp/tmplwah_k0z.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9ao6ovvx.jl:14\nin expression starting at /tmp/tmp9ao6ovvx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp56x3f6r.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp56x3f6r.jl:1\n\
    in expression starting at /tmp/tmpp56x3f6r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxor_zi6l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxor_zi6l.jl:1\n\
    in expression starting at /tmp/tmpxor_zi6l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmphbsuohgr.jl:13 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphbsuohgr.jl:50\n\
    in expression starting at /tmp/tmphbsuohgr.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_y5h03c.jl:67\nin expression starting at\
    \ /tmp/tmpx_y5h03c.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"<\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0f_nas18.jl:65\nin expression starting at\
    \ /tmp/tmp0f_nas18.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkhuga1dm.jl:67\nin expression starting at\
    \ /tmp/tmpkhuga1dm.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = \n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp2whksk7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp2whksk7.jl:1\n\
    in expression starting at /tmp/tmpp2whksk7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl1upp0jv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl1upp0jv.jl:1\n\
    in expression starting at /tmp/tmpl1upp0jv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"'\", \"\\'\")\n    brackets = brackets.replace(\"\\(\", \"\
    \\(\")\n    brackets = brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\
    \\{\\}\", \"\\{\\}\")\n    brackets = brackets.replace(\"\\[\", \"\\[\")\n   \
    \ brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets = brackets.replace(\"\
    \\,\", \"\\,\")\n    brackets = brackets.replace(\"\\;\", \"\\;\")\n    brackets\
    \ = brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\!\"\
    , \"\\!\")\n    brackets = brackets.replace(\"\\~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"\\$\", \"\\$\")\n    brackets = brackets.replace(\"\\%\"\
    , \"\\%\")\n    brackets = brackets.replace(\"\\^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"\\&\", \"\\&\")\n    brackets = brackets.replace(\"\\*\"\
    , \"\\*\")\n    brackets = brackets.replace(\"\\+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    brackets = brackets.replace(\"\\>\"\
    , \"\\>\")\n    brackets = brackets.replace(\"\\?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"\\'\", \"\\'\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\)\", \"\\)\")\n    brackets =\
    \ bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwzyuex6q.jl:14\nin expression starting at /tmp/tmpwzyuex6q.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcyj_sbxe.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcyj_sbxe.jl:1\n\
    in expression starting at /tmp/tmpcyj_sbxe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdaq75elt.jl:14\nin expression starting at /tmp/tmpdaq75elt.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp68mqt8tw.jl:14\nin expression starting at /tmp/tmp68mqt8tw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8m98e_jq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8m98e_jq.jl:1\n\
    in expression starting at /tmp/tmp8m98e_jq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp7ftytyj6.jl:13 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7ftytyj6.jl:50\n\
    in expression starting at /tmp/tmp7ftytyj6.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5igfc4r.jl:67\nin expression starting at\
    \ /tmp/tmpo5igfc4r.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \"}\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\"\
    )\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\"\
    )\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\"\
    )\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\"\
    )\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\"\
    )\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets\
    \ = brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp96y6pwur.jl:13 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp96y6pwur.jl:50\n\
    in expression starting at /tmp/tmp96y6pwur.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xkuox4i.jl:68\nin expression starting at\
    \ /tmp/tmp7xkuox4i.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2v7lcuq0.jl:14\nin expression starting at /tmp/tmp2v7lcuq0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppzn1j5yx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppzn1j5yx.jl:1\n\
    in expression starting at /tmp/tmppzn1j5yx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl6xkndh9.jl:14\nin expression starting at /tmp/tmpl6xkndh9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn48724s9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn48724s9.jl:1\n\
    in expression starting at /tmp/tmpn48724s9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7zbzf0gh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7zbzf0gh.jl:1\n\
    in expression starting at /tmp/tmp7zbzf0gh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8xuui3ue.jl:67\nin expression starting at\
    \ /tmp/tmp8xuui3ue.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlpryij4.jl:67\nin expression starting at\
    \ /tmp/tmpjlpryij4.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5ehmiof7.jl:14\nin expression starting at /tmp/tmp5ehmiof7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27vr2m84.jl:67\nin expression starting at\
    \ /tmp/tmp27vr2m84.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy4qh3j_1.jl:14\nin expression starting at /tmp/tmpy4qh3j_1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpni9m5eyj.jl:67\nin expression starting at\
    \ /tmp/tmpni9m5eyj.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibnefpmy.jl:67\nin expression starting at\
    \ /tmp/tmpibnefpmy.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxalgpfj6.jl:67\nin expression starting at\
    \ /tmp/tmpxalgpfj6.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc81dlvzp.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc81dlvzp.jl:1\n\
    in expression starting at /tmp/tmpc81dlvzp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_szr2jz7.jl:68\nin expression starting at\
    \ /tmp/tmp_szr2jz7.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64vx6h2e.jl:67\nin expression starting at\
    \ /tmp/tmp64vx6h2e.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyo1zqavo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyo1zqavo.jl:1\n\
    in expression starting at /tmp/tmpyo1zqavo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7mj2zq25.jl:14\nin expression starting at /tmp/tmp7mj2zq25.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"\
    $\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\\
    &\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\\
    %\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"@\", \"\\\
    @\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpst7v1190.jl:14\nin expression starting at /tmp/tmpst7v1190.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp412fiijd.jl:14\nin expression starting at /tmp/tmp412fiijd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdpco42h1.jl:67\nin expression starting at\
    \ /tmp/tmpdpco42h1.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp64sknjy0.jl:14\nin expression starting at /tmp/tmp64sknjy0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm6nps0e_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm6nps0e_.jl:1\n\
    in expression starting at /tmp/tmpm6nps0e_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcm1eprxh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcm1eprxh.jl:1\n\
    in expression starting at /tmp/tmpcm1eprxh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc9w55f18.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc9w55f18.jl:1\n\
    in expression starting at /tmp/tmpc9w55f18.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    -\", \"\\-\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"&\", \"\\\
    &\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    $\", \"\\$\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"=\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp43priu14.jl:14\nin expression starting at /tmp/tmp43priu14.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\(\")\n    brackets = brackets.replace(\"\
    ]\", \"\\)\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\(\")\n    brackets = brackets.replace(\"]\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"\
    }\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\(\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\)\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\(\")\n    brackets = brackets.replace(\"]\", \"\\\
    )\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    (\")\n    brackets = brackets.replace(\"]\", \"\\)\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\(\")\n    brackets = brackets.replace(\"\
    ]\", \"\\)\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\(\")\n    brackets = brackets.replace(\"]\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1g83sv7_.jl:14\nin expression starting at /tmp/tmp1g83sv7_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppxxhmb0s.jl:14\nin expression starting at /tmp/tmppxxhmb0s.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4xxjcwku.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xxjcwku.jl:1\n\
    in expression starting at /tmp/tmp4xxjcwku.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbapg2tt5.jl:67\nin expression starting at\
    \ /tmp/tmpbapg2tt5.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmputl3m917.jl:67\nin expression starting at\
    \ /tmp/tmputl3m917.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rdg1tkx.jl:67\nin expression starting at\
    \ /tmp/tmp0rdg1tkx.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jduxzol.jl:67\nin expression starting at\
    \ /tmp/tmp3jduxzol.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptawyj9gz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptawyj9gz.jl:1\n\
    in expression starting at /tmp/tmptawyj9gz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdcuhw94g.jl:68\nin expression starting at\
    \ /tmp/tmpdcuhw94g.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgoyq7_o_.jl:67\nin expression starting at\
    \ /tmp/tmpgoyq7_o_.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22ona8jh.jl:66\nin expression starting at\
    \ /tmp/tmp22ona8jh.jl:66\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2s9rxazd.jl:14\nin expression starting at /tmp/tmp2s9rxazd.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2g0i9_5b.jl:14\nin expression starting at /tmp/tmp2g0i9_5b.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwb4eh7jh.jl:14\nin expression starting at /tmp/tmpwb4eh7jh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    bracket\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp70odkn_9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp70odkn_9.jl:1\n\
    in expression starting at /tmp/tmp70odkn_9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkyl1xli.jl:68\nin expression starting at\
    \ /tmp/tmpmkyl1xli.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0w87oo4b.jl:14\nin expression starting at /tmp/tmp0w87oo4b.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr15yj_z8.jl:14\nin expression starting at /tmp/tmpr15yj_z8.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmfuypcx5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmfuypcx5.jl:1\n\
    in expression starting at /tmp/tmpmfuypcx5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplhyv_fbf.jl:14\nin expression starting at /tmp/tmplhyv_fbf.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuieppqq1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuieppqq1.jl:1\n\
    in expression starting at /tmp/tmpuieppqq1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu83bbdzh.jl:54\nin expression starting at\
    \ /tmp/tmpu83bbdzh.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8z0tg1o_.jl:14\nin expression starting at /tmp/tmp8z0tg1o_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_slc9y23.jl:67\nin expression starting at\
    \ /tmp/tmp_slc9y23.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmtgaddk4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmtgaddk4.jl:1\n\
    in expression starting at /tmp/tmpmtgaddk4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1y08b2ts.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1y08b2ts.jl:1\n\
    in expression starting at /tmp/tmp1y08b2ts.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy6bvnvr_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy6bvnvr_.jl:1\n\
    in expression starting at /tmp/tmpy6bvnvr_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\\
    &\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    @\", \"\\@\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5guxdxs6.jl:14\nin expression starting at /tmp/tmp5guxdxs6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxb1kaok_.jl:67\nin expression starting at\
    \ /tmp/tmpxb1kaok_.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsbnvp_hb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsbnvp_hb.jl:1\n\
    in expression starting at /tmp/tmpsbnvp_hb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaghz37c0.jl:14\nin expression starting at /tmp/tmpaghz37c0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ddtqex6.jl:67\nin expression starting at\
    \ /tmp/tmp_ddtqex6.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppfo8yh1y.jl:66\nin expression starting at\
    \ /tmp/tmppfo8yh1y.jl:66\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8fg10ugk.jl:67\nin expression starting at\
    \ /tmp/tmp8fg10ugk.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"~\", \"~\")\n    brackets = brackets.replace(\"\
    @\", \"@\")\n    brackets = brackets.replace(\"$\", \"$\")\n    brackets = brackets.replace(\"\
    %\", \"%\")\n    brackets = brackets.replace(\"^\", \"^\")\n    brackets = brackets.replace(\"\
    &\", \"&\")\n    brackets = brackets.replace(\"*\", \"*\")\n    brackets = brackets.replace(\"\
    +\", \"+\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"~\", \"~\")\n    brackets = brackets.replace(\"\
    @\", \"@\")\n    brackets = brackets.replace(\"$\", \"$\")\n    brackets = brackets.replace(\"\
    %\", \"%\")\n    brackets = brackets.replace(\"^\", \"^\")\n    brackets = \n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz25onlwq.jl:33\nin expression starting at\
    \ /tmp/tmpz25onlwq.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.replace(\"\
    ;\", \" \")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ,\", \" \")\n    brackets = brackets.replace(\";\", \" \")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcgzvu7yw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcgzvu7yw.jl:1\n\
    in expression starting at /tmp/tmpcgzvu7yw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfkyb2fu.jl:67\nin expression starting at\
    \ /tmp/tmpkfkyb2fu.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptzku__t_.jl:54\nin expression starting at\
    \ /tmp/tmptzku__t_.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph7nmix1v.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph7nmix1v.jl:1\n\
    in expression starting at /tmp/tmph7nmix1v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr6orrbtn.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr6orrbtn.jl:1\n\
    in expression starting at /tmp/tmpr6orrbtn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"@\", \"\\\
    @\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"`\", \"\\\
    `\")\n    brackets = brackets.replace(\"'\", \"\\'\")\n    brackets = brackets.replace(\"\
    \\(\", \"\\(\")\n    brackets = brackets.replace(\"\\)\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"\\[\", \"\\[\")\n    brackets = brackets.replace(\"\\]\"\
    , \"\\]\")\n    brackets = brackets.replace(\"\\{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"\\}\", \"\\}\")\n    brackets = brackets.replace(\"\\<\"\
    , \"\\<\")\n    brackets = brackets.replace(\"\\>\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"\\,\", \"\\,\")\n    brackets = brackets.replace(\"\\;\"\
    , \"\\;\")\n    brackets = brackets.replace(\"\\:\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"\\!\", \"\\!\")\n    brackets = brackets.replace(\"\\?\"\
    , \"\\?\")\n    brackets = brackets.replace(\"\\@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"\\$\", \"\\$\")\n    brackets = brackets.replace(\"\\%\"\
    , \"\\%\")\n    brackets = brackets.replace(\"\\^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"\\&\", \"\\&\")\n    brackets = brackets.replace(\"\\*\"\
    , \"\\*\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt6vckplx.jl:14\nin expression starting at /tmp/tmpt6vckplx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    $\", \"\\$\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets =\
    \ brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcvr7k97q.jl:14\nin expression starting at /tmp/tmpcvr7k97q.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\"\\\"\", \"\\\\\"\")\n    brackets\
    \ = brackets.replace(\"'\", \"\\'\")\n    brackets = brackets.replace(\"`\", \"\
    \\`\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"-\", \"\\-\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\"\\\"\", \"\\\\\"\")\n    brackets = brackets.replace(\"\
    '\", \"\\'\")\n    brackets = brackets.replace(\"`\", \"\\`\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\"-\", \"\\-\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmrbo5pfh.jl:14\nin expression starting at /tmp/tmpmrbo5pfh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbcajb6d9.jl:67\nin expression starting at\
    \ /tmp/tmpbcajb6d9.jl:67\n"
  exit_code: 1
  status: SyntaxError
