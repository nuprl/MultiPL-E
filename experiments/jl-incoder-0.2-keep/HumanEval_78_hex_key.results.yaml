name: HumanEval_78_hex_key
language: julia
results:
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ prime_digits = primes.filter(x -> num.contains(x))\n    \n    prime_digits_count\
    \ = prime_digits.count()\n    \n    if prime_digits_count > 0 \n        \n   \
    \     prime_digits_count = prime_digits_count-1\n        \n        prime_digits_count\
    \ = prime_digits_count+1\n        \n        prime_digits_count = prime_digits_count+1\n\
    \        \n        prime_digits_count = prime_digits_count+1\n        \n     \
    \   prime_digits_count = prime_digits_count+1\n        \n        prime_digits_count\
    \ = prime_digits_count+1\n        \n        prime_digits_count = prime_digits_count+1\n\
    \        \n        prime_digits_count = prime_digits_count+1\n        \n     \
    \   prime_digits_count = prime_digits_count+1\n        \n        prime_digits_count\
    \ = prime_digits_count+1\n        \n        prime_digits_count = prime_digits_count+1\n\
    \        \n        prime_digits_count = prime_digits_count+1\n        \n     \
    \   prime_digits_count = prime_digits_count+1\n        \n        prime_digits_count\
    \ = prime_digits_count+1\n        \n        prime_digits_count = prime_digits_count+1\n\
    \        \n        prime_digits_count = prime_digits_count+1\n        \n     \
    \   prime_digits_count = prime_digits_count+1\n        \n        prime_digits_count\
    \ = prime_digits_count+1\n        \n        prime_digits_count = prime_digits_count+1\n\
    \        \n        prime_digits_count = prime_digits_count+1\n        \n     \
    \   prime_digits_count = prime_digits_count+1\n        \n        prime_digits_count\
    \ = prime_digits_count+1\n        \n        prime_digits_count = prime_digits_count+1\n\
    \        \n        prime_digits_count = prime_digits_count+1\n        \n     \
    \   prime_digits_count = prime_digits_count+1\n        \n        prime_digits_count\
    \ = prime_digits_count+1\n        \n        prime_digits_count = prime_digits_count+1\n\
    \        \n        prime_digits_count = prime_digits_count+1\n        \n     \
    \   prime_digits_count = prime_digits_count+1\n        \n        prime_digits_count\
    \ = prime_digits_count+1\n        \n        prime_digits_count = prime_digits_count+1\n\
    \        \n        prime_digits_count = prime_digits_count+1\n        \n     \
    \   prime_digits_count = prime_digits_count+1\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpltp_hmf4.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpltp_hmf4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ prime_digits = primes[2:]\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[2:])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[2:end])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[2:end-1]) \n    \n    prime_digits_set = prime_digits_set - Set(num[2:end-2])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[2:end-3])\n    \n   \
    \ prime_digits_set = prime_digits_set - Set(num[2:end-4])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[2:end-5])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[2:end-6])\n    \n    prime_digits_set = prime_digits_set - Set(num[2:end-7])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[2:end-8])\n    \n   \
    \ prime_digits_set = prime_digits_set - Set(num[2:end-9])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[2:end-10])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[2:end-11])\n    \n    prime_digits_set = prime_digits_set - Set(num[2:end-12])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[2:end-13])\n    \n  \
    \  prime_digits_set = prime_digits_set - Set(num[2:end-14])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[2:end-15])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[2:end-16])\n    \n    prime_digits_set = prime_digits_set - Set(num[2:end-17])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[2:end-18])\n    \n  \
    \  prime_digits_set = prime_digits_set - Set(num[2:end-19])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[2:end-20])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[2:\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpvhamaf7_.jl:22\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvhamaf7_.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_key = 0\n    \n\
    \    for digit in num\n        \n        if digit in prime_digits_set\n      \
    \      \n            hex_key += prime_digits_set.count(digit)\n            \n\
    \        end\n        \n    end\n    \n    return hex_key\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives\
    \ a string and returns the number of characters that are not letters.\nExamples:\n\
    For s = \"aBc\" the output should be 2.\nFor s = \"aBc123\" the output should\
    \ be 4.\nFor s = \"aBc123!\" the output should be 5.\nFor s = \"\" the output\
    \ should be 0.\nFor s = \" \" the output should be 0.\nFor s = \"aBc\" the output\
    \ should be 2.\nFor s = \"aBc123\" the output should be 4.\nFor s = \"aBc123!\"\
    \ the output should be 5.\nFor s = \" \" the output should be 0.\nFor s = \" \"\
    \ the output should be 0.\nFor s = \"aBc\" the output should be 2.\nFor s = \"\
    aBc123\" the output should be 4.\nFor s = \"aBc123!\" the output should be 5.\n\
    For s = \" \" the output should be 0.\nFor s = \" \" the output should be 0.\n\
    For s = \"aBc\" the output should be 2.\nFor s = \"aBc123\" the output should\
    \ be 4.\nFor s = \"aBc123!\" the output should be 5.\nFor s = \" \" the output\
    \ should be 0.\nFor s = \" \" the output should be 0.\nFor s = \"aBc\" the output\
    \ should be 2.\nFor s = \"aBc123\" the output should be 4.\nFor s = \"aBc123!\"\
    \ the output should be 5.\nFor s = \" \" the output should be 0.\nFor s = \" \"\
    \ the output should be 0.\nFor s = \"aBc\" the output should be 2.\nFor s = \"\
    aBc123\" the output should be 4.\nFor s = \"aBc123!\" the output should be 5.\n\
    For s = \" \" the output \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5nvvhsrv.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5nvvhsrv.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num)\n    \n  \
    \  primes_count = length(primes)\n    \n    primes_count = primes_count - 1\n\
    \    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphk6cd0tb.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphk6cd0tb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphk6cd0tb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexdigits = num.chars\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set & hexdigits_set\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a hexadecimal number as a string and counts\
    \ the number of hexadecimal digits that are primes (prime number, or a prime,\
    \ is a natural number greater than 1 that is not a product of two smaller natural\
    \ numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
    \ E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n\
    Notes: you may assume the input is always correct or empty string, \nand symbols\
    \ A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should\
    \ be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the\
    \ output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\n\
    For num = \"2020\" the output should be 2.\nHint: you may use the function hex_key.\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9hwap_71.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9hwap_71.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    prime_digits_set = Set(prime_digits)\n    \n    hexdigits = Set(\"0123456789ABCDEF\"\
    )\n    hexdigits_set = Set(hexdigits)\n    \n    hexdigits_prime = hexdigits_set\
    \ & prime_digits_set\n    \n    hexdigits_prime_sorted = sort(hexdigits_prime)\n\
    \    \n    hexdigits_prime_sorted_reversed = reverse(hexdigits_prime_sorted)\n\
    \    \n    hexdigits_prime_sorted_reversed_prime = hexdigits_prime_sorted_reversed\
    \ & prime_digits_set\n    \n    hexdigits_prime_sorted_reversed_prime_sorted =\
    \ sort(hexdigits_prime_sorted_reversed_prime)\n    \n    hexdigits_prime_sorted_reversed_prime_sorted_reversed\
    \ = reverse(hexdigits_prime_sorted_reversed_prime_sorted)\n    \n    hexdigits_prime_sorted_reversed_prime_sorted_reversed_prime\
    \ = hexdigits_prime_sorted_reversed_prime_sorted_reversed & prime_digits_set\n\
    \    \n    hexdigits_prime_sorted_reversed_prime_sorted_reversed_prime_sorted\
    \ = sort(hexdigits_prime_sorted_reversed_prime_sorted_reversed)\n    \n    hexdigits_prime_sorted_reversed_prime_sorted_reversed_prime_sorted_reversed\
    \ = reverse(hexdigits_prime_sorted_reversed_prime_sorted_reversed_prime_sorted)\n\
    \    \n    hexdigits_prime_sorted_reversed_prime_sorted_reversed_prime_sorted_reversed_prime\
    \ = hexdigits_prime_sorted_reversed_prime_sorted_reversed_prime_sorted_reversed\
    \ & prime_digits_set\n    \n    hexdigits_prime_sorted_reversed_prime_sorted_reversed_prime_sorted_reversed_prime_sorted\
    \ = sort(hexdigits_prime_sorted_reversed_prime_sorted_reversed_prime)\n    \n\
    \    hexdigits_prime_sorted_reversed_prime_sorted_reversed_prime_sorted_reversed_prime_sorted_reversed\
    \ = reverse(hexdigits_prime_sorted_reversed_prime_sorted_reversed_prime_sorted_reversed_prime_sorted)\n\
    \    \n    hexdigits_prime_sorted_reversed_prime_sorted_reversed_prime_sorted_reversed_prime_sorted_reversed_prime\
    \ = hexdigits_prime_sorted_reversed_prime_sorted_reversed_prime_sorted_reversed_prime_sorted_reversed\
    \ & prime_digits_set\n    \n    hexdigits_prime_\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpokwfd2xb.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpokwfd2xb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpokwfd2xb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexdigits = Set(\"\
    0123456789ABCDEF\")\n    \n    hexdigits_set = Set(hexdigits)\n    \n    hexdigits_set\
    \ = hexdigits_set - prime_digits_set\n    \n    hexdigits_set = hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hex\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7ankt2lr.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7ankt2lr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7ankt2lr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for prime in primes\n        \n        if num ==\
    \ prime\n            primes_count += 1\n        end\n    end\n    \n    return\
    \ primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a string and returns the number of characters\
    \ that are not letters.\nExamples:\nFor s = \"AB\" the output should be 1.\nFor\
    \ s = \"1077E\" the output should be 2.\nFor s = \"ABED1A33\" the output should\
    \ be 4.\nFor s = \"123456789ABCDEF0\" the output should be 6.\nFor s = \"2020\"\
    \ the output should be 2.\nFor s = \"\" the output should be 0.\nFor s = \" \"\
    \ the output should be 0.\nFor s = \"   \" the output should be 0.\nFor s = \"\
    \   \" the output should be 0.\nFor s = \"   \" the output should be 0.\nFor s\
    \ = \"   \" the output should be 0.\nFor s = \"   \" the output should be 0.\n\
    For s = \"   \" the output should be 0.\nFor s = \"   \" the output should be\
    \ 0.\nFor s = \"   \" the output should be 0.\nFor s = \"   \" the output should\
    \ be 0.\nFor s = \"   \" the output should be 0.\nFor s = \"   \" the output should\
    \ be 0.\nFor s = \"   \" the output should be 0.\nFor s = \"   \" the output should\
    \ be 0.\nFor s = \"   \" the output should be 0.\nFor s = \"   \" the output should\
    \ be 0.\nFor s = \"   \" the output should be 0.\nFor s = \"   \" the output should\
    \ be 0.\nFor s = \"   \" the output should be 0.\nFor s = \"   \" the output should\
    \ be 0.\nFor s = \"   \" the output should be 0.\nFor s = \"   \" the output should\
    \ be 0.\nFor s = \"   \" the output should be 0.\nFor s = \"   \" the output should\
    \ be 0.\nFor s = \"   \" the output should be 0.\nFor s = \"   \" the output should\
    \ be 0.\nFor s = \"   \" the output should be 0.\nFor s = \"   \" the output should\
    \ be 0.\nFor s = \"   \" the output should be 0.\nFor s = \"   \" the output should\
    \ be 0.\nFor s = \"   \" the output should be 0.\nFor s = \"   \" the output should\
    \ be 0.\nFor \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp81oaug9_.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp81oaug9_.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqafk25y_.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqafk25y_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqafk25y_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    if prime_digits_count > 0 \n\
    \        \n        prime_digits_count = prime_digits_count - 1\n        \n   \
    \     prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgsu8vxnc.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgsu8vxnc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    prime_digits_set = Set(prime_digits)\n    \n    hexdigits = num.chars\n \
    \   hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexdigits_\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg9i7fbub.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpg9i7fbub.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpg9i7fbub.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo2w9zmja.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpo2w9zmja.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo2w9zmja.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(num)\n    \n\
    \    prime_digits = primes.map(|x| x.digits)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.is_power_of_two())\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ <= 16)\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize() >= 2)\n\
    \    \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 2 == 0)\n   \
    \ \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 3 == 0)\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.to_usize() % 5 == 0)\n    \n   \
    \ prime_digits = prime_digits.filter(|x| x.to_usize() % 7 == 0)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.to_usize() % 11 == 0)\n    \n    prime_digits =\
    \ prime_digits.filter(|x| x.to_usize() % 13 == 0)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.to_usize() % 17 == 0)\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ % 19 == 0)\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize() %\
    \ 23 == 0)\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 29\
    \ == 0)\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 31 ==\
    \ 0)\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 37 == 0)\n\
    \    \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 41 == 0)\n  \
    \  \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 43 == 0)\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.to_usize() % 47 == 0)\n    \n  \
    \  prime_digits = prime_digits.filter(|x| x.to_usize() % 53 == 0)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.to_usize() % 59 == 0)\n    \n    prime_digits =\
    \ prime_digits.filter(|x\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9fbi5z94.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9fbi5z94.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    if prime_digits_count > 1\n\
    \        \n        prime_digits_count = prime_digits_count - 1\n        \n   \
    \     prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpenywfx7z.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpenywfx7z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    digit_counts = Dict{Int64,\
    \ Int64}()\n    \n    for digit in num\n        digit_counts[digit] += 1\n   \
    \ end\n    \n    prime_counts = Dict{Int64, Int64}()\n    \n    for digit in prime_digits\n\
    \        prime_counts[digit] += 1\n    end\n    \n    prime_digit_counts = Dict{Int64,\
    \ Int64}()\n    \n    for digit in prime_digits\n        prime_digit_counts[digit]\
    \ += digit_counts[digit]\n    end\n    \n    prime_digit_counts_set = Set(prime_digit_counts)\n\
    \    \n    prime_counts_set = Set(prime_counts)\n    \n    prime_counts_set =\
    \ prime_counts_set - prime_digit_counts_set\n    \n    prime_counts_set = prime_counts_set\
    \ - prime_digits_set\n    \n    prime_counts_set = prime_counts_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set\n    \n    prime_counts_set = prime_counts_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppcnxm8yc.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppcnxm8yc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppcnxm8yc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = prime_digits(num)\n \
    \   \n    prime_digits_count = length(prime_digits)\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfqq0e_79.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfqq0e_79.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfqq0e_79.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_digits = num.chars().filter(|c| c >= '0' and c <= '9').collect()\n\
    \    \n    hex_digits = hex_digits.collect::<Vec<Int64>>\n    \n    hex_digits\
    \ = hex_digits.filter(|x| prime_digits.contains(x))\n    \n    hex_digits = hex_digits.collect::<Vec<Int64>>\n\
    \    \n    hex_digits = hex_digits.sum::<Int64>\n    \n    return hex_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\nFor s = \"A\" the output should be 1.\nFor s = \"B\"\
    \ the output should be 0.\nFor s = \"C\" the output should be 0.\nFor s = \"D\"\
    \ the output should be 1.\nFor s = \"E\" the output should be 1.\nFor s = \"F\"\
    \ the output should be 1.\nFor s = \"G\" the output should be 0.\nFor s = \"H\"\
    \ the output should be 0.\nFor s = \"I\" the output should be 0.\nFor s = \"J\"\
    \ the output should be 0.\nFor s = \"K\" the output should be 0.\nFor s = \"L\"\
    \ the output should be 0.\nFor s = \"M\" the output should be 0.\nFor s = \"N\"\
    \ the output should be 0.\nFor s = \"O\" the output should be 0.\nFor s = \"P\"\
    \ the output should be 0.\nFor s = \"Q\" the output should be 0.\nFor s = \"R\"\
    \ the output should be 0.\nFor s = \"S\" the output should be 0.\nFor s = \"T\"\
    \ the output should be 0.\nFor s = \"U\" the output should be 0.\nFor s = \"V\"\
    \ the output should be 0.\nFor s = \"W\" the output should be 0.\nFor s = \"X\"\
    \ the output should be 0.\nFor s = \"Y\" the output should be 0.\nFor s = \"Z\"\
    \ the output should be 0.\nFor s = \"AA\" the output should be 1.\nFor s = \"\
    AB\" the output should be 0.\nFor s = \"AC\" the output should be 0.\nFor s =\
    \ \"AD\" the output should be 1.\nFor s = \"AE\" the output should be 1.\nFor\
    \ \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ggclp65.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5ggclp65.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfgovrem9.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfgovrem9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfgovrem9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    prime_digits_count_2 = length(primes)\n\
    \    \n    prime_digits_count_3 = length(primes)\n    \n    prime_digits_count_4\
    \ = length(primes)\n    \n    prime_digits_count_5 = length(primes)\n    \n  \
    \  prime_digits_count_6 = length(primes)\n    \n    prime_digits_count_7 = length(primes)\n\
    \    \n    prime_digits_count_8 = length(primes)\n    \n    prime_digits_count_9\
    \ = length(primes)\n    \n    prime_digits_count_10 = length(primes)\n    \n \
    \   prime_digits_count_11 = length(primes)\n    \n    prime_digits_count_12 =\
    \ length(primes)\n    \n    prime_digits_count_13 = length(primes)\n    \n   \
    \ prime_digits_count_14 = length(primes)\n    \n    prime_digits_count_15 = length(primes)\n\
    \    \n    prime_digits_count_16 = length(primes)\n    \n    prime_digits_count_17\
    \ = length(primes)\n    \n    prime_digits_count_18 = length(primes)\n    \n \
    \   prime_digits_count_19 = length(primes)\n    \n    prime_digits_count_20 =\
    \ length(primes)\n    \n    prime_digits_count_21 = length(primes)\n    \n   \
    \ prime_digits_count_22 = length(primes)\n    \n    prime_digits_count_23 = length(primes)\n\
    \    \n    prime_digits_count_24 = length(primes)\n    \n    prime_digits_count_25\
    \ = length(primes)\n    \n    prime_digits_count_26 = length(primes)\n    \n \
    \   prime_digits_count_27 = length(primes)\n    \n    prime_digits_count_28 =\
    \ length(primes)\n    \n    prime_digits_count_29 = length(primes)\n    \n   \
    \ prime_digits_count_30 = length(primes)\n    \n    prime_digits_count_31 = length(primes)\n\
    \    \n    prime_digits_count_32 = length(primes)\n    \n    prime_digits_count_33\
    \ = length(primes)\n    \n    prime_digits_count_34 = length(primes)\n    \n \
    \   prime_digits_count_35 = length(primes)\n    \n    prime_digits_count_36 =\
    \ length(primes)\n    \n    prime_digits_count_37 = \nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi5iimbo2.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpi5iimbo2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpi5iimbo2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    for i in num\n\
    \        if i == \"A\"\n            hex_key += 1\n        elif i == \"B\"\n  \
    \          hex_key += 2\n        elif i == \"C\"\n            hex_key += 4\n \
    \       elif i == \"D\"\n            hex_key += 8\n        elif i == \"E\"\n \
    \           hex_key += 16\n        elif i == \"F\"\n            hex_key += 32\n\
    \        else\n            hex_key += 64\n    end\n    \n    return hex_key\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"i\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqdessy6d.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqdessy6d.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoiirc36o.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoiirc36o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoiirc36o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    prime_digits_count_2 = length(primes)\n\
    \    \n    prime_digits_count_3 = length(primes)\n    \n    prime_digits_count_4\
    \ = length(primes)\n    \n    prime_digits_count_5 = length(primes)\n    \n  \
    \  prime_digits_count_6 = length(primes)\n    \n    prime_digits_count_7 = length(primes)\n\
    \    \n    prime_digits_count_8 = length(primes)\n    \n    prime_digits_count_9\
    \ = length(primes)\n    \n    prime_digits_count_10 = length(primes)\n    \n \
    \   prime_digits_count_11 = length(primes)\n    \n    prime_digits_count_12 =\
    \ length(primes)\n    \n    prime_digits_count_13 = length(primes)\n    \n   \
    \ prime_digits_count_14 = length(primes)\n    \n    prime_digits_count_15 = length(primes)\n\
    \    \n    prime_digits_count_16 = length(primes)\n    \n    prime_digits_count_17\
    \ = length(primes)\n    \n    prime_digits_count_18 = length(primes)\n    \n \
    \   prime_digits_count_19 = length(primes)\n    \n    prime_digits_count_20 =\
    \ length(primes)\n    \n    prime_digits_count_21 = length(primes)\n    \n   \
    \ prime_digits_count_22 = length(primes)\n    \n    prime_digits_count_23 = length(primes)\n\
    \    \n    prime_digits_count_24 = length(primes)\n    \n    prime_digits_count_25\
    \ = length(primes)\n    \n    prime_digits_count_26 = length(primes)\n    \n \
    \   prime_digits_count_27 = length(primes)\n    \n    prime_digits_count_28 =\
    \ length(primes)\n    \n    prime_digits_count_29 = length(primes)\n    \n   \
    \ prime_digits_count_30 = length(primes)\n    \n    prime_digits_count_31 = length(primes)\n\
    \    \n    prime_digits_count_32 = length(primes)\n    \n    prime_digits_count_33\
    \ = length(primes)\n    \n    prime_digits_count_34 = length(primes)\n    \n \
    \   prime_digits_count_35 = length(primes)\n    \n    prime_digits_count_36 =\
    \ length(primes)\n    \n    prime_digits_count_37 = \nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnr6n3it9.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnr6n3it9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnr6n3it9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = primes.count{|x| x == num}\n    \n    prime_digits_count\
    \ + primes.count{|x| num.chars.all? {|c| c == x.chars.last}}\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives\
    \ a string and returns the number of characters that are not letters.\nExamples:\n\
    For str = \"A\" the output should be 1.\nFor str = \"B\" the output should be\
    \ 0.\nFor str = \"AB\" the output should be 2.\nFor str = \"1077E\" the output\
    \ should be 3.\nFor str = \"ABED1A33\" the output should be 4.\nFor str = \"123456789ABCDEF0\"\
    \ the output should be 6.\nFor str = \"2020\" the output should be 2.\nFor str\
    \ = \"1077E\" the output should be 3.\nFor str = \"ABED1A33\" the output should\
    \ be 4.\nFor str = \"123456789ABCDEF0\" the output should be 6.\nFor str = \"\
    2020\" the output should be 2.\nFor str = \"1077E\" the output should be 3.\n\
    For str = \"ABED1A33\" the output should be 4.\nFor str = \"123456789ABCDEF0\"\
    \ the output should be 6.\nFor str = \"2020\" the output should be 2.\nFor str\
    \ = \"1077E\" the output should be 3.\nFor str = \"ABED1A33\" the output should\
    \ be 4.\nFor str = \"123456789ABCDEF0\" the output should be 6.\nFor str = \"\
    2020\" the output should be 2.\nFor str = \"1077E\" the output should be 3.\n\
    For str = \"ABED1A33\" the output should be 4.\nFor str = \"123456789ABCDEF0\"\
    \ the output should be 6.\nFor str = \"2020\" the output should be 2.\nFor str\
    \ = \"1077E\" the output should be 3.\nFor str = \"ABED1A33\" the output should\
    \ be 4.\nFor str = \"123456789ABCDEF0\" the output should be 6.\nFor str = \"\
    2020\" the output should be 2.\nFor str = \"1077E\" the output should be 3.\n\
    For str = \"ABED1A33\" the output should be 4.\nFor str = \"123456789ABCDEF0\"\
    \ the output should be 6.\nFor str = \"2020\" the output should be 2.\nFor str\
    \ = \"1077E\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuzn1p1zv.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuzn1p1zv.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf0iclbbk.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf0iclbbk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf0iclbbk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgmnbfu9h.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgmnbfu9h.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgmnbfu9h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    for digit in\
    \ num\n        if digit in \"ABCDEF\"\n            hex_key += 1\n        end\n\
    \    end\n    \n    return hex_key\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2wk_iomp.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2wk_iomp.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    for i in num\n\
    \        if i == 'A'\n            hex_key += 1\n        elif i == 'B'\n      \
    \      hex_key += 2\n        elif i == 'C'\n            hex_key += 3\n       \
    \ elif i == 'D'\n            hex_key += 4\n        elif i == 'E'\n           \
    \ hex_key += 5\n        elif i == 'F'\n            hex_key += 6\n        else\n\
    \            hex_key += 7\n    end\n    \n    return hex_key\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives\
    \ a string and returns the number of characters that are not letters.\nExamples:\n\
    For s = \"A\" the output should be 1.\nFor s = \"B\" the output should be 2.\n\
    For s = \"AB\" the output should be 3.\nFor s = \"1077E\" the output should be\
    \ 4.\nFor s = \"ABED1A33\" the output should be 5.\nFor s = \"123456789ABCDEF0\"\
    \ the output should be 6.\nFor s = \"2020\" the output should be 7.\nFor s = \"\
    \" the output should be 0.\nFor s = \" \" the output should be 0.\nFor s = \"\
    a\" the output should be 1.\nFor s = \"ab\" the output should be 2.\nFor s = \"\
    1077e\" the output should be 3.\nFor s = \"ABED1A33\" the output should be 4.\n\
    For s = \"123456789ABCDEF0\" the output should be 5.\nFor s = \"2020\" the output\
    \ should be 6.\nFor s = \"2020\" the output should be 7.\nFor s = \"2020\" the\
    \ output should be 8.\nFor s = \"2020\" the output should be 9.\nFor s = \"2020\"\
    \ the output should be 10.\nFor s = \"2020\" the output should be 11.\nFor s =\
    \ \"2020\" the output should be 12.\nFor s = \"2020\" the output should be 13.\n\
    For s = \"2020\" the output should be 14.\nFor s = \"2020\" the output should\
    \ be 15.\nFor s = \"2020\" the output should be 16.\nFor s = \"2020\" the output\
    \ should be 17.\nFor s = \"2020\" the output should be 18.\nFor s = \"2020\" the\
    \ output should be 19.\nFor s = \"2020\" the output should be 20.\nFor s = \"\
    2020\" the output should be 21.\nFor s = \"2020\" the output should be 22.\nFor\
    \ s = \"2020\" the \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"i\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsy6hchhy.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsy6hchhy.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    if prime_digits_count == 0\
    \ \n        prime_digits_count = 1\n    end\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8n1bmpxi.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8n1bmpxi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8n1bmpxi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp90_jx2x5.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp90_jx2x5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp90_jx2x5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptdqjj7k5.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptdqjj7k5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptdqjj7k5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqiz0kagw.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqiz0kagw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqiz0kagw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_set = Set(num.chars)\n\
    \    \n    prime_digits_set -= hex_set\n    \n    prime_digits_set -= hex_set\
    \ - prime_digits\n    \n    prime_digits_set -= hex_set - prime_digits - prime_digits\n\
    \    \n    prime_digits_set -= hex_set - prime_digits - prime_digits - prime_digits\n\
    \    \n    prime_digits_set -= hex_set - prime_digits - prime_digits - prime_digits\
    \ - prime_digits\n    \n    prime_digits_set -= hex_set - prime_digits - prime_digits\
    \ - prime_digits - prime_digits - prime_digits\n    \n    prime_digits_set -=\
    \ hex_set - prime_digits - prime_digits - prime_digits - prime_digits - prime_digits\
    \ - prime_digits\n    \n    prime_digits_set -= hex_set - prime_digits - prime_digits\
    \ - prime_digits - prime_digits - prime_digits - prime_digits - prime_digits\n\
    \    \n    prime_digits_set -= hex_set - prime_digits - prime_digits - prime_digits\
    \ - prime_digits - prime_digits - prime_digits - prime_digits - prime_digits\n\
    \    \n    prime_digits_set -= hex_set - prime_digits - prime_digits - prime_digits\
    \ - prime_digits - prime_digits - prime_digits - prime_digits - prime_digits -\
    \ prime_digits\n    \n    prime_digits_set -= hex_set - prime_digits - prime_digits\
    \ - prime_digits - prime_digits - prime_digits - prime_digits - prime_digits -\
    \ prime_digits - prime_digits - prime_digits\n    \n    prime_digits_set -= hex_set\
    \ - prime_digits - prime_digits - prime_digits - prime_digits - prime_digits -\
    \ prime_digits - prime_digits - prime_digits - prime_digits - prime_digits - prime_digits\n\
    \    \n    prime_digits_set -= hex_set - prime_digits - prime_digits - prime_digits\
    \ - prime_digits - prime_digits - prime_digits - prime_digits - prime_digits -\
    \ prime_digits - prime\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuy296hfq.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuy296hfq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuy296hfq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for prime in primes\n        \n        if primes_count\
    \ < prime\n            \n            primes_count += 1\n            \n       \
    \     if num[prime] == 'A'\n                \n                primes_count +=\
    \ 1\n                \n            if num[prime] == 'B'\n                \n  \
    \              primes_count += 1\n                \n            if num[prime]\
    \ == 'C'\n                \n                primes_count += 1\n              \
    \  \n            if num[prime] == 'D'\n                \n                primes_count\
    \ += 1\n                \n            if num[prime] == 'E'\n                \n\
    \                primes_count += 1\n                \n            if num[prime]\
    \ == 'F'\n                \n                primes_count += 1\n              \
    \  \n        end\n    end\n    \n    return primes_count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives\
    \ a hexadecimal number as a string and counts the number of hexadecimal digits\
    \ that are primes (prime number, or a prime, is a natural number greater than\
    \ 1 that is not a product of two smaller natural numbers).\nHexadecimal digits\
    \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: the input may contain\
    \ symbols A,B,C,D,E,F only.\nExamples:\nFor num = \"AB\" the output should be\
    \ 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the\
    \ output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\n\
    For num = \"2020\" the output should be 2.\nFor num = \"A\" the output should\
    \ be 0.\nFor num = \"B\" the output should be 0.\nFor num = \"C\" the output should\
    \ be 0.\nFor num = \"D\" the output should be 0.\nFor num = \"E\" the output should\
    \ be 0.\nFor num = \"F\" the output should be 0.\nFor num = \"G\" the output should\
    \ be 0.\nFor num = \"H\" the output should be 0.\nFor num = \"I\" the output should\
    \ be 0.\n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7yd9rd3g.jl:59\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7yd9rd3g.jl:59\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjicdhlnr.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjicdhlnr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjicdhlnr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps2rnkwu5.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmps2rnkwu5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmps2rnkwu5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpouqsrxge.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpouqsrxge.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpouqsrxge.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_count = 0\n    \n    for prime in primes\n        prime_count += 1\n\
    \    end\n    \n    return prime_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl03nwzz6.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl03nwzz6.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    \n    if num\
    \ == \"\"\n        \n        return 0\n    \n    \n    for char in num\n     \
    \   \n        if char == \"A\"\n            \n            hex_key += 1\n     \
    \       \n        elif char == \"B\"\n            \n            hex_key += 2\n\
    \            \n        elif char == \"C\"\n            \n            hex_key +=\
    \ 4\n            \n        elif char == \"D\"\n            \n            hex_key\
    \ += 8\n            \n        elif char == \"E\"\n            \n            hex_key\
    \ += 16\n            \n        elif char == \"F\"\n            \n            hex_key\
    \ += 32\n            \n        elif char == \"0\"\n            \n            hex_key\
    \ += 64\n            \n        elif char == \"1\"\n            \n            hex_key\
    \ += 128\n            \n        elif char == \"2\"\n            \n           \
    \ hex_key += 256\n            \n        elif char == \"3\"\n            \n   \
    \         hex_key += 512\n            \n        elif char == \"4\"\n         \
    \   \n            hex_key += 1024\n            \n        elif char == \"5\"\n\
    \            \n            hex_key += 2048\n            \n        elif char ==\
    \ \"6\"\n            \n            hex_key += 4096\n            \n        elif\
    \ char == \"7\"\n            \n            hex_key += 8192\n            \n   \
    \     elif char == \"8\"\n            \n            hex_key += 16384\n       \
    \     \n        elif char == \"9\"\n            \n            hex_key += 32768\n\
    \            \n        elif char == \"A\"\n            \n            hex_key +=\
    \ 65536\n            \n        elif char == \"B\"\n            \n            hex_key\
    \ += 131072\n            \n        elif char == \"C\"\n            \n        \
    \    hex_key += 262144\n            \n        elif char == \"D\"\n           \
    \ \n            hex_key += 524288\n            \n        elif char == \"E\"\n\
    \            \n            hex_key += 1048576\n            \n        elif char\
    \ == \"F\"\n            \n            hex_key += 2097152\n            \n     \
    \   elif char == \"0\"\n            \n            hex_key += 4194304\n       \
    \     \n        elif char == \"1\"\n            \n            hex_key += 8388608\n\
    \            \n        elif char == \"2\"\n            \n            hex_key +=\
    \ 16777216\n            \n        elif char == \"3\"\n            \n         \
    \   hex_key += 33554432\n            \n        elif char == \"4\"\n          \
    \  \n            hex_key += 67108864\n            \n        elif char == \"5\"\
    \n            \n            hex_key += 134217728\n            \n        elif char\
    \ == \"6\"\n            \n            hex_key += 268435456\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"char\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_wvd2e_e.jl:34\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_wvd2e_e.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = primes.count{|x| num.count(x)}\n    \n    primes_count += primes.count{|x|\
    \ num.count(x.to_s)}\n    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.downcase)}\n    \n\
    \    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s)}\n    \n \
    \   primes_count += primes.count{|x| num.count(x.to_s.downcase.to_s)}\n    \n\
    \    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.downcase.to_s.upcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.downcase.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase.to_s)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.downcase.to_s)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.downcase.to_s.upcase.to_s)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.downcase.to_s.downcase.to_s)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase.to_s.upcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.downcase.to_s.upcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.downcase.to_s.downcase)}\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcxwdgb2u.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcxwdgb2u.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   primes_count = length(primes)\n    \n    primes_count_2 = primes_count / 2\n\
    \    \n    primes_count_3 = primes_count / 3\n    \n    primes_count_4 = primes_count\
    \ / 4\n    \n    primes_count_5 = primes_count / 5\n    \n    primes_count_6 =\
    \ primes_count / 6\n    \n    primes_count_7 = primes_count / 7\n    \n    primes_count_8\
    \ = primes_count / 8\n    \n    primes_count_9 = primes_count / 9\n    \n    primes_count_10\
    \ = primes_count / 10\n    \n    primes_count_11 = primes_count / 11\n    \n \
    \   primes_count_12 = primes_count / 12\n    \n    primes_count_13 = primes_count\
    \ / 13\n    \n    primes_count_14 = primes_count / 14\n    \n    primes_count_15\
    \ = primes_count / 15\n    \n    primes_count_16 = primes_count / 16\n    \n \
    \   primes_count_17 = primes_count / 17\n    \n    primes_count_18 = primes_count\
    \ / 18\n    \n    primes_count_19 = primes_count / 19\n    \n    primes_count_20\
    \ = primes_count / 20\n    \n    primes_count_21 = primes_count / 21\n    \n \
    \   primes_count_22 = primes_count / 22\n    \n    primes_count_23 = primes_count\
    \ / 23\n    \n    primes_count_24 = primes_count / 24\n    \n    primes_count_25\
    \ = primes_count / 25\n    \n    primes_count_26 = primes_count / 26\n    \n \
    \   primes_count_27 = primes_count / 27\n    \n    primes_count_28 = primes_count\
    \ / 28\n    \n    primes_count_29 = primes_count / 29\n    \n    primes_count_30\
    \ = primes_count / 30\n    \n    primes_count_31 = primes_count / 31\n    \n \
    \   primes_count_32 = primes_count / 32\n    \n    primes_count_33 = primes_count\
    \ / 33\n    \n    primes_count_34 = primes_count / 34\n    \n    primes_count_35\
    \ = primes_count / 35\n    \n    primes_count_36 = primes_count / 36\n    \n \
    \   primes_count_37 = primes_count / \nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0uesyzzq.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0uesyzzq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0uesyzzq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for prime in primes\n        \n        if num ==\
    \ prime\n            primes_count += 1\n        end\n    end\n    \n    return\
    \ primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that receives a hexadecimal number as a string and counts\
    \ the number of hexadecimal digits that are primes (prime number, or a prime,\
    \ is a natural number greater than 1 that is not a product of two smaller natural\
    \ numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
    \ E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n\
    Note, you may assume the input is always correct or empty string, and symbols\
    \ A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should\
    \ be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the\
    \ output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\n\
    For num = \"2020\" the output should be 2.\nFor num = \"\" the output should be\
    \ 0.\nFor num = \" \" the output should be 0.\nFor num = \"  \" the output should\
    \ be 0.\nFor num = \"   \" the output should be 0.\nFor num = \"   A\" the output\
    \ should be 1.\nFor num = \"   AB\" the output should be 1.\nFor num = \"   ABCD\"\
    \ the output should be 3.\nFor num = \"   ABCD1234\" the output should be 5.\n\
    For num = \"   ABCD1234ABCD\" the output should be 7.\nFor num = \"   ABCD1234ABCD1234\"\
    \ the output should be 9.\nFor num = \"   ABCD1234ABCD1234ABCD\" the output should\
    \ be 11.\nFor num = \"   ABCD1234ABCD1234ABCD1234\" the output should be 13.\n\
    For num = \"   ABCD1234ABCD1234ABCD1234ABCD\" the output should be 17.\nFor num\
    \ = \"   ABCD1234ABCD1234ABCD1234ABCD1234\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvwo0snbq.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvwo0snbq.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(hex_key(num))\n\
    \    \n    primes_count = primes.count{|x| x==hex_key(num)} \n    \n    return\
    \ primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a string and returns the number of uppercase\
    \ letters.\nExamples:\nFor str = \"A\" the output should be 1.\nFor str = \"a\"\
    \ the output should be 1.\nFor str = \"AB\" the output should be 2.\nFor str =\
    \ \"aB\" the output should be 2.\nFor str = \"aBc\" the output should be 3.\n\
    For str = \"aBcD\" the output should be 4.\nFor str = \"aBcD\" the output should\
    \ be 4.\nFor str = \"aBcD\" the output should be 4.\nFor str = \"aBcD\" the output\
    \ should be 4.\nFor str = \"aBcD\" the output should be 4.\nFor str = \"aBcD\"\
    \ the output should be 4.\nFor str = \"aBcD\" the output should be 4.\nFor str\
    \ = \"aBcD\" the output should be 4.\nFor str = \"aBcD\" the output should be\
    \ 4.\nFor str = \"aBcD\" the output should be 4.\nFor str = \"aBcD\" the output\
    \ should be 4.\nFor str = \"aBcD\" the output should be 4.\nFor str = \"aBcD\"\
    \ the output should be 4.\nFor str = \"aBcD\" the output should be 4.\nFor str\
    \ = \"aBcD\" the output should be 4.\nFor str = \"aBcD\" the output should be\
    \ 4.\nFor str = \"aBcD\" the output should be 4.\nFor str = \"aBcD\" the output\
    \ should be 4.\nFor str = \"aBcD\" the output should be 4.\nFor str = \"aBcD\"\
    \ the output should be 4.\nFor str = \"aBcD\" the output should be 4.\nFor str\
    \ = \"aBcD\" the output should be 4.\nFor str = \"aBcD\" the output should be\
    \ 4.\nFor str = \"aBcD\" the output should be 4.\nFor str = \"aBcD\" the output\
    \ should be 4.\nFor str = \"aBcD\" the output \nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5c30yl7l.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5c30yl7l.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(hex_key(num))\n\
    \    \n    primes_count = length(primes)\n    \n    primes_count_2 = primes_count\
    \ / 2\n    \n    primes_count_3 = primes_count / 3\n    \n    primes_count_4 =\
    \ primes_count / 4\n    \n    primes_count_5 = primes_count / 5\n    \n    primes_count_6\
    \ = primes_count / 6\n    \n    primes_count_7 = primes_count / 7\n    \n    primes_count_8\
    \ = primes_count / 8\n    \n    primes_count_9 = primes_count / 9\n    \n    primes_count_10\
    \ = primes_count / 10\n    \n    primes_count_11 = primes_count / 11\n    \n \
    \   primes_count_12 = primes_count / 12\n    \n    primes_count_13 = primes_count\
    \ / 13\n    \n    primes_count_14 = primes_count / 14\n    \n    primes_count_15\
    \ = primes_count / 15\n    \n    primes_count_16 = primes_count / 16\n    \n \
    \   primes_count_17 = primes_count / 17\n    \n    primes_count_18 = primes_count\
    \ / 18\n    \n    primes_count_19 = primes_count / 19\n    \n    primes_count_20\
    \ = primes_count / 20\n    \n    primes_count_21 = primes_count / 21\n    \n \
    \   primes_count_22 = primes_count / 22\n    \n    primes_count_23 = primes_count\
    \ / 23\n    \n    primes_count_24 = primes_count / 24\n    \n    primes_count_25\
    \ = primes_count / 25\n    \n    primes_count_26 = primes_count / 26\n    \n \
    \   primes_count_27 = primes_count / 27\n    \n    primes_count_28 = primes_count\
    \ / 28\n    \n    primes_count_29 = primes_count / 29\n    \n    primes_count_30\
    \ = primes_count / 30\n    \n    primes_count_31 = primes_count / 31\n    \n \
    \   primes_count_32 = primes_count / 32\n    \n    primes_count_33 = primes_count\
    \ / 33\n    \n    primes_count_34 = primes_count / 34\n    \n    primes_count_35\
    \ = primes_count / 35\n    \n    primes_count_36 = primes_count / 36\n    \n \
    \   primes_count_37 = primes_\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2ryifw9x.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2ryifw9x.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2ryifw9x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hexadecimal_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexadecimal_digits_set\
    \ = Set(hexadecimal_digits)\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - prime_digits_set\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - hexadecimal_digits_set - prime_digits_set\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - hexadecimal_digits_set - prime_digits_set - hexadecimal_digits_set\
    \ - prime_digits_set\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - hexadecimal_digits_set - prime_digits_set - hexadecimal_digits_set - prime_digits_set\
    \ - hexadecimal_digits_set - prime_digits_set\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - hexadecimal_digits_set - prime_digits_set - hexadecimal_digits_set\
    \ - prime_digits_set - hexadecimal_digits_set - prime_digits_set - hexadecimal_digits_set\
    \ - prime_digits_set\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - hexadecimal_digits_set - prime_digits_set - hexadecimal_digits_set - prime_digits_set\
    \ - hexadecimal_digits_set - prime_digits_set - hexadecimal_digits_set - prime_digits_set\
    \ - hexadecimal_digits_set - prime_digits_set\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - hexadecimal_digits_set - prime_digits_set - hexadecimal_digits_set\
    \ - prime_digits_set - hexadecimal_digits_set - prime_digits_set - hexadecimal_digits_set\
    \ - prime_digits_set - hexadecimal_digits_set - prime_digits_set - hexadecimal_digits_set\
    \ - prime_digits_set\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - hexadecimal_digits_set - prime_digits_set - hexadecimal_digits_set - prime_digits_set\
    \ - hexadecimal_digit\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp70xgtwu4.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp70xgtwu4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp70xgtwu4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppnuq9q3t.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppnuq9q3t.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppnuq9q3t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_digits = num.chars\n    \n    prime_digits_count = prime_digits.len\n\
    \    \n    hex_digits_count = hex_digits.len\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    hex_digits_count = hex_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    hex_digits_count = hex_digits_count-1\n  \
    \  \n    prime_digits_count = prime_digits_count-1\n    \n    hex_digits_count\
    \ = hex_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    hex_digits_count = hex_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    hex_digits_count = hex_digits_count-1\n  \
    \  \n    prime_digits_count = prime_digits_count-1\n    \n    hex_digits_count\
    \ = hex_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    hex_digits_count = hex_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    hex_digits_count = hex_digits_count-1\n  \
    \  \n    prime_digits_count = prime_digits_count-1\n    \n    hex_digits_count\
    \ = hex_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    hex_digits_count = hex_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    hex_digits_count = hex_digits_count-1\n  \
    \  \n    prime_digits_count = prime_digits_count-1\n    \n    hex_digits_count\
    \ = hex_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    hex_digits_count = hex_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    hex_digits_count = hex_digits_count-1\n  \
    \  \n    prime_digits_count = prime_digits_count-1\n    \n    hex_digits_count\
    \ = hex_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    hex_digits_count = hex_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    hex_digits_count = hex_digits_count-1\n  \
    \  \n    prime_digits_count = prime_digits_count-1\n    \n    hex_\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpck6nbi_w.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpck6nbi_w.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpck6nbi_w.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num)\n    \n  \
    \  primes_count = length(primes)\n    \n    primes_count_2 = primes_count - 1\n\
    \    \n    primes_count_3 = primes_count - 2\n    \n    primes_count_4 = primes_count\
    \ - 3\n    \n    primes_count_5 = primes_count - 4\n    \n    primes_count_6 =\
    \ primes_count - 5\n    \n    primes_count_7 = primes_count - 6\n    \n    primes_count_8\
    \ = primes_count - 7\n    \n    primes_count_9 = primes_count - 8\n    \n    primes_count_10\
    \ = primes_count - 9\n    \n    primes_count_11 = primes_count - 10\n    \n  \
    \  primes_count_12 = primes_count - 11\n    \n    primes_count_13 = primes_count\
    \ - 12\n    \n    primes_count_14 = primes_count - 13\n    \n    primes_count_15\
    \ = primes_count - 14\n    \n    primes_count_16 = primes_count - 15\n    \n \
    \   primes_count_17 = primes_count - 16\n    \n    primes_count_18 = primes_count\
    \ - 17\n    \n    primes_count_19 = primes_count - 18\n    \n    primes_count_20\
    \ = primes_count - 19\n    \n    primes_count_21 = primes_count - 20\n    \n \
    \   primes_count_22 = primes_count - 21\n    \n    primes_count_23 = primes_count\
    \ - 22\n    \n    primes_count_24 = primes_count - 23\n    \n    primes_count_25\
    \ = primes_count - 24\n    \n    primes_count_26 = primes_count - 25\n    \n \
    \   primes_count_27 = primes_count - 26\n    \n    primes_count_28 = primes_count\
    \ - 27\n    \n    primes_count_29 = primes_count - 28\n    \n    primes_count_30\
    \ = primes_count - 29\n    \n    primes_count_31 = primes_count - 30\n    \n \
    \   primes_count_32 = primes_count - 31\n    \n    primes_count_33 = primes_count\
    \ - 32\n    \n    primes_count_34 = primes_count - 33\n    \n    primes_count_35\
    \ = primes_count - 34\n    \n    primes_count_36 = primes_count - 35\n    \n \
    \   primes_count_37 = primes_count - 36\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2zbrw1xw.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2zbrw1xw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2zbrw1xw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3eoc1ayo.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3eoc1ayo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3eoc1ayo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(hex_key(num)[2:end])\n\
    \    \n    primes_count = count(primes)\n    \n    return primes_count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqc_hifp0.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] hex_key(::String) at /tmp/tmpqc_hifp0.jl:20 (repeats 79984 times)\n  \n\
    test set: Error During Test at /tmp/tmpqc_hifp0.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"1077E\") == 2\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] hex_key(::String) at /tmp/tmpqc_hifp0.jl:20 (repeats 79984 times)\n  \n\
    test set: Error During Test at /tmp/tmpqc_hifp0.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"ABED1A33\") == 4\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] hex_key(::String) at /tmp/tmpqc_hifp0.jl:20 (repeats 79984 times)\n  \n\
    test set: Error During Test at /tmp/tmpqc_hifp0.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"2020\") == 2\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] hex_key(::String) at /tmp/tmpqc_hifp0.jl:20 (repeats 79984 times)\n  \n\
    test set: Error During Test at /tmp/tmpqc_hifp0.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"123456789ABCDEF0\") == 6\n  StackOverflowError:\n \
    \ Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpqc_hifp0.jl:20 (repeats 79984\
    \ times)\n  \ntest set: Error During Test at /tmp/tmpqc_hifp0.jl:36\n  Test threw\
    \ exception\n  Expression: candidate(\"112233445566778899AABBCCDDEEFF00\") ==\
    \ 12\n  StackOverflowError:\n  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmpqc_hifp0.jl:20\
    \ (repeats 79984 times)\n  \nTest Summary: | Error  Total\ntest set      |   \
    \  6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqc_hifp0.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = prime_digits(num)\n \
    \   \n    prime_digits_count = length(prime_digits)\n    \n    if prime_digits_count\
    \ > 0 \n        \n        prime_digits_count = prime_digits_count - 1\n      \
    \  \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfc3yhon9.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfc3yhon9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    if num == \"\"\
    \n        \n        return hex_key\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4j3cwunq.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4j3cwunq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbz4by3t6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbz4by3t6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbz4by3t6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_digits = num.chars\n    \n    prime_digits_count = 0\n    \n  \
    \  for i in prime_digits\n        if hex_digits[i] == 1\n            prime_digits_count\
    \ += 1\n            \n    prime_digits_count = prime_digits_count-1\n    \n  \
    \  if prime_digits_count > 1\n        prime_digits_count = 0\n        for i in\
    \ prime_digits\n            if hex_digits[i] == 1\n                prime_digits_count\
    \ += 1\n                \n    prime_digits_count = prime_digits_count-1\n    \n\
    \    if prime_digits_count > 1\n        prime_digits_count = 0\n        for i\
    \ in prime_digits\n            if hex_digits[i] == 1\n                prime_digits_count\
    \ += 1\n                \n    prime_digits_count = prime_digits_count-1\n    \n\
    \    if prime_digits_count > 1\n        prime_digits_count = 0\n        for i\
    \ in prime_digits\n            if hex_digits[i] == 1\n                prime_digits_count\
    \ += 1\n                \n    prime_digits_count = prime_digits_count-1\n    \n\
    \    if prime_digits_count > 1\n        prime_digits_count = 0\n        for i\
    \ in prime_digits\n            if hex_digits[i] == 1\n                prime_digits_count\
    \ += 1\n                \n    prime_digits_count = prime_digits_count-1\n    \n\
    \    if prime_digits_count > 1\n        prime_digits_count = 0\n        for i\
    \ in prime_digits\n            if hex_digits[i] == 1\n                prime_digits_count\
    \ += 1\n                \n    prime_digits_count = prime_digits_count-1\n    \n\
    \    if prime_digits_count > 1\n        prime_digits_count = 0\n        for i\
    \ in prime_digits\n            if hex_digits[i] == 1\n                prime_digits_count\
    \ += 1\n                \n    prime_digits_count = prime_digits_count-1\n    \n\
    \    if prime_digits_count > 1\n        prime_digits_count = 0\n        for i\
    \ in prime_digits\n            if hex_digits[i] == 1\n                prime_digits_count\
    \ += 1\n                \n    prime_digits_count = prime_digits_count-1\n    \n\
    \    if prime_digits_count > 1\n        prime_digits_count = 0\n        for i\
    \ in prime_digits\n            if hex_digits[i] == 1\n                prime_digits_count\
    \ += 1\n                \n    prime_digits_count = prime_digits_count-1\n    \n\
    \    if prime_digits_count > 1\n        prime_digits_count = 0\n        for i\
    \ in prime_digits\n            if hex_digits[i] == 1\n                prime_digits_count\
    \ += 1\n                \n    prime_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfvbuurei.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfvbuurei.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsfnimwc3.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsfnimwc3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsfnimwc3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num)\n    \n  \
    \  primes_count = primes.count{|x| num.count(x)}\n    \n    primes_count += primes.count{|x|\
    \ num.count(x.to_s)}\n    \n    return primes_count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyw0k6vlt.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyw0k6vlt.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzy3uf_4_.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzy3uf_4_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzy3uf_4_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for i in primes\n        if num[i] == num[primes_count]\n\
    \            primes_count += 1\n        else\n            break\n    \n    return\
    \ primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a hexadecimal number as a string and counts\
    \ the number of hexadecimal digits that are primes (prime number, or a prime,\
    \ is a natural number greater than 1 that is not a product of two smaller natural\
    \ numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
    \ E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal\
    \ 13).\nNote: the input may or may not be correct or empty string, \nand symbols\
    \ A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should\
    \ be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the\
    \ output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\n\
    For num = \"2020\" the output should be 2.\nFor num = \"\" the output should be\
    \ 0.\nFor num = \" \" the output should be 0.\nFor num = \"  \" the output should\
    \ be 0.\nFor num = \"  \" the output should be 0.\nFor num = \"  \" the output\
    \ should be 0.\nFor num = \"  \" the output should be 0.\nFor num = \"  \" the\
    \ output should be 0.\nFor num = \"  \" the output should be 0.\nFor num = \"\
    \  \" the output should be 0.\nFor num = \"  \" the output should be 0.\nFor num\
    \ = \"  \" the output should be 0.\nFor num = \"  \" the output should be 0.\n\
    For num = \"  \" the output should be 0.\nFor num = \"  \" the output should be\
    \ 0.\nFor num = \"  \" the output should be 0.\nFor num = \"  \" the output should\
    \ be 0.\nFor num = \"  \" the output should be 0.\nFor num = \"  \" the output\
    \ should be 0.\nFor num = \"  \" the output should be 0.\nFor \nusing Test\n\n\
    @testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbdl29rwu.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbdl29rwu.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexdigits = num.chars\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = prime_digits_set\
    \ & hexdigits_set\n    \n    prime_digits_set = prime_digits_set - hexdigits_set\n\
    \    \n    prime_digits_set = prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8efht7fm.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8efht7fm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8efht7fm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(num)\n    \n\
    \    prime_digits = primes.map(|x| x.digits)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.is_power_of_two())\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ <= hex::UInt64)\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ >= hex::UInt64(2))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ <= hex::UInt64(16))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ >= hex::UInt64(2))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ <= hex::UInt64(64))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ >= hex::UInt64(2))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ <= hex::UInt64(256))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ >= hex::UInt64(2))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ <= hex::UInt64(1024))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ >= hex::UInt64(2))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ <= hex::UInt64(4096))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ >= hex::UInt64(2))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ <= hex::UInt64(16384))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ >= hex::UInt64(2))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ <= hex::UInt64(65536))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ >= hex::UInt64(2))\n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ <= hex::UInt64(131072))\n    \n    prime_digits = prime_digits.filter(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0hk69x4w.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0hk69x4w.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    prime_digits_count_2 = prime_digits_count\
    \ / 2\n    \n    prime_digits_count_3 = prime_digits_count / 3\n    \n    prime_digits_count_4\
    \ = prime_digits_count / 4\n    \n    prime_digits_count_5 = prime_digits_count\
    \ / 5\n    \n    prime_digits_count_6 = prime_digits_count / 6\n    \n    prime_digits_count_7\
    \ = prime_digits_count / 7\n    \n    prime_digits_count_8 = prime_digits_count\
    \ / 8\n    \n    prime_digits_count_9 = prime_digits_count / 9\n    \n    prime_digits_count_10\
    \ = prime_digits_count / 10\n    \n    prime_digits_count_11 = prime_digits_count\
    \ / 11\n    \n    prime_digits_count_12 = prime_digits_count / 12\n    \n    prime_digits_count_13\
    \ = prime_digits_count / 13\n    \n    prime_digits_count_14 = prime_digits_count\
    \ / 14\n    \n    prime_digits_count_15 = prime_digits_count / 15\n    \n    prime_digits_count_16\
    \ = prime_digits_count / 16\n    \n    prime_digits_count_17 = prime_digits_count\
    \ / 17\n    \n    prime_digits_count_18 = prime_digits_count / 18\n    \n    prime_digits_count_19\
    \ = prime_digits_count / 19\n    \n    prime_digits_count_20 = prime_digits_count\
    \ / 20\n    \n    prime_digits_count_21 = prime_digits_count / 21\n    \n    prime_digits_count_22\
    \ = prime_digits_count / 22\n    \n    prime_digits_count_23 = prime_digits_count\
    \ / 23\n    \n    prime_digits_count_24 = prime_digits_count / 24\n    \n    prime_digits_count_25\
    \ = prime_digits_count / 25\n    \n    prime_digits_count_26 = prime_digits_count\
    \ / 26\n    \n    prime_digits_count_27 = prime_digits_count / 27\n    \n    prime_digits_count_28\
    \ = prime_digits_count / 28\n    \n    prime_digits_count_29 = prime_digits_\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpepiohox4.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpepiohox4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpepiohox4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num)\n    \n  \
    \  prime_digits = primes.map(|x| x.digits)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.is_power_of_two())\n    \n    prime_digits = prime_digits.filter(|x| x.digits\
    \ != 0)\n    \n    prime_digits = prime_digits.filter(|x| x.digits < 10)\n   \
    \ \n    prime_digits = prime_digits.filter(|x| x.digits > 0)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.digits != 0)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.digits < 10)\n    \n    prime_digits = prime_digits.filter(|x| x.digits >\
    \ 0)\n    \n    prime_digits = prime_digits.filter(|x| x.digits != 0)\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.digits < 10)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.digits > 0)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.digits != 0)\n    \n    prime_digits = prime_digits.filter(|x| x.digits <\
    \ 10)\n    \n    prime_digits = prime_digits.filter(|x| x.digits > 0)\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.digits != 0)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.digits < 10)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.digits > 0)\n    \n    prime_digits = prime_digits.filter(|x| x.digits !=\
    \ 0)\n    \n    prime_digits = prime_digits.filter(|x| x.digits < 10)\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.digits > 0)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.digits != 0)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.digits < 10)\n    \n    prime_digits = prime_digits.filter(|x| x.digits >\
    \ 0)\n    \n    prime_digits = prime_digits.filter(|x| x.digits != 0)\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.digits < 10)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.digits > 0)\n    \n    prime_digits = prime\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpukk1tixe.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpukk1tixe.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw7whxntz.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpw7whxntz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpw7whxntz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_digits_set = Set(hex_digits)\n\
    \    \n    prime_digits_set = prime_digits_set & hex_digits_set\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"0\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"1\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"2\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"3\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"4\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"5\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"6\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"7\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"8\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"9\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"A\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"B\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"C\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"D\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"E\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"F\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"0\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"1\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"2\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"3\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp968_glz4.jl:75\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp968_glz4.jl:75\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp85ityae4.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp85ityae4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp85ityae4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    if num == \"\"\
    \n        return hex_key\n    \n    for char in num\n        if char == \"A\"\n\
    \            hex_key += 1\n        elif char == \"B\"\n            hex_key +=\
    \ 2\n        elif char == \"C\"\n            hex_key += 4\n        elif char ==\
    \ \"D\"\n            hex_key += 8\n        elif char == \"E\"\n            hex_key\
    \ += 16\n        elif char == \"F\"\n            hex_key += 32\n        else\n\
    \            hex_key += 64\n    end\n    \n    return hex_key\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"char\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7tj_62dv.jl:28\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7tj_62dv.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps543eofq.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmps543eofq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmps543eofq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyu31kuhm.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyu31kuhm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyu31kuhm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_count = 0\n    for prime in primes\n        prime_count += primes.count(prime)\n\
    \    end\n    \n    return prime_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a positive\
    \ integer $n$ and returns the number of digits in the number $n$ that are divisible\
    \ by 3. \nExamples:\nFor n = 12 the output should be 2.\nFor n = 14 the output\
    \ should be 3.\nFor n = 100 the output should be 3.\nFor n = 10 the output should\
    \ be 1.\nFor n = 123 the output should be 3.\nFor n = 1234 the output should be\
    \ 4.\nFor n = 123456 the output should be 5.\nFor n = 12345678 output should be\
    \ 6.\nFor n = 123456789 the output should be 7.\nFor n = 1234567890 output should\
    \ be 8.\nFor n = 12345678901 output should be 9.\nFor n = 123456789012 output\
    \ should be 10.\nFor n = 1234567890123 output should be 11.\nFor n = 12345678901234\
    \ output should be 12.\nFor n = 12345678901234567 output should be 13.\nFor n\
    \ = 123456789012345678 output should be 14.\nFor n = 1234567890123456789 output\
    \ should be 15.\nFor n = 12345678901234567890 output should be 16.\nFor n = 123456789012345678901\
    \ output should be 17.\nFor n = 1234567890123456789012 output should be 18.\n\
    For n = 12345678901234567890123 output should be 19.\nFor n = 123456789012345678901234\
    \ output should be 20.\nFor n = 123456789012345678901234567 output should be 21.\n\
    For n = 1234567890123456789012345678 output should be 22.\nFor n = 12345678901234567890123456789\
    \ output should be 23.\nFor n = 123456789012345678901234567890 output should be\
    \ 24.\nFor n = 1234567890123456789012345678901 output should be 25.\nFor n = 12345678901234567890123456789012\
    \ output should be 26.\nFor n = 123456789012345678901234567890123 output should\
    \ be 27.\nFor n = 1234567890123456789012345678901234 output should be 28.\nFor\
    \ n = 1234567890123456789012345678901234567 output should be 29.\nFor n = 12345678901234567890123456789012345678\
    \ output should be 30.\nFor n = 123456789012345678901234567890123456789 output\
    \ should be 31.\nFor n = 1234567890123456789012345678901234567890 output should\
    \ be 32.\nFor n = 12345678901234567890123456789\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaialsz26.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaialsz26.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    prime_digits_set = Set(prime_digits)\n    \n    hexdigits = Set(\"0123456789ABCDEF\"\
    )\n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set =\
    \ Set(prime_digits)\n    \n    prime_digits_set = Set(prime_digits)\n    \n  \
    \  prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set =\
    \ Set(prime_digits)\n    \n    prime_digits_set = Set(prime_digits)\n    \n  \
    \  prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set =\
    \ Set(prime_digits)\n    \n    prime_digits_set = Set(prime_digits)\n    \n  \
    \  prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set =\
    \ Set(prime_digits)\n    \n    prime_digits_set = Set(prime_digits)\n    \n  \
    \  prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set =\
    \ Set(prime_digits)\n    \n    prime_digits_set = Set(prime_digits)\n    \n  \
    \  prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set =\
    \ Set(prime_digits)\n    \n    prime_digits_set = Set(prime_digits)\n    \n  \
    \  prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set =\
    \ Set(prime_digit\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp__8s6x92.jl:91\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp__8s6x92.jl:91\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num)\n    \n  \
    \  primes_count = primes.count\n    \n    primes_count = primes_count + 1\n  \
    \  \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpioh36vy0.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpioh36vy0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpioh36vy0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = prime_digits(num)\n \
    \   \n    prime_digits_count = length(prime_digits)\n    \n    prime_digits_count_2\
    \ = prime_digits_count / 2\n    \n    prime_digits_count_3 = prime_digits_count\
    \ / 3\n    \n    prime_digits_count_4 = prime_digits_count / 4\n    \n    prime_digits_count_5\
    \ = prime_digits_count / 5\n    \n    prime_digits_count_6 = prime_digits_count\
    \ / 6\n    \n    prime_digits_count_7 = prime_digits_count / 7\n    \n    prime_digits_count_8\
    \ = prime_digits_count / 8\n    \n    prime_digits_count_9 = prime_digits_count\
    \ / 9\n    \n    prime_digits_count_10 = prime_digits_count / 10\n    \n    prime_digits_count_11\
    \ = prime_digits_count / 11\n    \n    prime_digits_count_12 = prime_digits_count\
    \ / 12\n    \n    prime_digits_count_13 = prime_digits_count / 13\n    \n    prime_digits_count_14\
    \ = prime_digits_count / 14\n    \n    prime_digits_count_15 = prime_digits_count\
    \ / 15\n    \n    prime_digits_count_16 = prime_digits_count / 16\n    \n    prime_digits_count_17\
    \ = prime_digits_count / 17\n    \n    prime_digits_count_18 = prime_digits_count\
    \ / 18\n    \n    prime_digits_count_19 = prime_digits_count / 19\n    \n    prime_digits_count_20\
    \ = prime_digits_count / 20\n    \n    prime_digits_count_21 = prime_digits_count\
    \ / 21\n    \n    prime_digits_count_22 = prime_digits_count / 22\n    \n    prime_digits_count_23\
    \ = prime_digits_count / 23\n    \n    prime_digits_count_24 = prime_digits_count\
    \ / 24\n    \n    prime_digits_count_25 = prime_digits_count / 25\n    \n    prime_digits_count_26\
    \ = prime_digits_count / 26\n    \n    prime_digits_count_27 = prime_digits_count\
    \ / 27\n    \n    prime_digits_count_28 = prime_digits_count / 28\n    \n    prime_digits_count_29\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8gv5az1x.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8gv5az1x.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8gv5az1x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_string = num\n    \n    hex_string = hex_string.upper()\n    \n\
    \    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"x\")\n    \n    hex_string = hex_string.strip(\"\
    B\")\n    \n    hex_string = hex_string.strip(\"D\")\n    \n    hex_string = hex_string.strip(\"\
    E\")\n    \n    hex_string = hex_string.strip(\"F\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpirbxnync.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpirbxnync.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpirbxnync.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_count = 0\n    \n    for prime in primes\n        prime_count += 1\n\
    \    end\n    \n    return prime_count\nend\n</cell>\n<code language=julia-1.4>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.4>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.4>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.4>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.4>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may contain symbols A,B,C,D,E,F only.\n\
    Examples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output\
    \ should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\"\
    \ the output should be 6.\nFor num = \"2020\" the output should be 2.\nFor num\
    \ = \"A\" the output should be 0.\nFor num = \"B\" the output should be 0.\nFor\
    \ num = \"C\" the output should be 0.\nFor num = \"D\" the output should be 0.\n\
    For num = \"E\" the output should be 0.\nFor num = \"F\" the output should be\
    \ 0.\nFor num = \"10\" the output should be 0.\nFor num = \"11\" the output should\
    \ be 0.\nFor num = \"12\" the output should be 0.\nFor num = \"13\" the output\
    \ should be 0.\nFor num = \"14\" the output should be 0.\nFor num = \"15\" the\
    \ output should be 0.\nFor num = \"16\" the output should be 0.\nFor num = \"\
    17\" the output should be 0.\nFor num = \"18\" the output should be 0.\nFor num\
    \ = \"19\" the output should be 0.\nFor num = \"20\" the output should be 0.\n\
    For num = \"21\" the output should be 0.\nFor num = \"22\" the output should be\
    \ 0.\nFor num = \"23\" the output should be 0.\nFor num = \"24\" the output \n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6zob538s.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6zob538s.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    prime_digits_count_2 = prime_digits_count\
    \ / 2\n    \n    prime_digits_count_3 = prime_digits_count / 3\n    \n    prime_digits_count_4\
    \ = prime_digits_count / 4\n    \n    prime_digits_count_5 = prime_digits_count\
    \ / 5\n    \n    prime_digits_count_6 = prime_digits_count / 6\n    \n    prime_digits_count_7\
    \ = prime_digits_count / 7\n    \n    prime_digits_count_8 = prime_digits_count\
    \ / 8\n    \n    prime_digits_count_9 = prime_digits_count / 9\n    \n    prime_digits_count_10\
    \ = prime_digits_count / 10\n    \n    prime_digits_count_11 = prime_digits_count\
    \ / 11\n    \n    prime_digits_count_12 = prime_digits_count / 12\n    \n    prime_digits_count_13\
    \ = prime_digits_count / 13\n    \n    prime_digits_count_14 = prime_digits_count\
    \ / 14\n    \n    prime_digits_count_15 = prime_digits_count / 15\n    \n    prime_digits_count_16\
    \ = prime_digits_count / 16\n    \n    prime_digits_count_17 = prime_digits_count\
    \ / 17\n    \n    prime_digits_count_18 = prime_digits_count / 18\n    \n    prime_digits_count_19\
    \ = prime_digits_count / 19\n    \n    prime_digits_count_20 = prime_digits_count\
    \ / 20\n    \n    prime_digits_count_21 = prime_digits_count / 21\n    \n    prime_digits_count_22\
    \ = prime_digits_count / 22\n    \n    prime_digits_count_23 = prime_digits_count\
    \ / 23\n    \n    prime_digits_count_24 = prime_digits_count / 24\n    \n    prime_digits_count_25\
    \ = prime_digits_count / 25\n    \n    prime_digits_count_26 = prime_digits_count\
    \ / 26\n    \n    prime_digits_count_27 = prime_digits_count / 27\n    \n    prime_digits_count_28\
    \ = prime_digits_count / 28\n    \n    prime_digits_count_29 = prime_digits_\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg2bhlod9.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpg2bhlod9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpg2bhlod9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp595vth2.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpp595vth2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpp595vth2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvhmatw76.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvhmatw76.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvhmatw76.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi46fnw95.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpi46fnw95.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpi46fnw95.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key::Int64 = 0\n    \n    if num\
    \ == \"\"\n        return hex_key\n    \n    digits::Vector{String} = split(num,\
    \ \"A\") + split(num, \"B\") + split(num, \"C\") + split(num, \"D\") + split(num,\
    \ \"E\") + split(num, \"F\")\n    \n    for digit in digits\n        if digit\
    \ == \"0\"\n            continue\n        \n        if digit == \"1\"\n      \
    \      hex_key::Int64 = hex_key::Int64 + 1\n            continue\n        \n \
    \       if digit == \"2\"\n            hex_key::Int64 = hex_key::Int64 + 1\n \
    \           continue\n        \n        if digit == \"3\"\n            hex_key::Int64\
    \ = hex_key::Int64 + 1\n            continue\n        \n        if digit == \"\
    4\"\n            hex_key::Int64 = hex_key::Int64 + 1\n            continue\n \
    \       \n        if digit == \"5\"\n            hex_key::Int64 = hex_key::Int64\
    \ + 1\n            continue\n        \n        if digit == \"6\"\n           \
    \ hex_key::Int64 = hex_key::Int64 + 1\n            continue\n        \n      \
    \  if digit == \"7\"\n            hex_key::Int64 = hex_key::Int64 + 1\n      \
    \      continue\n        \n        if digit == \"8\"\n            hex_key::Int64\
    \ = hex_key::Int64 + 1\n            continue\n        \n        if digit == \"\
    9\"\n            hex_key::Int64 = hex_key::Int64 + 1\n            continue\n \
    \       \n        if digit == \"A\"\n            hex_key::Int64 = hex_key::Int64\
    \ + 1\n            continue\n        \n        if digit == \"B\"\n           \
    \ hex_key::Int64 = hex_key::Int64 + 1\n            continue\n        \n      \
    \  if digit == \"C\"\n            hex_key::Int64 = hex_key::Int64 + 1\n      \
    \      continue\n        \n        if digit == \"D\"\n            hex_key::Int64\
    \ = hex_key::Int64 + 1\n            continue\n        \n        if digit == \"\
    E\"\n            hex_key::Int64 = hex_key::Int64 + 1\n            continue\n \
    \       \n        if digit == \"F\"\n            hex_key::Int64 = hex_key::Int64\
    \ + 1\n            continue\n        \n    end\n    \n    return hex_key\nend\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvwm42pw8.jl:95\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvwm42pw8.jl:95\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8mtuei13.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8mtuei13.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8mtuei13.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfx1esb13.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfx1esb13.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfx1esb13.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexdigits = Set(\"\
    0123456789ABCDEF\")\n    \n    hexdigits_set = Set(hexdigits)\n    \n    hexdigits_prime\
    \ = hexdigits_set - prime_digits_set\n    \n    hexdigits_prime_prime = hexdigits_prime\
    \ - prime_digits_set\n    \n    hexdigits_prime_prime_prime = hexdigits_prime_prime\
    \ - prime_digits_set\n    \n    hexdigits_prime_prime_prime_prime = hexdigits_prime_prime_prime\
    \ - prime_digits_set\n    \n    hexdigits_prime_prime_prime_prime_prime = hexdigits_prime_prime_prime_prime\
    \ - prime_digits_set\n    \n    hexdigits_prime_prime_prime_prime_prime_prime\
    \ = hexdigits_prime_prime_prime_prime_prime - prime_digits_set\n    \n    hexdigits_prime_prime_prime_prime_prime_prime_prime\
    \ = hexdigits_prime_prime_prime_prime_prime_prime_prime - prime_digits_set\n \
    \   \n    hexdigits_prime_prime_prime_prime_prime_prime_prime = hexdigits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ - prime_digits_set\n    \n    hexdigits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime - prime_digits_set\n\
    \    \n    hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime = hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ - prime_digits_set\n    \n    hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = hexdigits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ - prime_digits_set\n    \n    hexdigits_prime_prime_prime_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp36atdfqa.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp36atdfqa.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp36atdfqa.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkkdugsk_.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkkdugsk_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkkdugsk_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp69ap045o.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp69ap045o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp69ap045o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmporx6mdge.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmporx6mdge.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmporx6mdge.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num:gsub(\"^0+$\",\"\"\
    )\n    local primes = primes_list(digits)\n    local primes_count = primes:len()\n\
    \    local primes_count_2 = primes_count/2\n    local primes_count_3 = primes_count/3\n\
    \    local primes_count_4 = primes_count/4\n    local primes_count_5 = primes_count/5\n\
    \    local primes_count_6 = primes_count/6\n    local primes_count_7 = primes_count/7\n\
    \    local primes_count_8 = primes_count/8\n    local primes_count_9 = primes_count/9\n\
    \    local primes_count_10 = primes_count/10\n    local primes_count_11 = primes_count/11\n\
    \    local primes_count_12 = primes_count/12\n    local primes_count_13 = primes_count/13\n\
    \    local primes_count_14 = primes_count/14\n    local primes_count_15 = primes_count/15\n\
    \    local primes_count_16 = primes_count/16\n    local primes_count_17 = primes_count/17\n\
    \    local primes_count_18 = primes_count/18\n    local primes_count_19 = primes_count/19\n\
    \    local primes_count_20 = primes_count/20\n    local primes_count_21 = primes_count/21\n\
    \    local primes_count_22 = primes_count/22\n    local primes_count_23 = primes_count/23\n\
    \    local primes_count_24 = primes_count/24\n    local primes_count_25 = primes_count/25\n\
    \    local primes_count_26 = primes_count/26\n    local primes_count_27 = primes_count/27\n\
    \    local primes_count_28 = primes_count/28\n    local primes_count_29 = primes_count/29\n\
    \    local primes_count_30 = primes_count/30\n    local primes_count_31 = primes_count/31\n\
    \    local primes_count_32 = primes_count/32\n    local primes_count_33 = primes_count/33\n\
    \    local primes_count_34 = primes_count/34\n    local primes_count_35 = primes_count/35\n\
    \    local primes_count_36 = primes_count/36\n    local primes_count_37 = primes_count/37\n\
    \    local primes_count_38 = primes_count/38\n    local primes_count_39 = primes_count/39\n\
    \    local primes_count_40 = primes_count/40\n    local primes_count_41 = primes_count/41\n\
    \    local primes_count_42 = primes_count\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpztc0lpv3.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpztc0lpv3.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num)\n    \n  \
    \  primes_count = primes.count\n    \n    primes_count_2 = primes_count * primes_count\n\
    \    \n    primes_count_3 = primes_count_2 * primes_count\n    \n    primes_count_4\
    \ = primes_count_3 * primes_count\n    \n    primes_count_5 = primes_count_4 *\
    \ primes_count\n    \n    primes_count_6 = primes_count_5 * primes_count\n   \
    \ \n    primes_count_7 = primes_count_6 * primes_count\n    \n    primes_count_8\
    \ = primes_count_7 * primes_count\n    \n    primes_count_9 = primes_count_8 *\
    \ primes_count\n    \n    primes_count_10 = primes_count_9 * primes_count\n  \
    \  \n    primes_count_11 = primes_count_10 * primes_count\n    \n    primes_count_12\
    \ = primes_count_11 * primes_count\n    \n    primes_count_13 = primes_count_12\
    \ * primes_count\n    \n    primes_count_14 = primes_count_13 * primes_count\n\
    \    \n    primes_count_15 = primes_count_14 * primes_count\n    \n    primes_count_16\
    \ = primes_count_15 * primes_count\n    \n    primes_count_17 = primes_count_16\
    \ * primes_count\n    \n    primes_count_18 = primes_count_17 * primes_count\n\
    \    \n    primes_count_19 = primes_count_18 * primes_count\n    \n    primes_count_20\
    \ = primes_count_19 * primes_count\n    \n    primes_count_21 = primes_count_20\
    \ * primes_count\n    \n    primes_count_22 = primes_count_21 * primes_count\n\
    \    \n    primes_count_23 = primes_count_22 * primes_count\n    \n    primes_count_24\
    \ = primes_count_23 * primes_count\n    \n    primes_count_25 = primes_count_24\
    \ * primes_count\n    \n    primes_count_26 = primes_count_25 * primes_count\n\
    \    \n    primes_count_27 = primes_count_26 * primes_count\n    \n    primes_count_28\
    \ = primes_count_27 * primes_count\n    \n    primes_count_29 = primes_count_28\
    \ * primes_count\n    \n    primes_count_30 = primes_count_29 * primes_count\n\
    \    \n    primes_count_31 = primes_count_30 * primes_count\n    \n    primes_count_32\
    \ = primes_count_31 * primes_count\n    \n    primes_count_33 = primes_count_32\
    \ * prime\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqq8a038m.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqq8a038m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqq8a038m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num)\n    \n  \
    \  primes_count = primes.count\n    \n    primes_count_prime = primes.count(primes)\n\
    \    \n    primes_count_prime_2 = primes.count(primes+1)\n    \n    primes_count_prime_3\
    \ = primes.count(primes+2)\n    \n    primes_count_prime_4 = primes.count(primes+3)\n\
    \    \n    primes_count_prime_5 = primes.count(primes+4)\n    \n    primes_count_prime_6\
    \ = primes.count(primes+5)\n    \n    primes_count_prime_7 = primes.count(primes+6)\n\
    \    \n    primes_count_prime_8 = primes.count(primes+7)\n    \n    primes_count_prime_9\
    \ = primes.count(primes+8)\n    \n    primes_count_prime_10 = primes.count(primes+9)\n\
    \    \n    primes_count_prime_11 = primes.count(primes+10)\n    \n    primes_count_prime_12\
    \ = primes.count(primes+11)\n    \n    primes_count_prime_13 = primes.count(primes+12)\n\
    \    \n    primes_count_prime_14 = primes.count(primes+13)\n    \n    primes_count_prime_15\
    \ = primes.count(primes+14)\n    \n    primes_count_prime_16 = primes.count(primes+15)\n\
    \    \n    primes_count_prime_17 = primes.count(primes+16)\n    \n    primes_count_prime_18\
    \ = primes.count(primes+17)\n    \n    primes_count_prime_19 = primes.count(primes+18)\n\
    \    \n    primes_count_prime_20 = primes.count(primes+19)\n    \n    primes_count_prime_21\
    \ = primes.count(primes+20)\n    \n    primes_count_prime_22 = primes.count(primes+21)\n\
    \    \n    primes_count_prime_23 = primes.count(primes+22)\n    \n    primes_count_prime_24\
    \ = primes.count(primes+23)\n    \n    primes_count_prime_25 = primes.count(primes+24)\n\
    \    \n    primes_count_prime_26 = primes.count(primes+25)\n    \n    primes_count_prime_27\
    \ = primes.count(primes+26)\n    \n    primes_count_prime_28 = primes.count(primes+27)\n\
    \    \n    primes_count_prime_29 = primes.count(primes+28)\n    \n    primes_count_prime_30\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzc1xisc9.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzc1xisc9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzc1xisc9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu_4_qo3a.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu_4_qo3a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu_4_qo3a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6fcxi9vu.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6fcxi9vu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6fcxi9vu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(num)\n    \n\
    \    prime_digits = primes.map(|n| n.digits)\n    \n    prime_digits = prime_digits.filter(|n|\
    \ n.is_power_of_two())\n    \n    prime_digits = prime_digits.filter(|n| n.is_prime)\n\
    \    \n    prime_digits = prime_digits.filter(|n| n.is_hexadecimal())\n    \n\
    \    prime_digits = prime_digits.filter(|n| n.is_prime)\n    \n    prime_digits\
    \ = prime_digits.filter(|n| n.is_prime)\n    \n    prime_digits = prime_digits.filter(|n|\
    \ n.is_prime)\n    \n    prime_digits = prime_digits.filter(|n| n.is_prime)\n\
    \    \n    prime_digits = prime_digits.filter(|n| n.is_prime)\n    \n    prime_digits\
    \ = prime_digits.filter(|n| n.is_prime)\n    \n    prime_digits = prime_digits.filter(|n|\
    \ n.is_prime)\n    \n    prime_digits = prime_digits.filter(|n| n.is_prime)\n\
    \    \n    prime_digits = prime_digits.filter(|n| n.is_prime)\n    \n    prime_digits\
    \ = prime_digits.filter(|n| n.is_prime)\n    \n    prime_digits = prime_digits.filter(|n|\
    \ n.is_prime)\n    \n    prime_digits = prime_digits.filter(|n| n.is_prime)\n\
    \    \n    prime_digits = prime_digits.filter(|n| n.is_prime)\n    \n    prime_digits\
    \ = prime_digits.filter(|n| n.is_prime)\n    \n    prime_digits = prime_digits.filter(|n|\
    \ n.is_prime)\n    \n    prime_digits = prime_digits.filter(|n| n.is_prime)\n\
    \    \n    prime_digits = prime_digits.filter(|n| n.is_prime)\n    \n    prime_digits\
    \ = prime_digits.filter(|n| n.is_prime)\n    \n    prime_digits = prime_digits.filter(|n|\
    \ n.is_prime)\n    \n    prime_digits = prime_digits.filter(|n| n.is_prime)\n\
    \    \n    prime_digits = prime_digits.filter(|n| n.is_prime)\n    \n    prime_digits\
    \ = prime_digits.filter(|n| n.is_prime)\n    \n    prime_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqautv29y.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqautv29y.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1qsvgupb.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1qsvgupb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1qsvgupb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ prime_digits = primes.filter(p => num.contains(p))\n    \n    prime_digits_count\
    \ = prime_digits.count\n    \n    prime_digits_count = prime_digits_count + 1\n\
    \    \n    return prime_digits_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of characters in the string.\nExamples:\nFor str = \"\
    AB\" the output should be 2.\nFor str = \"1077E\" the output should be 4.\nFor\
    \ str = \"ABED1A33\" the output should be 6.\nFor str = \"123456789ABCDEF0\" the\
    \ output should be 10.\nFor str = \"2020\" the output should be 2.\nFor str =\
    \ \"\" the output should be 0.\nFor str = \" \" the output should be 0.\nFor str\
    \ = \"   \" the output should be 0.\nFor str = \"   \" the output should be 0.\n\
    For str = \"   \" the output should be 0.\nFor str = \"   \" the output should\
    \ be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"   \" the output\
    \ should be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"   \" the\
    \ output should be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"\
    \   \" the output should be 0.\nFor str = \"   \" the output should be 0.\nFor\
    \ str = \"   \" the output should be 0.\nFor str = \"   \" the output should be\
    \ 0.\nFor str = \"   \" the output should be 0.\nFor str = \"   \" the output\
    \ should be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"   \" the\
    \ output should be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"\
    \   \" the output should be 0.\nFor str = \"   \" the output should be 0.\nFor\
    \ str = \"   \" the output should be 0.\nFor str = \"   \" the output should be\
    \ 0.\nFor str = \"   \" the output should be 0.\nFor str = \"   \" the output\
    \ should be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"   \" the\
    \ output should be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"\
    \   \" the output should be 0.\nFor str = \"   \" the output should be 0.\nFor\
    \ str = \"   \" the \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiiqtu0mu.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiiqtu0mu.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ hex_key = 0\n    \n    for char in num\n        \n        if char in primes\n\
    \            \n            hex_key += 1\n            \n    return hex_key\nend\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNotes:\
    \ you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F\
    \ are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\n\
    For num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output\
    \ should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num\
    \ = \"2020\" the output should be 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbfrrh5fk.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbfrrh5fk.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local num_chars = num:len()\n    local\
    \ num_digits = num:len()\n    \n    local prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    local prime_digits_len = prime_digits:len()\n    \n    local prime_digits_set\
    \ = prime_digits:to_set() \n    \n    local prime_digits_set = prime_digits_set\n\
    \    \n    local prime_digits_set = prime_digits_set\n    \n    local prime_digits_set\
    \ = prime_digits_set\n    \n    local prime_digits_set = prime_digits_set\n  \
    \  \n    local prime_digits_set = prime_digits_set\n    \n    local prime_digits_set\
    \ = prime_digits_set\n    \n    local prime_digits_set = prime_digits_set\n  \
    \  \n    local prime_digits_set = prime_digits_set\n    \n    local prime_digits_set\
    \ = prime_digits_set\n    \n    local prime_digits_set = prime_digits_set\n  \
    \  \n    local prime_digits_set = prime_digits_set\n    \n    local prime_digits_set\
    \ = prime_digits_set\n    \n    local prime_digits_set = prime_digits_set\n  \
    \  \n    local prime_digits_set = prime_digits_set\n    \n    local prime_digits_set\
    \ = prime_digits_set\n    \n    local prime_digits_set = prime_digits_set\n  \
    \  \n    local prime_digits_set = prime_digits_set\n    \n    local prime_digits_set\
    \ = prime_digits_set\n    \n    local prime_digits_set = prime_digits_set\n  \
    \  \n    local prime_digits_set = prime_digits_set\n    \n    local prime_digits_set\
    \ = prime_digits_set\n    \n    local prime_digits_set = prime_digits_set\n  \
    \  \n    local prime_digits_set = prime_digits_set\n    \n    local prime_digits_set\
    \ = prime_digits_set\n    \n    local prime_digits_set = prime_digits_set\n  \
    \  \n    local prime_digits_set = prime_digits_set\n    \n    local prime_digits_set\
    \ = prime_digits_set\n    \n    local prime_digits_set = prime_digits_set\n  \
    \  \n    local prime_digits_set = prime_digits_set\n    \n    local prime_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7zhqu8j.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu7zhqu8j.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu7zhqu8j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpci075weg.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpci075weg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpci075weg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = prime_digits(num)\n \
    \   \n    if prime_digits == []\n        return -1\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits_count = length(prime_digits)\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpah5y7_oc.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpah5y7_oc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptk7hh2j6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptk7hh2j6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptk7hh2j6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local primes\
    \ = Set{Int64}()\n    local primes_count = 0\n    \n    for digit in digits\n\
    \        if digit == \"A\" or digit == \"B\" or digit == \"C\" or digit == \"\
    D\" or digit == \"E\" or digit == \"F\"\n            primes_count = primes_count\
    \ + 1\n        else\n            primes = primes + Set{Int64}([digit])\n     \
    \   end\n    end\n    \n    for prime in primes\n        if prime == 2\n     \
    \       primes_count = primes_count + 1\n        end\n    end\n    \n    return\
    \ primes_count\nend\n</cell>\n<code language=julia-1.3>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.3>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.3>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.3>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.3>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a string and returns the number of words in\
    \ the string.\nExamples:\nFor str = \"The quick brown fox jumps over the lazy\
    \ dog\" the output should be 5.\nFor str = \"The quick brown fox jumps over the\
    \ lazy dog The quick brown fox jumps over the lazy dog\" the output should be\
    \ 21.\nFor str = \"The quick brown fox jumps over the lazy dog The quick brown\
    \ fox jumps over the lazy dog The quick brown fox jumps over the lazy dog The\
    \ quick brown fox jumps over the lazy dog The quick brown fox jumps over the lazy\
    \ dog The quick brown fox jumps over the lazy dog The quick brown fox jumps over\
    \ the lazy dog The quick brown fox jumps over the lazy dog The quick brown fox\
    \ jumps over the lazy dog The quick brown fox jumps over the lazy dog The quick\
    \ brown fox jumps over the lazy dog The quick brown fox jumps over the lazy dog\
    \ The quick brown fox jumps over the lazy dog The quick brown fox jumps over the\
    \ lazy dog The quick brown fox jumps over the lazy dog The quick brown fox jumps\
    \ over the lazy dog The quick brown fox jumps over the lazy dog The quick brown\
    \ fox jumps over the lazy dog The quick brown fox jumps over the lazy do\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"digit\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0ncjkt8n.jl:25\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0ncjkt8n.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = prime_digits(num)\n \
    \   \n    if prime_digits == []\n        error(\"The input string is not hexadecimal.\"\
    )\n    end\n    \n    prime_digits = prime_digits[end]\n    \n    if prime_digits\
    \ == 0\n        error(\"The input string is not hexadecimal.\")\n    end\n   \
    \ \n    prime_digits = prime_digits[end]\n    \n    if prime_digits == 0\n   \
    \     error(\"The input string is not hexadecimal.\")\n    end\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    if prime_digits == 0\n        error(\"The input\
    \ string is not hexadecimal.\")\n    end\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    if prime_digits == 0\n        error(\"The input string is not hexadecimal.\"\
    )\n    end\n    \n    prime_digits = prime_digits[end]\n    \n    if prime_digits\
    \ == 0\n        error(\"The input string is not hexadecimal.\")\n    end\n   \
    \ \n    prime_digits = prime_digits[end]\n    \n    if prime_digits == 0\n   \
    \     error(\"The input string is not hexadecimal.\")\n    end\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    if prime_digits == 0\n        error(\"The input\
    \ string is not hexadecimal.\")\n    end\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    if prime_digits == 0\n        error(\"The input string is not hexadecimal.\"\
    )\n    end\n    \n    prime_digits = prime_digits[end]\n    \n    if prime_digits\
    \ == 0\n        error(\"The input string is not hexadecimal.\")\n    end\n   \
    \ \n    prime_digits = prime_digits[end]\n    \n    if prime_digits == 0\n   \
    \     error(\"The input string is not hexadecimal.\")\n    end\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    if prime_digits == 0\n        error(\"The input\
    \ string is not hexadecimal.\")\n    end\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    if prime_digits == 0\n        error(\"The input string is not hexadecimal.\"\
    )\n    end\n    \n    prime_digits = prime_digits[end]\n    \n    if prime_digits\
    \ == 0\n        error(\"The input string is not hexadecimal.\")\n    end\n   \
    \ \n    prime_digits = prime_digits[end]\n    \n    if prime_digits == 0\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfuvq3kf9.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfuvq3kf9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set =\
    \ prime_digits_set - Set(num[2:end])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[1:end-1])\n    \n    prime_digits_set = prime_digits_set - Set(num[1:end-2])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[1:end-3])\n    \n   \
    \ prime_digits_set = prime_digits_set - Set(num[1:end-4])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[1:end-5])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[1:end-6])\n    \n    prime_digits_set = prime_digits_set - Set(num[1:end-7])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[1:end-8])\n    \n   \
    \ prime_digits_set = prime_digits_set - Set(num[1:end-9])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[1:end-10])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[1:end-11])\n    \n    prime_digits_set = prime_digits_set - Set(num[1:end-12])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[1:end-13])\n    \n  \
    \  prime_digits_set = prime_digits_set - Set(num[1:end-14])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[1:end-15])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[1:end-16])\n    \n    prime_digits_set = prime_digits_set - Set(num[1:end-17])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[1:end-18])\n    \n  \
    \  prime_digits_set = prime_digits_set - Set(num[1:end-19])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[1:end-20])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[1:end-21])\n    \n    prime_digits_set = prime_digits_set - Set(num[1:end-22])\n\
    \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyts8dn86.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyts8dn86.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyts8dn86.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ldzzxh7.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3ldzzxh7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3ldzzxh7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8gqqms4a.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8gqqms4a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8gqqms4a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    for i in num\n\
    \        if i == 'A'\n            hex_key += 10\n        elseif i == 'B'\n   \
    \         hex_key += 11\n        elseif i == 'C'\n            hex_key += 12\n\
    \        elseif i == 'D'\n            hex_key += 13\n        elseif i == 'E'\n\
    \            hex_key += 14\n        elseif i == 'F'\n            hex_key += 15\n\
    \        else\n            hex_key += i\n    end\n    \n    return hex_key\nend\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the\
    \ input may contain symbols A,B,C,D,E,F only.\nExamples:\nFor num = \"AB\" the\
    \ output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num =\
    \ \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output\
    \ should be 6.\nFor num = \"2020\" the output should be 2.\nFor num = \"A\" the\
    \ output should be 0.\nFor num = \"B\" the output should be 0.\nFor num = \"C\"\
    \ the output should be 0.\nFor num = \"D\" the output should be 0.\nFor num =\
    \ \"E\" the output should be 0.\nFor num = \"F\" the output should be 0.\nFor\
    \ num = \"\" the output should be 0.\nFor num = \"AAB\" the output should be 2.\n\
    For num = \"AABB\" the output should be 3.\nFor num = \"AABBB\" the output should\
    \ be 4.\nFor num = \"AABBBC\" the output should be 5.\nFor num = \"AABBBCC\" the\
    \ output should be 6.\nFor num = \"AABBBCCC\" the output should be \nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1502z_9_.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1502z_9_.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_digits = num.chars().filter(x -> x >= '0' and x <= '9').collect()\n\
    \    \n    prime_digits_count = prime_digits.filter(x -> hex_digits.contains(x)).count()\n\
    \    \n    return prime_digits_count\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters.\nExamples:\nFor s\
    \ = \"A\" the output should be 1.\nFor s = \"1077E\" the output should be 2.\n\
    For s = \"ABED1A33\" the output should be 4.\nFor s = \"123456789ABCDEF0\" the\
    \ output should be 6.\nFor s = \"2020\" the output should be 2.\nFor s = \"\"\
    \ the output should be 0.\nFor s = \" \" the output should be 0.\nFor s = \" A\"\
    \ the output should be 1.\nFor s = \"1077E \" the output should be 2.\nFor s =\
    \ \"ABED1A33 \" the output should be 4.\nFor s = \"123456789ABCDEF0 \" the output\
    \ should be 6.\nFor s = \"2020 \" the output should be 2.\nFor s = \" \" the output\
    \ should be 0.\nFor s = \" A\" the output should be 1.\nFor s = \"1077E \" the\
    \ output should be 2.\nFor s = \"ABED1A33 \" the output should be 4.\nFor s =\
    \ \"123456789ABCDEF0 \" the output should be 6.\nFor s = \"2020 \" the output\
    \ should be 2.\nFor s = \" \" the output should be 0.\nFor s = \" A\" the output\
    \ should be 1.\nFor s = \"1077E \" the output should be 2.\nFor s = \"ABED1A33\
    \ \" the output should be 4.\nFor s = \"123456789ABCDEF0 \" the output should\
    \ be 6.\nFor s = \"2020 \" the output should be 2.\nFor s = \" \" the output should\
    \ be 0.\nFor s = \" A\" the output should be 1.\nFor s = \"1077E \" the output\
    \ should be 2.\nFor s = \"ABED1A33 \" the output should be 4.\nFor s = \"123456789ABCDEF0\
    \ \" the output should be 6.\nFor s = \"2020 \" the output should be 2.\nFor s\
    \ = \" \" the output should be 0.\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnfjwt472.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnfjwt472.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_digits = num.chars\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(hex_digits)\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num.chars)\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.reverse)\n    \n    prime_digits_set = prime_digits_set - Set(num.chars.reverse.chars)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.reverse.chars.reverse)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.reverse.chars.reverse.chars)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.reverse.chars.reverse.chars.reverse)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy2lzff8f.jl:55\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy2lzff8f.jl:55\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = prime_digits(num)\n \
    \   \n    if prime_digits == []\n        error(\"The input is not a hexadecimal\
    \ number\")\n    end\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n    \n    prime_digits\
    \ = prime_digits[end]\n    \n    prime_digits = prime_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbqnnp9t0.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbqnnp9t0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbqnnp9t0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    digit_counts = Dict()\n\
    \    \n    for digit in num\n        digit_counts[digit] = digit_counts[digit]\
    \ + 1 if digit in digit_counts else 1\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    digit_counts_prime = Dict()\n    \n    for digit in num\n        digit_counts_prime[digit]\
    \ = digit_counts[digit] + 1 if digit in digit_counts else 1\n    \n    prime_digits_set\
    \ = Set(prime_digits)\n    \n    digit_counts_prime_2 = Dict()\n    \n    for\
    \ digit in num\n        digit_counts_prime_2[digit] = digit_counts[digit] + 1\
    \ if digit in digit_counts else 1\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    digit_counts_prime_3 = Dict()\n    \n    for digit in num\n       \
    \ digit_counts_prime_3[digit] = digit_counts[digit] + 1 if digit in digit_counts\
    \ else 1\n    \n    prime_digits_set = Set(prime_digits)\n    \n    digit_counts_prime_4\
    \ = Dict()\n    \n    for digit in num\n        digit_counts_prime_4[digit] =\
    \ digit_counts[digit] + 1 if digit in digit_counts else 1\n    \n    prime_digits_set\
    \ = Set(prime_digits)\n    \n    digit_counts_prime_5 = Dict()\n    \n    for\
    \ digit in num\n        digit_counts_prime_5[digit] = digit_counts[digit] + 1\
    \ if digit in digit_counts else 1\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    digit_counts_prime_6 = Dict()\n    \n    for digit in num\n       \
    \ digit_counts_prime_6[digit] = digit_counts[digit] + 1 if digit in digit_counts\
    \ else 1\n    \n    prime_digits_set = Set(prime_digits)\n    \n    digit_counts_prime_7\
    \ = Dict()\n    \n    for digit in num\n        digit_counts_prime_7[digit] =\
    \ digit_counts[digit] + 1 if digit in digit_counts else 1\n    \n    prime_digits_set\
    \ = Set(prime_digits)\n    \n    digit_counts_prime_8 = Dict()\n    \n    for\
    \ digit in num\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3i05c0ci.jl:27\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3i05c0ci.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp15py_w6o.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp15py_w6o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp15py_w6o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num)\n    primes_count\
    \ = length(primes)\n    \n    if primes_count > 0 \n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \n        primes_count = primes_count - 1\n        \n        primes_count\
    \ = primes_count - 1\n        \n        primes_count = primes_count - 1\n    \
    \    \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbp4zgc0j.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbp4zgc0j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_digits_set = Set(num.chars)\n\
    \    \n    prime_digits_set = prime_digits_set - hex_digits_set\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num.chars.drop(1))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.drop(2))\n    \n    prime_digits_set = prime_digits_set - Set(num.chars.drop(3))\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.drop(4))\n    \n\
    \    prime_digits_set = prime_digits_set - Set(num.chars.drop(5))\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num.chars.drop(6))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.drop(7))\n    \n    prime_digits_set = prime_digits_set - Set(num.chars.drop(8))\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.drop(9))\n    \n\
    \    prime_digits_set = prime_digits_set - Set(num.chars.drop(10))\n    \n   \
    \ prime_digits_set = prime_digits_set - Set(num.chars.drop(11))\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num.chars.drop(12))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.drop(13))\n    \n    prime_digits_set = prime_digits_set - Set(num.chars.drop(14))\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.drop(15))\n   \
    \ \n    prime_digits_set = prime_digits_set - Set(num.chars.drop(16))\n    \n\
    \    prime_digits_set = prime_digits_set - Set(num.chars.drop(17))\n    \n   \
    \ prime_digits_set = prime_digits_set - Set(num.chars.drop(18))\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num.chars.drop(19))\n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd6vtg48m.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd6vtg48m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd6vtg48m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(num)\n    \n\
    \    prime_digits = primes.map(|x| x.digits)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.len() == 4)\n    \n    prime_digits = prime_digits.filter(|x| x.all(|y| y\
    \ % 2 == 0))\n    \n    prime_digits = prime_digits.filter(|x| x.all(|y| y % 3\
    \ == 0))\n    \n    prime_digits = prime_digits.filter(|x| x.all(|y| y % 5 ==\
    \ 0))\n    \n    prime_digits = prime_digits.filter(|x| x.all(|y| y % 7 == 0))\n\
    \    \n    prime_digits = prime_digits.filter(|x| x.all(|y| y % 11 == 0))\n  \
    \  \n    prime_digits = prime_digits.filter(|x| x.all(|y| y % 13 == 0))\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.all(|y| y % 17 == 0))\n    \n  \
    \  prime_digits = prime_digits.filter(|x| x.all(|y| y % 19 == 0))\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.all(|y| y % 23 == 0))\n    \n    prime_digits =\
    \ prime_digits.filter(|x| x.all(|y| y % 29 == 0))\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.all(|y| y % 31 == 0))\n    \n    prime_digits = prime_digits.filter(|x| x.all(|y|\
    \ y % 37 == 0))\n    \n    prime_digits = prime_digits.filter(|x| x.all(|y| y\
    \ % 41 == 0))\n    \n    prime_digits = prime_digits.filter(|x| x.all(|y| y %\
    \ 43 == 0))\n    \n    prime_digits = prime_digits.filter(|x| x.all(|y| y % 47\
    \ == 0))\n    \n    prime_digits = prime_digits.filter(|x| x.all(|y| y % 53 ==\
    \ 0))\n    \n    prime_digits = prime_digits.filter(|x| x.all(|y| y % 59 == 0))\n\
    \    \n    prime_digits = prime_digits.filter(|x| x.all(|y| y % 61 == 0))\n  \
    \  \n    prime_digits = prime_digits.filter(|x| x.all(|\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp06d41c25.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp06d41c25.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(num)\n    \n\
    \    prime_digits = primes.map(|x| x.digits)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.is_power_of_two())\n    \n    prime_digits = prime_digits.filter(|x| x.is_prime())\n\
    \    \n    prime_digits = prime_digits.filter(|x| x.digits != [2,3,5,7,11,13,17,19])\n\
    \    \n    prime_digits = prime_digits.map(|x| x.digits)\n    \n    prime_digits\
    \ = prime_digits.reduce(|x, y| x | y)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x != 0)\n    \n    prime_digits = prime_digits.reduce(|x, y| x | y)\n    \n\
    \    prime_digits = prime_digits.reduce(|x, y| x | y)\n    \n    prime_digits\
    \ = prime_digits.reduce(|x, y| x | y)\n    \n    prime_digits = prime_digits.reduce(|x,\
    \ y| x | y)\n    \n    prime_digits = prime_digits.reduce(|x, y| x | y)\n    \n\
    \    prime_digits = prime_digits.reduce(|x, y| x | y)\n    \n    prime_digits\
    \ = prime_digits.reduce(|x, y| x | y)\n    \n    prime_digits = prime_digits.reduce(|x,\
    \ y| x | y)\n    \n    prime_digits = prime_digits.reduce(|x, y| x | y)\n    \n\
    \    prime_digits = prime_digits.reduce(|x, y| x | y)\n    \n    prime_digits\
    \ = prime_digits.reduce(|x, y| x | y)\n    \n    prime_digits = prime_digits.reduce(|x,\
    \ y| x | y)\n    \n    prime_digits = prime_digits.reduce(|x, y| x | y)\n    \n\
    \    prime_digits = prime_digits.reduce(|x, y| x | y)\n    \n    prime_digits\
    \ = prime_digits.reduce(|x, y| x | y)\n    \n    prime_digits = prime_digits.reduce(|x,\
    \ y| x | y)\n    \n    prime_digits = prime_digits.reduce(|x, y| x | y)\n    \n\
    \    prime_digits = prime_digits.reduce(|x, y| x | y)\n    \n    prime_digits\
    \ = prime_digits.reduce(|x, y| x | y)\n    \n    prime_digits = prime_digits.reduce(|x,\
    \ y| x | y)\n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz21zuei2.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz21zuei2.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_digits = num.chars\n    \n    prime_digits_count = 0\n    \n  \
    \  for digit in hex_digits\n        if digit in prime_digits\n            prime_digits_count\
    \ += 1\n    \n    return prime_digits_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and returns the number of digits that are primes.\nExamples:\n\
    For num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should\
    \ be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\"\
    \ the output should be 6.\nFor num = \"2020\" the output should be 2.\nHint: You\
    \ may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F\
    \ are always uppercase.\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpris1srll.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpris1srll.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = prime_digits(num)\n \
    \   \n    if prime_digits == []\n        \n        return 0\n    \n    prime_digits\
    \ = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n    \n\
    \    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digits = prime_digits[1..end]\n    \n    prime_digits = prime_digits[1..end]\n\
    \    \n    prime_digit\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9g7zpjyf.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9g7zpjyf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for prime in primes\n        \n        if num ==\
    \ \"\"\n            primes_count = 1\n            break\n        \n        if\
    \ num.contains(prime)\n            primes_count += 1\n            \n    return\
    \ primes_count\n    \nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and returns the number of hexadecimal digits in the string.\n\
    Examples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output\
    \ should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\"\
    \ the output should be 6.\nFor num = \"2020\" the output should be 2.\nFor num\
    \ = \"\" the output should be 0.\nFor num = \" \" the output should be 0.\nFor\
    \ num = \"   \" the output should be 0.\nFor num = \"   \" the output should be\
    \ 0.\nFor num = \"   \" the output should be 0.\nFor num = \"   \" the output\
    \ should be 0.\nFor num = \"   \" the output should be 0.\nFor num = \"   \" the\
    \ output should be 0.\nFor num = \"   \" the output should be 0.\nFor num = \"\
    \   \" the output should be 0.\nFor num = \"   \" the output should be 0.\nFor\
    \ num = \"   \" the output should be 0.\nFor num = \"   \" the output should be\
    \ 0.\nFor num = \"   \" the output should be 0.\nFor num = \"   \" the output\
    \ should be 0.\nFor num = \"   \" the output should be 0.\nFor num = \"   \" the\
    \ output should be 0.\nFor num = \"   \" the output should be 0.\nFor num = \"\
    \   \" the output should be 0.\nFor num = \"   \" the output should be 0.\nFor\
    \ num = \"   \" the output should be 0.\nFor num = \"   \" the output should be\
    \ 0.\nFor num = \"   \" the output should be 0.\nFor num = \"   \" the output\
    \ should be 0.\nFor num = \"   \" the output should be 0.\nFor num = \"   \" the\
    \ output should be 0.\n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdpa38vm8.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdpa38vm8.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    \n    if num\
    \ == \"\"\n        return hex_key\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxm_qsltk.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxm_qsltk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num)\n    \n  \
    \  primes_count = count(primes)\n    \n    primes_count_2 = count(primes)\n  \
    \  \n    primes_count_3 = count(primes)\n    \n    primes_count_4 = count(primes)\n\
    \    \n    primes_count_5 = count(primes)\n    \n    primes_count_6 = count(primes)\n\
    \    \n    primes_count_7 = count(primes)\n    \n    primes_count_8 = count(primes)\n\
    \    \n    primes_count_9 = count(primes)\n    \n    primes_count_10 = count(primes)\n\
    \    \n    primes_count_11 = count(primes)\n    \n    primes_count_12 = count(primes)\n\
    \    \n    primes_count_13 = count(primes)\n    \n    primes_count_14 = count(primes)\n\
    \    \n    primes_count_15 = count(primes)\n    \n    primes_count_16 = count(primes)\n\
    \    \n    primes_count_17 = count(primes)\n    \n    primes_count_18 = count(primes)\n\
    \    \n    primes_count_19 = count(primes)\n    \n    primes_count_20 = count(primes)\n\
    \    \n    primes_count_21 = count(primes)\n    \n    primes_count_22 = count(primes)\n\
    \    \n    primes_count_23 = count(primes)\n    \n    primes_count_24 = count(primes)\n\
    \    \n    primes_count_25 = count(primes)\n    \n    primes_count_26 = count(primes)\n\
    \    \n    primes_count_27 = count(primes)\n    \n    primes_count_28 = count(primes)\n\
    \    \n    primes_count_29 = count(primes)\n    \n    primes_count_30 = count(primes)\n\
    \    \n    primes_count_31 = count(primes)\n    \n    primes_count_32 = count(primes)\n\
    \    \n    primes_count_33 = count(primes)\n    \n    primes_count_34 = count(primes)\n\
    \    \n    primes_count_35 = count(primes)\n    \n    primes_count_36 = count(primes)\n\
    \    \n    primes_count_37 = count(primes)\n    \n    primes_count_38 = count(primes)\n\
    \    \n    primes_count_39 = count(primes)\n    \n    primes_count_40 = count(primes)\n\
    \    \n    primes_count_41 = count(primes)\n    \n    primes_count_42 = count(primes)\n\
    \    \n    primes_count_43 = count(primes)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnznjkk5a.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnznjkk5a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnznjkk5a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphndn9f5z.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphndn9f5z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphndn9f5z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz4xgba_t.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz4xgba_t.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz4xgba_t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = primes.count{|x| num.count(x)}\n    \n    primes_count += primes.count{|x|\
    \ num.count(x.to_s.upcase)}\n    \n    primes_count += primes.count{|x| num.count(x.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase.to_s.upcase.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.downcase)}\n\
    \    \n    primes_count += primes.count{|x| num.count(x.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_s.upcase.to_\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp548d4ry3.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp548d4ry3.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4x_23ohx.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4x_23ohx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4x_23ohx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptrkghx91.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptrkghx91.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptrkghx91.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    if num == \"\"\
    \n        return hex_key\n    \n    digits = num.chars\n    \n    for i in digits\n\
    \        if i.is_uppercase\n            hex_key += 1\n            \n    return\
    \ hex_key\n    \nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that receives a hexadecimal number as a string and counts\
    \ the number of hexadecimal digits that are primes (prime number, or a prime,\
    \ is a natural number greater than 1 that is not a product of two smaller natural\
    \ numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
    \ E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n\
    Note, you may assume the input is always correct or empty string, and symbols\
    \ A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should\
    \ be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the\
    \ output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\n\
    For num = \"2020\" the output should be 2.\nFor num = \"0\" the output should\
    \ be 0.\nFor num = \" \" the output should be 0.\nFor num = \"A\" the output should\
    \ be 1.\nFor num = \"A1\" the output should be 1.\nFor num = \"A11\" the output\
    \ should be 2.\nFor num = \"A111\" the output should be 3.\nFor num = \"A1111\"\
    \ the output should be 4.\nFor num = \"A11111\" the output should be 5.\nFor num\
    \ = \"A111111\" the output should be 6.\nFor num = \"A1111111\" the output should\
    \ be 7.\nFor num = \"A11111112\" the output should be 8.\nFor num = \"A111111123\"\
    \ the output should be 9.\nFor num = \"A1111111234\" the output should be 10.\n\
    For num = \"A11111112345\" the output should be 11.\nFor num = \"A111111123456\"\
    \ the output should be 12.\nFor num = \"A1111111234567\" the output should be\
    \ 13.\n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuf0tq2ze.jl:34\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuf0tq2ze.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc9qqaiju.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpc9qqaiju.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc9qqaiju.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for i in primes\n        \n        if num == hex(i)\n\
    \            \n            primes_count += 1\n            \n        end\n    end\n\
    \    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and counts the number of characters that are not letters (uppercase or lowercase).\n\
    Examples:\nFor s = \"aBc\" the output should be 1.\nFor s = \"aBc123\" the output\
    \ should be 3.\nFor s = \"aBc123!\" the output should be 4.\nFor s = \"\" the\
    \ output should be 0.\nFor s = \" \" the output should be 0.\nFor s = \" aBc123!\"\
    \ the output should be 4.\nFor s = \"aBc123!\" the output should be 4.\nFor s\
    \ = \"aBc123!\" the output should be 4.\nFor s = \"aBc123!\" the output should\
    \ be 4.\nFor s = \"aBc123!\" the output should be 4.\nFor s = \"aBc123!\" the\
    \ output should be 4.\nFor s = \"aBc123!\" the output should be 4.\nFor s = \"\
    aBc123!\" the output should be 4.\nFor s = \"aBc123!\" the output should be 4.\n\
    For s = \"aBc123!\" the output should be 4.\nFor s = \"aBc123!\" the output should\
    \ be 4.\nFor s = \"aBc123!\" the output should be 4.\nFor s = \"aBc123!\" the\
    \ output should be 4.\nFor s = \"aBc123!\" the output should be 4.\nFor s = \"\
    aBc123!\" the output should be 4.\nFor s = \"aBc123!\" the output should be 4.\n\
    For s = \"aBc123!\" the output should be 4.\nFor s = \"aBc123!\" the output should\
    \ be 4.\nFor s = \"aBc123!\" the output should be 4.\nFor s = \"aBc123!\" the\
    \ output should be 4.\nFor s = \"aBc123!\" the output should be 4.\nFor s = \"\
    aBc123!\" the output should be 4.\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsf1d8epu.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsf1d8epu.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num) \n    \n \
    \   primes_count = length(primes) \n    \n    primes_count_2 = primes_count /\
    \ 2 \n    \n    primes_count_3 = primes_count / 3 \n    \n    primes_count_4 =\
    \ primes_count / 4 \n    \n    primes_count_5 = primes_count / 5 \n    \n    primes_count_6\
    \ = primes_count / 6 \n    \n    primes_count_7 = primes_count / 7 \n    \n  \
    \  primes_count_8 = primes_count / 8 \n    \n    primes_count_9 = primes_count\
    \ / 9 \n    \n    primes_count_10 = primes_count / 10 \n    \n    primes_count_11\
    \ = primes_count / 11 \n    \n    primes_count_12 = primes_count / 12 \n    \n\
    \    primes_count_13 = primes_count / 13 \n    \n    primes_count_14 = primes_count\
    \ / 14 \n    \n    primes_count_15 = primes_count / 15 \n    \n    primes_count_16\
    \ = primes_count / 16 \n    \n    primes_count_17 = primes_count / 17 \n    \n\
    \    primes_count_18 = primes_count / 18 \n    \n    primes_count_19 = primes_count\
    \ / 19 \n    \n    primes_count_20 = primes_count / 20 \n    \n    primes_count_21\
    \ = primes_count / 21 \n    \n    primes_count_22 = primes_count / 22 \n    \n\
    \    primes_count_23 = primes_count / 23 \n    \n    primes_count_24 = primes_count\
    \ / 24 \n    \n    primes_count_25 = primes_count / 25 \n    \n    primes_count_26\
    \ = primes_count / 26 \n    \n    primes_count_27 = primes_count / 27 \n    \n\
    \    primes_count_28 = primes_count / 28 \n    \n    primes_count_29 = primes_count\
    \ / 29 \n    \n    primes_count_30 = primes_count / 30 \n    \n    primes_count_31\
    \ = primes_count / 31 \n    \n    primes_count_32 = primes_count / 32 \n    \n\
    \    primes_count_33 = primes_count / 33 \n    \n    primes_count_34 = primes_count\
    \ / 34 \n    \n    primes_count_35 = primes_count / 35 \n    \n    primes_count_36\
    \ = primes_count / 36 \n    \n    primes_count_37 = primes_count \nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphqnq9i5y.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphqnq9i5y.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphqnq9i5y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmph7ma88.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmph7ma88.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmph7ma88.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num) \n    \n \
    \   primes_count = length(primes) \n    \n    primes_count = primes_count - 2\
    \ \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph3g3k9pn.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmph3g3k9pn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmph3g3k9pn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local num_str = num\n    local num_len\
    \ = length(num)\n    local num_digits = floor(num_len / 2)\n    local num_primes\
    \ = 2\n    local num_prime_digits = 2\n    local num_prime_digits_count = 0\n\
    \    local num_prime_digits_sum = 0\n    local num_prime_digits_sum_2 = 0\n  \
    \  local num_prime_digits_sum_3 = 0\n    local num_prime_digits_sum_4 = 0\n  \
    \  local num_prime_digits_sum_5 = 0\n    local num_prime_digits_sum_6 = 0\n  \
    \  local num_prime_digits_sum_7 = 0\n    local num_prime_digits_sum_8 = 0\n  \
    \  local num_prime_digits_sum_9 = 0\n    local num_prime_digits_sum_10 = 0\n \
    \   local num_prime_digits_sum_11 = 0\n    local num_prime_digits_sum_12 = 0\n\
    \    local num_prime_digits_sum_13 = 0\n    local num_prime_digits_sum_14 = 0\n\
    \    local num_prime_digits_sum_15 = 0\n    local num_prime_digits_sum_16 = 0\n\
    \    local num_prime_digits_sum_17 = 0\n    local num_prime_digits_sum_18 = 0\n\
    \    local num_prime_digits_sum_19 = 0\n    local num_prime_digits_sum_20 = 0\n\
    \    local num_prime_digits_sum_21 = 0\n    local num_prime_digits_sum_22 = 0\n\
    \    local num_prime_digits_sum_23 = 0\n    local num_prime_digits_sum_24 = 0\n\
    \    local num_prime_digits_sum_25 = 0\n    local num_prime_digits_sum_26 = 0\n\
    \    local num_prime_digits_sum_27 = 0\n    local num_prime_digits_sum_28 = 0\n\
    \    local num_prime_digits_sum_29 = 0\n    local num_prime_digits_sum_30 = 0\n\
    \    local num_prime_digits_sum_31 = 0\n    local num_prime_digits_sum_32 = 0\n\
    \    local num_prime_digits_sum_33 = 0\n    local num_prime_digits_sum_34 = 0\n\
    \    local num_prime_digits_sum_35 = 0\n    local num_prime_digits_sum_36 = 0\n\
    \    local num_prime_digits_sum_37 = 0\n    local num_prime_digits_sum_38 = 0\n\
    \    local num_prime_digits_sum_39 = 0\n    local num_prime_digits_sum_40 = 0\n\
    \    local num_prime_digits_sum_41 = 0\n    local num_prime_digits_sum_42 = 0\n\
    \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoqtizlzt.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoqtizlzt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoqtizlzt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpux9sj6wn.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpux9sj6wn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpux9sj6wn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt2jae5d6.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpt2jae5d6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpt2jae5d6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums = Set[String]()\n\
    \    \n    for char in num\n        if char in hex_key.digits_set\n          \
    \  hex_nums.push(char)\n            \n    hex_nums_set = Set(hex_nums)\n    \n\
    \    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_nums_set = Set(hex_nums)\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2rbj0eew.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2rbj0eew.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(num)\n    \n\
    \    prime_digits = prime_digits(primes)\n    \n    prime_digits_count = prime_digits_count(prime_digits)\n\
    \    \n    return prime_digits_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and counts the number of characters that are uppercase letters.\nExamples:\n\
    For str = \"A\" the output should be 1.\nFor str = \"a\" the output should be\
    \ 1.\nFor str = \"Aa\" the output should be 2.\nFor str = \"aA\" the output should\
    \ be 2.\nFor str = \"AAB\" the output should be 3.\nFor str = \"aAB\" the output\
    \ should be 3.\nFor str = \"AABB\" the output should be 4.\nFor str = \"aABB\"\
    \ the output should be 4.\nFor str = \"AABBc\" the output should be 5.\nFor str\
    \ = \"aABBc\" the output should be 5.\nFor str = \"AABBcD\" the output should\
    \ be 6.\nFor str = \"aABBcD\" the output should be 6.\nFor str = \"AABBcDf\" the\
    \ output should be 7.\nFor str = \"aABBcDf\" the output should be 7.\nFor str\
    \ = \"AABBcDfG\" the output should be 8.\nFor str = \"aABBcDfG\" the output should\
    \ be 8.\nFor str = \"AABBcDfGh\" the output should be 9.\nFor str = \"aABBcDfGh\"\
    \ the output should be 9.\nFor str = \"AABBcDfGhI\" the output should be 10.\n\
    For str = \"aABBcDfGhI\" the output should be 10.\nFor str = \"AABBcDfGhIj\" the\
    \ output should be 11.\nFor str = \"aABBcDfGhIj\" the output should be 11.\nFor\
    \ str = \"AABBcDfGhIjK\" the output should be 12.\nFor str = \"aABBcDfGhIjK\"\
    \ the output should be 12.\nFor str = \"AABBcDfGhIjKl\" \nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbdqxq046.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbdqxq046.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_key = 0\n    \n    for digit in num\n        \n        if digit\
    \ in prime_digits\n            \n            hex_key += 1\n            \n    \
    \    end\n    end\n    \n    return hex_key\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of uppercase letters.\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpznhnjiz6.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpznhnjiz6.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    \n    for digit\
    \ in num\n        if digit in \"ABCDEF\"\n            hex_key += 1\n        end\n\
    \    end\n    \n    return hex_key\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a positive\
    \ integer as a string and returns the number of digits in that string.\nExamples:\n\
    For num = \"10\" the output should be 1.\nFor num = \"101\" the output should\
    \ be 2.\nFor num = \"1010\" the output should be 3.\nFor num = \"10101\" the output\
    \ should be 4.\nFor num = \"101011\" the output should be 5.\nFor num = \"1010111\"\
    \ the output should be 6.\nFor num = \"10101011\" the output should be 7.\nFor\
    \ num = \"101010111\" the output should be 8.\nFor num = \"1010101111\" the output\
    \ should be 9.\nFor num = \"10101011111\" the output should be 10.\nFor num =\
    \ \"101010111111\" the output should be 11.\nFor num = \"1010101111111\" the output\
    \ should be 12.\nFor num = \"10101011111111\" the output should be 13.\nFor num\
    \ = \"101010111111111\" the output should be 14.\nFor num = \"101010111111111\"\
    \ the output should be 15.\nFor num = \"1010101111111110\" the output should be\
    \ 16.\nFor num = \"10101011111111110\" the output should be 17.\nFor num = \"\
    101010111111111101\" the output should be 18.\nFor num = \"1010101111111111010\"\
    \ the output should be 19.\nFor num = \"10101011111111110100\" the output should\
    \ be 20.\nFor num = \"101010111111111101010\" the output should be 21.\nFor num\
    \ = \"1010101111111111010100\" the output should be 22.\nFor num = \"10101011111111110101001\"\
    \ the output should be 23.\nFor num = \"101010111111111101010010\" the output\
    \ should be 24.\nFor num = \"10101011111111110101001010\" the output should be\
    \ 25.\nFor num = \"101010111111111101010010100\" the output should be 26.\nFor\
    \ num = \"1010101111111111010100101001\" \nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1sdyloz3.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1sdyloz3.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_digits_set = Set(hex_digits)\n\
    \    \n    prime_digits_set = prime_digits_set - hex_digits_set\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num.chars)\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.map(c => c.to_uppercase))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.map(c => c.to_lowercase))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.map(c => c.to_string(16)))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.map(c => c.to_string(16).to_uppercase))\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num.chars.map(c => c.to_string(16).to_lowercase))\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.map(c => c.to_string(16).to_string(16)))\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.map(c => c.to_string(16).to_string(16).to_uppercase))\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.map(c => c.to_string(16).to_string(16).to_lowercase))\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.map(c => c.to_string(16).to_string(16).to_string(16).to_uppercase))\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.map(c => c.to_string(16).to_string(16).to_string(16).to_lowercase))\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.map(c => c.to_string(16).to_string(16).to_string(16).to_string(16).to_uppercase))\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num.chars.map(c => c.to_string(16).to_string(16).to_string(16).to_string(\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb9uervss.jl:57\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb9uervss.jl:57\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    if num == \"\"\
    \n        error(\"The input string cannot be empty\")\n    end\n    \n    digits\
    \ = split(num, \"0123456789ABCDEF\")\n    \n    for d in digits\n        if d\
    \ == \"A\"\n            hex_key = hex_key + 1\n        elseif d == \"B\"\n   \
    \         hex_key = hex_key + 2\n        elseif d == \"C\"\n            hex_key\
    \ = hex_key + 3\n        elseif d == \"D\"\n            hex_key = hex_key + 4\n\
    \        elseif d == \"E\"\n            hex_key = hex_key + 5\n        elseif\
    \ d == \"F\"\n            hex_key = hex_key + 6\n        else\n            error(\"\
    The input string contains invalid characters\")\n        end\n    end\n    \n\
    \    return hex_key\nend\n</cell>\n<code language=julia-1.4>\nhex_key(\"AB\")\n\
    </cell>\n<code language=julia-1.4>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.4>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.4>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.4>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a hexadecimal number as a string and counts\
    \ the number of hexadecimal digits that are primes (prime number, or a prime,\
    \ is a natural number greater than 1 that is not a product of two smaller natural\
    \ numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
    \ E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n\
    Note: the input string may contain symbols A,B,C,D,E,F but you may assume that\
    \ they are uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor\
    \ num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should\
    \ be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"\
    2020\" the output should be 2.\nFor num = \"A\" the output should be 0.\nFor num\
    \ = \"B\" the output should be 0.\nFor num = \"C\" the output should be 0.\nFor\
    \ num = \"D\" the output should be 0.\nFor num = \"E\" the output should be 0.\n\
    For num = \"F\" the output should be 0.\nFor num = \"\" the output should be 0.\n\
    For num = \"AAB\" the output should be 2.\nFor num = \"AABB\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplismcyta.jl:48\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplismcyta.jl:48\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphvi2h30c.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphvi2h30c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphvi2h30c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1gjd9kjb.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1gjd9kjb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1gjd9kjb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_key = 0\n    \n    for digit in num\n        if digit in prime_digits\n\
    \            hex_key += 1\n        end\n    end\n    \n    return hex_key\nend\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters (uppercase or lowercase).\nExamples:\nFor s = \"abc def\" the output\
    \ should be 3.\nFor s = \"abc 123\" the output should be 4.\nFor s = \"abc 123!\"\
    \ the output should be 5.\nFor s = \" \" the output should be 0.\nFor s = \" a\"\
    \ the output should be 1.\nFor s = \" a!\" the output should be 2.\nFor s = \"\
    \ a!b\" the output should be 3.\nFor s = \" a!b!\" the output should be 4.\nFor\
    \ s = \" a!b!c\" the output should be 5.\nFor s = \" a!b!c!\" the output should\
    \ be 6.\nFor s = \" a!b!c!d\" the output should be 7.\nFor s = \" a!b!c!d!\" the\
    \ output should be 8.\nFor s = \" a!b!c!d!e\" the output should be 9.\nFor s =\
    \ \" a!b!c!d!e!\" the output should be 10.\nFor s = \" a!b!c!d!e!f\" the output\
    \ should be 11.\nFor s = \" a!b!c!d!e!f!\" the output should be 12.\nFor s = \"\
    \ a!b!c!d!e!f!g\" the output should be 13.\nFor s = \" a!b!c!d!e!f!g!\" the output\
    \ should be 14.\nFor s = \" a!b!c!d!e!f!g!h\" the output should be 15.\nFor s\
    \ = \" a!b!c!d!\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ah1dfko.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ah1dfko.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num) \n    \n \
    \   primes_count = length(primes) \n    \n    primes_count_2 = primes_count +\
    \ 1 \n    \n    primes_count_3 = primes_count_2 * 2 \n    \n    primes_count_4\
    \ = primes_count_3 * 3 \n    \n    primes_count_5 = primes_count_4 * 5 \n    \n\
    \    primes_count_6 = primes_count_5 * 7 \n    \n    primes_count_7 = primes_count_6\
    \ * 11 \n    \n    primes_count_8 = primes_count_7 * 13 \n    \n    primes_count_9\
    \ = primes_count_8 * 17 \n    \n    primes_count_10 = primes_count_9 * 19 \n \
    \   \n    primes_count_11 = primes_count_10 * 23 \n    \n    primes_count_12 =\
    \ primes_count_11 * 29 \n    \n    primes_count_13 = primes_count_12 * 37 \n \
    \   \n    primes_count_14 = primes_count_13 * 43 \n    \n    primes_count_15 =\
    \ primes_count_14 * 59 \n    \n    primes_count_16 = primes_count_15 * 67 \n \
    \   \n    primes_count_17 = primes_count_16 * 79 \n    \n    primes_count_18 =\
    \ primes_count_17 * 97 \n    \n    primes_count_19 = primes_count_18 * 111 \n\
    \    \n    primes_count_20 = primes_count_19 * 131 \n    \n    primes_count_21\
    \ = primes_count_20 * 171 \n    \n    primes_count_22 = primes_count_21 * 191\
    \ \n    \n    primes_count_23 = primes_count_22 * 231 \n    \n    primes_count_24\
    \ = primes_count_23 * 291 \n    \n    primes_count_25 = primes_count_24 * 371\
    \ \n    \n    primes_count_26 = primes_count_25 * 431 \n    \n    primes_count_27\
    \ = primes_count_26 * 591 \n    \n    primes_count_28 = primes_count_27 * 671\
    \ \n    \n    primes_count_29 = primes_count_28 * 791 \n    \n    primes_count_30\
    \ = primes_count_29 * 971 \n    \n    primes_count_31 = primes_count_30 * 1111\
    \ \n    \n    primes_count_32 = primes_count_31 * 1311 \n    \n    primes_count_33\
    \ = primes_count_32 * 1711 \n    \n    primes_count_34 = prime\nusing Test\n\n\
    @testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx616c6ch.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx616c6ch.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx616c6ch.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ hex_count = 0\n    \n    for digit in num\n        \n        if digit in primes\n\
    \            \n            hex_count += 1\n            \n        end\n    end\n\
    \    \n    return hex_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNotes: you may assume the input is always correct or\
    \ empty string, and symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor\
    \ num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should\
    \ be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\"\
    \ the output should be 6.\nFor num = \"2020\" the output should be 2.\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6vmpsamy.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6vmpsamy.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9icly722.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9icly722.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9icly722.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8v7fvwk4.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8v7fvwk4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8v7fvwk4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpactvejnu.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpactvejnu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpactvejnu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ hex_nums = hex_nums(num)\n    \n    count = 0\n    \n    for p in primes\n \
    \       for h in hex_nums\n            if p*p > h\n                count += 1\n\
    \            end\n        end\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the\
    \ input may be empty or contain symbols A,B,C,D,E,F uppercase.\nExamples:\nFor\
    \ num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should\
    \ be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\"\
    \ the output should be 6.\nFor num = \"2020\" the output should be 2.\nFor num\
    \ = \"\" the output should be 0.\nFor num = \"A\" the output should be 0.\nFor\
    \ num = \"B\" the output should be 0.\nFor num = \"C\" the output should be 0.\n\
    For num = \"D\" the output should be 0.\nFor num = \"E\" the output should be\
    \ 0.\nFor num = \"F\" the output should be 0.\nFor num = \"G\" the output should\
    \ be 0.\nFor num = \"H\" the output should be 0.\nFor num = \"I\" the output should\
    \ be 0.\nFor num = \"J\" the output should be 0.\nFor num = \"K\" the output should\
    \ be 0.\nFor num = \"L\" the output should be 0.\nFor num = \"M\" the output should\
    \ be 0.\nFor num = \"N\" the output should be 0.\nFor num = \"O\" the output should\
    \ be 0.\nFor num = \"P\" the output should be 0.\nFor num = \"Q\" the output should\
    \ be 0.\nFor num = \"\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7654dfj_.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7654dfj_.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_digits_set = Set(num.split(\"\
    \").map(|x| x.to_digit(16)))\n    \n    prime_digits_set - hex_digits_set\n  \
    \  \nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that receives a string and returns the number of characters\
    \ that are not letters.\nExamples:\nFor s = \"A\" the output should be 1.\nFor\
    \ s = \"A1\" the output should be 2.\nFor s = \"Aa1\" the output should be 3.\n\
    For s = \"Aa1A\" the output should be 4.\nFor s = \"Aa1Aa1\" the output should\
    \ be 5.\nFor s = \"Aa1Aa1A\" the output should be 6.\nFor s = \"\" the output\
    \ should be 0.\nFor s = \" \" the output should be 0.\nFor s = \" A\" the output\
    \ should be 1.\nFor s = \"A\" the output should be 1.\nFor s = \"A1\" the output\
    \ should be 2.\nFor s = \"Aa1\" the output should be 3.\nFor s = \"Aa1A\" the\
    \ output should be 4.\nFor s = \"Aa1Aa1\" the output should be 5.\nFor s = \"\
    Aa1Aa1A\" the output should be 6.\nFor s = \" \" the output should be 0.\nFor\
    \ s = \" A\" the output should be 1.\nFor s = \"A\" the output should be 1.\n\
    For s = \"A1\" the output should be 2.\nFor s = \"Aa1\" the output should be 3.\n\
    For s = \"Aa1A\" the output should be 4.\nFor s = \"Aa1Aa1\" the output should\
    \ be 5.\nFor s = \"Aa1Aa1A\" the output should be 6.\nFor s = \" \" the output\
    \ should be 0.\nFor s = \" A\" the output should be 1.\nFor s = \"A\" the output\
    \ should be 1.\nFor s = \"A1\" the output should be 2.\nFor s = \"Aa1\" the output\
    \ should be 3.\nFor s = \"Aa1A\" the output should be 4.\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv1cqe8p0.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv1cqe8p0.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqtok2gjr.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqtok2gjr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqtok2gjr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyawffwq.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjyawffwq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjyawffwq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm6gi50i_.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm6gi50i_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm6gi50i_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    prime_digits_count_2 = prime_digits_count\
    \ / 2\n    \n    prime_digits_count_3 = prime_digits_count / 3\n    \n    prime_digits_count_4\
    \ = prime_digits_count / 4\n    \n    prime_digits_count_5 = prime_digits_count\
    \ / 5\n    \n    prime_digits_count_6 = prime_digits_count / 6\n    \n    prime_digits_count_7\
    \ = prime_digits_count / 7\n    \n    prime_digits_count_8 = prime_digits_count\
    \ / 8\n    \n    prime_digits_count_9 = prime_digits_count / 9\n    \n    prime_digits_count_10\
    \ = prime_digits_count / 10\n    \n    prime_digits_count_11 = prime_digits_count\
    \ / 11\n    \n    prime_digits_count_12 = prime_digits_count / 12\n    \n    prime_digits_count_13\
    \ = prime_digits_count / 13\n    \n    prime_digits_count_14 = prime_digits_count\
    \ / 14\n    \n    prime_digits_count_15 = prime_digits_count / 15\n    \n    prime_digits_count_16\
    \ = prime_digits_count / 16\n    \n    prime_digits_count_17 = prime_digits_count\
    \ / 17\n    \n    prime_digits_count_18 = prime_digits_count / 18\n    \n    prime_digits_count_19\
    \ = prime_digits_count / 19\n    \n    prime_digits_count_20 = prime_digits_count\
    \ / 20\n    \n    prime_digits_count_21 = prime_digits_count / 21\n    \n    prime_digits_count_22\
    \ = prime_digits_count / 22\n    \n    prime_digits_count_23 = prime_digits_count\
    \ / 23\n    \n    prime_digits_count_24 = prime_digits_count / 24\n    \n    prime_digits_count_25\
    \ = prime_digits_count / 25\n    \n    prime_digits_count_26 = prime_digits_count\
    \ / 26\n    \n    prime_digits_count_27 = prime_digits_count / 27\n    \n    prime_digits_count_28\
    \ = prime_digits_count / 28\n    \n    prime_digits_count_29 = prime_digits_\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl25udmgz.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpl25udmgz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpl25udmgz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_string = num\n\
    \    \n    hex_string = hex_string.upper()\n    \n    hex_string = hex_string.strip(\"\
    0\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    x\")\n    \n    hex_string = hex_string.strip(\"B\")\n    \n    hex_string = hex_string.strip(\"\
    D\")\n    \n    hex_string = hex_string.strip(\"E\")\n    \n    hex_string = hex_string.strip(\"\
    F\")\n    \n    hex_string = hex_string.strip(\"a\")\n    \n    hex_string = hex_string.strip(\"\
    b\")\n    \n    hex_string = hex_string.strip(\"c\")\n    \n    hex_string = hex_string.strip(\"\
    d\")\n    \n    hex_string = hex_string.strip(\"e\")\n    \n    hex_string = hex_string.strip(\"\
    f\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    1\")\n    \n    hex_string = hex_string.strip(\"2\")\n    \n    hex_string = hex_string.strip(\"\
    3\")\n    \n    hex_string = hex_string.strip(\"4\")\n    \n    hex_string = hex_string.strip(\"\
    5\")\n    \n    hex_string = hex_string.strip(\"6\")\n    \n    hex_string = hex_string.strip(\"\
    7\")\n    \n    hex_string = hex_string.strip(\"8\")\n    \n    hex_string = hex_string.strip(\"\
    9\")\n    \n    hex_string = hex_string.strip(\"A\")\n    \n    hex_string = hex_string.strip(\"\
    B\")\n    \n    hex_string = hex_string.strip(\"C\")\n    \n    hex_string = hex_string.strip(\"\
    D\")\n    \n    hex_string = hex_string.strip(\"E\")\n    \n    hex_string = hex_string.strip(\"\
    F\")\n    \n    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    1\")\n    \n    hex_string = hex_string.strip(\"2\")\n    \n    hex_string = hex_string.strip(\"\
    3\")\n    \n    hex_string = hex_string.strip(\"4\")\n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1hehwfce.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1hehwfce.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1hehwfce.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes(num)\n    \n    primes_count\
    \ = length(primes)\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count \nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk4wayg57.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk4wayg57.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk4wayg57.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    prime_digits_set = Set(prime_digits)\n    \n    digit_counts = Dict()\n \
    \   digit_counts[1] = 0\n    digit_counts[2] = 0\n    digit_counts[3] = 0\n  \
    \  digit_counts[4] = 0\n    digit_counts[5] = 0\n    digit_counts[6] = 0\n   \
    \ digit_counts[7] = 0\n    digit_counts[8] = 0\n    digit_counts[9] = 0\n    digit_counts[10]\
    \ = 0\n    digit_counts[11] = 0\n    digit_counts[12] = 0\n    digit_counts[13]\
    \ = 0\n    digit_counts[14] = 0\n    digit_counts[15] = 0\n    digit_counts[16]\
    \ = 0\n    digit_counts[17] = 0\n    digit_counts[18] = 0\n    digit_counts[19]\
    \ = 0\n    digit_counts[20] = 0\n    digit_counts[21] = 0\n    digit_counts[22]\
    \ = 0\n    digit_counts[23] = 0\n    digit_counts[24] = 0\n    digit_counts[25]\
    \ = 0\n    digit_counts[26] = 0\n    digit_counts[27] = 0\n    digit_counts[28]\
    \ = 0\n    digit_counts[29] = 0\n    digit_counts[30] = 0\n    digit_counts[31]\
    \ = 0\n    digit_counts[32] = 0\n    digit_counts[33] = 0\n    digit_counts[34]\
    \ = 0\n    digit_counts[35] = 0\n    digit_counts[36] = 0\n    digit_counts[37]\
    \ = 0\n    digit_counts[38] = 0\n    digit_counts[39] = 0\n    digit_counts[40]\
    \ = 0\n    digit_counts[41] = 0\n    digit_counts[42] = 0\n    digit_counts[43]\
    \ = 0\n    digit_counts[44] = 0\n    digit_counts[45] = 0\n    digit_counts[46]\
    \ = 0\n    digit_counts[47] = 0\n    digit_counts[48] = 0\n    digit_counts[49]\
    \ = 0\n    digit_counts[50] = 0\n    digit_counts[51] = 0\n    digit_counts[52]\
    \ = 0\n    digit_counts[53] = 0\n    digit_counts[54] = 0\n    digit_counts[55]\
    \ = 0\n    digit_counts[56] = 0\n    digit_counts[57] = 0\n    digit_counts[58]\
    \ = 0\n    digit_counts[59] = 0\n    digit_counts[60] = 0\n    digit_counts[61]\
    \ = 0\n    digit_counts[62] = 0\n    digit_counts[63] = 0\n    digit_counts[64]\
    \ = 0\n    digit_counts[65] = 0\n    digit_counts[66] = 0\n    digit_counts[67]\
    \ = 0\n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu6hgtm6f.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu6hgtm6f.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu6hgtm6f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = prime_digits(num)\n \
    \   \n    prime_digits_count = length(prime_digits)\n    \n    prime_digits_count_2\
    \ = prime_digits_count / 2\n    \n    prime_digits_count_3 = prime_digits_count\
    \ / 3\n    \n    prime_digits_count_4 = prime_digits_count / 4\n    \n    prime_digits_count_5\
    \ = prime_digits_count / 5\n    \n    prime_digits_count_6 = prime_digits_count\
    \ / 6\n    \n    prime_digits_count_7 = prime_digits_count / 7\n    \n    prime_digits_count_8\
    \ = prime_digits_count / 8\n    \n    prime_digits_count_9 = prime_digits_count\
    \ / 9\n    \n    prime_digits_count_10 = prime_digits_count / 10\n    \n    prime_digits_count_11\
    \ = prime_digits_count / 11\n    \n    prime_digits_count_12 = prime_digits_count\
    \ / 12\n    \n    prime_digits_count_13 = prime_digits_count / 13\n    \n    prime_digits_count_14\
    \ = prime_digits_count / 14\n    \n    prime_digits_count_15 = prime_digits_count\
    \ / 15\n    \n    prime_digits_count_16 = prime_digits_count / 16\n    \n    prime_digits_count_17\
    \ = prime_digits_count / 17\n    \n    prime_digits_count_18 = prime_digits_count\
    \ / 18\n    \n    prime_digits_count_19 = prime_digits_count / 19\n    \n    prime_digits_count_20\
    \ = prime_digits_count / 20\n    \n    prime_digits_count_21 = prime_digits_count\
    \ / 21\n    \n    prime_digits_count_22 = prime_digits_count / 22\n    \n    prime_digits_count_23\
    \ = prime_digits_count / 23\n    \n    prime_digits_count_24 = prime_digits_count\
    \ / 24\n    \n    prime_digits_count_25 = prime_digits_count / 25\n    \n    prime_digits_count_26\
    \ = prime_digits_count / 26\n    \n    prime_digits_count_27 = prime_digits_count\
    \ / 27\n    \n    prime_digits_count_28 = prime_digits_count / 28\n    \n    prime_digits_count_29\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpywk351kl.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpywk351kl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpywk351kl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(num)\n    \n\
    \    primes_count = length(primes)\n    \n    primes_count = primes_count - 1\n\
    \    \n    if primes_count < 0\n        primes_count = 0\n    end\n    \n    return\
    \ primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a hexadecimal number as a string and counts\
    \ the number of hexadecimal digits that are primes (prime number, or a prime,\
    \ is a natural number greater than 1 that is not a product of two smaller natural\
    \ numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
    \ E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n\
    Note: the input may contain symbols A,B,C,D,E,F but you may assume that the input\
    \ is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.\n\
    Examples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output\
    \ should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\"\
    \ the output should be 6.\nFor num = \"2020\" the output should be 2.\nFor num\
    \ = \"\" the output should be 0.\nFor num = \" \" the output should be 0.\nFor\
    \ num = \"  \" the output should be 0.\nFor num = \"   \" the output should be\
    \ 0.\nFor num = \"   A\" the output should be 1.\nFor num = \"   AB\" the output\
    \ should be 1.\nFor num = \"   ABCD\" the output should be 3.\nFor num = \"  \
    \ ABCD1234\" the output should be 5.\nFor num = \"   ABCD1234ABCD\" the output\
    \ should be 8.\nFor num = \"   ABCD1234ABCD1234\" the output should be 10.\nFor\
    \ num = \"   ABCD1234ABCD1234ABCD\" the output should be 16.\nFor num = \"   ABCD1234ABCD1234ABCD1234\"\
    \ the output should be 20.\nFor num = \"   ABCD1234ABCD1234ABCD1234ABCD\" the\
    \ output \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphilxudvq.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphilxudvq.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes(num) \n    \n    primes_count\
    \ = primes.count \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count\
    \ = primes_count - 2 \n    \n    primes_count = primes_count - 2 \n\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8y6y25kj.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8y6y25kj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8y6y25kj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcw7596tb.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcw7596tb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcw7596tb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set =\
    \ prime_digits_set - Set(num[2:end])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[1:end-1])\n    \n    prime_digits_set = prime_digits_set - Set(num[1:end-2])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[1:end-3])\n    \n   \
    \ prime_digits_set = prime_digits_set - Set(num[1:end-4])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[1:end-5])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[1:end-6])\n    \n    prime_digits_set = prime_digits_set - Set(num[1:end-7])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[1:end-8])\n    \n   \
    \ prime_digits_set = prime_digits_set - Set(num[1:end-9])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[1:end-10])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[1:end-11])\n    \n    prime_digits_set = prime_digits_set - Set(num[1:end-12])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[1:end-13])\n    \n  \
    \  prime_digits_set = prime_digits_set - Set(num[1:end-14])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[1:end-15])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num[1:end-16])\n    \n    prime_digits_set = prime_digits_set - Set(num[1:end-17])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(num[1:end-18])\n    \n  \
    \  prime_digits_set = prime_digits_set - Set(num[1:end-19])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num[1:end-20])\n    \n    prime_digits_set = prime_digits_set\
    \ \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcjobddo8.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcjobddo8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcjobddo8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set =\
    \ prime_digits_set & Set(num.chars)\n    \n    prime_digits_set = prime_digits_set\
    \ & Set(num.chars.drop(2))\n    \n    prime_digits_set = prime_digits_set & Set(num.chars.drop(3))\n\
    \    \n    prime_digits_set = prime_digits_set & Set(num.chars.drop(4))\n    \n\
    \    prime_digits_set = prime_digits_set & Set(num.chars.drop(5))\n    \n    prime_digits_set\
    \ = prime_digits_set & Set(num.chars.drop(6))\n    \n    prime_digits_set = prime_digits_set\
    \ & Set(num.chars.drop(7))\n    \n    prime_digits_set = prime_digits_set & Set(num.chars.drop(8))\n\
    \    \n    prime_digits_set = prime_digits_set & Set(num.chars.drop(9))\n    \n\
    \    prime_digits_set = prime_digits_set & Set(num.chars.drop(10))\n    \n   \
    \ prime_digits_set = prime_digits_set & Set(num.chars.drop(11))\n    \n    prime_digits_set\
    \ = prime_digits_set & Set(num.chars.drop(12))\n    \n    prime_digits_set = prime_digits_set\
    \ & Set(num.chars.drop(13))\n    \n    prime_digits_set = prime_digits_set & Set(num.chars.drop(14))\n\
    \    \n    prime_digits_set = prime_digits_set & Set(num.chars.drop(15))\n   \
    \ \n    prime_digits_set = prime_digits_set & Set(num.chars.drop(16))\n    \n\
    \    prime_digits_set = prime_digits_set & Set(num.chars.drop(17))\n    \n   \
    \ prime_digits_set = prime_digits_set & Set(num.chars.drop(18))\n    \n    prime_digits_set\
    \ = prime_digits_set & Set(num.chars.drop(19))\n    \n    prime_digits_set = prime_digits_set\
    \ & Set(num.chars.drop(20))\n    \n    prime_digits_set = prime_digits_set & Set(\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplvtemos0.jl:67\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplvtemos0.jl:67\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_num::Int64 = 0\n    \n    for digit in num\n        if digit in\
    \ prime_digits\n            hex_num += 1\n        end\n    end\n    \n    return\
    \ hex_num\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a string and returns the number of characters\
    \ that are not uppercase letters.\nExamples:\nFor str = \"AB\" the output should\
    \ be 1.\nFor str = \"1077E\" the output should be 2.\nFor str = \"ABED1A33\" the\
    \ output should be 4.\nFor str = \"123456789ABCDEF0\" the output should be 6.\n\
    For str = \"2020\" the output should be 2.\nFor str = \"aB\" the output should\
    \ be 0.\nFor str = \"aBc\" the output should be 1.\nFor str = \"aBcD\" the output\
    \ should be 2.\nFor str = \"aBcD\" the output should be 2.\nFor str = \"aBcD\"\
    \ the output should be 2.\nFor str = \"aBcD\" the output should be 2.\nFor str\
    \ = \"aBcD\" the output should be 2.\nFor str = \"aBcD\" the output should be\
    \ 2.\nFor str = \"aBcD\" the output should be 2.\nFor str = \"aBcD\" the output\
    \ should be 2.\nFor str = \"aBcD\" the output should be 2.\nFor str = \"aBcD\"\
    \ the output should be 2.\nFor str = \"aBcD\" the output should be 2.\nFor str\
    \ = \"aBcD\" the output should be 2.\nFor str = \"aBcD\" the output should be\
    \ 2.\nFor str = \"aBcD\" the output should be 2.\nFor str = \"aBcD\" the output\
    \ should be 2.\nFor str = \"aBcD\" the output should be 2.\nFor str = \"aBcD\"\
    \ the output should be 2.\nFor str = \"aBcD\" the output should be 2.\nFor str\
    \ = \"aBcD\" the output should be 2.\nFor str = \"aBcD\" the output should be\
    \ 2.\nFor str = \"aBcD\" the output should be 2.\nFor str = \"aBcD\" the output\
    \ should be 2.\nFor \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf8ddy6wb.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf8ddy6wb.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes(num) \n    \n    count\
    \ = 0 \n    for p in primes \n        \n        if num[p] == num[(p-1)%num.length]\
    \ \n            count += 1\n        \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of times each character appears in the string.\nExamples:\n\
    For s = \"AB\" the output should be Dict(\"A\"=>1, \"B\"=>1).\nFor s = \"1077E\"\
    \ the output should be Dict(\"0\"=>1, \"1\"=>1, \"E\"=>1).\nFor s = \"ABED1A33\"\
    \ the output should be Dict(\"A\"=>2, \"B\"=>2, \"D\"=>1, \"E\"=>1, \"1\"=>1,\
    \ \"3\"=>1).\nFor s = \"123456789ABCDEF0\" the output should be Dict(\"0\"=>1,\
    \ \"1\"=>1, \"2\"=>1, \"3\"=>1, \"4\"=>1, \"5\"=>1, \"6\"=>1, \"7\"=>1, \"8\"\
    =>1, \"9\"=>1).\nFor s = \"2020\" the output should be Dict(\"0\"=>1, \"1\"=>1,\
    \ \"2\"=>1, \"3\"=>1).\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpalgvhsgi.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpalgvhsgi.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexdigits = num.chars\n\
    \    \n    hexdigits_set = Set(hexdigits)\n    \n    prime_digits_set & hexdigits_set\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a string and returns the number of characters\
    \ that are not letters.\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoz3w4_lb.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoz3w4_lb.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxgnno8o9.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxgnno8o9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxgnno8o9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    for i in num\n\
    \        if i == \"A\" or i == \"B\" or i == \"C\" or i == \"D\" or i == \"E\"\
    \ or i == \"F\"\n            hex_key += 1\n        end\n    end\n    \n    return\
    \ hex_key\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that receives a string and returns the number of characters\
    \ that are not letters.\nExamples:\nFor str = \"AB\" the output should be 2.\n\
    For str = \"1077E\" the output should be 4.\nFor str = \"ABED1A33\" the output\
    \ should be 6.\nFor str = \"123456789ABCDEF0\" the output should be 8.\nFor str\
    \ = \"2020\" the output should be 2.\nFor str = \"10\" the output should be 0.\n\
    For str = \" \" the output should be 0.\nFor str = \" \" the output should be\
    \ 0.\nFor str = \" \" the output should be 0.\nFor str = \"   \" the output should\
    \ be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"   \" the output\
    \ should be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"   \" the\
    \ output should be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"\
    \   \" the output should be 0.\nFor str = \"   \" the output should be 0.\nFor\
    \ str = \"   \" the output should be 0.\nFor str = \"   \" the output should be\
    \ 0.\nFor str = \"   \" the output should be 0.\nFor str = \"   \" the output\
    \ should be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"   \" the\
    \ output should be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"\
    \   \" the output should be 0.\nFor str = \"   \" the output should be 0.\nFor\
    \ str = \"   \" the output should be 0.\nFor str = \"   \" the output should be\
    \ 0.\nFor str = \"   \" the output should be 0.\nFor str = \"   \" the output\
    \ should be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"   \" the\
    \ output should be 0.\nFor str = \"   \" the output should be 0.\nFor str = \"\
    \   \" the output should be 0.\nFor str = \"   \" the output should be 0.\nFor\
    \ str = \"   \" the output should be 0.\nFor str = \"   \" the output should be\
    \ 0.\nFor str = \"   \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"i\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg35xhnlk.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg35xhnlk.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7vkawbcj.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7vkawbcj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7vkawbcj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyotddlqb.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyotddlqb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyotddlqb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps9q09fvh.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmps9q09fvh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmps9q09fvh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexadecimal_digits_set\
    \ = Set(num.chars().filter(x => x >= '0' and x <= '9'))\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - prime_digits_set\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexadecimal_digits_set = hexadecimal_digits_set - prime_digits_set\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - prime_digits_set\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexadecimal_digits_set = hexadecimal_digits_set - prime_digits_set\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - prime_digits_set\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexadecimal_digits_set = hexadecimal_digits_set - prime_digits_set\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - prime_digits_set\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexadecimal_digits_set = hexadecimal_digits_set - prime_digits_set\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - prime_digits_set\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexadecimal_digits_set = hexadecimal_digits_set - prime_digits_set\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - prime_digits_set\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hexadecimal_digits_set = hexadecimal_digits_set - prime_digits_set\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - prime_digits_set\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdz3s_n4m.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdz3s_n4m.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = prime_digits(num)\n \
    \   \n    prime_digits_count = length(prime_digits)\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1va5kuyr.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1va5kuyr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1va5kuyr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_nums = num.split(\"\")\n    \n    hex_nums_prime = hex_nums.filter(x\
    \ -> x in prime_digits)\n    \n    hex_nums_prime_len = len(hex_nums_prime)\n\
    \    \n    hex_nums_prime_sum = hex_nums_prime.sum()\n    \n    hex_nums_prime_product\
    \ = hex_nums_prime.product()\n    \n    hex_nums_prime_product = hex_nums_prime_product[hex_nums_prime_len]\n\
    \    \n    hex_nums_prime_product = hex_nums_prime_product * hex_nums_prime_len\n\
    \    \n    hex_nums_prime_product = hex_nums_prime_product / hex_nums_prime_len\n\
    \    \n    hex_nums_prime_product = hex_nums_prime_product % hex_nums_prime_len\n\
    \    \n    hex_nums_prime_product = hex_nums_prime_product + 1\n    \n    hex_nums_prime_product\
    \ = hex_nums_prime_product - 1\n    \n    hex_nums_prime_product = hex_nums_prime_product\
    \ * hex_nums_prime_len\n    \n    hex_nums_prime_product = hex_nums_prime_product\
    \ / hex_nums_prime_len\n    \n    hex_nums_prime_product = hex_nums_prime_product\
    \ % hex_nums_prime_len\n    \n    hex_nums_prime_product = hex_nums_prime_product\
    \ + 1\n    \n    hex_nums_prime_product = hex_nums_prime_product - 1\n    \n \
    \   hex_nums_prime_product = hex_nums_prime_product * hex_nums_prime_len\n   \
    \ \n    hex_nums_prime_product = hex_nums_prime_product / hex_nums_prime_len\n\
    \    \n    hex_nums_prime_product = hex_nums_prime_product % hex_nums_prime_len\n\
    \    \n    hex_nums_prime_product = hex_nums_prime_product + 1\n    \n    hex_nums_prime_product\
    \ = hex_nums_prime_product - 1\n    \n    hex_nums_prime_product = hex_nums_prime_product\
    \ * hex_nums_prime_len\n    \n    hex_nums_prime_product = hex_nums_prime_product\
    \ / hex_nums_prime_len\n    \n    hex_nums_prime_product = hex_nums_prime_product\
    \ % hex_nums_prime_len\n    \n    hex_nums_prime\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8aighs5g.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8aighs5g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8aighs5g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    if num == \"\"\
    \n        return hex_key\n    \n    digits = num.chars\n    \n    for i in digits\n\
    \        if i == \"A\"\n            hex_key += 1\n        elif i == \"B\"\n  \
    \          hex_key += 2\n        elif i == \"C\"\n            hex_key += 4\n \
    \       elif i == \"D\"\n            hex_key += 8\n        elif i == \"E\"\n \
    \           hex_key += 16\n        elif i == \"F\"\n            hex_key += 32\n\
    \        else\n            hex_key += 64\n    end\n    \n    return hex_key\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"i\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvpcimebk.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvpcimebk.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num)\n    \n  \
    \  prime_digits = primes.map(|x| x.digits)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.is_power_of_two())\n    \n    prime_digits = prime_digits.filter(|x| x.digits\
    \ != 0)\n    \n    prime_digits = prime_digits.filter(|x| x.digits != 1)\n   \
    \ \n    prime_digits = prime_digits.filter(|x| x.digits != 2)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.digits != 3)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.digits != 4)\n    \n    prime_digits = prime_digits.filter(|x| x.digits !=\
    \ 5)\n    \n    prime_digits = prime_digits.filter(|x| x.digits != 6)\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.digits != 7)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.digits != 8)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.digits != 9)\n    \n    prime_digits = prime_digits.filter(|x| x.digits !=\
    \ 10)\n    \n    prime_digits = prime_digits.filter(|x| x.digits != 11)\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.digits != 12)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.digits != 13)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.digits != 14)\n    \n    prime_digits = prime_digits.filter(|x| x.digits !=\
    \ 15)\n    \n    prime_digits = prime_digits.filter(|x| x.digits != 16)\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.digits != 17)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.digits != 18)\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.digits != 19)\n    \n    prime_digits = prime_digits.filter(|x| x.digits !=\
    \ 20)\n    \n    prime_digits = prime_digits.filter(|x| x.digits != 21)\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.digits != 22)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.digits != 23)\n    \n    prime_digit\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp69iaff81.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp69iaff81.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6bz87wq1.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6bz87wq1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6bz87wq1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdy6d6axd.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdy6d6axd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdy6d6axd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi8809y30.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpi8809y30.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpi8809y30.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprm9_k6y2.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprm9_k6y2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprm9_k6y2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_string = num\n    \n    hex_string = hex_string.upper()\n    \n\
    \    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"X\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcb5f5436.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcb5f5436.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcb5f5436.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    prime_digits_set = Set(prime_digits)\n    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1zyk88wt.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1zyk88wt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1zyk88wt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    if prime_digits_count == 0\
    \ \n        prime_digits_count = 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1if5wzcr.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1if5wzcr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnakzssgw.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnakzssgw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnakzssgw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0xexic_3.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0xexic_3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0xexic_3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num) \n    \n \
    \   primes_count = count(primes) \n    \n    primes_count = primes_count - 2 \n\
    \    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \n    \n    primes_count = primes_count - 2 \n    \n    primes_count = primes_count\
    \ - 2 \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2i9k1jy8.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2i9k1jy8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2i9k1jy8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe9eb3ugl.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe9eb3ugl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe9eb3ugl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    prime_digits_set = Set(prime_digits)\n    \n    digits = num.chars\n    \n\
    \    digit_counts = Dict{Char,Int64}()\n    \n    for digit in digits\n      \
    \  digit_counts[digit] = digit_counts[digit] + 1 if digit in digit_counts else\
    \ 1\n    end\n    \n    prime_counts = Dict{Char,Int64}()\n    \n    for digit\
    \ in digits\n        if digit in prime_digits_set\n            prime_counts[digit]\
    \ = prime_counts[digit] + 1 if digit in prime_counts else 1\n        end\n   \
    \ end\n    \n    prime_counts_set = Set(prime_counts.values)\n    \n    prime_counts_set\
    \ = prime_counts_set - prime_digits_set\n    \n    prime_counts_set = prime_counts_set\
    \ - prime_counts_set - prime_digits_set\n    \n    prime_counts_set = prime_counts_set\
    \ - prime_counts_set - prime_digits_set - prime_counts_set - prime_digits_set\n\
    \    \n    prime_counts_set = prime_counts_set - prime_counts_set - prime_digits_set\
    \ - prime_counts_set - prime_digits_set - prime_counts_set - prime_digits_set\n\
    \    \n    prime_counts_set = prime_counts_set - prime_counts_set - prime_digits_set\
    \ - prime_counts_set - prime_digits_set - prime_counts_set - prime_digits_set\
    \ - prime_counts_set - prime_digits_set\n    \n    prime_counts_set = prime_counts_set\
    \ - prime_counts_set - prime_digits_set - prime_counts_set - prime_digits_set\
    \ - prime_counts_set - prime_digits_set - prime_counts_set - prime_digits_set\
    \ - prime_counts_set - prime_digits_set\n    \n    prime_counts_set = prime_counts_set\
    \ - prime_counts_set - prime_digits_set - prime_counts_set - prime_digits_set\
    \ - prime_counts_set - prime_digits_set - prime_counts_set - prime_digits_set\
    \ - prime_counts_set - prime_digits_set - prime_counts_set - prime_digits_set\n\
    \    \n    prime_counts_set = prime_counts_set - prime_counts_set - prime_digits_set\
    \ - prime_counts_set - prime_digits_set - prime_counts_set - prime_digit\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3i1rag5j.jl:28\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3i1rag5j.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexdigits = Set(\"\
    0123456789ABCDEF\")\n    \n    hexdigits_set = Set(hexdigits)\n    \n    hexdigits_set\
    \ = hexdigits_set - prime_digits_set\n    \n    hexdigits_set = hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hex\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzdrvh2zn.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzdrvh2zn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzdrvh2zn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphdqh38t0.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphdqh38t0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphdqh38t0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_digits = num.chars\n    \n    prime_digits_count = 0\n    \n  \
    \  for digit in hex_digits\n        if digit in prime_digits\n            prime_digits_count\
    \ = prime_digits_count + 1\n            \n    return prime_digits_count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpklekvpvh.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpklekvpvh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpklekvpvh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num) \n    \n \
    \   primes_count = length(primes) \n    \n    primes_count_2 = primes_count -\
    \ 2 \n    \n    primes_count_3 = primes_count - 3 \n    \n    primes_count_4 =\
    \ primes_count - 4 \n    \n    primes_count_5 = primes_count - 5 \n    \n    primes_count_6\
    \ = primes_count - 6 \n    \n    primes_count_7 = primes_count - 7 \n    \n  \
    \  primes_count_8 = primes_count - 8 \n    \n    primes_count_9 = primes_count\
    \ - 9 \n    \n    primes_count_10 = primes_count - 10 \n    \n    primes_count_11\
    \ = primes_count - 11 \n    \n    primes_count_12 = primes_count - 12 \n    \n\
    \    primes_count_13 = primes_count - 13 \n    \n    primes_count_14 = primes_count\
    \ - 14 \n    \n    primes_count_15 = primes_count - 15 \n    \n    primes_count_16\
    \ = primes_count - 16 \n    \n    primes_count_17 = primes_count - 17 \n    \n\
    \    primes_count_18 = primes_count - 18 \n    \n    primes_count_19 = primes_count\
    \ - 19 \n    \n    primes_count_20 = primes_count - 20 \n    \n    primes_count_21\
    \ = primes_count - 21 \n    \n    primes_count_22 = primes_count - 22 \n    \n\
    \    primes_count_23 = primes_count - 23 \n    \n    primes_count_24 = primes_count\
    \ - 24 \n    \n    primes_count_25 = primes_count - 25 \n    \n    primes_count_26\
    \ = primes_count - 26 \n    \n    primes_count_27 = primes_count - 27 \n    \n\
    \    primes_count_28 = primes_count - 28 \n    \n    primes_count_29 = primes_count\
    \ - 29 \n    \n    primes_count_30 = primes_count - 30 \n    \n    primes_count_31\
    \ = primes_count - 31 \n    \n    primes_count_32 = primes_count - 32 \n    \n\
    \    primes_count_33 = primes_count - 33 \n    \n    primes_count_34 = primes_count\
    \ - 34 \n    \n    primes_count_35 = primes_count - 35 \n    \n    primes_count_36\
    \ = primes_count - 36 \n    \n    primes_count_37 = primes_count \nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcsntj43s.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcsntj43s.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcsntj43s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    if num == \"\"\
    \n        return hex_key\n    \n    digits = num.digits\n    \n    for i in digits\n\
    \        if i == \"A\"\n            hex_key += 1\n        elif i == \"B\"\n  \
    \          hex_key += 2\n        elif i == \"C\"\n            hex_key += 4\n \
    \       elif i == \"D\"\n            hex_key += 8\n        elif i == \"E\"\n \
    \           hex_key += 16\n        elif i == \"F\"\n            hex_key += 32\n\
    \        else\n            hex_key += 64\n    end\n    \n    return hex_key\n\
    end\n</cell>\n<code language=julia-1.6>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.6>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.6>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.6>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.6>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\nFor s = \"a\" the output should be 1.\nFor s = \"ab\"\
    \ the output should be 2.\nFor s = \"abc\" the output should be 3.\nFor s = \"\
    abcd\" the output should be 4.\nFor s = \"abcde\" the output should be 5.\nFor\
    \ s = \"abcdef\" the output should be 6.\nFor s = \"abcdefg\" the output should\
    \ be 7.\nFor s = \"abcdefgh\" the output should be 8.\nFor s = \"abcdefghi\" the\
    \ output should be 9.\nFor s = \"abcdefghij\" the output should be 10.\nFor s\
    \ = \"abcdefghijk\" the output should be 11.\nFor s = \"abcdefghijkl\" the output\
    \ should be 12.\nFor s = \"abcdefghijklm\" the output should be 13.\nFor s = \"\
    abcdefghijklmn\" the output should be 14.\nFor s = \"abcdefghijklmn\" the output\
    \ should be 14.\nFor s = \"abcdefghijklmn\" the output should be 14.\nFor s =\
    \ \"abcdefghijklmn\" the output should be 14.\nFor s = \"abcdefghijklmn\" the\
    \ output should be 14.\nFor s = \"abcdefghijklmn\" the output should be 14.\n\
    For s = \"abcdefghijklmn\" the output should be 14.\nFor s = \"abcdefghijklmn\"\
    \ the output should be 14.\nFor s = \"abcdefghijklmn\" the output should be 14.\n\
    For s = \"abcdefghijklmn\" the output should be 14.\nFor s = \"abcdefghijklmn\"\
    \ the output should be 14.\n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"i\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2iyd10hn.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2iyd10hn.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num) \n    \n \
    \   primes_count = count(primes) \n    \n    primes_count = primes_count - 2 \n\
    \    \n    primes_count = primes_count + 1 \n    \n    return primes_count \n\
    \    \nend\n</cell>\n<code language=julia-1.3>\nhex_key(\"AB\")\n</cell>\n<code\
    \ language=julia-1.3>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.3>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.3>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.3>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a hexadecimal number as a string and returns\
    \ the number of hexadecimal digits in the string. Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nExamples:\nFor num = \"AB\" the output\
    \ should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\"\
    \ the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be\
    \ 6.\nFor num = \"2020\" the output should be 2.\nFor num = \"10\" the output\
    \ should be 0.\nFor num = \"\" the output should be 0.\nFor num = \" \" the output\
    \ should be 0.\nFor num = \"   \" the output should be 0.\nFor num = \"   \" the\
    \ output should be 0.\nFor num = \"   \" the output should be 0.\nFor num = \"\
    \   \" the output should be 0.\nFor num = \"   \" the output should be 0.\nFor\
    \ num = \"   \" the output should be 0.\nFor num = \"   \" the output should be\
    \ 0.\nFor num = \"   \" the output should be 0.\nFor num = \"   \" the output\
    \ should be 0.\nFor num = \"   \" the output should be 0.\nFor num = \"   \" the\
    \ output should be 0.\nFor num = \"   \" the output should be 0.\nFor num = \"\
    \   \" the output should be 0.\nFor num = \"   \" the output should be 0.\nFor\
    \ num = \"   \" the output should be 0.\nFor num = \"   \" the output should be\
    \ 0.\nFor num = \"   \" the output should be 0.\nFor num = \"   \" the output\
    \ should be 0.\nFor num = \"   \" the output should be 0.\nFor num = \"   \" the\
    \ output should be 0.\nFor num = \"   \" the output should be 0.\nFor num = \"\
    \   \" the output should be 0.\nFor num = \"   \" the output should be 0.\nFor\
    \ num = \"   \" the output \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcrqptqhe.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcrqptqhe.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num)\n    \n  \
    \  primes_count = primes.count{|x| x > 1}\n    \n    primes_count += primes.count{|x|\
    \ x > 9}\n    \n    primes_count += primes.count{|x| x > 99}\n    \n    primes_count\
    \ += primes.count{|x| x > 999}\n    \n    primes_count += primes.count{|x| x >\
    \ 9999}\n    \n    primes_count += primes.count{|x| x > 99999}\n    \n    primes_count\
    \ += primes.count{|x| x > 999999}\n    \n    primes_count += primes.count{|x|\
    \ x > 9999999}\n    \n    primes_count += primes.count{|x| x > 99999999}\n   \
    \ \n    primes_count += primes.count{|x| x > 999999999}\n    \n    primes_count\
    \ += primes.count{|x| x > 99999999999}\n    \n    primes_count += primes.count{|x|\
    \ x > 999999999999}\n    \n    primes_count += primes.count{|x| x > 999999999000}\n\
    \    \n    primes_count += primes.count{|x| x > 999999999999999}\n    \n    primes_count\
    \ += primes.count{|x| x > 9999999999999999}\n    \n    primes_count += primes.count{|x|\
    \ x > 9999999990000}\n    \n    primes_count += primes.count{|x| x > 9999999999999999999}\n\
    \    \n    primes_count += primes.count{|x| x > 99999999999999999999}\n    \n\
    \    primes_count += primes.count{|x| x > 99999999900000}\n    \n    primes_count\
    \ += primes.count{|x| x > 99999999999999999999999}\n    \n    primes_count +=\
    \ primes.count{|x| x > 999999999999999999999999}\n    \n    primes_count += primes.count{|x|\
    \ x > 999999999000000}\n    \n    primes_count += primes.count{|x| x > 999999999999999999999999999}\n\
    \    \n    primes_count += primes.count{|x| x > 9999999999999999999999999999}\n\
    \    \n    primes_count += primes.count{|x| x > 9999999990000000}\n\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppbep2_cd.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppbep2_cd.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(num) \n    \n\
    \    prime_digits = primes.map(|x| x.digits) \n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.is_power_of_two()) \n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ <= num.len()) \n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ >= 2) \n    \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 2 ==\
    \ 0) \n    \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 3 == 0)\
    \ \n    \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 5 == 0) \n\
    \    \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 7 == 0) \n  \
    \  \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 11 == 0) \n   \
    \ \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 13 == 0) \n    \n\
    \    prime_digits = prime_digits.filter(|x| x.to_usize() % 17 == 0) \n    \n \
    \   prime_digits = prime_digits.filter(|x| x.to_usize() % 19 == 0) \n    \n  \
    \  prime_digits = prime_digits.filter(|x| x.to_usize() % 23 == 0) \n    \n   \
    \ prime_digits = prime_digits.filter(|x| x.to_usize() % 29 == 0) \n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.to_usize() % 31 == 0) \n    \n    prime_digits =\
    \ prime_digits.filter(|x| x.to_usize() % 37 == 0) \n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.to_usize() % 41 == 0) \n    \n    prime_digits = prime_digits.filter(|x| x.to_usize()\
    \ % 43 == 0) \n    \n    prime_digits = prime_digits.filter(|x| x.to_usize() %\
    \ 47 == 0) \n    \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 53\
    \ == 0) \n    \n    prime_digits = prime_digits.filter(|x| x.to_usize() % 59 ==\
    \ 0) \n    \n    prime_digits = \nusing Test\n\n@testset begin\n\ncandidate =\
    \ hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\
    \t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"\
    123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0rr1q4px.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0rr1q4px.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = prime_digits(num)\n \
    \   \n    if prime_digits == []\n        error(\"Invalid input\")\n    end\n \
    \   \n    prime_digits = prime_digits[end]\n    \n    return prime_digits\nend\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptgu4rndy.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"AB\") == 1\n  UndefVarError: prime_digits not defined\n\
    \  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmptgu4rndy.jl:20\n   [2] top-level\
    \ scope at /tmp/tmptgu4rndy.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptgu4rndy.jl:34\n  \ntest set: Error During\
    \ Test at /tmp/tmptgu4rndy.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    1077E\") == 2\n  UndefVarError: prime_digits not defined\n  Stacktrace:\n   [1]\
    \ hex_key(::String) at /tmp/tmptgu4rndy.jl:20\n   [2] top-level scope at /tmp/tmptgu4rndy.jl:36\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptgu4rndy.jl:34\n  \ntest set: Error During\
    \ Test at /tmp/tmptgu4rndy.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    ABED1A33\") == 4\n  UndefVarError: prime_digits not defined\n  Stacktrace:\n \
    \  [1] hex_key(::String) at /tmp/tmptgu4rndy.jl:20\n   [2] top-level scope at\
    \ /tmp/tmptgu4rndy.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptgu4rndy.jl:34\n  \ntest set: Error During\
    \ Test at /tmp/tmptgu4rndy.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    2020\") == 2\n  UndefVarError: prime_digits not defined\n  Stacktrace:\n   [1]\
    \ hex_key(::String) at /tmp/tmptgu4rndy.jl:20\n   [2] top-level scope at /tmp/tmptgu4rndy.jl:38\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptgu4rndy.jl:34\n  \ntest set: Error During\
    \ Test at /tmp/tmptgu4rndy.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    123456789ABCDEF0\") == 6\n  UndefVarError: prime_digits not defined\n  Stacktrace:\n\
    \   [1] hex_key(::String) at /tmp/tmptgu4rndy.jl:20\n   [2] top-level scope at\
    \ /tmp/tmptgu4rndy.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptgu4rndy.jl:34\n  \ntest set: Error During\
    \ Test at /tmp/tmptgu4rndy.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12\n  UndefVarError: prime_digits not defined\n\
    \  Stacktrace:\n   [1] hex_key(::String) at /tmp/tmptgu4rndy.jl:20\n   [2] top-level\
    \ scope at /tmp/tmptgu4rndy.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptgu4rndy.jl:34\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptgu4rndy.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz38xtc_0.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz38xtc_0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz38xtc_0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_string = num\n    \n    hex_string = hex_string.upper()\n    \n\
    \    hex_string = hex_string.strip(\"0\")\n    \n    hex_string = hex_string.strip(\"\
    X\")\n    \n    hex_string = hex_string.strip(\"x\")\n    \n    hex_string = hex_string.strip(\"\
    B\")\n    \n    hex_string = hex_string.strip(\"D\")\n    \n    hex_string = hex_string.strip(\"\
    E\")\n    \n    hex_string = hex_string.strip(\"F\")\n    \n    hex_string = hex_string.strip(\"\
    A\")\n    \n    hex_string = hex_string.strip(\"C\")\n    \n    hex_string = hex_string.strip(\"\
    B\")\n    \n    hex_string = hex_string.strip(\"D\")\n    \n    hex_string = hex_string.strip(\"\
    E\")\n    \n    hex_string = hex_string.strip(\"F\")\n    \n    hex_string = hex_string.strip(\"\
    A\")\n    \n    hex_string = hex_string.strip(\"C\")\n    \n    hex_string = hex_string.strip(\"\
    B\")\n    \n    hex_string = hex_string.strip(\"D\")\n    \n    hex_string = hex_string.strip(\"\
    E\")\n    \n    hex_string = hex_string.strip(\"F\")\n    \n    hex_string = hex_string.strip(\"\
    A\")\n    \n    hex_string = hex_string.strip(\"C\")\n    \n    hex_string = hex_string.strip(\"\
    B\")\n    \n    hex_string = hex_string.strip(\"D\")\n    \n    hex_string = hex_string.strip(\"\
    E\")\n    \n    hex_string = hex_string.strip(\"F\")\n    \n    hex_string = hex_string.strip(\"\
    A\")\n    \n    hex_string = hex_string.strip(\"C\")\n    \n    hex_string = hex_string.strip(\"\
    B\")\n    \n    hex_string = hex_string.strip(\"D\")\n    \n    hex_string = hex_string.strip(\"\
    E\")\n    \n    hex_string = hex_string.strip(\"F\")\n    \n    hex_string = hex_string.strip(\"\
    A\")\n    \n    hex_string = hex_string.strip(\"C\")\n    \n    hex_string = hex_string.strip(\"\
    B\")\n    \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppprtdqxo.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppprtdqxo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppprtdqxo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz0_g04oj.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz0_g04oj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz0_g04oj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    if num == \"\"\
    \n        error(\"The input string cannot be empty\")\n    \n    if num == \"\
    0\"\n        hex_key = 0\n    \n    if num == \"1\"\n        hex_key = 1\n   \
    \ \n    if num == \"2\"\n        hex_key = 2\n    \n    if num == \"3\"\n    \
    \    hex_key = 3\n    \n    if num == \"4\"\n        hex_key = 4\n    \n    if\
    \ num == \"5\"\n        hex_key = 5\n    \n    if num == \"6\"\n        hex_key\
    \ = 6\n    \n    if num == \"7\"\n        hex_key = 7\n    \n    if num == \"\
    8\"\n        hex_key = 8\n    \n    if num == \"9\"\n        hex_key = 9\n   \
    \ \n    if num == \"A\"\n        hex_key = 11\n    \n    if num == \"B\"\n   \
    \     hex_key = 13\n    \n    if num == \"C\"\n        hex_key = 17\n    \n  \
    \  if num == \"D\"\n        hex_key = 19\n    \n    if num == \"E\"\n        hex_key\
    \ = 23\n    \n    if num == \"F\"\n        hex_key = 29\n    \n    if num == \"\
    10\"\n        hex_key = 10\n    \n    if num == \"11\"\n        hex_key = 11\n\
    \    \n    if num == \"12\"\n        hex_key = 12\n    \n    if num == \"13\"\n\
    \        hex_key = 13\n    \n    if num == \"14\"\n        hex_key = 14\n    \n\
    \    if num == \"15\"\n        hex_key = 15\n    \n    if num == \"16\"\n    \
    \    hex_key = 16\n    \n    if num == \"17\"\n        hex_key = 17\n    \n  \
    \  if num == \"18\"\n        hex_key = 18\n    \n    if num == \"19\"\n      \
    \  hex_key = 19\n    \n    if num == \"20\"\n        hex_key = 20\n    \n    if\
    \ num == \"21\"\n        hex_key = 21\n    \n    if num == \"22\"\n        hex_key\
    \ = 22\n    \n    if num == \"23\"\n        hex_key = 23\n    \n    if num ==\
    \ \"24\"\n        hex_key = 24\n    \n    if num == \"25\"\n        hex_key =\
    \ 25\n    \n    if num == \"26\"\n        hex_key = 26\n    \n    if num == \"\
    27\"\n        hex_key = 27\n    \n    if num == \"28\"\n        hex_key = 28\n\
    \    \n    if num == \"29\"\n        hex_key = 29\n    \n    if num == \"30\"\n\
    \        hex_key = 30\n    \n    if num == \"31\"\n        hex_key = 31\n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqni8e_sx.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqni8e_sx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = split(num, \"0123456789ABCDEF\"\
    )\n    local primes = primes_list(digits)\n    local primes_count = 0\n    \n\
    \    for prime in primes do\n        if prime == 2 then\n            primes_count\
    \ = primes_count+1\n        end\n    end\n    \n    return primes_count\nend\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that receives a string and returns the number of uppercase letters\
    \ in the string.\nExamples:\nFor str = \"AB\" the output should be 1.\nFor str\
    \ = \"1077E\" the output should be 2.\nFor str = \"ABED1A33\" the output should\
    \ be 4.\nFor str = \"123456789ABCDEF0\" the output should be 6.\nFor str = \"\
    2020\" the output should be 2.\nFor str = \" \" the output should be 0.\nFor str\
    \ = \" \" the output should be 0.\nFor str = \" \" the output should be 0.\nFor\
    \ str = \"a\" the output should be 1.\nFor str = \"A\" the output should be 1.\n\
    For str = \"A\" the output should be 1.\nFor str = \"A\" the output should be\
    \ 1.\nFor str = \"A\" the output should be 1.\nFor str = \"A\" the output should\
    \ be 1.\nFor str = \"A\" the output should be 1.\nFor str = \"A\" the output should\
    \ be 1.\nFor str = \"A\" the output should be 1.\nFor str = \"A\" the output should\
    \ be 1.\nFor str = \"A\" the output should be 1.\nFor str = \"A\" the output should\
    \ be 1.\nFor str = \"A\" the output should be 1.\nFor str = \"A\" the output should\
    \ be 1.\nFor str = \"A\" the output should be 1.\nFor str = \"A\" the output should\
    \ be 1.\nFor str = \"A\" the output should be 1.\nFor str = \"A\" the output should\
    \ be 1.\nFor str = \"A\" the output should be 1.\nFor str = \"A\" the output should\
    \ be 1.\nFor str = \"A\" the output should be 1.\nFor str = \"A\" the output should\
    \ be 1.\nFor str = \"A\" the output should be 1.\nFor str = \"A\" the output should\
    \ be 1.\nFor str = \"A\" the output should be 1.\nFor str = \"A\" the output should\
    \ be 1.\nFor str = \"A\" the output should be 1.\nFor str = \"A\" the output should\
    \ be 1.\nFor str = \"\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8p7yp7hd.jl:24\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp8p7yp7hd.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    For num = \"AB\" the output should\
    \ be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\"\
    \ the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes(num) \n    \n    primes_count\
    \ = primes.count \n    \n    primes_count_2 = primes_count * primes_count \n \
    \   \n    primes_count_3 = primes_count_2 * primes_count \n    \n    primes_count_4\
    \ = primes_count_3 * primes_count \n    \n    primes_count_5 = primes_count_4\
    \ * primes_count \n    \n    primes_count_6 = primes_count_5 * primes_count \n\
    \    \n    primes_count_7 = primes_count_6 * primes_count \n    \n    primes_count_8\
    \ = primes_count_7 * primes_count \n    \n    primes_count_9 = primes_count_8\
    \ * primes_count \n    \n    primes_count_10 = primes_count_9 * primes_count \n\
    \    \n    primes_count_11 = primes_count_10 * primes_count \n    \n    primes_count_12\
    \ = primes_count_11 * primes_count \n    \n    primes_count_13 = primes_count_12\
    \ * primes_count \n    \n    primes_count_14 = primes_count_13 * primes_count\
    \ \n    \n    primes_count_15 = primes_count_14 * primes_count \n    \n    primes_count_16\
    \ = primes_count_15 * primes_count \n    \n    primes_count_17 = primes_count_16\
    \ * primes_count \n    \n    primes_count_18 = primes_count_17 * primes_count\
    \ \n    \n    primes_count_19 = primes_count_18 * primes_count \n    \n    primes_count_20\
    \ = primes_count_19 * primes_count \n    \n    primes_count_21 = primes_count_20\
    \ * primes_count \n    \n    primes_count_22 = primes_count_21 * primes_count\
    \ \n    \n    primes_count_23 = primes_count_22 * primes_count \n    \n    primes_count_24\
    \ = primes_count_23 * primes_count \n    \n    primes_count_25 = primes_count_24\
    \ * primes_count \n    \n    primes_count_26 = primes_count_25 * primes_count\
    \ \n    \n    primes_count_27 = primes_count_26 * primes_count \n    \n    primes_count_28\
    \ = primes_count_27 * primes_count \n    \n    primes_count_29 = primes_count_28\
    \ * primes_count \n    \n    primes_count_30 = primes_count_29 * primes_count\
    \ \n    \n    primes_count_31 = primes_count_30 * primes_count \n\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvsbnkai9.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvsbnkai9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvsbnkai9.jl:1\n"
  exit_code: 1
  status: Exception
