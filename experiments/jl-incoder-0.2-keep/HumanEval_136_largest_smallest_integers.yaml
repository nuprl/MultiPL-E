name: HumanEval_136_largest_smallest_integers
language: julia
prompt: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
  \    the largest of negative integers, and 'b' is the smallest\n    of positive\
  \ integers in a list.\n    If there is no negative or positive integers, return\
  \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
  \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
  \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
  \ Nothing}, Union{Int64, Nothing}} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t\
  @test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1,\
  \ 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2,\
  \ 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
  \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing,\
  \ nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
  \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
  \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
  \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
completions: ["    if all(isnothing(el) for el in lst)\n        return (None, None)\n\
    \    elseif all(el < 0 for el in lst)\n        return (None, min(el for el in\
    \ lst if el < 0))\n    elseif all(el > 0 for el in lst)\n        return (min(el\
    \ for el in lst if el > 0), None)\n    else\n        return (min(el for el in\
    \ lst if el > 0), min(el for el in lst if el < 0))\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns a tuple (a, b), where 'a' is the largest\
    \ of positive integers, and 'b' is the smallest of negative integers in a list.\n\
    If there is no negative or positive integers, return them as None.", "    if all(x\
    \ < 0 for x in lst)\n        (a, b) = (None, None)\n    else\n        (a, b) =\
    \ (max(lst), min(lst))\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.", "    if length(lst) == 0 \n        return None, None\n\
    \    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n    \n    if largest\
    \ < smallest \n        return largest, smallest\n    else \n        return None,\
    \ None\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.",
  "    if length(lst) == 0\n        return (None, None)\n    elseif length(lst) ==\
    \ 1\n        return (lst[0], None)\n    else\n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise\nWrite a function called largest_smallest_integers_list\
    \ that takes a list of integers and returns the largest and smallest integers\
    \ in the list.", "    if all(isnothing(el) for el in lst)\n        return (None,\
    \ None)\n    elseif all(el < 0 for el in lst)\n        return (None, min(el for\
    \ el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n        return\
    \ (min(el for el in lst if el > 0), None)\n    else\n        return (min(el for\
    \ el in lst if el > 0), min(el for el in lst if el < 0))\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nlargest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n\
    <code language=julia-1.3>\nlargest_smallest_integers([])\n</cell>\n<code language=julia-1.3>\n\
    largest_smallest_integers([0])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of positive integers in a list.", "    if all(isnothing(el)\
    \ for el in lst)\n        return None, None\n    elseif all(el < 0 for el in lst)\n\
    \        return None, min(el for el in lst if el < 0)\n    elseif all(el > 0 for\
    \ el in lst)\n        return max(el for el in lst if el > 0), None\n    else\n\
    \        return max(el for el in lst if el > 0), min(el for el in lst if el <\
    \ 0)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector and a number as input, and returns the number of times the number appears\
    \ in the vector.", "    if length(lst) == 0 \n        return None, None\n    \n\
    \    largest = minimum(lst)\n    smallest = maximum(lst)\n    return largest,\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>", "    if lst.is_empty\n \
    \       return None, None\n    end\n    largest = minimum(lst)\n    smallest =\
    \ maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of numbers and returns the sum of the numbers\
    \ in the list. \nIf there are no numbers in the list, return 0.\nIf there are\
    \ multiple numbers in the list, return the sum of the numbers in the list.", " \
    \   if lst.is_empty\n        return (None, None)\n    elseif lst.head < 0\n  \
    \      return (lst.last, None)\n    elseif lst.head > 0\n        return (None,\
    \ lst.first)\n    else\n        return (None, None)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements of the vector.", "    if all(x -> x < 0, lst)\n     \
    \   (a, b) = (None, None)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (lst[end],\
    \ lst[1])\n    else\n        (a, b) = (lst[end], lst[1])\n    end\n    return\
    \ (a, b)\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n\
    \        return (None, None)\n    end\n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return (largest, smallest)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns a list of all numbers from 1 to n that are\
    \ divisible by 3.", "    if all(isnothing(el) for el in lst)\n        return None,\
    \ None\n    else\n        largest = minimum(el for el in lst if el < 0)\n    \
    \    smallest = maximum(el for el in lst if el > 0)\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if all(x < 0 for x in\
    \ lst)\n        (a, b) = (None, min(x for x in lst if x < 0))\n    elseif all(x\
    \ > 0 for x in lst)\n        (a, b) = (min(x for x in lst if x > 0), None)\n \
    \   else\n        (a, b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of integers and returns\
    \ a vector of booleans indicating whether each integer is even or odd.", "   \
    \ if length(lst) == 0 \n        return None, None\n    \n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector.", "    if lst == []\n        return (None,\
    \ None)\n    elseif lst == [0]\n        return (None, None)\n    elseif lst ==\
    \ [-i for i in lst]\n        return (None, -min(lst))\n    else\n        largest\
    \ = maximum(lst, key=abs)\n        smallest = minimum(lst, key=abs)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nlargest_smallest_integers",
  "    if length(lst) == 0 \n        return None, None\n    \n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the largest and smallest numbers in\
    \ a list.\nIf there are no numbers in the list, return (None, None).", "    if\
    \ lst == []\n        return (None, None)\n    elseif lst == [Int64(0)]\n     \
    \   return (None, None)\n    elseif lst == [Int64(-1)]\n        return (Int64(-1),\
    \ Int64(0))\n    elseif lst == [Int64(1)]\n        return (Int64(1), Int64(0))\n\
    \    elseif lst == [Int64(-2)]\n        return (Int64(-2), Int64(0))\n    elseif\
    \ lst == [Int64(-3)]\n        return (Int64(-3), Int64(0))\n    elseif lst ==\
    \ [Int64(-4)]\n        return (Int64(-4), Int64(0))\n    elseif lst == [Int64(-5)]\n\
    \        return (Int64(-5), Int64(0))\n    elseif lst == [Int64(-6)]\n       \
    \ return (Int64(-6), Int64(0))\n    elseif lst == [Int64(-7)]\n        return\
    \ (Int64(-7), Int64(0))\n    elseif lst == [Int64(-8)]\n        return (Int64(-8),\
    \ Int64(0))\n    elseif lst == [Int64(-9)]\n        return (Int64(-9), Int64(0))\n\
    \    elseif lst == [Int64(-10)]\n        return (Int64(-10), Int64(0))\n    elseif\
    \ lst == [Int64(-11)]\n        return (Int64(-11), Int64(0))\n    elseif lst ==\
    \ [Int64(-12)]\n        return (Int64(-12), Int64(0))\n    elseif lst == [Int64(-13)]\n\
    \        return (Int64(-13), Int64(0))\n    elseif lst == [Int64(-14)]\n     \
    \   return (Int64(-14), Int64(0))\n    elseif lst == [Int64(-15)]\n        return\
    \ (Int64(-15), Int64(0))\n    elseif lst == [Int64(-16)]\n        return (Int64(-16),\
    \ Int64(0))\n    elseif lst == [Int64(-17)]\n        return (Int64(-17), Int64(0))\n\
    \    elseif lst == [Int64(-18)]\n        return (Int64(-18), Int64(0))\n    elseif\
    \ lst == [Int64(-19)]\n        return (Int64(-19), Int64(0))\n    elseif lst ==\
    \ [Int64(-20)]\n        return (Int64(-20), Int64(0))\n    elseif lst == [Int64(-21)]\n\
    \        return (Int64(-21), Int64(0))\n    elseif lst == [Int64(-22)]\n     \
    \   return (Int64(-22), Int64(0))", "    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the sum of the numbers in the list. \nIf the list is empty, return\
    \ 0.", "    if length(lst) == 0 \n        return (None, None)\n    elseif length(lst)\
    \ == 1 \n        return (lst[1], lst[1])\n    elseif all(x -> x < 0, lst) \n \
    \       return (None, lst[1])\n    elseif all(x -> x > 0, lst) \n        return\
    \ (lst[1], None)\n    else\n        largest = maximum(lst)\n        smallest =\
    \ minimum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector.", "    if lst.is_empty\n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector.", "    if all(isnothing(el)\
    \ for el in lst)\n        return (None, None)\n    else\n        largest = minimum(el\
    \ for el in lst if el < 0)\n        smallest = maximum(el for el in lst if el\
    \ > 0)\n        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns a new vector where each\
    \ element is the sum of the original vector except for the first and last elements.\
    \ For example,", "    if all(x < 0 for x in lst)\n        return (None, min(x\
    \ for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n        return\
    \ (min(x for x in lst if x > 0), None)\n    else\n        return (None, None)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n\
    \        return None, None\n    end\n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector and returns the sum of the absolute values\
    \ of the elements in the vector.", "    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the largest and smallest numbers in a list.", "    if lst.is_empty\n\
    \        return (None, None)\n    elseif lst.is_one\n        return (lst.last,\
    \ None)\n    elseif lst.is_two\n        return (lst.last, lst.first)\n    elseif\
    \ lst.is_three\n        return (lst.last, lst.first, lst.last)\n    elseif lst.is_four\n\
    \        return (lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_five\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last)\n    elseif\
    \ lst.is_six\n        return (lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first)\n    elseif lst.is_seven\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_eight\n       \
    \ return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first)\n    elseif lst.is_nine\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_ten\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_eleven\n      \
    \  return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_twelve\n      \
    \  return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_thirteen\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last)\n \
    \   elseif lst.is_fourteen\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last)\n    elseif lst.is_fifteen\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.",
  "    if all(x < 0 for x in lst)\n        (a, b) = (None, 0)\n    elseif all(x >\
    \ 0 for x in lst)\n        (a, b) = (0, 0)\n    else\n        (a, b) = minimum(lst),\
    \ maximum(lst)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector and a number as input, and returns the number\
    \ of times the number appears in the vector.", "    if all(x -> x < 0, lst)\n\
    \        (a, b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) =\
    \ (0, 0)\n    else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n   \
    \ return (a, b)\nend\n</cell>\n<code language=julia-1.3>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers in a list.", "    if all(isnothing(el) for el\
    \ in lst)\n        return (None, None)\n    else\n        largest = minimum(el\
    \ for el in lst if el < 0)\n        smallest = maximum(el for el in lst if el\
    \ > 0)\n        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns a list of all the prime numbers less than or\
    \ equal to a given number.", "    if length(lst) == 0 \n        return None, None\n\
    \    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return\
    \ largest, smallest\nend\n</cell>\n<code language=julia-1.4>", "    if length(lst)\
    \ == 0\n        return (None, None)\n    elseif length(lst) == 1\n        return\
    \ (lst[1], lst[1])\n    elseif length(lst) == 2\n        return (lst[1], lst[1])\n\
    \    else\n        largest = maximum(lst)\n        smallest = minimum(lst)\n \
    \       return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.", "    if length(lst) == 0 \n        return nothing,\
    \ nothing \n    else \n        largest = minimum(lst) \n        smallest = maximum(lst)\
    \ \n        return largest, smallest \nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns a vector where each element is the\
    \ sum of the squares of the elements in the original vector. For example, square_sum([1,\
    \ 2, 3, 4]) should return [4, 9, 16, 25].", "    if all(x < 0 for x in lst)\n\
    \        (a, b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for\
    \ x in lst)\n        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n\
    \        (a, b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        return (None, None)\n\
    \    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ == 2 \n        return (lst[1], lst[1])\n    elseif length(lst) > 2 \n      \
    \  largest = maximum(lst)\n        smallest = minimum(lst)\n        return (largest,\
    \ smallest)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the product of\
    \ the integers in the vector. \nWrite a function that takes a vector of integers\
    \ and returns the largest and smallest integers in the vector. \nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the product of\
    \ the integers in the vector. \nWrite a function that takes a vector of integers\
    \ and returns the largest and smallest integers in the vector. \nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the product of\
    \ the integers in the vector. ", "    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, Nothing)\n    elseif all(x > 0 for x in lst)\n        (a, b) = (Nothing,\
    \ None)\n    else\n        (a, b) = (min(lst), max(lst))\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector.", "    if length(lst) == 0 \n       \
    \ return None, None\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    if largest < smallest \n        return largest, smallest\n    else\n    \
    \    return None, None\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ of the vector. Test it on $[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9]$.", "    if all(x < 0 for x in lst)\n        return (None,\
    \ min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n        return\
    \ (min(x for x in lst if x > 0), None)\n    else\n        return (None, None)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of times a value appears in a list.", "    if all(x < 0 for x in lst)\n\
    \        (a, b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for\
    \ x in lst)\n        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n\
    \        (a, b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and a number as input, and returns\
    \ the sum of the numbers in the vector that are less than or equal to the given\
    \ number. For example, if the input vector is [4, 6, 3, 9] and you call the function\
    \ with 7 as input, the output should be 5.", "    if lst == []\n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    if largest < smallest\n        return largest, smallest\n    else\n     \
    \   return None, None\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if length(lst) == 0 \n        return None, None\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if lst.is_empty\n        return None, None\n    end\n\
    \    largest = minimum(lst)\n    smallest = maximum(lst)\n    return largest,\
    \ smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.",
  "    if all(x < 0 for x in lst)\n        return (None, min(x for x in lst if x >=\
    \ 0))\n    elseif all(x >= 0 for x in lst)\n        return (min(x for x in lst\
    \ if x < 0), None)\n    else\n        return (None, None)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if all(isnothing(el) for el in lst)\n       \
    \ return (None, None)\n    elseif all(el < 0 for el in lst)\n        return (None,\
    \ min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n   \
    \     return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if lst.is_empty\n        return\
    \ (None, None)\n    elseif lst.head < 0\n        return (lst.last, None)\n   \
    \ elseif lst.head > 0\n        return (None, lst.first)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function called\
    \ largest_smallest_integers_list that takes a list of integers and returns the\
    \ largest and smallest integers in the list.", "    if all(x < 0 for x in lst)\n\
    \        return (None, min(x for x in lst if x >= 0))\n    elseif all(x > 0 for\
    \ x in lst)\n        return (min(x for x in lst if x <= 0), None)\n    else\n\
    \        return (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if all(x -> x < 0, lst)\n        (a, b) = (None, None)\n    elseif all(x ->\
    \ x > 0, lst)\n        (a, b) = (lst, None)\n    else\n        (a, b) = sort(lst)\n\
    \    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n</cell>\n\
    <text>\nExercise: Write a function that returns the largest and smallest integers\
    \ in a vector, where 'a' is the largest of negative integers, and 'b' is the smallest\
    \ of positive integers in a list.", "    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the largest and smallest numbers in a list.", "    if length(lst) == 0 \n  \
    \      return (None, None)\n    elseif length(lst) == 1 \n        return (lst[1],\
    \ lst[1])\n    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n   \
    \ elseif length(lst) > 2 \n        largest = maximum(lst)\n        smallest =\
    \ minimum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector as input and returns a vector\
    \ where each element is the sum of the squares of the elements in the input vector.",
  "    if length(lst) == 0 \n        return None, None\n    end\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector.", "    if length(lst) == 0 \n        return\
    \ None, None\n    elseif length(lst) == 1 \n        return lst[1], lst[1]\n  \
    \  elseif all(x < 0 for x in lst) \n        return None, min(lst)\n    elseif\
    \ all(x > 0 for x in lst) \n        return min(lst), None\n    else\n        smallest,\
    \ largest = lst[1], lst[1]\n        for i in 2:length(lst)\n            if lst[i]\
    \ < smallest \n                largest = lst[i]\n            elseif lst[i] > largest\
    \ \n                smallest = lst[i]\n            else\n                break\n\
    \        end\n        return (smallest, largest)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if lst.is_empty\n        return None, None\n    elseif\
    \ lst.is_universe\n        largest = minimum(lst)\n        smallest = maximum(lst)\n\
    \        return largest, smallest\n    else\n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return largest, smallest\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ integers in a list.\nIf there are no integers, return 0.\nIf there are multiple\
    \ integers, return only the largest one.", "    if all(x -> x < 0, lst)\n    \
    \    (a, b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (0,\
    \ 0)\n    else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return\
    \ (a, b)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ and returns the sum of the squares of the elements of the vector. Test it on\
    \ $[1,2,3]$ and $[2,3,4]$.", "    if all(isnothing(el) for el in lst)\n      \
    \  return (None, None)\n    elseif all(el < 0 for el in lst)\n        return (None,\
    \ min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n   \
    \     return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ integers in a list that are\nevenly divisible by 3.", "    if length(lst) ==\
    \ 0 \n        return (None, None)\n    elseif length(lst) == 1 \n        return\
    \ (lst[1], lst[1])\n    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) > 2 \n        largest, smallest = largest_smallest_integers(lst[2:end])\n\
    \        return (largest, smallest)\n    elseif length(lst) == 1 \n        return\
    \ (lst[1], lst[1])\n    else\n        return (None, None)\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector.", "    if all(isnothing(el) for el in\
    \ lst)\n        return None, None\n    \n    largest = minimum(el for el in lst\
    \ if el < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return largest,\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise\nWrite a function called largest_smallest_integers_2\
    \ that returns a tuple (a, b), where 'a' is the largest of negative integers,\
    \ and 'b' is the smallest of positive integers in a list.", "    if all(x < 0\
    \ for x in lst)\n        (a, b) = (None, min(x for x in lst if x < 0))\n    elseif\
    \ all(x > 0 for x in lst)\n        (a, b) = (min(x for x in lst if x > 0), None)\n\
    \    else\n        (a, b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the largest and smallest numbers\
    \ in a list.", "    if length(lst) == 0\n        return (None, None)\n    end\n\
    \    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return (largest,\
    \ smallest)\nend\n</cell>\n<text>\nExercise\nWrite a function called largest_smallest_integers_2\
    \ that returns the largest and smallest integers in a list.", "    if all(x <\
    \ 0 for x in lst)\n        (a, b) = (None, None)\n    elseif all(x > 0 for x in\
    \ lst)\n        (a, b) = (min(lst), max(lst))\n    else\n        (a, b) = (None,\
    \ None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector and returns the sum of the absolute values of the\
    \ elements in the vector.", "    if all(x < 0 for x in lst)\n        (a, b) =\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a, b)\
    \ = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None, None\n    \n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers squared. \nFor example, if the input vector is [4, 6, 2, 9,\
    \ 11], your function should return 52.", "    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(el < 0 for el in lst)\n        return\
    \ None, min(el for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n\
    \        return max(el for el in lst if el > 0), None\n    else\n        return\
    \ max(el for el in lst if el > 0), min(el for el in lst if el < 0)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector. \nIf the vector is empty,\
    \ return 0.", "    if lst.is_empty\n        return (None, None)\n    elseif all(lst.>=0)\n\
    \        return (max(lst), min(lst))\n    else\n        return (None, None)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of times a given element appears in a given list.", "    if lst.is_empty\n\
    \        return (None, None)\n    elseif lst.head < 0\n        return (lst.last,\
    \ None)\n    elseif lst.head > 0\n        return (None, lst.head)\n    else\n\
    \        return (None, None)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a vector and returns the sum of the absolute values of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the squares of the elements in the vector. \n\
    Write a function that takes a vector and returns the sum of the squares of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the squares of the elements in the vector. \n\
    Write a function that takes a vector and returns the sum of the squares of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the squares of the elements in the vector. \n\
    Write a function that takes a vector and returns the sum of the squares of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the squares of the elements in the vector. \n\
    Write a function that takes a vector and returns the sum of the squares of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the squares of the elements in the vector. \n\
    Write a function that takes a vector and returns the sum of the squares of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the squares of the elements in the vector. \n\
    Write a function that takes a vector and returns the sum of the squares of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the squares of the elements in the vector. \n\
    Write a function that takes a vector and returns the sum of the squares of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the squares of the elements in the vector. \n\
    Write a function that takes a vector and returns the sum of the squares of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the squares of the elements in the vector. \n\
    Write a function that takes a vector and returns the sum of the squares of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the ", "    if length(lst) == 0 \n        return (None, None)\n    elseif\
    \ length(lst) == 1 \n        return (lst[1], lst[1])\n    elseif length(lst) ==\
    \ 2 \n        return (lst[1], lst[1])\n    elseif length(lst) > 2 \n        largest\
    \ = maximum(lst)\n        smallest = minimum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements of the vector. \n\
    For example, if the vector is [3, -4, 2, -5, 6, -7, 8], the function should return\
    \ 15.", "    if all(isnothing(el) for el in lst)\n        return None, None\n\
    \    end\n    \n    largest = minimum(el for el in lst if el < 0)\n    smallest\
    \ = maximum(el for el in lst if el > 0)\n    return largest, smallest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers representing the number of times each integer appears in\
    \ the vector.", "    if all(isnothing(el) for el in lst)\n        return None,\
    \ None\n    elseif all(isnothing(el) for el in lst[1 : (end-1)])\n        return\
    \ lst[1], None\n    elseif all(isnothing(el) for el in lst[1 : end])\n       \
    \ return lst[1], lst[1]\n    else\n        largest, smallest = lst[1], lst[1]\n\
    \        for el in lst[2:end]\n            if el > largest\n                largest\
    \ = el\n            elseif el < smallest\n                smallest = el\n    \
    \        else\n                break\n        end\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0\n\
    \        return (None, None)\n    elseif length(lst) == 1\n        return (lst[0],\
    \ None)\n    else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 2:\
    \ Write a function that returns the number of times a value appears in a list.",
  "    if lst.is_empty\n        return (None, None)\n    elseif lst.head < 0\n   \
    \     return (lst.last, None)\n    elseif lst.head > 0\n        return (lst.head,\
    \ lst.last)\n    else\n        return (None, None)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers in a\
    \ list.", "    if all(isnothing(el) for el in lst)\n        return (None, None)\n\
    \    elseif all(isnothing(el) for el in lst)\n        return (None, None)\n  \
    \  elseif all(el < 0 for el in lst)\n        return (None, min(el for el in lst\
    \ if el < 0))\n    elseif all(el > 0 for el in lst)\n        return (min(el for\
    \ el in lst if el > 0), None)\n    else\n        return (min(el for el in lst\
    \ if el > 0), min(el for el in lst if el < 0))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if all(x -> x < 0, lst)\n        (a, b) = (None, 0)\n    elseif all(x -> x\
    \ > 0, lst)\n        (a, b) = (0, 0)\n    else\n        (a, b) = minimum(lst),\
    \ maximum(lst)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector and returns the sum of the absolute values\
    \ of the elements of the vector.", "    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the number of times a given value appears in a list.", "    if\
    \ length(lst) == 0 \n        return None, None\n    \n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the number of integers in a\
    \ list that are\nless than a given value.", "    if length(lst) == 0\n       \
    \ return (None, None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n\
    \    elseif all(x -> x < 0, lst)\n        return (None, min(lst))\n    elseif\
    \ all(x -> x > 0, lst)\n        return (min(lst), None)\n    else\n        smallest\
    \ = min(lst)\n        largest = max(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of positive integers in a list.", "    if all(x -> x < 0, lst)\n    \
    \    (a, b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (0,\
    \ 0)\n    else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return\
    \ (a, b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the number of elements that are not equal to zero.", "    if length(lst)\
    \ == 0\n        return (None, None)\n    end\n    largest = minimum(lst)\n   \
    \ smallest = maximum(lst)\n    return (largest, smallest)\nend\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector. Test it on some test cases.", "    if length(lst)\
    \ == 0 \n        return None, None\n    elseif length(lst) == 1 \n        return\
    \ lst[1], lst[1]\n    elseif all(x < 0 for x in lst) \n        return None, min(lst)\n\
    \    elseif all(x > 0 for x in lst) \n        return max(lst), None\n    else\
    \ \n        return max(lst), min(lst)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the sum of the elements\
    \ in the vector. \nIf there are no elements in the vector, return 0.", "    if\
    \ lst.is_empty\n        return (None, None)\n    elseif lst.head < 0\n       \
    \ return (lst.last, None)\n    elseif lst.head > 0\n        return (None, lst.first)\n\
    \    else\n        return (None, None)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements of the vector. \nFor example, \n    sum([1, 2, 3])\n\
    should return 6.", "    if length(lst) == 0 \n        return None, None\n    \n\
    \    largest = minimum(lst)\n    smallest = maximum(lst)\n    \n    if largest\
    \ < smallest \n        return largest, smallest\n    else \n        return None,\
    \ None\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list of\
    \ numbers and returns the sum of the numbers in the list.", "    if all(isnothing(el)\
    \ for el in lst)\n        return None, None\n    elseif all(isnothing(el) for\
    \ el in lst[1 : (end-1)])\n        return None, lst[end]\n    else\n        largest\
    \ = minimum(lst[1 : (end-1)])\n        smallest = maximum(lst[1 : (end-1)])\n\
    \        return largest, smallest\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector and returns the sum of the absolute values\
    \ of the elements in the vector. For example,", "    if lst.is_empty\n       \
    \ return (None, None)\n    elseif lst.head < 0\n        return (lst.last, None)\n\
    \    elseif lst.head > 0\n        return (None, lst.head)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector and returns the sum of the absolute values of the elements in\
    \ the vector.", "    if lst.is_empty\n        return None, None\n    largest,\
    \ smallest = lst.minmax_element()\n    if largest < 0\n        return None, None\n\
    \    if smallest > 0\n        return largest, smallest\n    return largest, None\n\
    end", "    if length(lst) == 0\n        return (None, None)\n    end\n    \n \
    \   largest = minimum(lst)\n    smallest = maximum(lst)\n    return (largest,\
    \ smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of numbers and returns the sum of the numbers. If the list is empty, return\
    \ 0.", "    if all(isnothing(el) for el in lst)\n        return None, None\n \
    \   elseif all(isnothing(el) for el in lst)\n        return None, None\n    elseif\
    \ all(el < 0 for el in lst)\n        return None, min(el for el in lst if el <\
    \ 0)\n    elseif all(el > 0 for el in lst)\n        return max(el for el in lst\
    \ if el > 0), None\n    else\n        return max(el for el in lst if el > 0),\
    \ min(el for el in lst if el < 0)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=julia,functional-programming |>\n<code>", "    if lst.empty\n      \
    \  return (None, None)\n    elseif all(lst.>=0)\n        return (max(lst), min(lst))\n\
    \    else\n        return (None, None)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ absolute values of the integers in the vector.", "    if length(lst) == 0 \n\
    \        return None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if length(lst) == 0\n        return (None, None)\n    elseif length(lst) ==\
    \ 1\n        return (lst[0], None)\n    else\n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements of the vector. For example,",
  "    if length(lst) == 0 \n        return None, None\n    end\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and returns the sum\
    \ of the numbers. If the list is empty, return 0.", "    if all(x < 0 for x in\
    \ lst)\n        return (None, min(x for x in lst if x > 0))\n    elseif all(x\
    \ > 0 for x in lst)\n        return (min(x for x in lst if x < 0), None)\n   \
    \ else\n        return (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n\
    </cell>\n<text>\nExercise 2\nWrite a function called largest_positive_integers\
    \ which takes a vector of integers and returns the largest positive integer in\
    \ the vector.", "    if length(lst) == 0 \n        return (), ()\n    \n    largest,\
    \ smallest = Inf, -Inf\n    for i in lst\n        if i < smallest\n          \
    \  smallest = i\n        elseif i > largest\n            largest = i\n       \
    \ end\n    end\n    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0\n        return (None, None)\n    end\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return (largest, smallest)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the sum of the elements\
    \ in the vector. \nIf there are no elements in the vector, return 0.", "    if\
    \ all(isnothing(lst))\n        return None, None\n    elseif all(isnothing(lst[1:end-1]))\n\
    \        return lst[1], None\n    elseif all(isnothing(lst[2:end]))\n        return\
    \ lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1],\
    \ lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n\
    \    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif\
    \ all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n\
    \        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n    \
    \    return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return\
    \ lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1],\
    \ lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n\
    \    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif\
    \ all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n\
    \        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n    \
    \    return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return\
    \ lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1],\
    \ lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n\
    \    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif\
    \ all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n\
    \        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n    \
    \    return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return\
    \ lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1],\
    \ lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n\
    \    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif\
    \ all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n\
    \        return lst[1], lst[2]", "    if all(isnothing(el) for el in lst)\n  \
    \      return None, None\n    end\n    largest = minimum(el for el in lst if el\
    \ < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return largest,\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>", "    if lst.is_empty\n \
    \       return (None, None)\n    elseif lst.is_one\n        return (lst.last,\
    \ None)\n    else\n        largest = lst.last\n        smallest = lst.first\n\
    \        for elt in lst[2:end]\n            if elt > largest\n               \
    \ largest = elt\n            elseif elt < smallest\n                smallest =\
    \ elt\n            end\n        end\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector.", "    if length(lst)\
    \ == 0 \n        return None, None\n    end\n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if lst.is_empty\n        return None, None\n    end\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector. Test it on $[1,2,3]$.", "    if\
    \ length(lst) == 0\n        return (None, None)\n    end\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return (largest, smallest)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns a vector where each\
    \ element is the sum of the squares of the elements in the original vector. For\
    \ example, square_of_sums([1, 2, 3, 4]) should return [4, 9, 16, 25].", "    if\
    \ lst.is_empty\n        return (None, None)\n    elseif lst.is_one\n        return\
    \ (lst.last, None)\n    elseif lst.is_two\n        return (lst.last, lst.first)\n\
    \    elseif lst.is_three\n        return (lst.last, lst.first, lst.last)\n   \
    \ elseif lst.is_four\n        return (lst.last, lst.first, lst.last, lst.first)\n\
    \    elseif lst.is_five\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last)\n    elseif lst.is_six\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first)\n    elseif lst.is_seven\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_eight\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first)\n    elseif lst.is_nine\n        return (lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last)\n \
    \   elseif lst.is_ten\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_eleven\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_twelve\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_thirteen\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n\
    \    elseif lst.is_fourteen\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first)\n    elseif lst.is_fifteen\n        return (lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.", "    if\
    \ length(lst) == 0 \n        return (None, None)\n    elseif length(lst) == 1\
    \ \n        return (lst[1], lst[1])\n    elseif length(lst) == 2 \n        return\
    \ (lst[1], lst[1])\n    elseif length(lst) > 2 \n        largest = maximum(lst)\n\
    \        smallest = minimum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ positive integers in a list.", "    if length(lst) == 0 \n        return nothing,\
    \ nothing \n    else \n        largest = minimum(lst) \n        smallest = maximum(lst)\
    \ \n        return largest, smallest \nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns a vector of integers\
    \ containing the first n integers of the vector.", "    if length(lst) == 0\n\
    \        return (None, None)\n    elseif length(lst) == 1\n        return (lst[0],\
    \ None)\n    else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function called largest_smallest_integers_2 that takes a list of numbers\
    \ and returns the largest and smallest numbers in the list.", "    if all(isnothing(el)\
    \ for el in lst)\n        return (None, None)\n    elseif all(el < 0 for el in\
    \ lst)\n        return (None, min(el for el in lst if el < 0))\n    elseif all(el\
    \ > 0 for el in lst)\n        return (min(el for el in lst if el > 0), None)\n\
    \    else\n        return (min(el for el in lst if el > 0), min(el for el in lst\
    \ if el < 0))\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function called\
    \ largest_smallest_integers_2 that returns two numbers, a and b, such that a\n\
    is the largest of negative integers, and b is the smallest of positive integers\
    \ in a list.\nIf there is no negative or positive integers, return them as None.",
  "    if length(lst) == 0\n        return (None, None)\n    elseif length(lst) ==\
    \ 1\n        return (lst[1], lst[1])\n    else\n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ integers in a list that are\nless than a given value.", "    if length(lst)\
    \ == 0\n        return (None, None)\n    elseif length(lst) == 1\n        return\
    \ (lst[0], None)\n    elseif all(x -> x < 0, lst)\n        return (None, lst[0])\n\
    \    elseif all(x -> x > 0, lst)\n        return (lst[-1], None)\n    else\n \
    \       largest = maximum(lst)\n        smallest = minimum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list as an argument and returns a list where all negative numbers\
    \ are replaced by 0s, and all positive numbers are replaced by 1s.", "    if length(lst)\
    \ == 0 \n        return None, None\n    end\n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements of the vector.", "    if lst.is_empty\n        return\
    \ (None, None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of elements in a list that are\nless than a given value.",
  "    if length(lst) == 0 \n        return None, None\n    end\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements of the vector. \nFor example, \n    abs_sum([-1, 2, -3])\
    \ == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1,\
    \ 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n   \
    \ abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2])\
    \ == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1,\
    \ -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n   \
    \ abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3])\
    \ == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1,\
    \ 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n   \
    \ abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3])\
    \ == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1,\
    \ 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n   \
    \ abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2])\
    \ == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1,\
    \ -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n   \
    \ abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3])\
    \ == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1,\
    \ 2, 3]) == 5\n    abs_sum([-1, -2]) == ", "    if lst.is_empty\n        return\
    \ (None, None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns a vector where each element is the sum of the\
    \ squares of the numbers in the vector.", "    if length(lst) == 0 \n        return\
    \ (None, None)\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns a vector of integers where the integers are the\
    \ sum of the integers in the original vector, except for those integers that are\
    \ divisible by 3.", "    if lst.is_empty\n        return (None, None)\n    elseif\
    \ lst.head < 0\n        return (lst.last, None)\n    elseif lst.head > 0\n   \
    \     return (None, lst.first)\n    else\n        return (None, None)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the sum of the numbers in the list. \nIf there are no numbers in\
    \ the list, return 0.", "    if all(isnothing(el) for el in lst)\n        return\
    \ None, None\n    elseif all(el < 0 for el in lst)\n        return None, min(el\
    \ for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n        return\
    \ max(el for el in lst if el > 0), None\n    else\n        return max(el for el\
    \ in lst if el > 0), min(el for el in lst if el < 0)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if lst == []\n        (a, b) = (None, None)\n\
    \    else\n        (a, b) = maximum(lst, lt=lt), minimum(lst, lt=lt)\n    end\n\
    \    return (a, b)\nend\n</cell>\n<text>\nlargest_smallest_integers_v2", "   \
    \ if lst.is_empty\n        return None, None\n    elseif lst.head < 0\n      \
    \  return None, lst.head\n    elseif lst.head > 0\n        return lst.head, None\n\
    \    else\n        return largest_smallest_integers(lst.tail)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector.", "    if length(lst) ==\
    \ 0 \n        return None, None\n    end\n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers in a list.",
  "    if length(lst) == 0 \n        return (None, None)\n    end\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return (largest, smallest)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.", "    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers in the vector.", " \
    \   if length(lst) == 0 \n        return None, None\n    \n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    \n    if largest < smallest \n        return\
    \ (largest, smallest)\n    else\n        return (None, None)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ in a list.", "    if lst.is_empty\n        return (None, None)\n    elseif lst.head\
    \ < 0\n        return (lst.last, None)\n    elseif lst.head > 0\n        return\
    \ (None, lst.first)\n    else\n        return (None, None)\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector.", "    if length(lst) ==\
    \ 0\n        return (None, None)\n    elseif length(lst) == 1\n        return\
    \ (lst[0], None)\n    else\n        largest = minimum(lst)\n        smallest =\
    \ maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if lst.is_empty\n        return (None, None)\n  \
    \  elseif lst.head < 0\n        return (lst.last, None)\n    elseif lst.head >\
    \ 0\n        return (lst.head, lst.last)\n    else\n        return (None, None)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers squared. \nIf there are no integers\
    \ in the vector, return 0.", "    if all(isnothing(el) for el in lst)\n      \
    \  return None, None\n    elseif all(el < 0 for el in lst)\n        return None,\
    \ min(el for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n    \
    \    return max(el for el in lst if el > 0), None\n    else\n        return max(el\
    \ for el in lst if el > 0), min(el for el in lst if el < 0)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector.", "    if all(isnothing(el)\
    \ for el in lst)\n        return (None, None)\n    else\n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2, 4, 1, 3,\
    \ 5, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and\
    \ returns the number of elements that are greater than zero.", "    if all(x ->\
    \ x < 0, lst)\n        (a, b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n \
    \       (a, b) = (0, 0)\n    else\n        (a, b) = minimum(lst), maximum(lst)\n\
    \    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of integers in a list that are\ndivisible by 7. For\
    \ example, given the list [7, 11, 13, 17, 19], your function\nshould return 3.",
  "    if length(lst) == 0\n        return (None, None)\n    elseif length(lst) ==\
    \ 1\n        return (lst[0], None)\n    elseif all(x -> x < 0, lst)\n        return\
    \ (None, lst[0])\n    elseif all(x -> x > 0, lst)\n        return (lst[-1], None)\n\
    \    else\n        largest = maximum(lst)\n        smallest = minimum(lst)\n \
    \       return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of times a given value appears in a given\
    \ list.", "    if all(x < 0 for x in lst)\n        (a, b) = (None, min(x for x\
    \ in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n        (a, b) = (min(x\
    \ for x in lst if x > 0), None)\n    else\n        (a, b) = (None, None)\n   \
    \ end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ in a list.", "    if lst.is_empty\n        return (None, None)\n    elseif lst.is_one\n\
    \        return (lst.last, None)\n    elseif lst.is_two\n        return (lst.last,\
    \ lst.first)\n    else\n        largest = lst.last\n        smallest = lst.first\n\
    \        for i in lst.tail\n            if i < largest\n                largest\
    \ = i\n            elseif i > smallest\n                smallest = i\n       \
    \     end\n        end\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of numbers and returns\
    \ the sum of the numbers in the list. \nIf the list is empty, return 0.\nIf the\
    \ list has one number, return that number.\nIf the list has two numbers, return\
    \ the sum of the two numbers.\nIf the list has three or more numbers, return the\
    \ sum of the first two numbers, then add the last number in the list.", "    if\
    \ all(x < 0 for x in lst)\n        return (None, min(x for x in lst if x < 0))\n\
    \    elseif all(x > 0 for x in lst)\n        return (min(x for x in lst if x >\
    \ 0), None)\n    else\n        return (None, None)\n    end\nend\n</cell>\n<text>\n\
    Exercise: Write a function that returns the largest and smallest numbers in a\
    \ list.", "    if lst.is_empty\n        return (None, None)\n    elseif lst.head\
    \ < 0\n        return (lst.last, None)\n    elseif lst.head > 0\n        return\
    \ (lst.head, lst.last)\n    else\n        return (None, None)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if all(x < 0 for x in lst)\n       \
    \ (a, b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in\
    \ lst)\n        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n    \
    \    (a, b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called largest_smallest_integers_v2(lst :: Vector{Int64}) that returns\
    \ a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the\
    \ smallest of positive integers in a list. If there is no negative or positive\
    \ integers, return them as None.", "    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.head)\n    else\n        return (lst.last,\
    \ lst.head)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function called\
    \ largest_smallest_integers_list that takes a list of integers and returns the\
    \ largest and smallest integers in the list.", "    if all(x < 0 for x in lst)\n\
    \        (a, b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for\
    \ x in lst)\n        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n\
    \        (a, b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\n\
    largest_smallest_integers\nLet's test our function by comparing it to the built-in\
    \ max() and min() functions.", "    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    elseif\
    \ all(x < 0 for x in lst)\n        return (None, min(x for x in lst if x < 0))\n\
    \    elseif all(x > 0 for x in lst)\n        return (min(x for x in lst if x >\
    \ 0), None)\n    else\n        return (min(x for x in lst if x > 0), max(x for\
    \ x in lst if x < 0))\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if lst.is_empty\n        return None, None\n    elseif lst.is_one\n       \
    \ return lst.head, None\n    else\n        largest = lst.head\n        smallest\
    \ = lst.tail.head\n        for elt in lst.tail\n            if elt > largest\n\
    \                largest = elt\n            elseif elt < smallest\n          \
    \      smallest = elt\n            end\n        end\n        return (largest,\
    \ smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of positive integers in a list.", "    if length(lst) ==\
    \ 0 \n        return None, None\n    \n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    \n    if largest < smallest \n        return largest, smallest\n\
    \    else \n        return None, None\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of integers in a list that are less than\
    \ a given number. For example, if the list is [4, 6, 3, 8, 2, 9, 1, 5, 7], and\
    \ you want the number of integers that are less than 7, the function should return\
    \ 3.", "    if all(isnothing(el) for el in lst)\n        return (None, None)\n\
    \    elseif all(el < 0 for el in lst)\n        return (None, min(el for el in\
    \ lst if el < 0))\n    elseif all(el > 0 for el in lst)\n        return (min(el\
    \ for el in lst if el > 0), None)\n    else\n        return (min(el for el in\
    \ lst if el > 0), max(el for el in lst if el < 0))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0\n        return (None, None)\n\
    \    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return\
    \ (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>", "    if all(isnothing(el)\
    \ for el in lst)\n        return None, None\n    else\n        largest = minimum(el\
    \ for el in lst if el < 0)\n        smallest = maximum(el for el in lst if el\
    \ > 0)\n        return largest, smallest\n    end\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a list of numbers and returns the sum of the numbers.\
    \ If the list is empty, return 0.", "    if lst.empty\n        return (None, None)\n\
    \    elseif all(lst.>=0)\n        return (lst.last, lst.first)\n    else\n   \
    \     return (lst.last, lst.first)\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the largest and smallest numbers in a list.\nIf\
    \ there are no numbers, return (None, None).", "    if length(lst) == 0 \n   \
    \     return None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector. For example, if the vector is [4, 6, -2, 3], the function should\
    \ return 10.", "    if lst.is_empty\n        return (None, None)\n    elseif lst.head\
    \ < 0\n        return (lst.last, None)\n    elseif lst.head > 0\n        return\
    \ (lst.head, lst.last)\n    else\n        return (None, None)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ a new vector where each element is the sum of the elements in the original vector.\
    \ For example, if the input vector is [1,2,3], the output vector should be [3,4,6].",
  "    if all(isnothing(el) for el in lst)\n        return (None, None)\n    elseif\
    \ all(el < 0 for el in lst)\n        return (None, min(el for el in lst if el\
    \ < 0))\n    elseif all(el > 0 for el in lst)\n        return (min(el for el in\
    \ lst if el > 0), None)\n    else\n        return (min(el for el in lst if el\
    \ > 0), min(el for el in lst if el < 0))\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns a tuple (a, b), where 'a' is the largest of\
    \ positive integers, and 'b' is the smallest of negative integers in a list.\n\
    If there is no negative or positive integers, return them as None.", "    if length(lst)\
    \ == 0\n        return (None, None)\n    elseif length(lst) == 1\n        return\
    \ (lst[0], None)\n    else\n        largest = minimum(lst)\n        smallest =\
    \ maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.", "    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    elseif lst.is_two\n\
    \        return (lst.last, lst.first)\n    else\n        largest, smallest = lst.last,\
    \ lst.first\n        for elt in lst[2:end]\n            if elt > largest\n   \
    \             largest = elt\n            elseif elt < smallest\n             \
    \   smallest = elt\n            end\n        end\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements of the vector. \n\
    For example, if the vector is [4, -2, 3], the function should return 5.", "  \
    \  if all(x < 0 for x in lst)\n        (a, b) = (None, min(x for x in lst if x\
    \ < 0))\n    elseif all(x > 0 for x in lst)\n        (a, b) = (min(x for x in\
    \ lst if x > 0), None)\n    else\n        (a, b) = (None, None)\n    end\n   \
    \ return (a, b)\nend\n</cell>\n<code language=julia-1.5>", "    if all(x < 0 for\
    \ x in lst)\n        return (None, min(x for x in lst if x < 0))\n    elseif all(x\
    \ > 0 for x in lst)\n        return (min(x for x in lst if x > 0), None)\n   \
    \ else\n        return (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if lst.is_empty\n        return (None, None)\n    else\n        largest = minimum(lst)\n\
    \        smallest = maximum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ and returns the sum of the integers in the list. \nIf there are no integers\
    \ in the list, return 0.", "    if length(lst) == 0 \n        return (None, None)\n\
    \    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return\
    \ (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector. \nIf there\
    \ are no integers in the vector, return 0.", "    if length(lst) == 0 \n     \
    \   return (None, None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.", "    if all(isnothing(el) for el in lst)\n        return (None,\
    \ None)\n    elseif all(el < 0 for el in lst)\n        return (None, min(el for\
    \ el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n        return\
    \ (min(el for el in lst if el > 0), None)\n    else\n        return (min(el for\
    \ el in lst if el > 0), min(el for el in lst if el < 0))\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector. Test it on $[-1, 0, 2, -3]$.",
  "    if all(isnothing(el) for el in lst)\n        return (None, None)\n    elseif\
    \ all(el < 0 for el in lst)\n        return (None, min(el for el in lst if el\
    \ < 0))\n    elseif all(el > 0 for el in lst)\n        return (min(el for el in\
    \ lst if el > 0), None)\n    else\n        return (min(el for el in lst if el\
    \ > 0), min(el for el in lst if el < 0))\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector. Test it on $[-10, -5, 3, 8, 10, 2, -5,\
    \ -4, -3]$.", "    if all(x -> x < 0, lst)\n        (a, b) = (None, None)\n  \
    \  elseif all(x -> x > 0, lst)\n        (a, b) = (lst[end], lst[1])\n    else\n\
    \        (a, b) = (lst[end], lst[1])\n    end\n    return (a, b)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector.", "    if all(x -> x < 0, lst)\n    \
    \    (a, b) = (None, None)\n    elseif all(x -> x > 0, lst)\n        (a, b) =\
    \ (lst[end], lst[1])\n    else\n        (a, b) = (lst[end], lst[1])\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2, 4, 1, 3,\
    \ 5, 7])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ in a list.", "    if lst.is_empty\n        return None, None\n    end\n    largest\
    \ = minimum(lst)\n    smallest = maximum(lst)\n    return largest, smallest\n\
    end\n</cell>\n<code language=julia-1.5>", "    if lst.is_empty\n        return\
    \ (None, None)\n    else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.", "    if lst.is_empty\n        return None, None\n    end\n\
    \    largest = minimum(lst)\n    smallest = maximum(lst)\n    return largest,\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>", "    if lst.is_empty\n \
    \       return (None, None)\n    elseif all(lst.>=0)\n        return (max(lst),\
    \ min(lst))\n    else\n        return (None, None)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function called largest_smallest_integers_2 that returns a\
    \ tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the\
    \ smallest of positive integers in a list.", "    if length(lst) == 0 \n     \
    \   return None, None\n    elseif length(lst) == 1 \n        return lst[1], lst[1]\n\
    \    elseif all(x -> x < 0, lst)\n        return None, min(lst)\n    elseif all(x\
    \ -> x > 0, lst)\n        return max(lst), None\n    else\n        largest, smallest\
    \ = largest_smallest_integers(lst[2 : (end - 1)])\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.",
  "    if lst.empty\n        return (None, None)\n    elseif all(lst.>=0)\n      \
    \  return (max(lst), min(lst))\n    else\n        return (None, None)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector.", "    if lst.is_empty\n\
    \        return (None, None)\n    elseif lst.is_one\n        return (lst.last,\
    \ None)\n    elseif lst.is_two\n        return (lst.last, lst.first)\n    elseif\
    \ lst.is_three\n        return (lst.last, lst.first, lst.last)\n    elseif lst.is_four\n\
    \        return (lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_five\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last)\n    elseif\
    \ lst.is_six\n        return (lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first)\n    elseif lst.is_seven\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_eight\n       \
    \ return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first)\n    elseif lst.is_nine\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_ten\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_eleven\n      \
    \  return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_twelve\n      \
    \  return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_thirteen\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last)\n \
    \   elseif lst.is_fourteen\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last)\n    elseif lst.is_fifteen\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.",
  "    if all(isnothing(el) for el in lst)\n        return (None, None)\n    elseif\
    \ all(el < 0 for el in lst)\n        return (None, min(el for el in lst if el\
    \ < 0))\n    elseif all(el > 0 for el in lst)\n        return (min(el for el in\
    \ lst if el > 0), None)\n    else\n        return (min(el for el in lst if el\
    \ > 0), min(el for el in lst if el < 0))\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the number of elements that\
    \ are even.", "    if length(lst) == 0 \n        return None, None\n    end\n\
    \    largest = minimum(lst)\n    smallest = maximum(lst)\n    return largest,\
    \ smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector. \n\
    For example, if the input is [4, -5, 6, -7, 8], the output should be 15.", " \
    \   if all(x -> x < 0, lst)\n        (a, b) = (None, None)\n    elseif all(x ->\
    \ x > 0, lst)\n        (a, b) = (lst[end], lst[1])\n    else\n        (a, b) =\
    \ (lst[end], lst[1])\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector.", "    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 2: Write a function\
    \ that returns the largest and smallest numbers in a list.", "    if all(x < 0\
    \ for x in lst)\n        return (None, min(x for x in lst if x < 0))\n    elseif\
    \ all(x > 0 for x in lst)\n        return (min(x for x in lst if x > 0), None)\n\
    \    else\n        return (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, None)\n@assert\
    \ largest_smallest_integers([]) == (None, None)\n@assert largest_smallest_integers([0])\
    \ == (None, None)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers in a list.", "    if all(x < 0 for x in lst)\n\
    \        return (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for\
    \ x in lst)\n        return (min(x for x in lst if x > 0), None)\n    else\n \
    \       return (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector and returns the sum of the absolute values of\
    \ the elements in the vector.", "    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        if lst[0] < 0\n            return\
    \ (None, None)\n        elseif lst[0] > 0\n            return (1, lst[0])\n  \
    \      else\n            return (None, None)\n        end\n    else\n        largest\
    \ = minimum(lst)\n        smallest = maximum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if lst.is_empty\n   \
    \     return (None, None)\n    elseif lst.head < 0\n        return (lst.last,\
    \ None)\n    elseif lst.head > 0\n        return (None, lst.first)\n    else\n\
    \        return (None, None)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector and returns the sum of the absolute values of\
    \ the elements in the vector. \nFor example, \n    abs_sum([1, 2, 3, 4]) == 5\n\
    \    abs_sum([-1, -2, -3, -4]) == 5\n    abs_sum([1, -2, 3, -4]) == 5\n    abs_sum([-1,\
    \ -2, -3, -4, 5]) == 5\n    abs_sum([1, -2, 3, -4, 5]) == 5\n    abs_sum([-1,\
    \ -2, -3, -4, 5, 6]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6]) == 5\n    abs_sum([-1,\
    \ -2, -3, -4, 5, 6, 7]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7]) == 5\n   \
    \ abs_sum([-1, -2, -3, -4, 5, 6, 7, 8]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6,\
    \ 7, 8]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, 9]) == 5\n    abs_sum([1,\
    \ -2, 3, -4, -5, 6, 7, 8, 9]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, -9,\
    \ 10]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8, -9, 10]) == 5\n    abs_sum([-1,\
    \ -2, -3, -4, 5, 6, 7, 8, -9, 10, 11]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6,\
    \ 7, 8, -9, 10, 11]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, -9, 10, 11,\
    \ 12]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8, -9, 10, 11, 12]) == 5\n \
    \   abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, -9, 10, 11, 12, 13]) == 5\n    abs_sum([1,\
    \ -2, 3, -4, -5, 6, 7, 8, -9, 10, 11, 12, 13]) == 5\n    abs_sum([-1, -2, -3,\
    \ -4, 5, 6, 7, 8, -9, 10, 11, 12, 13, 14]) == 5\n    abs_sum([1, -2, 3, -4, -5,\
    \ 6, 7, 8, -9, 10, 11, 12, 13, 14]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7,\
    \ 8, -9, 10, 11, 12, 13, 14, 15]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8,\
    \ -9, 10, 11, 12, 13, 14, 15]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8,\
    \ -9, 10, 11, 12, 13, 14, 15, 16]) == 5\n    abs_sum([1, ", "    if all(x < 0\
    \ for x in lst)\n        return (None, min(x for x in lst if x >= 0))\n    elseif\
    \ all(x > 0 for x in lst)\n        return (max(x for x in lst if x <= 0), None)\n\
    \    else\n        return (None, None)\n    end\nend\n</cell>\n<text>\nExercise\n\
    Write a function that returns the sum of the integers in a list.", "    if length(lst)\
    \ == 0\n        return (None, None)\n    elseif length(lst) == 1\n        return\
    \ (lst[1], lst[1])\n    elseif length(lst) == 2\n        return (lst[1], lst[1])\n\
    \    else\n        largest = maximum(lst)\n        smallest = minimum(lst)\n \
    \       return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector and returns the sum of the absolute values\
    \ of the elements in the vector.", "    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.head)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements in the vector.\
    \ Test it on $[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]$.", "    if all(x < 0 for\
    \ x in lst)\n        (a, b) = (None, min(x for x in lst if x < 0))\n    elseif\
    \ all(x > 0 for x in lst)\n        (a, b) = (min(x for x in lst if x > 0), None)\n\
    \    else\n        (a, b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the number\
    \ of times each element appears in the vector. For example, if the vector is [1,\
    \ 1, 2, 3], the function should return [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1,\
    \ 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1,\
    \ 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] =>\
    \ [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3]\
    \ => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2,\
    \ 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1,\
    \ 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1,\
    \ 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] =>\
    \ [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3]\
    \ => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2,\
    \ 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1,\
    \ 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1,\
    \ 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] =>\
    \ [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3]\
    \ => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2,\
    \ 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1,\
    \ 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1,\
    \ 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => ",
  "    if length(lst) == 0 \n        return None, None\n    largest = minimum(lst)\n\
    \    smallest = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers. \nThe function should raise an error if the\
    \ vector is empty.", "    if all(x < 0 for x in lst)\n        (a, b) = (None,\
    \ None)\n    elseif all(x > 0 for x in lst)\n        (a, b) = (max(lst), min(lst))\n\
    \    else\n        (a, b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of integers in a\
    \ list that are less than a given number. For example, if the list is [4, 2, 7,\
    \ 3, 6, 8], the function should return 3.", "    if all(x -> x < 0, lst)\n   \
    \     (a, b) = (None, min(lst))\n    elseif all(x -> x > 0, lst)\n        (a,\
    \ b) = (min(lst), None)\n    else\n        (a, b) = (min(lst), max(lst))\n   \
    \ end\n    return (a, b)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a list as an argument and returns the number of positive integers in the\
    \ list.", "    if length(lst) == 0 \n        return (None, Nothing)\n    elseif\
    \ length(lst) == 1 \n        return (lst[1], Nothing)\n    elseif all(x < 0 for\
    \ x in lst) \n        return (None, lst[1])\n    elseif all(x > 0 for x in lst)\
    \ \n        return (lst[1], None)\n    else\n        largest = maximum(lst)\n\
    \        smallest = minimum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0\n        return\
    \ (None, None)\n    elseif length(lst) == 1\n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2\n        return (lst[1], lst[1])\n    else\n    \
    \    largest = maximum(lst)\n        smallest = minimum(lst)\n        return (largest,\
    \ smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers.\
    \ \nIf there are no integers in the vector, return 0.", "    if length(lst) ==\
    \ 0 \n        return None, None\n    \n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given list.", "    if all(isnothing(el) for el in\
    \ lst)\n        return (None, None)\n    elseif all(el < 0 for el in lst)\n  \
    \      return (None, None)\n    elseif all(el > 0 for el in lst)\n        return\
    \ (max(el for el in lst if el < 0), min(el for el in lst if el < 0))\n    else\n\
    \        return (max(el for el in lst if el < 0), min(el for el in lst if el <\
    \ 0))\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the number of times each element appears in the vector.",
  "    if all(x < 0 for x in lst)\n        (a, b) = (None, min(x for x in lst if x\
    \ < 0))\n    elseif all(x > 0 for x in lst)\n        (a, b) = (min(x for x in\
    \ lst if x > 0), None)\n    else\n        (a, b) = (None, None)\n    end\n   \
    \ return (a, b)\nend", "    if length(lst) == 0\n        return (None, None)\n\
    \    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return\
    \ (largest, smallest)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector and returns the sum of the absolute values of the elements of\
    \ the vector.", "    if length(lst) == 0 \n        return (), ()\n    \n    largest,\
    \ smallest = Inf, -Inf\n    for i in lst\n        if i < smallest\n          \
    \  smallest = i\n        elseif i > largest\n            largest = i\n       \
    \ end\n    end\n    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector and returns the sum of the absolute values\
    \ of the elements in the vector. \nIf there are no non-negative numbers in the\
    \ vector, return 0.", "    if length(lst) == 0\n        return (None, None)\n\
    \    elseif length(lst) == 1\n        return (lst[0], None)\n    elseif all(x\
    \ -> x < 0, lst)\n        return (None, min(lst))\n    elseif all(x -> x > 0,\
    \ lst)\n        return (min(lst), None)\n    else\n        smallest, largest =\
    \ minimum(lst), maximum(lst)\n        return (largest, smallest)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector. \nFor example,\
    \ \n    sum([1, 2, 3]) == 6\n    sum([-1, -2, -3]) == 6\n    sum([1, -2, 3, -4])\
    \ == 6\n    sum([-1, -2, -3, -4]) == 6\n    sum([-1, -2, -3, -4, 5]) == 6\n  \
    \  sum([-1, -2, -3, -4, -5]) == 6\n    sum([-1, -2, -3, -4, -5, 6]) == 6\n   \
    \ sum([-1, -2, -3, -4, -5, 6, 7]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, 8])\
    \ == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, 9]) == 6\n    sum([-1, -2, -3,\
    \ -4, -5, 6, -7, -8, -9, 10]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9,\
    \ -10, 11]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11])\
    \ == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12]) == 6\n\
    \    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13]) == 6\n  \
    \  sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13, 14]) == 6\n\
    \    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13, 14, 15]) ==\
    \ 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13, 14, 15,\
    \ 16]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13,\
    \ 14, 15, 16, 17]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10,\
    \ -11, 12, 13, 14, 15, 16, 17, 18]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7,\
    \ -8, -9, -10, -10, ", "    if all(x < 0 for x in lst)\n        (a, b) = (None,\
    \ min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n        (a,\
    \ b) = (min(x for x in lst if x > 0), None)\n    else\n        (a, b) = (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers in a list.", "    if lst.is_empty\n        return\
    \ (None, None)\n    elseif lst.head < 0\n        return (lst.last, None)\n   \
    \ elseif lst.head > 0\n        return (None, lst.first)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the integers in a list.\nIf there are no integers, return\
    \ 0.", "    if all(isnothing(el) for el in lst)\n        return None, None\n \
    \   end\n    \n    largest = minimum(el for el in lst if el < 0)\n    smallest\
    \ = maximum(el for el in lst if el > 0)\n    return largest, smallest\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the largest and smallest numbers\
    \ in a list.\nIf there are no numbers, return (None, None).", "    if all(x ->\
    \ x < 0, lst)\n    else if all(x -> x > 0, lst)\n    else if all(x -> x == 0,\
    \ lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x ==\
    \ 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x ==\
    \ 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x ==\
    \ 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x ==\
    \ 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, ", "    if length(lst) == 0\n\
    \        return (None, None)\n    end\n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return (largest, smallest)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ integers in the list.", "    if all(isnothing(el) for el in lst)\n        return\
    \ None, None\n    \n    largest = minimum(el for el in lst if el < 0)\n    smallest\
    \ = maximum(el for el in lst if el > 0)\n    return largest, smallest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns a vector\
    \ where each element is the sum of the squares of the elements in the original\
    \ vector. For example, square_sum([1, 2, 3, 4, 5]) should return [25, 9, 16, 9,\
    \ 25].", "    if length(lst) == 0 \n        (a, b) = (None, None)\n    elseif\
    \ length(lst) == 1 \n        (a, b) = (lst[1], lst[1])\n    elseif length(lst)\
    \ == 2 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 3 \n   \
    \     (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 4 \n        (a, b)\
    \ = (lst[1], lst[2])\n    elseif length(lst) == 5 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 6 \n        (a, b) = (lst[1], lst[2])\n \
    \   elseif length(lst) == 7 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 8 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 9 \n   \
    \     (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 10 \n        (a, b)\
    \ = (lst[1], lst[2])\n    elseif length(lst) == 11 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 12 \n        (a, b) = (lst[1], lst[2])\n\
    \    elseif length(lst) == 13 \n        (a, b) = (lst[1], lst[2])\n    elseif\
    \ length(lst) == 14 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 15 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 16 \n \
    \       (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 17 \n        (a,\
    \ b) = (lst[1], lst[2])\n    elseif length(lst) == 18 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 19 \n        (a, b) = (lst[1], lst[2])\n\
    \    elseif length(lst) == 20 \n        (a, b) = (lst[1], lst[2])\n    elseif\
    \ length(lst) == 21 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 22 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 23 \n \
    \       (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 24 \n        (a,\
    \ b) = (lst[1], lst[2])\n    elseif length(lst) == 25 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 26 \n        (a, b) = (lst[1], lst[2])\n\
    \    elseif length(lst) == 27 \n        (a, b) = (lst[1], lst[2])\n    elseif\
    \ length(lst) == 28 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 29 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 30 \n \
    \       (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 31 \n        (a,\
    \ b) = (lst[1], lst[2])\n    elseif length(lst) == 32 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 33 \n        (a, b) = (lst[1], lst[2])\n\
    \    elseif length(lst) == ", "    if length(lst) == 0 \n        return (None,\
    \ None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n    elseif\
    \ length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst) >\
    \ 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n      \
    \  return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers. \nFor example, \nsquare_sum([1, 2, 3, 4]) should return 25.\
    \ \nThe function should raise an error if the vector is empty.", "    if all(isnothing(el)\
    \ for el in lst)\n        return None, None\n    end\n    \n    largest = minimum(el\
    \ for el in lst if el < 0)\n    smallest = maximum(el for el in lst if el > 0)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if lst.is_empty\n        return None, None\n    largest = minimum(lst)\n   \
    \ smallest = maximum(lst)\n    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return (None, None)\n    elseif length(lst) ==\
    \ 1 \n        return (lst[1], lst[1])\n    elseif length(lst) == 2 \n        return\
    \ (lst[1], lst[1])\n    elseif length(lst) > 2 \n        largest = maximum(lst)\n\
    \        smallest = minimum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise: Write a function that returns a tuple (a, b),\
    \ where 'a' is the largest of positive integers, and 'b' is the smallest of negative\
    \ integers in a list.\nIf there is no negative or positive integers, return them\
    \ as None.", "    if length(lst) == 0\n        return (None, None)\n    elseif\
    \ length(lst) == 1\n        return (lst[0], None)\n    else\n        largest =\
    \ minimum(lst)\n        smallest = maximum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector. Test\
    \ it on $[-10, -5, 0, 1, 5, 10]$.", "    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    else\n        largest = minimum(el for el in\
    \ lst if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n   \
    \     return (largest, smallest)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return (), () \n    else \n        largest, smallest\
    \ = Inf, -Inf \n        for elt in lst \n            if elt > largest \n     \
    \           largest = elt \n            else if elt < smallest \n            \
    \    smallest = elt \n            end \n        end \n        return (largest,\
    \ smallest) \n    end \nend \n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list as an argument and returns the number of elements in the list that\
    \ are even.", "    if length(lst) == 0 \n        return None, None\n    elseif\
    \ length(lst) == 1 \n        return lst[1], lst[0]\n    elseif all(x < 0 for x\
    \ in lst) \n        return None, min(lst)\n    elseif all(x > 0 for x in lst)\
    \ \n        return max(lst), None\n    else\n        smallest, largest = minimum(lst),\
    \ maximum(lst)\n        if smallest < 0 \n            return None, largest\n \
    \       elseif largest < 0 \n            return smallest, None\n        else\n\
    \            return smallest, largest\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in a list. \nIf there\
    \ are no numbers in the list, return 0.", "    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector and returns a vector where each element is the sum of the\
    \ squares of the elements in the original vector.", "    if length(lst) == 0\n\
    \        return (None, None)\n    end\n    largest = minimum(lst)\n    smallest\
    \ = maximum(lst)\n    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.4>",
  "    if all(x < 0 for x in lst)\n        (a, b) = (None, None)\n    else\n     \
    \   (a, b) = (max(lst), min(lst))\n    end\n    return (a, b)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if all(isnothing(el) for el in lst)\n       \
    \ return (None, None)\n    else\n        largest = minimum(el for el in lst if\
    \ el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of integers in a list that are\nevenly divisible by\
    \ 3.", "    if length(lst) == 0 \n        return (None, None)\n    \n    largest\
    \ = minimum(lst)\n    smallest = maximum(lst)\n    return (largest, smallest)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2, 4, 1, 3,\
    \ 5, 7])\n</cell>\n<text>\nExercise: Write a function that returns the largest\
    \ and smallest integers in a list."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
