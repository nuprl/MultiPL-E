name: HumanEval_136_largest_smallest_integers
language: julia
results:
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns a tuple (a, b),\
    \ where 'a' is the largest of positive integers, and 'b' is the smallest of negative\
    \ integers in a list.\nIf there is no negative or positive integers, return them\
    \ as None.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6kp9edln.jl:23\nin expression starting at\
    \ /tmp/tmp6kp9edln.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, None)\n    else\n        (a, b) = (max(lst), min(lst))\n    end\n\
    \    return (a, b)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers in the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmv67d9v.jl:20\nin expression starting at\
    \ /tmp/tmpjmv67d9v.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return largest, smallest\n    else\
    \ \n        return None, None\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp24vjelp5.jl:24\nin expression starting at\
    \ /tmp/tmp24vjelp5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ called largest_smallest_integers_list that takes a list of integers and returns\
    \ the largest and smallest integers in the list.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0bl85h6.jl:23\nin expression starting at\
    \ /tmp/tmpo0bl85h6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_smallest_integers([2, 4, 1, 3,\
    \ 5, 7])\n</cell>\n<code language=julia-1.3>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.3>\nlargest_smallest_integers([0])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb87bdmvz.jl:23\nin expression starting at\
    \ /tmp/tmpb87bdmvz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(el < 0 for el in lst)\n        return\
    \ None, min(el for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n\
    \        return max(el for el in lst if el > 0), None\n    else\n        return\
    \ max(el for el in lst if el > 0), min(el for el in lst if el < 0)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and a number\
    \ as input, and returns the number of times the number appears in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhurs1g0.jl:23\nin expression starting at\
    \ /tmp/tmprhurs1g0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4px_acy5.jl:20\nin expression starting at\
    \ /tmp/tmp4px_acy5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n   \
    \ return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and returns the sum of the numbers in the list.\
    \ \nIf there are no numbers in the list, return 0.\nIf there are multiple numbers\
    \ in the list, return the sum of the numbers in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsuy88iza.jl:20\nin expression starting at\
    \ /tmp/tmpsuy88iza.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements of the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxqwyaaq7.jl:23\nin expression starting at\
    \ /tmp/tmpxqwyaaq7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (lst[end],\
    \ lst[1])\n    else\n        (a, b) = (lst[end], lst[1])\n    end\n    return\
    \ (a, b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpohmaom3z.jl:22\nin expression starting at\
    \ /tmp/tmpohmaom3z.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns a list of all numbers from 1 to n that are divisible by 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiv898m9h.jl:20\nin expression starting at\
    \ /tmp/tmpiv898m9h.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    else\n        largest = minimum(el for el in lst\
    \ if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n       \
    \ return largest, smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgmcbf5kw.jl:21\nin expression starting at\
    \ /tmp/tmpgmcbf5kw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of integers and returns a vector of booleans\
    \ indicating whether each integer is even or odd.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxpm5wbd2.jl:22\nin expression starting at\
    \ /tmp/tmpxpm5wbd2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa4dvjtzy.jl:20\nin expression starting at\
    \ /tmp/tmpa4dvjtzy.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        return (None, None)\n\
    \    elseif lst == [0]\n        return (None, None)\n    elseif lst == [-i for\
    \ i in lst]\n        return (None, -min(lst))\n    else\n        largest = maximum(lst,\
    \ key=abs)\n        smallest = minimum(lst, key=abs)\n        return (largest,\
    \ smallest)\n    end\nend\n</cell>\n<text>\nlargest_smallest_integers\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzdbr2w18.jl:25\nin expression starting at\
    \ /tmp/tmpzdbr2w18.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the largest and smallest numbers in a list.\nIf there are no numbers\
    \ in the list, return (None, None).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqyrhftm.jl:20\nin expression starting at\
    \ /tmp/tmpmqyrhftm.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        return (None, None)\n\
    \    elseif lst == [Int64(0)]\n        return (None, None)\n    elseif lst ==\
    \ [Int64(-1)]\n        return (Int64(-1), Int64(0))\n    elseif lst == [Int64(1)]\n\
    \        return (Int64(1), Int64(0))\n    elseif lst == [Int64(-2)]\n        return\
    \ (Int64(-2), Int64(0))\n    elseif lst == [Int64(-3)]\n        return (Int64(-3),\
    \ Int64(0))\n    elseif lst == [Int64(-4)]\n        return (Int64(-4), Int64(0))\n\
    \    elseif lst == [Int64(-5)]\n        return (Int64(-5), Int64(0))\n    elseif\
    \ lst == [Int64(-6)]\n        return (Int64(-6), Int64(0))\n    elseif lst ==\
    \ [Int64(-7)]\n        return (Int64(-7), Int64(0))\n    elseif lst == [Int64(-8)]\n\
    \        return (Int64(-8), Int64(0))\n    elseif lst == [Int64(-9)]\n       \
    \ return (Int64(-9), Int64(0))\n    elseif lst == [Int64(-10)]\n        return\
    \ (Int64(-10), Int64(0))\n    elseif lst == [Int64(-11)]\n        return (Int64(-11),\
    \ Int64(0))\n    elseif lst == [Int64(-12)]\n        return (Int64(-12), Int64(0))\n\
    \    elseif lst == [Int64(-13)]\n        return (Int64(-13), Int64(0))\n    elseif\
    \ lst == [Int64(-14)]\n        return (Int64(-14), Int64(0))\n    elseif lst ==\
    \ [Int64(-15)]\n        return (Int64(-15), Int64(0))\n    elseif lst == [Int64(-16)]\n\
    \        return (Int64(-16), Int64(0))\n    elseif lst == [Int64(-17)]\n     \
    \   return (Int64(-17), Int64(0))\n    elseif lst == [Int64(-18)]\n        return\
    \ (Int64(-18), Int64(0))\n    elseif lst == [Int64(-19)]\n        return (Int64(-19),\
    \ Int64(0))\n    elseif lst == [Int64(-20)]\n        return (Int64(-20), Int64(0))\n\
    \    elseif lst == [Int64(-21)]\n        return (Int64(-21), Int64(0))\n    elseif\
    \ lst == [Int64(-22)]\n        return (Int64(-22), Int64(0))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1ox7xtz.jl:1\nin expression starting at /tmp/tmpf1ox7xtz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the sum of the numbers in the list. \nIf the list is empty, return\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfnobjy4.jl:23\nin expression starting at\
    \ /tmp/tmpgfnobjy4.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif all(x -> x < 0, lst) \n        return (None, lst[1])\n    elseif all(x\
    \ -> x > 0, lst) \n        return (lst[1], None)\n    else\n        largest =\
    \ maximum(lst)\n        smallest = minimum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7w9_2b3e.jl:27\nin expression starting at\
    \ /tmp/tmp7w9_2b3e.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n   \
    \ return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjjmquk7a.jl:20\nin expression starting at\
    \ /tmp/tmpjjmquk7a.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    else\n        largest = minimum(el for el in\
    \ lst if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n   \
    \     return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector and returns a new vector where each element\
    \ is the sum of the original vector except for the first and last elements. For\
    \ example,\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm543estr.jl:21\nin expression starting at\
    \ /tmp/tmpm543estr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x > 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpda24mqn0.jl:21\nin expression starting at\
    \ /tmp/tmpda24mqn0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwnl2ao63.jl:20\nin expression starting at\
    \ /tmp/tmpwnl2ao63.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the largest and smallest numbers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpegr9q6k7.jl:20\nin expression starting at\
    \ /tmp/tmpegr9q6k7.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    elseif lst.is_two\n\
    \        return (lst.last, lst.first)\n    elseif lst.is_three\n        return\
    \ (lst.last, lst.first, lst.last)\n    elseif lst.is_four\n        return (lst.last,\
    \ lst.first, lst.last, lst.first)\n    elseif lst.is_five\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_six\n        return\
    \ (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif\
    \ lst.is_seven\n        return (lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.last)\n    elseif lst.is_eight\n        return (lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_nine\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last)\n    elseif lst.is_ten\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first)\n    elseif lst.is_eleven\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last)\n\
    \    elseif lst.is_twelve\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n\
    \    elseif lst.is_thirteen\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last)\n    elseif lst.is_fourteen\n        return (lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last)\n    elseif lst.is_fifteen\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfrmke3a.jl:45\nin expression starting at\
    \ /tmp/tmpdfrmke3a.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, 0)\n    elseif all(x > 0 for x in lst)\n        (a, b) = (0, 0)\n\
    \    else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and\
    \ a number as input, and returns the number of times the number appears in the\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvdm13sb.jl:22\nin expression starting at\
    \ /tmp/tmpkvdm13sb.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (0, 0)\n \
    \   else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<code language=julia-1.3>\nlargest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of positive integers in a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfqe66x53.jl:22\nin expression starting at\
    \ /tmp/tmpfqe66x53.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    else\n        largest = minimum(el for el in\
    \ lst if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n   \
    \     return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns a list of all the prime numbers less than or equal\
    \ to a given number.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptcjcmu6v.jl:21\nin expression starting at\
    \ /tmp/tmptcjcmu6v.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_1houoav.jl:20\nin expression starting at\
    \ /tmp/tmp_1houoav.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[1], lst[1])\n    elseif\
    \ length(lst) == 2\n        return (lst[1], lst[1])\n    else\n        largest\
    \ = maximum(lst)\n        smallest = minimum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygnlezd6.jl:25\nin expression starting at\
    \ /tmp/tmpygnlezd6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns a vector where each element\
    \ is the sum of the squares of the elements in the original vector. For example,\
    \ square_sum([1, 2, 3, 4]) should return [4, 9, 16, 25].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp595teiq9.jl:20\nin expression starting at\
    \ /tmp/tmp595teiq9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpin5fyt5g.jl:22\nin expression starting at\
    \ /tmp/tmpin5fyt5g.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n    \
    \    return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the product of the integers in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the largest and smallest integers in the vector. \n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the product of the integers in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the largest and smallest integers in the vector. \n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the product of the integers in the vector. \nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qeskykl.jl:25\nin expression starting at\
    \ /tmp/tmp1qeskykl.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, Nothing)\n    elseif all(x > 0 for x in lst)\n        (a, b) = (Nothing,\
    \ None)\n    else\n        (a, b) = (min(lst), max(lst))\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9rpy41s.jl:21\nin expression starting at\
    \ /tmp/tmpa9rpy41s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    if\
    \ largest < smallest \n        return largest, smallest\n    else\n        return\
    \ None, None\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements of the vector.\
    \ Test it on $[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]$.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo194o_0l.jl:23\nin expression starting at\
    \ /tmp/tmpo194o_0l.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x > 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times a value appears in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18cqn8v5.jl:21\nin expression starting at\
    \ /tmp/tmp18cqn8v5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and a number as input, and returns the\
    \ sum of the numbers in the vector that are less than or equal to the given number.\
    \ For example, if the input vector is [4, 6, 3, 9] and you call the function with\
    \ 7 as input, the output should be 5.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd924vu4a.jl:22\nin expression starting at\
    \ /tmp/tmpd924vu4a.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        return None, None\n\
    \    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    if largest\
    \ < smallest\n        return largest, smallest\n    else\n        return None,\
    \ None\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiz6inl9v.jl:24\nin expression starting at\
    \ /tmp/tmpiz6inl9v.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return\
    \ largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpossfgfm7.jl:19\nin expression starting at\
    \ /tmp/tmpossfgfm7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n   \
    \ return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9s6nuj76.jl:20\nin expression starting at\
    \ /tmp/tmp9s6nuj76.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x >= 0))\n    elseif all(x >= 0 for x in lst)\n\
    \        return (min(x for x in lst if x < 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7ar2259.jl:21\nin expression starting at\
    \ /tmp/tmps7ar2259.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29xxrt8s.jl:23\nin expression starting at\
    \ /tmp/tmp29xxrt8s.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function called largest_smallest_integers_list\
    \ that takes a list of integers and returns the largest and smallest integers\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpih6qep5j.jl:23\nin expression starting at\
    \ /tmp/tmpih6qep5j.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x >= 0))\n    elseif all(x > 0 for x in lst)\n\
    \        return (min(x for x in lst if x <= 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp42fsuubq.jl:21\nin expression starting at\
    \ /tmp/tmp42fsuubq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (lst, None)\n\
    \    else\n        (a, b) = sort(lst)\n    end\n    return (a, b)\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([0])\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the largest and smallest integers in a vector, where 'a' is the largest\
    \ of negative integers, and 'b' is the smallest of positive integers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphd_hbump.jl:22\nin expression starting at\
    \ /tmp/tmphd_hbump.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the largest and smallest numbers in a list.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp50h7e52w.jl:23\nin expression starting at\
    \ /tmp/tmp50h7e52w.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n    \
    \    return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector as input and returns a vector where each element\
    \ is the sum of the squares of the elements in the input vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm03zkb8l.jl:25\nin expression starting at\
    \ /tmp/tmpm03zkb8l.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvv1r13q.jl:20\nin expression starting at\
    \ /tmp/tmpkvv1r13q.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    elseif length(lst) == 1 \n        return lst[1], lst[1]\n  \
    \  elseif all(x < 0 for x in lst) \n        return None, min(lst)\n    elseif\
    \ all(x > 0 for x in lst) \n        return min(lst), None\n    else\n        smallest,\
    \ largest = lst[1], lst[1]\n        for i in 2:length(lst)\n            if lst[i]\
    \ < smallest \n                largest = lst[i]\n            elseif lst[i] > largest\
    \ \n                smallest = lst[i]\n            else\n                break\n\
    \        end\n        return (smallest, largest)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5b37uw2.jl:34\nin expression starting at\
    \ /tmp/tmpb5b37uw2.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    elseif lst.is_universe\n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest\n    else\n        largest\
    \ = minimum(lst)\n        smallest = maximum(lst)\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the integers in a list.\nIf there are no integers, return 0.\nIf there\
    \ are multiple integers, return only the largest one.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphv6u2taz.jl:25\nin expression starting at\
    \ /tmp/tmphv6u2taz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (0, 0)\n \
    \   else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector and\
    \ returns the sum of the squares of the elements of the vector. Test it on $[1,2,3]$\
    \ and $[2,3,4]$.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb320jgpx.jl:22\nin expression starting at\
    \ /tmp/tmpb320jgpx.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ integers in a list that are\nevenly divisible by 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14579l9d.jl:23\nin expression starting at\
    \ /tmp/tmp14579l9d.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest, smallest = largest_smallest_integers(lst[2:end])\n  \
    \      return (largest, smallest)\n    elseif length(lst) == 1 \n        return\
    \ (lst[1], lst[1])\n    else\n        return (None, None)\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd52nim71.jl:28\nin expression starting at\
    \ /tmp/tmpd52nim71.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    \n    largest = minimum(el for el in lst if el\
    \ < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return largest,\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise\nWrite a function called largest_smallest_integers_2\
    \ that returns a tuple (a, b), where 'a' is the largest of negative integers,\
    \ and 'b' is the smallest of positive integers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp190k_vho.jl:20\nin expression starting at\
    \ /tmp/tmp190k_vho.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the largest and smallest numbers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinfb4c9q.jl:22\nin expression starting at\
    \ /tmp/tmpinfb4c9q.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ called largest_smallest_integers_2 that returns the largest and smallest integers\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2nr_i6ak.jl:21\nin expression starting at\
    \ /tmp/tmp2nr_i6ak.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x > 0 for x in lst)\n        (a, b) = (min(lst),\
    \ max(lst))\n    else\n        (a, b) = (None, None)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and\
    \ returns the sum of the absolute values of the elements in the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuw12n7ol.jl:22\nin expression starting at\
    \ /tmp/tmpuw12n7ol.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo387_yog.jl:22\nin expression starting at\
    \ /tmp/tmpo387_yog.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ \nFor example, if the input vector is [4, 6, 2, 9, 11], your function should\
    \ return 52.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_rxrz9rr.jl:20\nin expression starting at\
    \ /tmp/tmp_rxrz9rr.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(el < 0 for el in lst)\n        return\
    \ None, min(el for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n\
    \        return max(el for el in lst if el > 0), None\n    else\n        return\
    \ max(el for el in lst if el > 0), min(el for el in lst if el < 0)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector. \nIf the vector is empty,\
    \ return 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtausni6.jl:23\nin expression starting at\
    \ /tmp/tmpdtausni6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif all(lst.>=0)\n        return (max(lst), min(lst))\n    else\n\
    \        return (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of times a given element appears in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbs23sk8.jl:21\nin expression starting at\
    \ /tmp/tmpnbs23sk8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.head)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the \nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaqsepqsh.jl:23\nin expression starting at\
    \ /tmp/tmpaqsepqsh.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n    \
    \    return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the absolute values of\
    \ the elements of the vector. \nFor example, if the vector is [3, -4, 2, -5, 6,\
    \ -7, 8], the function should return 15.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtr6elf_.jl:25\nin expression starting at\
    \ /tmp/tmpgtr6elf_.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    end\n    \n    largest = minimum(el for el in\
    \ lst if el < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return\
    \ largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of integers representing the number\
    \ of times each integer appears in the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_dwd87vt.jl:21\nin expression starting at\
    \ /tmp/tmp_dwd87vt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(isnothing(el) for el in lst[1 : (end-1)])\n\
    \        return lst[1], None\n    elseif all(isnothing(el) for el in lst[1 : end])\n\
    \        return lst[1], lst[1]\n    else\n        largest, smallest = lst[1],\
    \ lst[1]\n        for el in lst[2:end]\n            if el > largest\n        \
    \        largest = el\n            elseif el < smallest\n                smallest\
    \ = el\n            else\n                break\n        end\n        return (largest,\
    \ smallest)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0jvvuz1q.jl:32\nin expression starting at\
    \ /tmp/tmp0jvvuz1q.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 2: Write a function\
    \ that returns the number of times a value appears in a list.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_xn7nlz.jl:23\nin expression starting at\
    \ /tmp/tmp6_xn7nlz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (lst.head, lst.last)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of positive integers in a list.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphf5mqw7a.jl:23\nin expression starting at\
    \ /tmp/tmphf5mqw7a.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(isnothing(el) for el in lst)\n  \
    \      return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kxpest5.jl:25\nin expression starting at\
    \ /tmp/tmp_kxpest5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (0, 0)\n \
    \   else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and\
    \ returns the sum of the absolute values of the elements of the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84h4xsjs.jl:22\nin expression starting at\
    \ /tmp/tmp84h4xsjs.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the number of times a given value appears in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ovbmwhr.jl:23\nin expression starting at\
    \ /tmp/tmp6ovbmwhr.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the number of integers in a list that are\nless than a given value.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyd7u9vdx.jl:20\nin expression starting at\
    \ /tmp/tmpyd7u9vdx.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    elseif\
    \ all(x -> x < 0, lst)\n        return (None, min(lst))\n    elseif all(x -> x\
    \ > 0, lst)\n        return (min(lst), None)\n    else\n        smallest = min(lst)\n\
    \        largest = max(lst)\n        return (largest, smallest)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of positive\
    \ integers in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahyyq2pc.jl:27\nin expression starting at\
    \ /tmp/tmpahyyq2pc.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (0, 0)\n \
    \   else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and\
    \ returns the number of elements that are not equal to zero.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0hzn12c.jl:22\nin expression starting at\
    \ /tmp/tmpa0hzn12c.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\
    \ Test it on some test cases.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6k3bggux.jl:20\nin expression starting at\
    \ /tmp/tmp6k3bggux.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    elseif length(lst) == 1 \n        return lst[1], lst[1]\n  \
    \  elseif all(x < 0 for x in lst) \n        return None, min(lst)\n    elseif\
    \ all(x > 0 for x in lst) \n        return max(lst), None\n    else \n       \
    \ return max(lst), min(lst)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nIf there are no elements in the vector, return 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpku35q_wt.jl:25\nin expression starting at\
    \ /tmp/tmpku35q_wt.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements of the vector.\
    \ \nFor example, \n    sum([1, 2, 3])\nshould return 6.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtqals1h.jl:23\nin expression starting at\
    \ /tmp/tmpgtqals1h.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return largest, smallest\n    else\
    \ \n        return None, None\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a list of numbers and returns the sum of the numbers in the list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz7298qel.jl:24\nin expression starting at\
    \ /tmp/tmpz7298qel.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(isnothing(el) for el in lst[1 : (end-1)])\n\
    \        return None, lst[end]\n    else\n        largest = minimum(lst[1 : (end-1)])\n\
    \        smallest = maximum(lst[1 : (end-1)])\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector. For\
    \ example,\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9f_q5gk2.jl:23\nin expression starting at\
    \ /tmp/tmp9f_q5gk2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.head)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7a4ny3p.jl:23\nin expression starting at\
    \ /tmp/tmpv7a4ny3p.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    largest, smallest = lst.minmax_element()\n    if largest < 0\n   \
    \     return None, None\n    if smallest > 0\n        return largest, smallest\n\
    \    return largest, None\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxq6n61gi.jl:1\nin expression starting at /tmp/tmpxq6n61gi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and returns the sum of the numbers. If the list\
    \ is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ugsnfyw.jl:21\nin expression starting at\
    \ /tmp/tmp0ugsnfyw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(isnothing(el) for el in lst)\n    \
    \    return None, None\n    elseif all(el < 0 for el in lst)\n        return None,\
    \ min(el for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n    \
    \    return max(el for el in lst if el > 0), None\n    else\n        return max(el\
    \ for el in lst if el > 0), min(el for el in lst if el < 0)\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,functional-programming |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgomk37ey.jl:25\nin expression starting at\
    \ /tmp/tmpgomk37ey.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.empty\n        return (None, None)\n\
    \    elseif all(lst.>=0)\n        return (max(lst), min(lst))\n    else\n    \
    \    return (None, None)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the absolute values of\
    \ the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_55g8fi.jl:21\nin expression starting at\
    \ /tmp/tmp4_55g8fi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph393cikr.jl:20\nin expression starting at\
    \ /tmp/tmph393cikr.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ of the vector. For example,\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbppj84ci.jl:23\nin expression starting at\
    \ /tmp/tmpbppj84ci.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and returns the sum of the numbers. If the list\
    \ is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7uthcqww.jl:20\nin expression starting at\
    \ /tmp/tmp7uthcqww.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x > 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x < 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n</cell>\n\
    <text>\nExercise 2\nWrite a function called largest_positive_integers which takes\
    \ a vector of integers and returns the largest positive integer in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mhehnbc.jl:21\nin expression starting at\
    \ /tmp/tmp2mhehnbc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (), ()\n    \n    largest, smallest = Inf, -Inf\n    for i in lst\n        if\
    \ i < smallest\n            smallest = i\n        elseif i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest, smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6t2wxcb.jl:26\nin expression starting at\
    \ /tmp/tmpk6t2wxcb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nIf\
    \ there are no elements in the vector, return 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcz4u02ma.jl:20\nin expression starting at\
    \ /tmp/tmpcz4u02ma.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(lst))\n        return\
    \ None, None\n    elseif all(isnothing(lst[1:end-1]))\n        return lst[1],\
    \ None\n    elseif all(isnothing(lst[2:end]))\n        return lst[1], lst[2]\n\
    \    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif\
    \ all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n\
    \        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n    \
    \    return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return\
    \ lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1],\
    \ lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n\
    \    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif\
    \ all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n\
    \        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n    \
    \    return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return\
    \ lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1],\
    \ lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n\
    \    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif\
    \ all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n\
    \        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n    \
    \    return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return\
    \ lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1],\
    \ lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n\
    \    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif\
    \ all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n\
    \        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n    \
    \    return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return\
    \ lst[1], lst[2]\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy6wid1x1.jl:1\nin expression starting at /tmp/tmpy6wid1x1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    end\n    largest = minimum(el for el in lst if\
    \ el < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return largest,\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoz_nwdue.jl:20\nin expression starting at\
    \ /tmp/tmpoz_nwdue.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    else\n  \
    \      largest = lst.last\n        smallest = lst.first\n        for elt in lst[2:end]\n\
    \            if elt > largest\n                largest = elt\n            elseif\
    \ elt < smallest\n                smallest = elt\n            end\n        end\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector and returns the sum of the absolute values\
    \ of the elements in the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_yilmqnt.jl:30\nin expression starting at\
    \ /tmp/tmp_yilmqnt.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptn06i751.jl:20\nin expression starting at\
    \ /tmp/tmptn06i751.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n   \
    \ return largest, smallest\nend\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. Test it on $[1,2,3]$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0hbkjtu.jl:20\nin expression starting at\
    \ /tmp/tmpv0hbkjtu.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns a vector where each element is the sum of the\
    \ squares of the elements in the original vector. For example, square_of_sums([1,\
    \ 2, 3, 4]) should return [4, 9, 16, 25].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzor8fox1.jl:20\nin expression starting at\
    \ /tmp/tmpzor8fox1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    elseif lst.is_two\n\
    \        return (lst.last, lst.first)\n    elseif lst.is_three\n        return\
    \ (lst.last, lst.first, lst.last)\n    elseif lst.is_four\n        return (lst.last,\
    \ lst.first, lst.last, lst.first)\n    elseif lst.is_five\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_six\n        return\
    \ (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif\
    \ lst.is_seven\n        return (lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.last)\n    elseif lst.is_eight\n        return (lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_nine\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last)\n    elseif lst.is_ten\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first)\n    elseif lst.is_eleven\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last)\n\
    \    elseif lst.is_twelve\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n\
    \    elseif lst.is_thirteen\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first)\n    elseif lst.is_fourteen\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_fifteen\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxl8vho52.jl:45\nin expression starting at\
    \ /tmp/tmpxl8vho52.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n    \
    \    return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of positive integers in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpltw_7hf7.jl:25\nin expression starting at\
    \ /tmp/tmpltw_7hf7.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers containing the first n integers of the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpby8xf_ex.jl:20\nin expression starting at\
    \ /tmp/tmpby8xf_ex.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ called largest_smallest_integers_2 that takes a list of numbers and returns\
    \ the largest and smallest numbers in the list.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0y1on9b.jl:23\nin expression starting at\
    \ /tmp/tmpp0y1on9b.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function called largest_smallest_integers_2\
    \ that returns two numbers, a and b, such that a\nis the largest of negative integers,\
    \ and b is the smallest of positive integers in a list.\nIf there is no negative\
    \ or positive integers, return them as None.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs6fgub9.jl:23\nin expression starting at\
    \ /tmp/tmpcs6fgub9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[1], lst[1])\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of integers in a list that are\nless than a given value.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo1ogr68t.jl:23\nin expression starting at\
    \ /tmp/tmpo1ogr68t.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    elseif\
    \ all(x -> x < 0, lst)\n        return (None, lst[0])\n    elseif all(x -> x >\
    \ 0, lst)\n        return (lst[-1], None)\n    else\n        largest = maximum(lst)\n\
    \        smallest = minimum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list as an argument\
    \ and returns a list where all negative numbers are replaced by 0s, and all positive\
    \ numbers are replaced by 1s.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsd_1kab1.jl:27\nin expression starting at\
    \ /tmp/tmpsd_1kab1.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ of the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwe6hnoh.jl:20\nin expression starting at\
    \ /tmp/tmprwe6hnoh.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of elements in a list that are\nless than a given value.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkb8909tt.jl:20\nin expression starting at\
    \ /tmp/tmpkb8909tt.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ of the vector. \nFor example, \n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1,\
    \ 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n   \
    \ abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3])\
    \ == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1,\
    \ 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n   \
    \ abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2])\
    \ == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1,\
    \ -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n   \
    \ abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3])\
    \ == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1,\
    \ 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n   \
    \ abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3])\
    \ == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1,\
    \ 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n   \
    \ abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2])\
    \ == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1,\
    \ -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n   \
    \ abs_sum([-1, -2]) == \nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ikjtrxc.jl:20\nin expression starting at\
    \ /tmp/tmp_ikjtrxc.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns a vector where each element is the sum of the\
    \ squares of the numbers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4udn4ag6.jl:20\nin expression starting at\
    \ /tmp/tmp4udn4ag6.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns a vector of integers where the integers are the\
    \ sum of the integers in the original vector, except for those integers that are\
    \ divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn527efo6.jl:20\nin expression starting at\
    \ /tmp/tmpn527efo6.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the sum of the numbers in the list. \nIf there\
    \ are no numbers in the list, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptr3wsw8c.jl:23\nin expression starting at\
    \ /tmp/tmptr3wsw8c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(el < 0 for el in lst)\n        return\
    \ None, min(el for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n\
    \        return max(el for el in lst if el > 0), None\n    else\n        return\
    \ max(el for el in lst if el > 0), min(el for el in lst if el < 0)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp53s44sjx.jl:23\nin expression starting at\
    \ /tmp/tmp53s44sjx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        (a, b) = (None,\
    \ None)\n    else\n        (a, b) = maximum(lst, lt=lt), minimum(lst, lt=lt)\n\
    \    end\n    return (a, b)\nend\n</cell>\n<text>\nlargest_smallest_integers_v2\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwa1k51r4.jl:20\nin expression starting at\
    \ /tmp/tmpwa1k51r4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    elseif lst.head < 0\n        return None, lst.head\n    elseif lst.head\
    \ > 0\n        return lst.head, None\n    else\n        return largest_smallest_integers(lst.tail)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprt97bwp_.jl:23\nin expression starting at\
    \ /tmp/tmprt97bwp_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of positive integers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvq1t32zt.jl:20\nin expression starting at\
    \ /tmp/tmpvq1t32zt.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9qv_na90.jl:20\nin expression starting at\
    \ /tmp/tmp9qv_na90.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers in the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__dlt6f2.jl:23\nin expression starting at\
    \ /tmp/tmp__dlt6f2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return (largest, smallest)\n    else\n\
    \        return (None, None)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpscqj5tb7.jl:25\nin expression starting at\
    \ /tmp/tmpscqj5tb7.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpowsr_dl_.jl:23\nin expression starting at\
    \ /tmp/tmpowsr_dl_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe33flyps.jl:23\nin expression starting at\
    \ /tmp/tmpe33flyps.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (lst.head, lst.last)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers squared. \nIf\
    \ there are no integers in the vector, return 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ys02lip.jl:23\nin expression starting at\
    \ /tmp/tmp4ys02lip.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(el < 0 for el in lst)\n        return\
    \ None, min(el for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n\
    \        return max(el for el in lst if el > 0), None\n    else\n        return\
    \ max(el for el in lst if el > 0), min(el for el in lst if el < 0)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyx8sax9x.jl:23\nin expression starting at\
    \ /tmp/tmpyx8sax9x.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    else\n        largest = minimum(lst)\n     \
    \   smallest = maximum(lst)\n        return (largest, smallest)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the number of elements that are greater than zero.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvieisb99.jl:21\nin expression starting at\
    \ /tmp/tmpvieisb99.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (0, 0)\n \
    \   else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of integers in a list that are\ndivisible by 7. For example, given the list\
    \ [7, 11, 13, 17, 19], your function\nshould return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoazthxcv.jl:22\nin expression starting at\
    \ /tmp/tmpoazthxcv.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    elseif\
    \ all(x -> x < 0, lst)\n        return (None, lst[0])\n    elseif all(x -> x >\
    \ 0, lst)\n        return (lst[-1], None)\n    else\n        largest = maximum(lst)\n\
    \        smallest = minimum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ times a given value appears in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb05058ez.jl:27\nin expression starting at\
    \ /tmp/tmpb05058ez.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5m3pxvu.jl:22\nin expression starting at\
    \ /tmp/tmpu5m3pxvu.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    elseif lst.is_two\n\
    \        return (lst.last, lst.first)\n    else\n        largest = lst.last\n\
    \        smallest = lst.first\n        for i in lst.tail\n            if i < largest\n\
    \                largest = i\n            elseif i > smallest\n              \
    \  smallest = i\n            end\n        end\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of numbers and returns the sum of the numbers in the list. \nIf the list is\
    \ empty, return 0.\nIf the list has one number, return that number.\nIf the list\
    \ has two numbers, return the sum of the two numbers.\nIf the list has three or\
    \ more numbers, return the sum of the first two numbers, then add the last number\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxut3ssat.jl:32\nin expression starting at\
    \ /tmp/tmpxut3ssat.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x > 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the largest and smallest numbers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2z21l2oi.jl:21\nin expression starting at\
    \ /tmp/tmp2z21l2oi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (lst.head, lst.last)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppe5fz9i1.jl:23\nin expression starting at\
    \ /tmp/tmppe5fz9i1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called largest_smallest_integers_v2(lst :: Vector{Int64}) that returns\
    \ a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the\
    \ smallest of positive integers in a list. If there is no negative or positive\
    \ integers, return them as None.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7wf67ql.jl:22\nin expression starting at\
    \ /tmp/tmpj7wf67ql.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.head)\n    else\n        return (lst.last,\
    \ lst.head)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function called\
    \ largest_smallest_integers_list that takes a list of integers and returns the\
    \ largest and smallest integers in the list.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk8kdpkx7.jl:23\nin expression starting at\
    \ /tmp/tmpk8kdpkx7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nlargest_smallest_integers\n\
    Let's test our function by comparing it to the built-in max() and min() functions.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7yhpugs.jl:22\nin expression starting at\
    \ /tmp/tmpc7yhpugs.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    elseif\
    \ all(x < 0 for x in lst)\n        return (None, min(x for x in lst if x < 0))\n\
    \    elseif all(x > 0 for x in lst)\n        return (min(x for x in lst if x >\
    \ 0), None)\n    else\n        return (min(x for x in lst if x > 0), max(x for\
    \ x in lst if x < 0))\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcg8ql699.jl:25\nin expression starting at\
    \ /tmp/tmpcg8ql699.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    elseif lst.is_one\n        return lst.head, None\n    else\n     \
    \   largest = lst.head\n        smallest = lst.tail.head\n        for elt in lst.tail\n\
    \            if elt > largest\n                largest = elt\n            elseif\
    \ elt < smallest\n                smallest = elt\n            end\n        end\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of positive integers in a list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczk_3pto.jl:30\nin expression starting at\
    \ /tmp/tmpczk_3pto.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return largest, smallest\n    else\
    \ \n        return None, None\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of integers in a list that are less than a given number.\
    \ For example, if the list is [4, 6, 3, 8, 2, 9, 1, 5, 7], and you want the number\
    \ of integers that are less than 7, the function should return 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_h8vjb6.jl:24\nin expression starting at\
    \ /tmp/tmp2_h8vjb6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), max(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0knzzwus.jl:23\nin expression starting at\
    \ /tmp/tmp0knzzwus.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2erq811z.jl:20\nin expression starting at\
    \ /tmp/tmp2erq811z.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    else\n        largest = minimum(el for el in lst\
    \ if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n       \
    \ return largest, smallest\n    end\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a list of numbers and returns the sum of the numbers. If the list\
    \ is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqyviyua7.jl:21\nin expression starting at\
    \ /tmp/tmpqyviyua7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.empty\n        return (None, None)\n\
    \    elseif all(lst.>=0)\n        return (lst.last, lst.first)\n    else\n   \
    \     return (lst.last, lst.first)\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the largest and smallest numbers in a list.\nIf\
    \ there are no numbers, return (None, None).\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvqaq2cym.jl:21\nin expression starting at\
    \ /tmp/tmpvqaq2cym.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector. For example, if the vector is [4, 6, -2, 3], the function should\
    \ return 10.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_5rf_j_.jl:20\nin expression starting at\
    \ /tmp/tmp9_5rf_j_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (lst.head, lst.last)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns a new vector where each element is the sum of the\
    \ elements in the original vector. For example, if the input vector is [1,2,3],\
    \ the output vector should be [3,4,6].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmply44mz_0.jl:23\nin expression starting at\
    \ /tmp/tmply44mz_0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns a tuple (a, b),\
    \ where 'a' is the largest of positive integers, and 'b' is the smallest of negative\
    \ integers in a list.\nIf there is no negative or positive integers, return them\
    \ as None.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwp57xkd7.jl:23\nin expression starting at\
    \ /tmp/tmpwp57xkd7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5w9mku2k.jl:23\nin expression starting at\
    \ /tmp/tmp5w9mku2k.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    elseif lst.is_two\n\
    \        return (lst.last, lst.first)\n    else\n        largest, smallest = lst.last,\
    \ lst.first\n        for elt in lst[2:end]\n            if elt > largest\n   \
    \             largest = elt\n            elseif elt < smallest\n             \
    \   smallest = elt\n            end\n        end\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements of the vector. \n\
    For example, if the vector is [4, -2, 3], the function should return 5.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zalkaxc.jl:31\nin expression starting at\
    \ /tmp/tmp4zalkaxc.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprl5rcg35.jl:22\nin expression starting at\
    \ /tmp/tmprl5rcg35.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x > 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjin27wxx.jl:21\nin expression starting at\
    \ /tmp/tmpjin27wxx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of integers and returns the sum of the integers\
    \ in the list. \nIf there are no integers in the list, return 0.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptiofq5xt.jl:21\nin expression starting at\
    \ /tmp/tmptiofq5xt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector. \nIf there\
    \ are no integers in the vector, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmply0mqu87.jl:20\nin expression starting at\
    \ /tmp/tmply0mqu87.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptb8d2q5u.jl:20\nin expression starting at\
    \ /tmp/tmptb8d2q5u.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector. Test it on $[-1,\
    \ 0, 2, -3]$.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzlvgc0_o.jl:23\nin expression starting at\
    \ /tmp/tmpzlvgc0_o.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector. Test it on $[-10,\
    \ -5, 3, 8, 10, 2, -5, -4, -3]$.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph47let_n.jl:23\nin expression starting at\
    \ /tmp/tmph47let_n.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (lst[end],\
    \ lst[1])\n    else\n        (a, b) = (lst[end], lst[1])\n    end\n    return\
    \ (a, b)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43p3uzjz.jl:22\nin expression starting at\
    \ /tmp/tmp43p3uzjz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (lst[end],\
    \ lst[1])\n    else\n        (a, b) = (lst[end], lst[1])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([0])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of positive integers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbc4icdxp.jl:21\nin expression starting at\
    \ /tmp/tmpbc4icdxp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n   \
    \ return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeyahgjq_.jl:20\nin expression starting at\
    \ /tmp/tmpeyahgjq_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptpj4r77o.jl:21\nin expression starting at\
    \ /tmp/tmptpj4r77o.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n   \
    \ return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyui22vs1.jl:20\nin expression starting at\
    \ /tmp/tmpyui22vs1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif all(lst.>=0)\n        return (max(lst), min(lst))\n    else\n\
    \        return (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function called largest_smallest_integers_2 that returns a tuple (a, b), where\
    \ 'a' is the largest of negative integers, and 'b' is the smallest of positive\
    \ integers in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lsmwpvq.jl:21\nin expression starting at\
    \ /tmp/tmp_lsmwpvq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    elseif length(lst) == 1 \n        return lst[1], lst[1]\n  \
    \  elseif all(x -> x < 0, lst)\n        return None, min(lst)\n    elseif all(x\
    \ -> x > 0, lst)\n        return max(lst), None\n    else\n        largest, smallest\
    \ = largest_smallest_integers(lst[2 : (end - 1)])\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpci_40bnn.jl:26\nin expression starting at\
    \ /tmp/tmpci_40bnn.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.empty\n        return (None, None)\n\
    \    elseif all(lst.>=0)\n        return (max(lst), min(lst))\n    else\n    \
    \    return (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1tyqoa63.jl:21\nin expression starting at\
    \ /tmp/tmp1tyqoa63.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    elseif lst.is_two\n\
    \        return (lst.last, lst.first)\n    elseif lst.is_three\n        return\
    \ (lst.last, lst.first, lst.last)\n    elseif lst.is_four\n        return (lst.last,\
    \ lst.first, lst.last, lst.first)\n    elseif lst.is_five\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_six\n        return\
    \ (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif\
    \ lst.is_seven\n        return (lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.last)\n    elseif lst.is_eight\n        return (lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_nine\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last)\n    elseif lst.is_ten\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first)\n    elseif lst.is_eleven\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last)\n\
    \    elseif lst.is_twelve\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n\
    \    elseif lst.is_thirteen\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last)\n    elseif lst.is_fourteen\n        return (lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last)\n    elseif lst.is_fifteen\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphty6h0og.jl:45\nin expression starting at\
    \ /tmp/tmphty6h0og.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the number of elements that are even.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjck3z0x8.jl:23\nin expression starting at\
    \ /tmp/tmpjck3z0x8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector. \nFor example, if the input is [4, -5, 6, -7, 8], the output\
    \ should be 15.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_03dl8r.jl:20\nin expression starting at\
    \ /tmp/tmp8_03dl8r.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (lst[end],\
    \ lst[1])\n    else\n        (a, b) = (lst[end], lst[1])\n    end\n    return\
    \ (a, b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95_m7x_g.jl:22\nin expression starting at\
    \ /tmp/tmp95_m7x_g.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 2: Write a function\
    \ that returns the largest and smallest numbers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvga9qh0u.jl:20\nin expression starting at\
    \ /tmp/tmpvga9qh0u.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x > 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == (None, None)\n@assert largest_smallest_integers([]) == (None,\
    \ None)\n@assert largest_smallest_integers([0]) == (None, None)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers in a\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ygp_ssn.jl:21\nin expression starting at\
    \ /tmp/tmp8ygp_ssn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x > 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns the sum of the absolute values of the elements in\
    \ the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiptjlxqo.jl:21\nin expression starting at\
    \ /tmp/tmpiptjlxqo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        if lst[0] < 0\n            return\
    \ (None, None)\n        elseif lst[0] > 0\n            return (1, lst[0])\n  \
    \      else\n            return (None, None)\n        end\n    else\n        largest\
    \ = minimum(lst)\n        smallest = maximum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp37dy7vn3.jl:29\nin expression starting at\
    \ /tmp/tmp37dy7vn3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements in the vector.\
    \ \nFor example, \n    abs_sum([1, 2, 3, 4]) == 5\n    abs_sum([-1, -2, -3, -4])\
    \ == 5\n    abs_sum([1, -2, 3, -4]) == 5\n    abs_sum([-1, -2, -3, -4, 5]) ==\
    \ 5\n    abs_sum([1, -2, 3, -4, 5]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6])\
    \ == 5\n    abs_sum([1, -2, 3, -4, -5, 6]) == 5\n    abs_sum([-1, -2, -3, -4,\
    \ 5, 6, 7]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7]) == 5\n    abs_sum([-1,\
    \ -2, -3, -4, 5, 6, 7, 8]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8]) == 5\n\
    \    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, 9]) == 5\n    abs_sum([1, -2, 3, -4,\
    \ -5, 6, 7, 8, 9]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, -9, 10]) ==\
    \ 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8, -9, 10]) == 5\n    abs_sum([-1, -2,\
    \ -3, -4, 5, 6, 7, 8, -9, 10, 11]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7,\
    \ 8, -9, 10, 11]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, -9, 10, 11, 12])\
    \ == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8, -9, 10, 11, 12]) == 5\n    abs_sum([-1,\
    \ -2, -3, -4, 5, 6, 7, 8, -9, 10, 11, 12, 13]) == 5\n    abs_sum([1, -2, 3, -4,\
    \ -5, 6, 7, 8, -9, 10, 11, 12, 13]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7,\
    \ 8, -9, 10, 11, 12, 13, 14]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8, -9,\
    \ 10, 11, 12, 13, 14]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, -9, 10,\
    \ 11, 12, 13, 14, 15]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8, -9, 10, 11,\
    \ 12, 13, 14, 15]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, -9, 10, 11,\
    \ 12, 13, 14, 15, 16]) == 5\n    abs_sum([1, \nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9j_i12e3.jl:23\nin expression starting at\
    \ /tmp/tmp9j_i12e3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x >= 0))\n    elseif all(x > 0 for x in lst)\n\
    \        return (max(x for x in lst if x <= 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the sum of the integers in a list.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7cbh0ryf.jl:21\nin expression starting at\
    \ /tmp/tmp7cbh0ryf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[1], lst[1])\n    elseif\
    \ length(lst) == 2\n        return (lst[1], lst[1])\n    else\n        largest\
    \ = maximum(lst)\n        smallest = minimum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppudaj76z.jl:25\nin expression starting at\
    \ /tmp/tmppudaj76z.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.head)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements in the vector.\
    \ Test it on $[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]$.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ypjokcn.jl:23\nin expression starting at\
    \ /tmp/tmp8ypjokcn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the number of times each\
    \ element appears in the vector. For example, if the vector is [1, 1, 2, 3], the\
    \ function should return [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1,\
    \ 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1,\
    \ 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] =>\
    \ [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3]\
    \ => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2,\
    \ 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1,\
    \ 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1,\
    \ 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] =>\
    \ [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3]\
    \ => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2,\
    \ 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1,\
    \ 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1,\
    \ 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] =>\
    \ [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3]\
    \ => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2,\
    \ 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1,\
    \ 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1,\
    \ 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => \nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxue2s62.jl:22\nin expression starting at\
    \ /tmp/tmpfxue2s62.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return\
    \ largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers. \n\
    The function should raise an error if the vector is empty.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpveoaakye.jl:19\nin expression starting at\
    \ /tmp/tmpveoaakye.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x > 0 for x in lst)\n        (a, b) = (max(lst),\
    \ min(lst))\n    else\n        (a, b) = (None, None)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of integers in a list that are less than a given number. For example, if the\
    \ list is [4, 2, 7, 3, 6, 8], the function should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpse28pdlb.jl:22\nin expression starting at\
    \ /tmp/tmpse28pdlb.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, min(lst))\n    elseif all(x -> x > 0, lst)\n        (a, b) = (min(lst),\
    \ None)\n    else\n        (a, b) = (min(lst), max(lst))\n    end\n    return\
    \ (a, b)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list\
    \ as an argument and returns the number of positive integers in the list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkat56oh8.jl:22\nin expression starting at\
    \ /tmp/tmpkat56oh8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, Nothing)\n    elseif length(lst) == 1 \n        return (lst[1], Nothing)\n\
    \    elseif all(x < 0 for x in lst) \n        return (None, lst[1])\n    elseif\
    \ all(x > 0 for x in lst) \n        return (lst[1], None)\n    else\n        largest\
    \ = maximum(lst)\n        smallest = minimum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7q11srou.jl:27\nin expression starting at\
    \ /tmp/tmp7q11srou.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[1], lst[1])\n    elseif\
    \ length(lst) == 2\n        return (lst[1], lst[1])\n    else\n        largest\
    \ = maximum(lst)\n        smallest = minimum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers. \nIf there are\
    \ no integers in the vector, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu10i9jie.jl:25\nin expression starting at\
    \ /tmp/tmpu10i9jie.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ value appears in a given list.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1crcjea.jl:20\nin expression starting at\
    \ /tmp/tmpz1crcjea.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, None)\n    elseif all(el > 0 for el in lst)\n        return (max(el for\
    \ el in lst if el < 0), min(el for el in lst if el < 0))\n    else\n        return\
    \ (max(el for el in lst if el < 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the number of times each element appears in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr6f653ph.jl:23\nin expression starting at\
    \ /tmp/tmpr6f653ph.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg6itk3hc.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching min(::Base.Generator{Base.Iterators.Filter{var\"#4#8\", Vector{Int64}},\
    \ typeof(identity)})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpg6itk3hc.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg6itk3hc.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg6itk3hc.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpg6itk3hc.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: None not\
    \ defined\n  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpg6itk3hc.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg6itk3hc.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg6itk3hc.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpg6itk3hc.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  UndefVarError: None not defined\n\
    \  Stacktrace:\n   [1] largest_smallest_integers(lst::Vector{Int64})\n     @ Main\
    \ /tmp/tmpg6itk3hc.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6itk3hc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ of the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp04ncjshn.jl:20\nin expression starting at\
    \ /tmp/tmp04ncjshn.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (), ()\n    \n    largest, smallest = Inf, -Inf\n    for i in lst\n        if\
    \ i < smallest\n            smallest = i\n        elseif i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest, smallest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector. \nIf there are no non-negative\
    \ numbers in the vector, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplmro49op.jl:26\nin expression starting at\
    \ /tmp/tmplmro49op.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    elseif\
    \ all(x -> x < 0, lst)\n        return (None, min(lst))\n    elseif all(x -> x\
    \ > 0, lst)\n        return (min(lst), None)\n    else\n        smallest, largest\
    \ = minimum(lst), maximum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector. \nFor example,\
    \ \n    sum([1, 2, 3]) == 6\n    sum([-1, -2, -3]) == 6\n    sum([1, -2, 3, -4])\
    \ == 6\n    sum([-1, -2, -3, -4]) == 6\n    sum([-1, -2, -3, -4, 5]) == 6\n  \
    \  sum([-1, -2, -3, -4, -5]) == 6\n    sum([-1, -2, -3, -4, -5, 6]) == 6\n   \
    \ sum([-1, -2, -3, -4, -5, 6, 7]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, 8])\
    \ == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, 9]) == 6\n    sum([-1, -2, -3,\
    \ -4, -5, 6, -7, -8, -9, 10]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9,\
    \ -10, 11]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11])\
    \ == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12]) == 6\n\
    \    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13]) == 6\n  \
    \  sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13, 14]) == 6\n\
    \    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13, 14, 15]) ==\
    \ 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13, 14, 15,\
    \ 16]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13,\
    \ 14, 15, 16, 17]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10,\
    \ -11, 12, 13, 14, 15, 16, 17, 18]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7,\
    \ -8, -9, -10, -10, \nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp291t6wfz.jl:26\nin expression starting at\
    \ /tmp/tmp291t6wfz.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of positive integers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqo10nod.jl:21\nin expression starting at\
    \ /tmp/tmpgqo10nod.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the integers in a list.\nIf there are no integers, return 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgdeqwn18.jl:23\nin expression starting at\
    \ /tmp/tmpgdeqwn18.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    end\n    \n    largest = minimum(el for el in\
    \ lst if el < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return\
    \ largest, smallest\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the largest and smallest numbers in a list.\nIf there are no numbers, return\
    \ (None, None).\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vxg3ga7.jl:21\nin expression starting at\
    \ /tmp/tmp1vxg3ga7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n    else if\
    \ all(x -> x > 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x ->\
    \ x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0,\
    \ lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x ==\
    \ 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x ==\
    \ 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x ==\
    \ 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x ==\
    \ 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, \nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyjer9upi.jl:14\nin expression starting at\
    \ /tmp/tmpyjer9upi.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers and returns the sum of the integers in the list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdnn_5r0.jl:20\nin expression starting at\
    \ /tmp/tmpfdnn_5r0.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    \n    largest = minimum(el for el in lst if el\
    \ < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return largest,\
    \ smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns a vector where each element is the sum of the squares of the elements\
    \ in the original vector. For example, square_sum([1, 2, 3, 4, 5]) should return\
    \ [25, 9, 16, 9, 25].\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6zjjt9j.jl:20\nin expression starting at\
    \ /tmp/tmpj6zjjt9j.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        (a, b)\
    \ = (None, None)\n    elseif length(lst) == 1 \n        (a, b) = (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 3 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 4 \n   \
    \     (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 5 \n        (a, b)\
    \ = (lst[1], lst[2])\n    elseif length(lst) == 6 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 7 \n        (a, b) = (lst[1], lst[2])\n \
    \   elseif length(lst) == 8 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 9 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 10 \n  \
    \      (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 11 \n        (a, b)\
    \ = (lst[1], lst[2])\n    elseif length(lst) == 12 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 13 \n        (a, b) = (lst[1], lst[2])\n\
    \    elseif length(lst) == 14 \n        (a, b) = (lst[1], lst[2])\n    elseif\
    \ length(lst) == 15 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 16 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 17 \n \
    \       (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 18 \n        (a,\
    \ b) = (lst[1], lst[2])\n    elseif length(lst) == 19 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 20 \n        (a, b) = (lst[1], lst[2])\n\
    \    elseif length(lst) == 21 \n        (a, b) = (lst[1], lst[2])\n    elseif\
    \ length(lst) == 22 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 23 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 24 \n \
    \       (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 25 \n        (a,\
    \ b) = (lst[1], lst[2])\n    elseif length(lst) == 26 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 27 \n        (a, b) = (lst[1], lst[2])\n\
    \    elseif length(lst) == 28 \n        (a, b) = (lst[1], lst[2])\n    elseif\
    \ length(lst) == 29 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 30 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 31 \n \
    \       (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 32 \n        (a,\
    \ b) = (lst[1], lst[2])\n    elseif length(lst) == 33 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0vajism.jl:1\nin expression starting at /tmp/tmpe0vajism.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n    \
    \    return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers. \nFor example, \nsquare_sum([1, 2, 3, 4]) should return 25.\
    \ \nThe function should raise an error if the vector is empty.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz8e5h18l.jl:25\nin expression starting at\
    \ /tmp/tmpz8e5h18l.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    end\n    \n    largest = minimum(el for el in\
    \ lst if el < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return\
    \ largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc269ah2c.jl:21\nin expression starting at\
    \ /tmp/tmpc269ah2c.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return largest,\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqusk0qe.jl:19\nin expression starting at\
    \ /tmp/tmpcqusk0qe.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n    \
    \    return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise: Write\
    \ a function that returns a tuple (a, b), where 'a' is the largest of positive\
    \ integers, and 'b' is the smallest of negative integers in a list.\nIf there\
    \ is no negative or positive integers, return them as None.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4z6bxgjq.jl:25\nin expression starting at\
    \ /tmp/tmp4z6bxgjq.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector. Test it on $[-10, -5, 0, 1, 5, 10]$.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb93k5q4s.jl:23\nin expression starting at\
    \ /tmp/tmpb93k5q4s.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    else\n        largest = minimum(el for el in\
    \ lst if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n   \
    \     return (largest, smallest)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqosyz4r6.jl:21\nin expression starting at\
    \ /tmp/tmpqosyz4r6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (), () \n    else \n        largest, smallest = Inf, -Inf \n        for elt\
    \ in lst \n            if elt > largest \n                largest = elt \n   \
    \         else if elt < smallest \n                smallest = elt \n         \
    \   end \n        end \n        return (largest, smallest) \n    end \nend \n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list as an argument\
    \ and returns the number of elements in the list that are even.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppbo83nnb.jl:20\nin expression starting at\
    \ /tmp/tmppbo83nnb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    elseif length(lst) == 1 \n        return lst[1], lst[0]\n  \
    \  elseif all(x < 0 for x in lst) \n        return None, min(lst)\n    elseif\
    \ all(x > 0 for x in lst) \n        return max(lst), None\n    else\n        smallest,\
    \ largest = minimum(lst), maximum(lst)\n        if smallest < 0 \n           \
    \ return None, largest\n        elseif largest < 0 \n            return smallest,\
    \ None\n        else\n            return smallest, largest\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in a\
    \ list. \nIf there are no numbers in the list, return 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoxhdn84i.jl:31\nin expression starting at\
    \ /tmp/tmpoxhdn84i.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector and returns a vector where each element is the sum of the\
    \ squares of the elements in the original vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzytm7pey.jl:20\nin expression starting at\
    \ /tmp/tmpzytm7pey.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzx_ybgfg.jl:20\nin expression starting at\
    \ /tmp/tmpzx_ybgfg.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, None)\n    else\n        (a, b) = (max(lst), min(lst))\n    end\n\
    \    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5l2fi5p.jl:20\nin expression starting at\
    \ /tmp/tmpx5l2fi5p.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    else\n        largest = minimum(el for el in\
    \ lst if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n   \
    \     return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of integers in a list that are\nevenly\
    \ divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_ovk707.jl:21\nin expression starting at\
    \ /tmp/tmp5_ovk707.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ largest and smallest integers in a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpilwqzfu6.jl:20\nin expression starting at\
    \ /tmp/tmpilwqzfu6.jl:20\n"
  exit_code: 1
  status: SyntaxError
