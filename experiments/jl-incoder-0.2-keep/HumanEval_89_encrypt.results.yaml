name: HumanEval_89_encrypt
language: julia
results:
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = ('A'..'Z')\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rot\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph5vjrk2c.jl:14\nin expression\
    \ starting at /tmp/tmph5vjrk2c.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A'..'Z')\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - \nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 1)::-1\"\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmppktchcry.jl:15\nin expression starting at /tmp/tmppktchcry.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = ('A'..'Z')\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    \n    encrypted_string =\
    \ \"\"\n    \n    for c in s:\n        if c in alphabet:\n            encrypted_string\
    \ += rotated_alphabet[alphabet.index(c) + 2]\n        else:\n            encrypted_string\
    \ += c\n    \n    return encrypted_string\n</code>\n<|/ a tags=string,encryption,haskell\
    \ |>\n<| a tags=string,encryption,haskell |>\nI wrote a solution that is similar\
    \ to what was suggested in the comments, but I thought it would be useful to share\
    \ it here for future reference.\n<code>\nimport Data.Char\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmbb86zdu.jl:14\nin expression\
    \ starting at /tmp/tmpmbb86zdu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6ivqny_.jl:14\nin expression starting at\
    \ /tmp/tmpf6ivqny_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.length div 2 -\
    \ 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1]\n    alphabet = alphabet[alphabet.length div 2 - 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1]\n    alphabet = alphabet[alphabet.length div 2 - 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1]\n    alphabet = alphabet[alphabet.length div 2 - 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1]\n    alphabet = alphabet[alphabet.length div 2 - 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1]\n    alphabet = alphabet[alphabet.length div 2 - 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1]\n    alphabet = alphabet[alphabet.length div 2 - 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8mvvl8o7.jl:1\nin expression starting at /tmp/tmp8mvvl8o7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpx8yg4y9e.jl:12\nin expression\
    \ starting at /tmp/tmpx8yg4y9e.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsgk0pyiq.jl:13\nin expression\
    \ starting at /tmp/tmpsgk0pyiq.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzmzazzf.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzmzazzf.jl:1\n\
    in expression starting at /tmp/tmpxzmzazzf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2]\n  \
    \  alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2j8hm_wc.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2j8hm_wc.jl:1\n\
    in expression starting at /tmp/tmp2j8hm_wc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = rot13(alphabet)\n    alphabet = alphabet[1:] \n    alphabet\
    \ = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet\
    \ = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n \
    \   alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvangccss.jl:13\nin expression\
    \ starting at /tmp/tmpvangccss.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxdcyewpr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxdcyewpr.jl:1\n\
    in expression starting at /tmp/tmpxdcyewpr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift the alphabet down by 2\n    alphabet = alphabet[1::2] # shift the alphabet\
    \ down by 1\n    alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet\
    \ = alphabet[1::2] # shift the alphabet down by 1\n    alphabet = alphabet[::-1]\
    \ # reverse the alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down\
    \ by 1\n    alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpurkhkely.jl:13\nin expression\
    \ starting at /tmp/tmpurkhkely.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[(alphabet.size - 2)::-1]\n\
    \    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 2)::-1\"\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmpaz9q_r2r.jl:13\nin expression starting at /tmp/tmpaz9q_r2r.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length\
    \ mod 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: \nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"2::-2\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb13a8qgl.jl:13\n\
    in expression starting at /tmp/tmpb13a8qgl.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A'..'Z')\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet\nusing Test\n\n@testset begin\n\ncandidate =\
    \ encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl3y78vlp.jl:15\n\
    in expression starting at /tmp/tmpl3y78vlp.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp53sti7ce.jl:1\nin expression starting at /tmp/tmp53sti7ce.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpumguqyvq.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpumguqyvq.jl:1\n\
    in expression starting at /tmp/tmpumguqyvq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array{Char}(letters)\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = \nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwhtl_v5g.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwhtl_v5g.jl:1\n\
    in expression starting at /tmp/tmpwhtl_v5g.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn5dotwjq.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn5dotwjq.jl:1\n\
    in expression starting at /tmp/tmpn5dotwjq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array{Char}(\n        'abcdefghijklmnopqrstuvwxyz'\n      \
    \  'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        '0123456789'\n    )\n    \n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpsm7x_oug.jl:13\nin expression\
    \ starting at /tmp/tmpsm7x_oug.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfpybj0vs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfpybj0vs.jl:1\n\
    in expression starting at /tmp/tmpfpybj0vs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n   \
    \ alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp68hay2nb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp68hay2nb.jl:1\n\
    in expression starting at /tmp/tmp68hay2nb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5gu79sdo.jl:13\nin expression\
    \ starting at /tmp/tmp5gu79sdo.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    rotated_alphabet = alphabet[1::2] + alphabet[0::2]\n    encrypted_string\
    \ = \"\"\n    for c in s\n        encrypted_string += rotated_alphabet[alphabet.index(c)]\n\
    \    return encrypted_string\n</code>\n<|/ a tags=string,encryption,haskell |>\n\
    <| c |>\n`alphabet[1::2] + alphabet[0::2]` can be written `alphabet[1..]`.\n<|/\
    \ c |>\n<| a |>\n<code>\nimport Data.Char\nimport Data.List\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpol7iuvk7.jl:18\nin expression starting at\
    \ /tmp/tmpol7iuvk7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[3:]\
    \ + alphabet[:3]\n    alphabet = alphabet[4:] + alphabet[:4]\n    alphabet = alphabet[5:]\
    \ + alphabet[:5]\n    alphabet = alphabet[6:] + alphabet[:6]\n    alphabet = alphabet[7:]\
    \ + alphabet[:7]\n    alphabet = alphabet[8:] + alphabet[:8]\n    alphabet = alphabet[9:]\
    \ + alphabet[:9]\n    alphabet = alphabet[10:] + alphabet[:10]\n    alphabet =\
    \ alphabet[11:] + alphabet[:11]\n    alphabet = alphabet[12:] + alphabet[:12]\n\
    \    alphabet = alphabet[13:] + alphabet[:13]\n    alphabet = alphabet[14:] +\
    \ alphabet[:14]\n    alphabet = alphabet[15:] + alphabet[:15]\n    alphabet =\
    \ alphabet[16:] + alphabet[:16]\n    alphabet = alphabet[17:] + alphabet[:17]\n\
    \    alphabet = alphabet[18:] + alphabet[:18]\n    alphabet = alphabet[19:] +\
    \ alphabet[:19]\n    alphabet = alphabet[20:] + alphabet[:20]\n    alphabet =\
    \ alphabet[21:] + alphabet[:21]\n    alphabet = alphabet[22:] + alphabet[:22]\n\
    \    alphabet = alphabet[23:] + alphabet[:23]\n    alphabet = alphabet[24:] +\
    \ alphabet[:24]\n    alphabet = alphabet[25:] + alphabet[:25]\n    alphabet =\
    \ alphabet[26:] + alphabet[:26]\n    alphabet = alphabet[27:] + alphabet[:27]\n\
    \    alphabet = alphabet[28:] + alphabet[:28]\n    alphabet = alphabet[29:] +\
    \ alphabet[:29]\n    alphabet = alphabet[30] + alphabet[:30]\n    alphabet = alphabet[31:]\
    \ + alphabet[:31]\n    alphabet = alphabet[32:] + alphabet[:32]\n    alphabet\
    \ = alphabet[33:] + alphabet[:33]\n    alphabet = alphabet[34:] + alphabet[:34]\n\
    \    alphabet = alphabet[35:] + alphabet[:35]\n    alphabet = alphabet[36:] +\
    \ alphabet[:36]\n    alphabet = alphabet[37:] + alphabet[:37]\n    alphabet =\
    \ alphabet[38:] + alphabet[:38]\n    alphabet = alphabet[39:] + alphabet[:39]\n\
    \    alphabet = alphabet[40] + alphabet[:40]\n    alphabet = \nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprspwvfea.jl:13\nin expression\
    \ starting at /tmp/tmprspwvfea.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n   \
    \ alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n   \
    \ alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n   \
    \ alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7tbrh714.jl:13\nin expression\
    \ starting at /tmp/tmp7tbrh714.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7i4meuj4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7i4meuj4.jl:1\n\
    in expression starting at /tmp/tmp7i4meuj4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwkved7pj.jl:13\nin expression\
    \ starting at /tmp/tmpwkved7pj.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpligxrn.jl:1\nin expression starting at /tmp/tmphpligxrn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    rotated_alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    encrypted_string = s\n    for i in encrypted_string\n\
    \        encrypted_string = encrypted_string.replace(i, rotated_alphabet[i])\n\
    \    end\n    return encrypted_string\nend\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"hi\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"asdfghjkl\")\n\
    </cell>\n<code language=julia-1.0>\nencrypt(\"gf\")\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"et\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as an argument and returns the string in reverse. \n    For example:\n    reverse(\"\
    hi\") returns 'ih'\n    reverse(\"asdfghjkl\") returns 'kjldfga'\n    reverse(\"\
    gf\") returns 'gfedcba'\n    reverse(\"et\") returns 'etedfgh'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd52dalpu.jl:21\nin expression starting at\
    \ /tmp/tmpd52dalpu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n   \
    \ alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6i12das0.jl:13\nin expression\
    \ starting at /tmp/tmp6i12das0.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphssxdqp7.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphssxdqp7.jl:1\n\
    in expression starting at /tmp/tmphssxdqp7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkqj8w8xp.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkqj8w8xp.jl:1\n\
    in expression starting at /tmp/tmpkqj8w8xp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2]\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9tio27_.jl:13\nin expression\
    \ starting at /tmp/tmpd9tio27_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj1kpsw_u.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj1kpsw_u.jl:1\n\
    in expression starting at /tmp/tmpj1kpsw_u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzhe1jo3.jl:1\nin expression starting at /tmp/tmpmzhe1jo3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq972prvk.jl:1\nin expression starting at /tmp/tmpq972prvk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet_rotated = alphabet[(alphabet.size\
    \ - 1) - alphabet.rotate(2)]\n    alphabet_rotated |> String.reverse |> String.map\
    \ alphabet_rotated |> String.join \nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpn3t6nvmy.jl:11 expected\
    \ \"end\", got \"alphabet_rotated\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn3t6nvmy.jl:14\n\
    in expression starting at /tmp/tmpn3t6nvmy.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = ('A'..'Z')\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptuter29i.jl:14\nin expression\
    \ starting at /tmp/tmptuter29i.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    rotated_alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    \n    encrypted_string = \"\"\n    \n\
    \    for char in s\n        encrypted_string += rotated_alphabet[alphabet.index(char)]\n\
    \    \n    return encrypted_string\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpewhpvpz8.jl:25\nin expression starting at\
    \ /tmp/tmpewhpvpz8.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet_rotated = alphabet[(alphabet.size\
    \ - 1) - alphabet.rotate(2)]\n    alphabet_rotated_reversed = alphabet[(alphabet.size\
    \ - 1) - alphabet.rotate(-2)]\n    alphabet_rotated = alphabet_rotated[::-1]\n\
    \    alphabet_rotated_reversed = alphabet_rotated_reversed[::-1]\n    \n    alphabet_rotated_reversed\
    \ = alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed =\
    \ alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n\
    \    \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n \
    \   \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n  \
    \  \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n   \
    \ \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n\
    \    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n \
    \   alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n  \
    \  alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n   \
    \ alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed\
    \ = alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed =\
    \ alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n\
    \    \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n \
    \   \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n  \
    \  \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n   \
    \ \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n\
    \    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n \
    \   alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n  \
    \  alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n   \
    \ alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed\
    \ = alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed =\
    \ alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed = \n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"::-1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu37rn9y9.jl:15\n\
    in expression starting at /tmp/tmpu37rn9y9.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet_rotated_down = alphabet[(alphabet.size\
    \ - 1) - alphabet.index('A')]\n    alphabet_rotated_up = alphabet[(alphabet.size\
    \ - 1) - alphabet.index('Z')]\n    alphabet_rotated_down = alphabet_rotated_down\
    \ * 2\n    alphabet_rotated_up = alphabet_rotated_up * 2\n    \n    rotated_alphabet\
    \ = alphabet_rotated_down + alphabet_rotated_up\n    \n    encrypted_string =\
    \ \"\"\n    for character in s\n        encrypted_string += rotated_alphabet[(alphabet.index(character)\
    \ - alphabet.index('A')) % alphabet.size]\n    \n    return encrypted_string\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7g437c0.jl:26\nin expression starting at\
    \ /tmp/tmpd7g437c0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array{Char}(('A'..'Z'))\n    \n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphi3aajap.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphi3aajap.jl:1\n\
    in expression starting at /tmp/tmphi3aajap.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxllalrx.jl:1\nin expression starting at /tmp/tmphxllalrx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpohbpxkpg.jl:13\nin expression\
    \ starting at /tmp/tmpohbpxkpg.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph1y00qwb.jl:13\nin expression\
    \ starting at /tmp/tmph1y00qwb.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    encrypted_string = \"\"\n    \n    for letter in alphabet\n       \
    \ encrypted_string += letter\n    \n    return encrypted_string\nend\n</cell>\n\
    <code language=julia-1.0>\nencrypt(\"hi\")\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"asdfghjkl\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"gf\")\n\
    </cell>\n<code language=julia-1.0>\nencrypt(\"et\")\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string as an argument and returns a string\
    \ decrypted with the alphabet being rotated. \nThe alphabet should be rotated\
    \ in a manner such that the letters shift down by two multiplied to two places.\n\
    For example:\ndecrypt('lm') returns 'hi'\ndecrypt('ewhjklnop') returns 'asdfghjkl'\n\
    decrypt('kj') returns 'gf'\ndecrypt('ix') returns 'et'\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxkdggkm.jl:21\nin expression starting at\
    \ /tmp/tmpvxkdggkm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpupbzclo9.jl:15\nin expression\
    \ starting at /tmp/tmpupbzclo9.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    rotated_alphabet\
    \ = Array(\"nopqrstuvwxyzabcdefghijklm\")\n    \n    encrypted_string = \"\"\n\
    \    for c in s\n        encrypted_string += alphabet[alphabet.index(c) + rotated_alphabet.index(c)]\n\
    \    end\n    \n    return encrypted_string\nend\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"hi\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"asdfghjkl\")\n\
    </cell>\n<code language=julia-1.0>\nencrypt(\"gf\")\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"et\")\n</cell>\n<text>\nExercise: Write a function that decrypts a string\
    \ encrypted with the \n    alphabet being rotated. \n    The alphabet should be\
    \ rotated in a manner such that the letters \n    shift down by two multiplied\
    \ to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop')\
    \ returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns\
    \ 'et'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpviquo1yv.jl:22\nin expression starting at\
    \ /tmp/tmpviquo1yv.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7mzm_lpc.jl:15\nin expression\
    \ starting at /tmp/tmp7mzm_lpc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkf81u0kf.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkf81u0kf.jl:1\n\
    in expression starting at /tmp/tmpkf81u0kf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyoywmlht.jl:13\nin expression\
    \ starting at /tmp/tmpyoywmlht.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n\
    \    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 2::-)1\"\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmpkm_2c_fo.jl:13\nin expression starting at /tmp/tmpkm_2c_fo.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n   \
    \ alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph07ir9zr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph07ir9zr.jl:1\n\
    in expression starting at /tmp/tmph07ir9zr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwsw57kd8.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwsw57kd8.jl:1\n\
    in expression starting at /tmp/tmpwsw57kd8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7z_stfv8.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7z_stfv8.jl:1\n\
    in expression starting at /tmp/tmp7z_stfv8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprfmulj8l.jl:13\nin expression\
    \ starting at /tmp/tmprfmulj8l.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet_rotated_down = alphabet |> Enum.map(flip\
    \ Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet |> Enum.map(flip\
    \ Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down |>\
    \ Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzgsoavds.jl:13\nin expression starting at\
    \ /tmp/tmpzgsoavds.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \    rotated_alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \    \n    encrypted_string = \"\"\n    \n    for character in s\n        encrypted_string\
    \ += rotated_alphabet[(alphabet.index(character) + 2) % 26]\n    \n    return\
    \ encrypted_string\nend\n</cell>\n<code language=julia-1.5>\nencrypt(\"hi\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function decrypt that takes a string as an\
    \ argument and returns a string decrypted with the alphabet being rotated. \n\
    \    The alphabet should be rotated in a manner such that the letters shift down\
    \ by two multiplied to two places.\n    For example:\n    decrypt('lm') returns\
    \ 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns\
    \ 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsig0b3vi.jl:22\nin expression starting at\
    \ /tmp/tmpsig0b3vi.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[1:alphabet.length/2]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n    alphabet\
    \ = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[1:alphabet.length/2]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n    alphabet\
    \ = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[1:alphabet.length/2]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n    alphabet\
    \ = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[1:alphabet.length/2]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n    alphabet\
    \ = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[1:alphabet.length/2]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n    alphabet\
    \ = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[1:alphabet.length/2]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n    alphabet\
    \ = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz1kf17dc.jl:13\nin expression\
    \ starting at /tmp/tmpz1kf17dc.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0cam1zr2.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0cam1zr2.jl:1\n\
    in expression starting at /tmp/tmp0cam1zr2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = String.ascii_lowercase\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiopeil93.jl:1\nin expression starting at /tmp/tmpiopeil93.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_msjwcg4.jl:15\nin expression\
    \ starting at /tmp/tmp_msjwcg4.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + \nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxgka3abz.jl:13\nin expression\
    \ starting at /tmp/tmpxgka3abz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphvyfuc4w.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphvyfuc4w.jl:1\n\
    in expression starting at /tmp/tmphvyfuc4w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.length\
    \ mod 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9cau_m3o.jl:1\nin expression starting at /tmp/tmp9cau_m3o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6sc9cjlr.jl:1\nin expression starting at /tmp/tmp6sc9cjlr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = rot13(alphabet)\n    alphabet = alphabet[1:] \n    alphabet\
    \ = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet\
    \ = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n \
    \   alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdf9bmzdl.jl:13\nin expression\
    \ starting at /tmp/tmpdf9bmzdl.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2]\n  \
    \  alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5akpsd82.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5akpsd82.jl:1\n\
    in expression starting at /tmp/tmp5akpsd82.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz8223_dv.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz8223_dv.jl:1\n\
    in expression starting at /tmp/tmpz8223_dv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = rot13(alphabet)\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx4grq9wd.jl:13\nin expression\
    \ starting at /tmp/tmpx4grq9wd.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array{Char}(('A'..'Z'))\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcsw3t813.jl:82\nin expression starting at\
    \ /tmp/tmpcsw3t813.jl:82\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n\
    \    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 2::-)1\"\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmpwh4j3v8_.jl:13\nin expression starting at /tmp/tmpwh4j3v8_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A'..'Z')\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphab\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbhvu62o.jl:1\nin expression starting at /tmp/tmpzbhvu62o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqlh4mqj9.jl:13\nin expression\
    \ starting at /tmp/tmpqlh4mqj9.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwlqg175r.jl:13\nin expression\
    \ starting at /tmp/tmpwlqg175r.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet_length = len(alphabet)\n\
    \    encrypted_string = ''\n    for letter in s:\n        encrypted_string +=\
    \ alphabet[(alphabet_length - alphabet.index(letter)) - 2]\n    return encrypted_string\n\
    </code>\n<|/ a tags=string,encryption,python,python-3.x |>\n<| a dscore=0 |>\n\
    <code>\ndef encrypt(s):\n    alphabet = string.ascii_lowercase\n    encrypted_string\
    \ = ''\n    for letter in s:\n        encrypted_string += alphabet[(alphabet.index(letter)\
    \ + 2) % 26]\n    return encrypted_string\n</code>\n<|/ a tags=string,encryption,python,python-3.x\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=string,encryption,python,python-3.x |>\n<code>\n\
    def encrypt(s):\n    alphabet = string.ascii_lowercase\n    encrypted_string =\
    \ ''\n    for letter in s:\n        encrypted_string += alphabet[(alphabet.index(letter)\
    \ + 2) % 26]\n    return encrypted_string\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,encryption,python,python-3.x\
    \ |>\n<code>\ndef encrypt(s):\n    alphabet = string.ascii_lowercase\n    encrypted_string\
    \ = ''\n    for letter in s:\n        encrypted_string += alphabet[(alphabet.index(letter)\
    \ + 2) % 26]\n    return encrypted_string\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=string,encryption,python,python-3.x |>\n<code>\ndef encrypt(s):\n\
    \    alphabet = string.ascii_lowercase\n    encrypted_string = ''\n    for letter\
    \ in s:\n        encrypted_string += alphabet[(alphabet.index(letter) + 2) % 26]\n\
    \    return encrypted_string\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\ndef encrypt(s):\n    alphabet = string.ascii_lowercase\n\
    \    encrypted_string = ''\n    for letter in s:\n        encrypted_string +=\
    \ alphabet[(alphabet.index(letter) + 2) % 26]\n    return encrypted_string\n</code>\n\
    <|/ a tags=string,encryption,python,python-3.x |>\n<| c |>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptivdkshk.jl:14\nin expression starting at\
    \ /tmp/tmptivdkshk.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n \
    \   \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n   \
    \ alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n \
    \   \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n   \
    \ alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n \
    \   \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n   \
    \ alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n \
    \   \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n   \
    \ alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n \
    \   \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n   \
    \ alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size + \nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ox69e1x.jl:1\nin expression starting at /tmp/tmp1ox69e1x.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = rot13(alphabet)\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp42s9k0ml.jl:15\nin expression\
    \ starting at /tmp/tmp42s9k0ml.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    return ''.join(alphabet[alphabet.index(letter)] for letter in s)\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu5ojz4m6.jl:13\nin expression\
    \ starting at /tmp/tmpu5ojz4m6.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmkrz7rua.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmkrz7rua.jl:1\n\
    in expression starting at /tmp/tmpmkrz7rua.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu7kev4xs.jl:1\nin expression starting at /tmp/tmpu7kev4xs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2\
    \ - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2 -\
    \ 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length\
    \ div 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div\
    \ 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n\
    \    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n  \
    \  alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n    alphabet =\
    \ alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2\
    \ - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2 -\
    \ 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length\
    \ div 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div\
    \ 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n\
    \    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n  \
    \  alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n    alphabet =\
    \ alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2\
    \ - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2 -\
    \ 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length\
    \ div 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div\
    \ 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n\
    \    alphabet = alphabet[alphabet.length div 2 - 1:alphabet\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfc_7yg8y.jl:1\nin expression starting at /tmp/tmpfc_7yg8y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjkrnh5vd.jl:13\nin expression\
    \ starting at /tmp/tmpjkrnh5vd.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpamossw7q.jl:13\nin expression\
    \ starting at /tmp/tmpamossw7q.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpehoxovtr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpehoxovtr.jl:1\n\
    in expression starting at /tmp/tmpehoxovtr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphab\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikra6al8.jl:1\nin expression starting at /tmp/tmpikra6al8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxbfnzbfn.jl:13\nin expression\
    \ starting at /tmp/tmpxbfnzbfn.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = alphabet\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzg4lrjbz.jl:15\nin expression\
    \ starting at /tmp/tmpzg4lrjbz.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1yt3s7i.jl:1\nin expression starting at /tmp/tmpx1yt3s7i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A'..'Z')\n    \n    encrypted_string = ''\n    \n \
    \   for c in s\n        \n        if c in alphabet\n            \n           \
    \ index = alphabet.index(c)\n            \n            encrypted_string += alphabet[(index+2)%26]\n\
    \            \n        else\n            \n            encrypted_string += c\n\
    \            \n        end\n        \n    end\n    \n    return encrypted_string\n\
    end\n</cell>\n<code language=julia-1.0>\nencrypt(\"hi\")\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"asdfghjkl\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"gf\")\n\
    </cell>\n<code language=julia-1.0>\nencrypt(\"et\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as an argument and returns the string\
    \ reversed.\nFor example:\nreverse(\"hello\") returns \"olleh\"\nreverse(\"asdfghjkl\"\
    ) returns \"kjdfhgas\"\nreverse(\"gf\") returns \"gfedcba\"\nreverse(\"et\") returns\
    \ \"etx\"\nHint: Reverse a string is just concatenating it with the string reversed.\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu1pafap4.jl:15\nin expression starting at\
    \ /tmp/tmpu1pafap4.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiinj2y18.jl:1\nin expression starting at /tmp/tmpiinj2y18.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf08alqtc.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf08alqtc.jl:1\n\
    in expression starting at /tmp/tmpf08alqtc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjvx9unc7.jl:13\nin expression\
    \ starting at /tmp/tmpjvx9unc7.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet_rotated_down = alphabet[2:]\n    alphabet_rotated_up\
    \ = alphabet[1:] + alphabet[:1]\n    \n    s_rotated_down = alphabet_rotated_down\
    \ * 2\n    s_rotated_up = alphabet_rotated_up * 2\n    \n    s_rotated_down =\
    \ s_rotated_down.zip(alphabet_rotated_up)\n    s_rotated_up = s_rotated_up.zip(alphabet_rotated_down)\n\
    \    \n    s_rotated_down = s_rotated_down.map(x => x.reverse)\n    s_rotated_up\
    \ = s_rotated_up.map(x => x.reverse)\n    \n    s_rotated_down = s_rotated_down.map(x\
    \ => x.reverse)\n    s_rotated_up = s_rotated_up.map(x => x.reverse)\n    \n \
    \   s_rotated_down = s_rotated_down.map(x => x.reverse)\n    s_rotated_up = s_rotated_up.map(x\
    \ => x.reverse)\n    \n    s_rotated_down = s_rotated_down.map(x => x.reverse)\n\
    \    s_rotated_up = s_rotated_up.map(x => x.reverse)\n    \n    s_rotated_down\
    \ = s_rotated_down.map(x => x.reverse)\n    s_rotated_up = s_rotated_up.map(x\
    \ => x.reverse)\n    \n    s_rotated_down = s_rotated_down.map(x => x.reverse)\n\
    \    s_rotated_up = s_rotated_up.map(x => x.reverse)\n    \n    s_rotated_down\
    \ = s_rotated_down.map(x => x.reverse)\n    s_rotated_up = s_rotated_up.map(x\
    \ => x.reverse)\n    \n    s_rotated_down = s_rotated_down.map(x => x.reverse)\n\
    \    s_rotated_up = s_rotated_up.map(x => x.reverse)\n    \n    s_rotated_down\
    \ = s_rotated_down.map(x => x.reverse)\n    s_rotated_up = s_rotated_up.map(x\
    \ => x.reverse)\n    \n    s_rotated_down = s_rotated_down.map(x => x.reverse)\n\
    \    s_rotated_up = s_rotated_up.map(x => x.reverse)\n    \n    s_rotated_down\
    \ = s_rotated_down.map(x => x.reverse)\n    s_rotated_up = s_rotated_up.map(x\
    \ => x.reverse)\n    \n    s_rotated_down = s_rotated_down.map(x \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxv8fjxu_.jl:13\nin expression\
    \ starting at /tmp/tmpxv8fjxu_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpklzrtno4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpklzrtno4.jl:1\n\
    in expression starting at /tmp/tmpklzrtno4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2n1lirj2.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2n1lirj2.jl:1\n\
    in expression starting at /tmp/tmp2n1lirj2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4r70d05j.jl:13\nin expression\
    \ starting at /tmp/tmp4r70d05j.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 27\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8pfvusdc.jl:13\nin expression starting at\
    \ /tmp/tmp8pfvusdc.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_string = s\n\
    \    for c in encrypted_string\n        encrypted_string = encrypted_string.replace(c.to_s,\
    \ rotated_alphabet[alphabet.index(c)])\n    end\n    return encrypted_string\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `encrypt(\"asdfghjkl\"\
    )` returns `\"ewhjklnop\"` instead of `\"ix\"`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ bug, thanks for pointing it out\n<|/ c |>\n<| c |>\nThis doesn't work. `encrypt(\"\
    asdfghjkl\")` returns `\"ewhjklnop\"` instead of `\"ix\"`.\n<|/ c |>\n<| c |>\n\
    I fixed the bug, thanks for pointing it out\n<|/ c |>\n<| c |>\nThis doesn't work.\
    \ `encrypt(\"asdfghjkl\")` returns `\"ewhjklnop\"` instead of `\"ix\"`.\n<|/ c\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk5j7hzwl.jl:13\nin expression\
    \ starting at /tmp/tmpk5j7hzwl.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-3]\n    alphabet = alphabet[alphabet.len()-3..alphabet.len()-4]\n\
    \    alphabet = alphabet[alphabet.len()-4..alphabet.len()-5]\n    alphabet = alphabet[alphabet.len()-5..alphabet.len()-6]\n\
    \    alphabet = alphabet[alphabet.len()-6..alphabet.len()-7]\n    alphabet = alphabet[alphabet.len()-7..alphabet.len()-8]\n\
    \    alphabet = alphabet[alphabet.len()-8..alphabet.len()-9]\n    alphabet = alphabet[alphabet.len()-9..alphabet.len()-10]\n\
    \    alphabet = alphabet[alphabet.len()-10..alphabet.len()-11]\n    alphabet =\
    \ alphabet[alphabet.len()-11..alphabet.len()-12]\n    alphabet = alphabet[alphabet.len()-12..alphabet.len()-13]\n\
    \    alphabet = alphabet[alphabet.len()-13..alphabet.len()-14]\n    alphabet =\
    \ alphabet[alphabet.len()-14..alphabet.len()-15]\n    alphabet = alphabet[alphabet.len()-15..alphabet.len()-16]\n\
    \    alphabet = alphabet[alphabet.len()-16..alphabet.len()-17]\n    alphabet =\
    \ alphabet[alphabet.len()-17..alphabet.len()-18]\n    alphabet = alphabet[alphabet.len()-18..alphabet.len()-19]\n\
    \    alphabet = alphabet[alphabet.len()-19..alphabet.len()-20]\n    alphabet =\
    \ alphabet[alphabet.len()-20..alphabet.len()-21]\n    alphabet = alphabet[alphabet.len()-21..alphabet.len()-22]\n\
    \    alphabet = alphabet[alphabet.len()-22..alphabet.len()-23]\n    alphabet =\
    \ alphabet[alphabet.len()-23..alphabet.len()-24]\n    alphabet = alphabet[alphabet.len()-24..alphabet.len()-25]\n\
    \    alphabet = alphabet[alphabet.len()-25..alphabet.len()-26]\n    alphabet =\
    \ alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptbmgfjk0.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptbmgfjk0.jl:1\n\
    in expression starting at /tmp/tmptbmgfjk0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet += string.ascii_uppercase\n\
    \    alphabet += string.digits\n    alphabet += string.punctuation\n    alphabet\
    \ += string.whitespace\n    alphabet += string.ascii_lowercase\n    alphabet +=\
    \ string.ascii_uppercase\n    alphabet += string.digits\n    alphabet += string.punctuation\n\
    \    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n \
    \   alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp72_7it4i.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp72_7it4i.jl:1\n\
    in expression starting at /tmp/tmp72_7it4i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm0fx7o1v.jl:1\nin expression starting at /tmp/tmpm0fx7o1v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = rot13(alphabet)\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n\
    \    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet\
    \ * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet\
    \ = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet\
    \ + 26\n    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet\
    \ = alphabet + 26\n    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n\
    \    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n    alphabet = alphabet\
    \ - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n\
    \    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet\
    \ * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet\
    \ = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet\
    \ + 26\n    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet\
    \ = alphabet + 26\n    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n\
    \    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n    alphabet = alphabet\
    \ - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n\
    \    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet\
    \ * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet\
    \ = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet\
    \ + 26\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpon57b7_8.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpon57b7_8.jl:1\n\
    in expression starting at /tmp/tmpon57b7_8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array{Char}(('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'))\n\
    \    \n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnvbsmyga.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnvbsmyga.jl:1\n\
    in expression starting at /tmp/tmpnvbsmyga.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lbtirnk.jl:1\nin expression starting at /tmp/tmp4lbtirnk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n\"\"\"Create a function decrypt that takes a string as an argument and\n\
    \    returns a string decrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo8_ga8e8.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo8_ga8e8.jl:1\n\
    in expression starting at /tmp/tmpo8_ga8e8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_c0hw9r.jl:1\nin expression starting at /tmp/tmp6_c0hw9r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    rotated_alphabet\
    \ = alphabet[alphabet.size - alphabet.size - alphabet.index(\"a\") + 1]\n    \n\
    \    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size - rotated_alphabet.index(\"\
    z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size -\
    \ rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0oyai6s.jl:1\nin expression starting at /tmp/tmpc0oyai6s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A'..'Z')\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n \
    \   alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n \
    \   alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n \
    \   alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n \
    \   alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n \
    \   alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet\
    \ = alphabet[\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55yuma2g.jl:1\nin expression starting at /tmp/tmp55yuma2g.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = alphabet[alphabet.length\
    \ mod 2 :: Int]\n    rotated_alphabet = rotated_alphabet[1 .. rotated_alphabet.length]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length .. alphabet.length div\
    \ 2]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    rotated_alphabet = rotated_alphabet[1 .. rotated_alphabet.length]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length .. alphabet.length div 2]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length div 2 .. alphabet.length]\n    rotated_alphabet\
    \ = rotated_alphabet[1 .. rotated_alphabet.length]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ .. alphabet.length div 2]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    rotated_alphabet = rotated_alphabet[1 .. rotated_alphabet.length]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length .. alphabet.length div\
    \ 2]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    rotated_alphabet = rotated_alphabet[1 .. rotated_alphabet.length]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length .. alphabet.length div 2]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length div 2 .. alphabet.length]\n    rotated_alphabet\
    \ = rotated_alphabet[1 .. rotated_alphabet.length]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ .. alphabet.length div 2]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    rotated_alphabet = rotated_alphabet[1 .. rotated_alphabet.length]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length .. alphabet.length div\
    \ 2]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    rotated_alphabet = rotated_alphabet[1 .. rotated_alphabet.length]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length .. alphabet.length div 2]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length div 2 .. alphabet.length]\n    rotated_alphabet\
    \ = rotated_alphabet[1 .. rotated_alphabet.length]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ .. alphabet.length div 2]\n    rotated_alphabet = rotated_alphabet[alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlu143gp.jl:1\nin expression starting at /tmp/tmpwlu143gp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc1u7o_53.jl:13\nin expression\
    \ starting at /tmp/tmpc1u7o_53.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdg7_65no.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdg7_65no.jl:1\n\
    in expression starting at /tmp/tmpdg7_65no.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[1:len(alphabet)-1]\n    \n    alphabet = alphabet * 2\n    \n    alphabet\
    \ = alphabet[1:len(alphabet)-1]\n    \n    alphabet = alphabet * 2\n    \n   \
    \ alphabet = alphabet[1:len(alphabet)-1]\n    \n    alphabet = alphabet * 2\n\
    \    \n    alphabet = alphabet[1:len(alphabet)-1]\n    \n    alphabet = alphabet\
    \ * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n    \n    alphabet =\
    \ alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n    \n    alphabet\
    \ = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n    \n   \
    \ alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwpxuxco.jl:1\nin expression starting at /tmp/tmpbwpxuxco.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_viszdaj.jl:14\nin expression\
    \ starting at /tmp/tmp_viszdaj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp74eobyh3.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp74eobyh3.jl:1\n\
    in expression starting at /tmp/tmp74eobyh3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    alphabet\
    \ = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp87ml83no.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp87ml83no.jl:1\n\
    in expression starting at /tmp/tmp87ml83no.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2drajnzk.jl:14\nin expression\
    \ starting at /tmp/tmp2drajnzk.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq98eh5b9.jl:13\nin expression\
    \ starting at /tmp/tmpq98eh5b9.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down\
    \ by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n \
    \   alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down\
    \ by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n \
    \   alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down\
    \ by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n \
    \   alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down\
    \ by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n \
    \   alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down\
    \ by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n \
    \   alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down\
    \ by two \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprnvpnwg0.jl:13\nin expression\
    \ starting at /tmp/tmprnvpnwg0.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1:] // 'a' // alphabet[1:]\
    \ // 'b' // alphabet[1:] // 'c' // alphabet[1:] // 'd' // alphabet[1:] // 'e'\
    \ // alphabet[1:] // 'f' // alphabet[1:] // 'g' // alphabet[1:] // 'h' // alphabet[1:]\
    \ // 'i' // alphabet[1:] // 'j' // alphabet[1:] // 'k' // alphabet[1:] // 'l'\
    \ // alphabet[1:] // 'm' // alphabet[1:] // 'n' // alphabet[1:] // 'o' // alphabet[1:]\
    \ // 'p' // alphabet[1:] // 'q' // alphabet[1:] // 'r' // alphabet[1:] // 's'\
    \ // alphabet[1:] // 't' // alphabet[1:] // 'u' // alphabet[1:] // 'v' // alphabet[1:]\
    \ // 'w' // alphabet[1:] // 'x' // alphabet[1:] // 'y' // alphabet[1:] // 'z'\n\
    \    alphabet = alphabet[1:] // 'a' // alphabet[1:] // 'b' // alphabet[1:] //\
    \ 'c' // alphabet[1:] // 'd' // alphabet[1:] // 'e' // alphabet[1:] // 'f' //\
    \ alphabet[1:] // 'g' // alphabet[1:] // 'h' // alphabet[1:] // 'i' // alphabet[1:]\
    \ // 'j' // alphabet[1:] // 'k' // alphabet[1:] // 'l' // alphabet[1:] // 'm'\
    \ // alphabet[1:] // 'n' // alphabet[1:] // 'o' // alphabet[1:] // 'p' // alphabet[1:]\
    \ // 'q' // alphabet[1:] // 'r' // alphabet[1:] // 's' // alphabet[1:] // 't'\
    \ // alphabet[1:] // 'u' // alphabet[1:] // 'v' // alphabet[1:] // 'w' // alphabet[1:]\
    \ // 'x' // alphabet[1:] // 'y' // alphabet[1:] // 'z'\n    alphabet = alphabet[1:]\
    \ // 'a' // alphabet[1:] // 'b' // alphabet[1:] // 'c' // alphabet[1:] // 'd'\
    \ // alphabet[1:] // 'e' // alphabet[1:] // 'f' // alphabet[1:] // 'g' // alphabet[1:]\
    \ // 'h' // alphabet[1:] // 'i' // alphabet[1:] // 'j' // alphabet[1:] // 'k\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0gjimvvg.jl:13\nin expression\
    \ starting at /tmp/tmp0gjimvvg.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = ('A'..'Z')\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rot\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6j1q_zve.jl:14\nin expression\
    \ starting at /tmp/tmp6j1q_zve.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    \n    encrypted_string\
    \ = s\n    \n    for i in encrypted_string\n        encrypted_string = encrypted_string.replace(i,\
    \ rotated_alphabet[alphabet.index(i)])\n    \n    return encrypted_string\nend\n\
    </cell>\n<code language=julia-1.0>\nencrypt(\"hi\")\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"asdfghjkl\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"gf\")\n\
    </cell>\n<code language=julia-1.0>\nencrypt(\"et\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as an argument and returns the string\
    \ in reverse order. \n    For example:\n    reverse_encrypt('hi') returns 'ih'\n\
    \    reverse_encrypt('asdfghjkl') returns 'kjldfga'\n    reverse_encrypt('gf')\
    \ returns 'gfedcba'\n    reverse_encrypt('et') returns 'etuxba'\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgdztrujw.jl:13\nin expression\
    \ starting at /tmp/tmpgdztrujw.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpauxtiyf8.jl:13\nin expression\
    \ starting at /tmp/tmpauxtiyf8.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc72xyma9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc72xyma9.jl:1\n\
    in expression starting at /tmp/tmpc72xyma9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphq3clnad.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphq3clnad.jl:1\n\
    in expression starting at /tmp/tmphq3clnad.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7xe_ztjr.jl:13\nin expression\
    \ starting at /tmp/tmp7xe_ztjr.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[alphabet.size - 2:end]\n\
    \    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp31x2woz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp31x2woz.jl:1\n\
    in expression starting at /tmp/tmpp31x2woz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwh4whibm.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwh4whibm.jl:1\n\
    in expression starting at /tmp/tmpwh4whibm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    rotated_alphabet = alphabet[1::2] + alphabet[0::2]\n    \n    encrypted_string\
    \ = \"\"\n    \n    for letter in s\n        encrypted_string += rotated_alphabet[alphabet.index(letter)]\n\
    \    \n    return encrypted_string\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    encrypt(\"hi\")\n</cell>\n<code language=julia-1.5>\nencrypt(\"asdfghjkl\")\n\
    </cell>\n<code language=julia-1.5>\nencrypt(\"gf\")\n</cell>\n<code language=julia-1.5>\n\
    encrypt(\"et\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as an argument and returns the string with all the letters shifted one place\
    \ to the right. \nFor example:\nshift('hi') returns 'ih'\nshift('asdfghjkl') returns\
    \ 'asdfgjhkl'\nshift('gf') returns 'gfedc'\nshift('et') returns 'etv'\nHint: Use\
    \ a for loop to iterate through the string and append each character to a new\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzvxvwbc5.jl:25\nin expression starting at\
    \ /tmp/tmpzvxvwbc5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppfuw_wvz.jl:15\nin expression\
    \ starting at /tmp/tmppfuw_wvz.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n \
    \   alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiyx_oeir.jl:15\nin expression\
    \ starting at /tmp/tmpiyx_oeir.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    rotated_alphabet = alphabet[1::2] + alphabet[::2]\n    \n    encrypted_string\
    \ = \"\"\n    \n    for c in s:\n        encrypted_string += rotated_alphabet[alphabet.index(c)]\n\
    \    \n    return encrypted_string\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd177fhro.jl:20\nin expression starting at\
    \ /tmp/tmpd177fhro.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy932a1ly.jl:14\nin expression\
    \ starting at /tmp/tmpy932a1ly.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa7gs6xxf.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa7gs6xxf.jl:1\n\
    in expression starting at /tmp/tmpa7gs6xxf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet_rotated_down = alphabet[2:]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8q6a_w6k.jl:13\nin expression\
    \ starting at /tmp/tmp8q6a_w6k.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_sphuixv.jl:1\nin expression starting at /tmp/tmp_sphuixv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = rot13(alphabet)\n    alphabet = alphabet[alphabet == alphabet[end]]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf_yuiheo.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf_yuiheo.jl:1\n\
    in expression starting at /tmp/tmpf_yuiheo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet += string.ascii_uppercase\n\
    \    alphabet += string.digits\n    alphabet += string.punctuation\n    alphabet\
    \ += string.whitespace\n    alphabet += string.ascii_lowercase\n    alphabet +=\
    \ string.ascii_uppercase\n    alphabet += string.digits\n    alphabet += string.punctuation\n\
    \    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n \
    \   alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmag9n9xv.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmag9n9xv.jl:1\n\
    in expression starting at /tmp/tmpmag9n9xv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet =\
    \ String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.from\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpic9ye6uf.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpic9ye6uf.jl:1\n\
    in expression starting at /tmp/tmpic9ye6uf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    rotated_alphabet\
    \ = alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n\
    \    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rot\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4miwfukz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4miwfukz.jl:1\n\
    in expression starting at /tmp/tmp4miwfukz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0iw18zp9.jl:13\nin expression\
    \ starting at /tmp/tmp0iw18zp9.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = \n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd83zq3wz.jl:14\nin expression\
    \ starting at /tmp/tmpd83zq3wz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 27\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgxs_na7.jl:13\nin expression starting at\
    \ /tmp/tmprgxs_na7.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1:length(alphabet)-1]\n \
    \   alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpujc9_xj1.jl:64\nin expression starting at\
    \ /tmp/tmpujc9_xj1.jl:64\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf5y935ig.jl:1\nin expression starting at /tmp/tmpf5y935ig.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplszs8mj9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplszs8mj9.jl:1\n\
    in expression starting at /tmp/tmplszs8mj9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppqo3ghu5.jl:1\nin expression starting at /tmp/tmppqo3ghu5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuq1l3f53.jl:15\nin expression\
    \ starting at /tmp/tmpuq1l3f53.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaoc1ayoz.jl:13\nin expression\
    \ starting at /tmp/tmpaoc1ayoz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.size\
    \ - 2:] + alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmul8qj7n.jl:13\n\
    in expression starting at /tmp/tmpmul8qj7n.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    rotated_alphabet\
    \ = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppwu0oupa.jl:1\nin expression starting at /tmp/tmppwu0oupa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A'..'Z')\n    \n    encrypted_string = \"\"\n    \n\
    \    for c in s\n        \n        if c in alphabet\n            \n          \
    \  encrypted_string += alphabet[(alphabet.index(c)+2)%26]\n            \n    \
    \    else\n            \n            encrypted_string += c\n            \n   \
    \     end\n        \n    end\n    \n    return encrypted_string\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcc0_2o7d.jl:33\nin expression starting at\
    \ /tmp/tmpcc0_2o7d.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    rotated_alphabet\
    \ = Array(\"nopqrstuvwxyzabcdefghijklm\")\n    \n    encrypted_string = \"\"\n\
    \    for c in s\n        encrypted_string += alphabet[alphabet.index(c) + rotated_alphabet.index(c)]\n\
    \    return encrypted_string\nend\n</cell>\n<code language=julia-1.0>\nencrypt(\"\
    hi\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"asdfghjkl\")\n</cell>\n<code\
    \ language=julia-1.0>\nencrypt(\"gf\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"\
    et\")\n</cell>\n<text>\nExercise: Write a function that takes a string as an argument\
    \ and returns the number of characters in the string. \n    For example:\n   \
    \ length('hi') returns 5\n    length('asdfghjkl') returns 13\n    length('gf')\
    \ returns 3\n    length('et') returns 5\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwj8jh6et.jl:20\nin expression starting at\
    \ /tmp/tmpwj8jh6et.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 1)::-1\"\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmp4rm7ptpj.jl:13\nin expression starting at /tmp/tmp4rm7ptpj.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2:end]\n\
    \    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0d8uq85i.jl:1\nin expression starting at /tmp/tmp0d8uq85i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphab\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8tnk05wk.jl:1\nin expression starting at /tmp/tmp8tnk05wk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8bh662qm.jl:13\nin expression\
    \ starting at /tmp/tmp8bh662qm.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array{Char}(('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'))\n\
    \    \n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpde4_eopz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpde4_eopz.jl:1\n\
    in expression starting at /tmp/tmpde4_eopz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb09cibj5.jl:15\nin expression\
    \ starting at /tmp/tmpb09cibj5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps95_gelm.jl:13\nin expression\
    \ starting at /tmp/tmps95_gelm.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxfv1va5t.jl:13\nin expression\
    \ starting at /tmp/tmpxfv1va5t.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n \
    \   alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk32ku3bu.jl:14\nin expression\
    \ starting at /tmp/tmpk32ku3bu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s[0]):alphabet.index(s[0])\
    \ + alphabet.index(s[1])] + alphabet[alphabet.index(s[1]):alphabet.index(s[1])\
    \ + alphabet.index(s[2])]\n    alphabet = alphabet[alphabet.index(s[2]):alphabet.index(s[2])\
    \ + alphabet.index(s[3])]\n    alphabet = alphabet[alphabet.index(s[3]):alphabet.index(s[3])\
    \ + alphabet.index(s[4])]\n    alphabet = alphabet[alphabet.index(s[4]):alphabet.index(s[4])\
    \ + alphabet.index(s[5])]\n    alphabet = alphabet[alphabet.index(s[5]):alphabet.index(s[5])\
    \ + alphabet.index(s[6])]\n    alphabet = alphabet[alphabet.index(s[6]):alphabet.index(s[6])\
    \ + alphabet.index(s[7])]\n    alphabet = alphabet[alphabet.index(s[7]):alphabet.index(s[7])\
    \ + alphabet.index(s[8])]\n    alphabet = alphabet[alphabet.index(s[8]):alphabet.index(s[8])\
    \ + alphabet.index(s[9])]\n    alphabet = alphabet[alphabet.index(s[9]):alphabet.index(s[9])\
    \ + alphabet.index(s[10])]\n    alphabet = alphabet[alphabet.index(s[10]):alphabet.index(s[10])\
    \ + alphabet.index(s[11])]\n    alphabet = alphabet[alphabet.index(s[11]):alphabet.index(s[11])\
    \ + alphabet.index(s[12])]\n    alphabet = alphabet[alphabet.index(s[12]):alphabet.index(s[12])\
    \ + alphabet.index(s[13])]\n    alphabet = alphabet[alphabet.index(s[13]):alphabet.index(s[13])\
    \ + alphabet.index(s[14])]\n    alphabet = alphabet[alphabet.index(s[14]):alphabet.index(s[14])\
    \ + alphabet.index(s[15])]\n    alphabet = alphabet[alphabet.index(s[15]):alphabet.index(s[15])\
    \ + alphabet.index(s[16])]\n    alphabet = alphabet[alphabet.index(s[16]):alphabet.index(s[16])\
    \ + alphabet.index(s[17])]\n    alphabet = alphabet[alphabet.index(s[17]):alphabet.index(s[17])\
    \ + alphabet.index(s[18])]\n    alphabet = alphabet[alphabet.index(s[18]):alphabet.index(s[18])\
    \ + alphabet.index(s[19])]\n    alphabet\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_m_lphl.jl:13\nin expression\
    \ starting at /tmp/tmpr_m_lphl.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5wr4nb81.jl:1\nin expression starting at /tmp/tmp5wr4nb81.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphab\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp06ztn16.jl:1\nin expression starting at /tmp/tmpp06ztn16.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length\
    \ div 2:alphabet.length div 2 + alphabet.length div 2]\n    return string.join([alphabet[alphabet.index(letter)\
    \ + 2] for letter in s], \"\")\nend\n</cell>\n<code language=julia-1.0>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjrhmuj_7.jl:16\nin expression starting at\
    \ /tmp/tmpjrhmuj_7.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array{Char}(('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'))\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44hjdma9.jl:1\nin expression starting at /tmp/tmp44hjdma9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n\
    \    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 2::-)1\"\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmp4zdubv2t.jl:13\nin expression starting at /tmp/tmp4zdubv2t.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n   \
    \ alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkm5skn18.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkm5skn18.jl:1\n\
    in expression starting at /tmp/tmpkm5skn18.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph2w7bnt_.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph2w7bnt_.jl:1\n\
    in expression starting at /tmp/tmph2w7bnt_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    rotated_alphabet = alphabet[2:] + alphabet[0:2]\n    \n    encrypted_string\
    \ = \"\"\n    \n    for character in s\n        encrypted_string += rotated_alphabet[alphabet.index(character)]\n\
    \    \n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwiqv5sp7.jl:15\nin expression\
    \ starting at /tmp/tmpwiqv5sp7.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n   \
    \ \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n\
    \    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # rotate alphabet by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # rotate alphabet by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate\
    \ alphabet by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet\
    \ by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by\
    \ 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n   \
    \ \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n\
    \    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # rotate alphabet by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # rotate alphabet by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate\
    \ alphabet by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet\
    \ by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by\
    \ 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n   \
    \ \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n\
    \    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n   \
    \ alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4pcnin8m.jl:15\nin expression\
    \ starting at /tmp/tmp4pcnin8m.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = alphabet\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzmch9dhv.jl:15\nin expression\
    \ starting at /tmp/tmpzmch9dhv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaeyadv5g.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaeyadv5g.jl:1\n\
    in expression starting at /tmp/tmpaeyadv5g.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa_rugcie.jl:13\nin expression\
    \ starting at /tmp/tmpa_rugcie.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx4m6yvhs.jl:14\nin expression\
    \ starting at /tmp/tmpx4m6yvhs.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvo93oeml.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvo93oeml.jl:1\n\
    in expression starting at /tmp/tmpvo93oeml.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = String.ascii_lowercase\n    \n    alphabet = alphabet[alphabet.length\
    \ mod 2 :: -2]\n    \n    return alphabet[alphabet.index(s)+1] + alphabet[alphabet.index(s)-1]\n\
    end\n</cell>\n<code language=julia-1.5>\nencrypt(\"hi\")\n</cell>\n<code language=julia-1.5>\n\
    encrypt(\"asdfghjkl\")\n</cell>\n<code language=julia-1.5>\nencrypt(\"gf\")\n\
    </cell>\n<code language=julia-1.5>\nencrypt(\"et\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as an argument and returns the string\
    \ reversed.\nFor example:\nreverse(\"hello\") returns \"olleh\"\nreverse(\"asdfghjkl\"\
    ) returns \"kjdfhgas\"\nreverse(\"gf\") returns \"gfedcba\"\nreverse(\"et\") returns\
    \ \"et\"\nHint: Reverse the string using slicing.\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"2::-2\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhesuoue.jl:15\n\
    in expression starting at /tmp/tmpxhesuoue.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi847ktsk.jl:1\nin expression starting at /tmp/tmpi847ktsk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = rot13(alphabet)\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7pzrfror.jl:13\nin expression\
    \ starting at /tmp/tmp7pzrfror.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrs9btp2.jl:13\nin expression\
    \ starting at /tmp/tmpbrs9btp2.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet .= alphabet[alphabet.size - 2:]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 1:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 2:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 3:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 4:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 5:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 6:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 7:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 8:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 9:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 10:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 11:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 12:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 13:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 14:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 15:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 16:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 17:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 18:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 19:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 20:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 21:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 22:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 23:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 24:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 25:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 26:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 27:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 28:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 29:0:-1]\n    rotated_\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 1)::-1\"\nStacktrace:\n [1] top-level scope\n  \
    \ @ /tmp/tmp2q83k3vb.jl:13\nin expression starting at /tmp/tmp2q83k3vb.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s[0]):alphabet.index(s[0])\
    \ + 2]\n    return ''.join(alphabet[alphabet.index(s[0]):alphabet.index(s[0])\
    \ + 2] + s[1:])\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpci0eprae.jl:12\nin expression\
    \ starting at /tmp/tmpci0eprae.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[3:] + alphabet[:3]\n    \n    alphabet = alphabet[4:]\
    \ + alphabet[:4]\n    \n    alphabet = alphabet[5:] + alphabet[:5]\n    \n   \
    \ alphabet = alphabet[6:] + alphabet[:6]\n    \n    alphabet = alphabet[7:] +\
    \ alphabet[:7]\n    \n    alphabet = alphabet[8:] + alphabet[:8]\n    \n    alphabet\
    \ = alphabet[9:] + alphabet[:9]\n    \n    alphabet = alphabet[10:] + alphabet[:10]\n\
    \    \n    alphabet = alphabet[11:] + alphabet[:11]\n    \n    alphabet = alphabet[12:]\
    \ + alphabet[:12]\n    \n    alphabet = alphabet[13:] + alphabet[:13]\n    \n\
    \    alphabet = alphabet[14:] + alphabet[:14]\n    \n    alphabet = alphabet[15:]\
    \ + alphabet[:15]\n    \n    alphabet = alphabet[16:] + alphabet[:16]\n    \n\
    \    alphabet = alphabet[17:] + alphabet[:17]\n    \n    alphabet = alphabet[18:]\
    \ + alphabet[:18]\n    \n    alphabet = alphabet[19:] + alphabet[:19]\n    \n\
    \    alphabet = alphabet[20:] + alphabet[:20]\n    \n    alphabet = alphabet[21:]\
    \ + alphabet[:21]\n    \n    alphabet = alphabet[22:] + alphabet[:22]\n    \n\
    \    alphabet = alphabet[23:] + alphabet[:23]\n    \n    alphabet = alphabet[24:]\
    \ + alphabet[:24]\n    \n    alphabet = alphabet[25:] + alphabet[:25]\n    \n\
    \    alphabet = alphabet[26:] + alphabet[:26]\n    \n    alphabet = alphabet[27:]\
    \ + alphabet[:27]\n    \n    alphabet = alphabet[28:] + alphabet[:28]\n    \n\
    \    alphabet = alphabet[29:] + alphabet[:29]\n    \n    alphabet = alphabet[30:]\
    \ + alphabet[:30]\n    \n    alphabet = alphabet[31:] + alphabet[:31]\n    \n\
    \    alphabet = alphabet[32:] + alphabet[:32]\n    \n    alphabet = alphabet[33:]\
    \ + alphabet[:33]\n    \n    alphabet = alphabet[34:] + alphabet[:34]\n    \n\
    \    alphabet = alphabet[35:] + \nusing Test\n\n@testset begin\n\ncandidate =\
    \ encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpean3vh_y.jl:15\nin expression\
    \ starting at /tmp/tmpean3vh_y.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array{Char}(Char.(string.ascii_lowercase))\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n\
    \    \n    alphabet = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n   \
    \ alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n    \n    alphabet\
    \ = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[end:-1:1]\n    \n    alphabet = alphabet[end:-1:1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[end:-1:1]\n    \n    alphabet = alphabet[end:-1:1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n\
    \    \n    alphabet = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n   \
    \ alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n    \n    alphabet\
    \ = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[end:-1:1]\n    \n    alphabet = alphabet[end:-1:1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[end:-1:1]\n    \n    alphabet = alphabet[end:-1:1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n\
    \    \n    alphabet = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n   \
    \ alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n    \n    alphabet\
    \ = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[end:-1:1]\n    \n    alphabet = alphabet[end:-1:1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[end:-1:1]\n    \n    alphabet = alphabet[end:-1:1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n\
    \    \n    alphabet = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n   \
    \ alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n    \n    alphabet\
    \ = alphabet[end:-1:1]\n    alphabet = alphabet[2:\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1yqrrrfb.jl:85\nin expression starting at\
    \ /tmp/tmp1yqrrrfb.jl:85\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    encrypted_string\
    \ = \"\"\n    \n    for c in s\n        \n        encrypted_string += alphabet[alphabet.index(c)\
    \ + 2]\n        \n    return encrypted_string\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirfwwv6z.jl:24\nin expression starting at\
    \ /tmp/tmpirfwwv6z.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    \n    encrypted_string\
    \ = ''\n    for character in s\n        encrypted_string += rotated_alphabet[alphabet.index(character)]\n\
    \    \n    return encrypted_string\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpefw2oe3p.jl:13\nin expression\
    \ starting at /tmp/tmpefw2oe3p.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx4e_25fe.jl:13\nin expression\
    \ starting at /tmp/tmpx4e_25fe.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift the letters down by two and up by two\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # shift the letters down by\
    \ two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2] # shift\
    \ the letters down by two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift the letters down by two and up by two\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift the letters down by two and up by two\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift the letters down by two and up by two\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # shift the letters down by\
    \ two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2] # shift\
    \ the letters down by two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift the letters down by two and up by two\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift the letters down by two and up by two\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift the letters down by two and up by two\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # shift the letters down by\
    \ two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2] # shift\
    \ the letters down by two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift the letters down by two and up by two\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift the letters down by two and up by two\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift the letters down by two and up by two\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # shift the letters down by\
    \ two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2] # shift\
    \ the letters down by two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift the letters down by two and up by two\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift the letters down by two and up by two\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # \nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2jv05qcg.jl:15\nin expression\
    \ starting at /tmp/tmp2jv05qcg.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n    alphabet\
    \ = alphabet[alphabet.index(s)+2:]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[alphabet.index(s)+2:]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplx4hh3oa.jl:13\nin expression\
    \ starting at /tmp/tmplx4hh3oa.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxsv_1ozw.jl:13\nin expression\
    \ starting at /tmp/tmpxsv_1ozw.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    rotated_alphabet.reverse()\n\
    \    \n    encrypted_string = \"\"\n    for character in s\n        encrypted_string\
    \ += rotated_alphabet[alphabet.index(character)]\n    end\n    return encrypted_string\n\
    end\n</cell>\n<code language=julia-1.5>\nencrypt(\"hi\")\n</cell>\n<code language=julia-1.5>\n\
    encrypt(\"asdfghjkl\")\n</cell>\n<code language=julia-1.5>\nencrypt(\"gf\")\n\
    </cell>\n<code language=julia-1.5>\nencrypt(\"et\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as an argument and returns the string\
    \ reversed. \nFor example:\nreverse(\"hi\") returns 'ih'\nreverse(\"asdfghjkl\"\
    ) returns 'kjdfhg'\nreverse(\"gf\") returns 'gfedc'\nreverse(\"et\") returns 'etgf'\n\
    Hint: use the reverse function.\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppp_mfjt3.jl:13\nin expression\
    \ starting at /tmp/tmppp_mfjt3.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_aywvdi.jl:1\nin expression starting at /tmp/tmpf_aywvdi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdfkj1xw7.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdfkj1xw7.jl:1\n\
    in expression starting at /tmp/tmpdfkj1xw7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpn4gg52o9.jl:12\nin expression\
    \ starting at /tmp/tmpn4gg52o9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len():]\n\
    \    alphabet = alphabet[1:alphabet.len()]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"alphabet.len():\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9m9cvnh4.jl:13\n\
    in expression starting at /tmp/tmp9m9cvnh4.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu0uk85xn.jl:13\nin expression\
    \ starting at /tmp/tmpu0uk85xn.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[(alphabet.index(alphabet[alphabet.length-1])+2):(alphabet.index(alphabet[alphabet.length-1])+4)]\n\
    \    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n    rotated_alphabet\
    \ = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdevr1xb_.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdevr1xb_.jl:1\n\
    in expression starting at /tmp/tmpdevr1xb_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2:]\n \
    \   alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2qnnh7vm.jl:13\n\
    in expression starting at /tmp/tmp2qnnh7vm.jl:13\n"
  exit_code: 1
  status: SyntaxError
